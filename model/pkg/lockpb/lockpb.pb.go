// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lockpb.proto

/*
	Package lockrpcpb is a generated protocol buffer package.

	It is generated from these files:
		lockpb.proto

	It has these top-level messages:
		LockRequest
		UnLockRequest
		ForceUnLockRequest
		LockHeartbeatRequest
		UpdateConditionRequest
		DLockResponse
*/
package lockrpcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LockRequest struct {
	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LockName   string `protobuf:"bytes,2,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
	Conditions []byte `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Timeout    int64  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LockId     string `protobuf:"bytes,5,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *LockRequest) Reset()                    { *m = LockRequest{} }
func (m *LockRequest) String() string            { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()               {}
func (*LockRequest) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{0} }

func (m *LockRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LockRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *LockRequest) GetConditions() []byte {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *LockRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *LockRequest) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

type UnLockRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LockName  string `protobuf:"bytes,2,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
	LockId    string `protobuf:"bytes,3,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *UnLockRequest) Reset()                    { *m = UnLockRequest{} }
func (m *UnLockRequest) String() string            { return proto.CompactTextString(m) }
func (*UnLockRequest) ProtoMessage()               {}
func (*UnLockRequest) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{1} }

func (m *UnLockRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UnLockRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *UnLockRequest) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

type ForceUnLockRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LockName  string `protobuf:"bytes,2,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
}

func (m *ForceUnLockRequest) Reset()                    { *m = ForceUnLockRequest{} }
func (m *ForceUnLockRequest) String() string            { return proto.CompactTextString(m) }
func (*ForceUnLockRequest) ProtoMessage()               {}
func (*ForceUnLockRequest) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{2} }

func (m *ForceUnLockRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ForceUnLockRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

type LockHeartbeatRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LockName  string `protobuf:"bytes,2,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
	LockId    string `protobuf:"bytes,3,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *LockHeartbeatRequest) Reset()                    { *m = LockHeartbeatRequest{} }
func (m *LockHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*LockHeartbeatRequest) ProtoMessage()               {}
func (*LockHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{3} }

func (m *LockHeartbeatRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LockHeartbeatRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *LockHeartbeatRequest) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

type UpdateConditionRequest struct {
	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	LockName   string `protobuf:"bytes,2,opt,name=lock_name,json=lockName,proto3" json:"lock_name,omitempty"`
	Conditions []byte `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *UpdateConditionRequest) Reset()                    { *m = UpdateConditionRequest{} }
func (m *UpdateConditionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConditionRequest) ProtoMessage()               {}
func (*UpdateConditionRequest) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{4} }

func (m *UpdateConditionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateConditionRequest) GetLockName() string {
	if m != nil {
		return m.LockName
	}
	return ""
}

func (m *UpdateConditionRequest) GetConditions() []byte {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type DLockResponse struct {
	Code       int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Conditions []byte `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
	UpdateTime int64  `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *DLockResponse) Reset()                    { *m = DLockResponse{} }
func (m *DLockResponse) String() string            { return proto.CompactTextString(m) }
func (*DLockResponse) ProtoMessage()               {}
func (*DLockResponse) Descriptor() ([]byte, []int) { return fileDescriptorLockpb, []int{5} }

func (m *DLockResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DLockResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DLockResponse) GetConditions() []byte {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *DLockResponse) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LockRequest)(nil), "lockrpcpb.LockRequest")
	proto.RegisterType((*UnLockRequest)(nil), "lockrpcpb.UnLockRequest")
	proto.RegisterType((*ForceUnLockRequest)(nil), "lockrpcpb.ForceUnLockRequest")
	proto.RegisterType((*LockHeartbeatRequest)(nil), "lockrpcpb.LockHeartbeatRequest")
	proto.RegisterType((*UpdateConditionRequest)(nil), "lockrpcpb.UpdateConditionRequest")
	proto.RegisterType((*DLockResponse)(nil), "lockrpcpb.DLockResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DLockService service

type DLockServiceClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*DLockResponse, error)
	UnLock(ctx context.Context, in *UnLockRequest, opts ...grpc.CallOption) (*DLockResponse, error)
	ForceUnLock(ctx context.Context, in *ForceUnLockRequest, opts ...grpc.CallOption) (*DLockResponse, error)
	DoHeartbeat(ctx context.Context, in *LockHeartbeatRequest, opts ...grpc.CallOption) (*DLockResponse, error)
	UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*DLockResponse, error)
}

type dLockServiceClient struct {
	cc *grpc.ClientConn
}

func NewDLockServiceClient(cc *grpc.ClientConn) DLockServiceClient {
	return &dLockServiceClient{cc}
}

func (c *dLockServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*DLockResponse, error) {
	out := new(DLockResponse)
	err := grpc.Invoke(ctx, "/lockrpcpb.DLockService/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLockServiceClient) UnLock(ctx context.Context, in *UnLockRequest, opts ...grpc.CallOption) (*DLockResponse, error) {
	out := new(DLockResponse)
	err := grpc.Invoke(ctx, "/lockrpcpb.DLockService/UnLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLockServiceClient) ForceUnLock(ctx context.Context, in *ForceUnLockRequest, opts ...grpc.CallOption) (*DLockResponse, error) {
	out := new(DLockResponse)
	err := grpc.Invoke(ctx, "/lockrpcpb.DLockService/ForceUnLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLockServiceClient) DoHeartbeat(ctx context.Context, in *LockHeartbeatRequest, opts ...grpc.CallOption) (*DLockResponse, error) {
	out := new(DLockResponse)
	err := grpc.Invoke(ctx, "/lockrpcpb.DLockService/DoHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLockServiceClient) UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*DLockResponse, error) {
	out := new(DLockResponse)
	err := grpc.Invoke(ctx, "/lockrpcpb.DLockService/UpdateCondition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DLockService service

type DLockServiceServer interface {
	Lock(context.Context, *LockRequest) (*DLockResponse, error)
	UnLock(context.Context, *UnLockRequest) (*DLockResponse, error)
	ForceUnLock(context.Context, *ForceUnLockRequest) (*DLockResponse, error)
	DoHeartbeat(context.Context, *LockHeartbeatRequest) (*DLockResponse, error)
	UpdateCondition(context.Context, *UpdateConditionRequest) (*DLockResponse, error)
}

func RegisterDLockServiceServer(s *grpc.Server, srv DLockServiceServer) {
	s.RegisterService(&_DLockService_serviceDesc, srv)
}

func _DLockService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLockServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockrpcpb.DLockService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLockServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLockService_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLockServiceServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockrpcpb.DLockService/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLockServiceServer).UnLock(ctx, req.(*UnLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLockService_ForceUnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceUnLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLockServiceServer).ForceUnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockrpcpb.DLockService/ForceUnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLockServiceServer).ForceUnLock(ctx, req.(*ForceUnLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLockService_DoHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLockServiceServer).DoHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockrpcpb.DLockService/DoHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLockServiceServer).DoHeartbeat(ctx, req.(*LockHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLockService_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLockServiceServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockrpcpb.DLockService/UpdateCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLockServiceServer).UpdateCondition(ctx, req.(*UpdateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DLockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lockrpcpb.DLockService",
	HandlerType: (*DLockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _DLockService_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _DLockService_UnLock_Handler,
		},
		{
			MethodName: "ForceUnLock",
			Handler:    _DLockService_ForceUnLock_Handler,
		},
		{
			MethodName: "DoHeartbeat",
			Handler:    _DLockService_DoHeartbeat_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _DLockService_UpdateCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lockpb.proto",
}

func (m *LockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LockName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockName)))
		i += copy(dAtA[i:], m.LockName)
	}
	if len(m.Conditions) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Conditions)))
		i += copy(dAtA[i:], m.Conditions)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(m.Timeout))
	}
	if len(m.LockId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockId)))
		i += copy(dAtA[i:], m.LockId)
	}
	return i, nil
}

func (m *UnLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LockName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockName)))
		i += copy(dAtA[i:], m.LockName)
	}
	if len(m.LockId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockId)))
		i += copy(dAtA[i:], m.LockId)
	}
	return i, nil
}

func (m *ForceUnLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceUnLockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LockName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockName)))
		i += copy(dAtA[i:], m.LockName)
	}
	return i, nil
}

func (m *LockHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LockName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockName)))
		i += copy(dAtA[i:], m.LockName)
	}
	if len(m.LockId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockId)))
		i += copy(dAtA[i:], m.LockId)
	}
	return i, nil
}

func (m *UpdateConditionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateConditionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.LockName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.LockName)))
		i += copy(dAtA[i:], m.LockName)
	}
	if len(m.Conditions) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Conditions)))
		i += copy(dAtA[i:], m.Conditions)
	}
	return i, nil
}

func (m *DLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DLockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Conditions) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(len(m.Conditions)))
		i += copy(dAtA[i:], m.Conditions)
	}
	if m.UpdateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLockpb(dAtA, i, uint64(m.UpdateTime))
	}
	return i, nil
}

func encodeVarintLockpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LockRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockName)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovLockpb(uint64(m.Timeout))
	}
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	return n
}

func (m *UnLockRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockName)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	return n
}

func (m *ForceUnLockRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockName)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	return n
}

func (m *LockHeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockName)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockId)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	return n
}

func (m *UpdateConditionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.LockName)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	return n
}

func (m *DLockResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovLockpb(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovLockpb(uint64(l))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovLockpb(uint64(m.UpdateTime))
	}
	return n
}

func sovLockpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLockpb(x uint64) (n int) {
	return sovLockpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions[:0], dAtA[iNdEx:postIndex]...)
			if m.Conditions == nil {
				m.Conditions = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceUnLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceUnLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceUnLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateConditionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateConditionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateConditionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions[:0], dAtA[iNdEx:postIndex]...)
			if m.Conditions == nil {
				m.Conditions = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLockpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions[:0], dAtA[iNdEx:postIndex]...)
			if m.Conditions == nil {
				m.Conditions = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLockpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLockpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLockpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLockpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLockpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLockpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lockpb.proto", fileDescriptorLockpb) }

var fileDescriptorLockpb = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xeb, 0x26, 0x4d, 0xc9, 0x24, 0x15, 0xd2, 0x28, 0x2a, 0x56, 0x81, 0x6d, 0xd8, 0x53,
	0xc4, 0x61, 0x91, 0xe0, 0xc6, 0x81, 0x03, 0x54, 0xa8, 0x20, 0x04, 0x68, 0xa1, 0xe7, 0x6a, 0xe3,
	0x1d, 0x85, 0x25, 0xec, 0x8e, 0xb1, 0x1d, 0x0e, 0x3c, 0x09, 0x12, 0x2f, 0xc4, 0x91, 0x47, 0x40,
	0xe1, 0x0d, 0x78, 0x02, 0x64, 0x6f, 0x5b, 0x9c, 0x80, 0xc2, 0xa5, 0xbd, 0x79, 0xfe, 0x1d, 0xff,
	0x33, 0xe3, 0xf9, 0xb4, 0x30, 0xfc, 0xc0, 0x6a, 0xae, 0xa7, 0x99, 0x36, 0xec, 0x18, 0xfb, 0x3e,
	0x32, 0x5a, 0xe9, 0xe9, 0xc1, 0x68, 0xc6, 0x33, 0x0e, 0xea, 0x3d, 0x7f, 0x6a, 0x13, 0xd2, 0xaf,
	0x02, 0x06, 0x2f, 0x58, 0xcd, 0x73, 0xfa, 0xb8, 0x20, 0xeb, 0xf0, 0x16, 0xf4, 0x9b, 0xa2, 0x26,
	0xab, 0x0b, 0x45, 0x52, 0x8c, 0xc5, 0xa4, 0x9f, 0xff, 0x11, 0xf0, 0x26, 0x04, 0xc3, 0x53, 0xaf,
	0xc8, 0xed, 0xf0, 0xf5, 0x9a, 0x17, 0x5e, 0x16, 0x35, 0x61, 0x02, 0xa0, 0xb8, 0x29, 0x2b, 0x57,
	0x71, 0x63, 0x65, 0x67, 0x2c, 0x26, 0xc3, 0x3c, 0x52, 0x50, 0xc2, 0xae, 0xab, 0x6a, 0xe2, 0x85,
	0x93, 0xdd, 0xb1, 0x98, 0x74, 0xf2, 0xf3, 0x10, 0x6f, 0xc0, 0x6e, 0xb0, 0xad, 0x4a, 0xb9, 0x13,
	0x4c, 0x7b, 0x3e, 0x7c, 0x56, 0xa6, 0x0a, 0xf6, 0x4e, 0x9a, 0x4b, 0x6a, 0x2f, 0x2a, 0xd2, 0x59,
	0x29, 0xf2, 0x0a, 0xf0, 0x29, 0x1b, 0x45, 0x97, 0x55, 0x29, 0x7d, 0x0f, 0x23, 0xef, 0x74, 0x4c,
	0x85, 0x71, 0x53, 0x2a, 0xdc, 0x55, 0x36, 0x6f, 0x61, 0xff, 0x44, 0x97, 0x85, 0xa3, 0x27, 0xe7,
	0x0f, 0x7d, 0xf5, 0x9b, 0x4c, 0x3f, 0xc3, 0xde, 0x51, 0xfb, 0x56, 0x56, 0x73, 0x63, 0x09, 0x11,
	0xba, 0x8a, 0xcb, 0xb6, 0x4c, 0x27, 0x0f, 0x67, 0x1c, 0xc1, 0x0e, 0x19, 0xc3, 0xe6, 0xcc, 0xbd,
	0x0d, 0xfe, 0x0b, 0xc9, 0x21, 0x0c, 0x16, 0x61, 0x9e, 0x53, 0x0f, 0xc7, 0x19, 0x28, 0xd0, 0x4a,
	0x6f, 0xab, 0x9a, 0xee, 0xff, 0xda, 0x86, 0x61, 0x28, 0xfe, 0x86, 0xcc, 0xa7, 0x4a, 0x11, 0x3e,
	0x84, 0xae, 0x0f, 0x71, 0x3f, 0xbb, 0x60, 0x3d, 0x8b, 0x16, 0x79, 0x20, 0x23, 0x7d, 0xa5, 0xeb,
	0x74, 0x0b, 0x1f, 0x41, 0xaf, 0xdd, 0x3a, 0xc6, 0x59, 0x2b, 0x20, 0x6c, 0xbc, 0x7f, 0x0c, 0x83,
	0x08, 0x1d, 0xbc, 0x1d, 0xa5, 0xfe, 0x8d, 0xd4, 0x46, 0xa7, 0xe7, 0x30, 0x38, 0xe2, 0x0b, 0x62,
	0xf0, 0x70, 0x6d, 0x98, 0x75, 0x96, 0x36, 0x7a, 0xbd, 0x86, 0xeb, 0x6b, 0x4c, 0xe0, 0x9d, 0x78,
	0xbc, 0x7f, 0xf2, 0xb2, 0xc9, 0xf1, 0xf1, 0xdd, 0x6f, 0xcb, 0x44, 0x7c, 0x5f, 0x26, 0xe2, 0xc7,
	0x32, 0x11, 0x5f, 0x7e, 0x26, 0x5b, 0x20, 0x15, 0xd7, 0x99, 0x7d, 0x57, 0x98, 0xb9, 0x75, 0x6c,
	0x28, 0xdc, 0xcd, 0x66, 0x46, 0xab, 0x69, 0x2f, 0xfc, 0x58, 0x1e, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0x83, 0x2b, 0x97, 0x89, 0x04, 0x00, 0x00,
}
