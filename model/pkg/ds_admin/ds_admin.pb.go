// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ds_admin.proto

/*
	Package ds_adminpb is a generated protocol buffer package.

	It is generated from these files:
		ds_admin.proto

	It has these top-level messages:
		AdminAuth
		AdminRequest
		AdminResponse
		ConfigKey
		ConfigItem
		SetConfigRequest
		SetConfigResponse
		GetConfigRequest
		GetConfigResponse
		GetInfoRequest
		GetInfoResponse
		ForceSplitRequest
		ForceSplitResponse
		CompactionRequest
		CompactionResponse
		ClearQueueRequest
		ClearQueueResponse
		GetPendingsRequest
		GetPendingsResponse
		FlushDBRequest
		FlushDBResponse
*/
package ds_adminpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdminType int32

const (
	AdminType_UNKNOWN      AdminType = 0
	AdminType_SET_CONFIG   AdminType = 1
	AdminType_GET_CONFIG   AdminType = 2
	AdminType_GET_INFO     AdminType = 3
	AdminType_FORCE_SPLIT  AdminType = 4
	AdminType_COMPACTION   AdminType = 5
	AdminType_CLEAR_QUEUE  AdminType = 6
	AdminType_GET_PENDINGS AdminType = 7
	AdminType_FLUSH_DB     AdminType = 8
)

var AdminType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SET_CONFIG",
	2: "GET_CONFIG",
	3: "GET_INFO",
	4: "FORCE_SPLIT",
	5: "COMPACTION",
	6: "CLEAR_QUEUE",
	7: "GET_PENDINGS",
	8: "FLUSH_DB",
}
var AdminType_value = map[string]int32{
	"UNKNOWN":      0,
	"SET_CONFIG":   1,
	"GET_CONFIG":   2,
	"GET_INFO":     3,
	"FORCE_SPLIT":  4,
	"COMPACTION":   5,
	"CLEAR_QUEUE":  6,
	"GET_PENDINGS": 7,
	"FLUSH_DB":     8,
}

func (x AdminType) String() string {
	return proto.EnumName(AdminType_name, int32(x))
}
func (AdminType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{0} }

type AdminAuth_AuthMethod int32

const (
	AdminAuth_MD5_DIGEST AdminAuth_AuthMethod = 0
)

var AdminAuth_AuthMethod_name = map[int32]string{
	0: "MD5_DIGEST",
}
var AdminAuth_AuthMethod_value = map[string]int32{
	"MD5_DIGEST": 0,
}

func (x AdminAuth_AuthMethod) String() string {
	return proto.EnumName(AdminAuth_AuthMethod_name, int32(x))
}
func (AdminAuth_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDsAdmin, []int{0, 0}
}

type ClearQueueRequest_QueueType int32

const (
	ClearQueueRequest_ALL         ClearQueueRequest_QueueType = 0
	ClearQueueRequest_FAST_WORKER ClearQueueRequest_QueueType = 1
	ClearQueueRequest_SLOW_WORKER ClearQueueRequest_QueueType = 2
)

var ClearQueueRequest_QueueType_name = map[int32]string{
	0: "ALL",
	1: "FAST_WORKER",
	2: "SLOW_WORKER",
}
var ClearQueueRequest_QueueType_value = map[string]int32{
	"ALL":         0,
	"FAST_WORKER": 1,
	"SLOW_WORKER": 2,
}

func (x ClearQueueRequest_QueueType) String() string {
	return proto.EnumName(ClearQueueRequest_QueueType_name, int32(x))
}
func (ClearQueueRequest_QueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDsAdmin, []int{15, 0}
}

type GetPendingsRequest_PendingType int32

const (
	GetPendingsRequest_ALL          GetPendingsRequest_PendingType = 0
	GetPendingsRequest_INSERT       GetPendingsRequest_PendingType = 1
	GetPendingsRequest_SELECT       GetPendingsRequest_PendingType = 2
	GetPendingsRequest_PONIT_SELECT GetPendingsRequest_PendingType = 3
	GetPendingsRequest_RANGE_SELECT GetPendingsRequest_PendingType = 4
)

var GetPendingsRequest_PendingType_name = map[int32]string{
	0: "ALL",
	1: "INSERT",
	2: "SELECT",
	3: "PONIT_SELECT",
	4: "RANGE_SELECT",
}
var GetPendingsRequest_PendingType_value = map[string]int32{
	"ALL":          0,
	"INSERT":       1,
	"SELECT":       2,
	"PONIT_SELECT": 3,
	"RANGE_SELECT": 4,
}

func (x GetPendingsRequest_PendingType) String() string {
	return proto.EnumName(GetPendingsRequest_PendingType_name, int32(x))
}
func (GetPendingsRequest_PendingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDsAdmin, []int{17, 0}
}

type AdminAuth struct {
	Method AdminAuth_AuthMethod `protobuf:"varint,1,opt,name=method,proto3,enum=ds_adminpb.AdminAuth_AuthMethod" json:"method,omitempty"`
	Epoch  uint64               `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Sign   string               `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *AdminAuth) Reset()                    { *m = AdminAuth{} }
func (m *AdminAuth) String() string            { return proto.CompactTextString(m) }
func (*AdminAuth) ProtoMessage()               {}
func (*AdminAuth) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{0} }

func (m *AdminAuth) GetMethod() AdminAuth_AuthMethod {
	if m != nil {
		return m.Method
	}
	return AdminAuth_MD5_DIGEST
}

func (m *AdminAuth) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AdminAuth) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type AdminRequest struct {
	Typ            AdminType           `protobuf:"varint,1,opt,name=typ,proto3,enum=ds_adminpb.AdminType" json:"typ,omitempty"`
	Auth           *AdminAuth          `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	SetCfgReq      *SetConfigRequest   `protobuf:"bytes,10,opt,name=set_cfg_req,json=setCfgReq" json:"set_cfg_req,omitempty"`
	GetCfgReq      *GetConfigRequest   `protobuf:"bytes,11,opt,name=get_cfg_req,json=getCfgReq" json:"get_cfg_req,omitempty"`
	GetInfoReq     *GetInfoRequest     `protobuf:"bytes,12,opt,name=get_info_req,json=getInfoReq" json:"get_info_req,omitempty"`
	ForceSplitReq  *ForceSplitRequest  `protobuf:"bytes,13,opt,name=force_split_req,json=forceSplitReq" json:"force_split_req,omitempty"`
	CompactionReq  *CompactionRequest  `protobuf:"bytes,14,opt,name=compaction_req,json=compactionReq" json:"compaction_req,omitempty"`
	ClearQueueReq  *ClearQueueRequest  `protobuf:"bytes,15,opt,name=clear_queue_req,json=clearQueueReq" json:"clear_queue_req,omitempty"`
	GetPendingsReq *GetPendingsRequest `protobuf:"bytes,16,opt,name=get_pendings_req,json=getPendingsReq" json:"get_pendings_req,omitempty"`
	FlushDbReq     *FlushDBRequest     `protobuf:"bytes,17,opt,name=flush_db_req,json=flushDbReq" json:"flush_db_req,omitempty"`
}

func (m *AdminRequest) Reset()                    { *m = AdminRequest{} }
func (m *AdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()               {}
func (*AdminRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{1} }

func (m *AdminRequest) GetTyp() AdminType {
	if m != nil {
		return m.Typ
	}
	return AdminType_UNKNOWN
}

func (m *AdminRequest) GetAuth() *AdminAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AdminRequest) GetSetCfgReq() *SetConfigRequest {
	if m != nil {
		return m.SetCfgReq
	}
	return nil
}

func (m *AdminRequest) GetGetCfgReq() *GetConfigRequest {
	if m != nil {
		return m.GetCfgReq
	}
	return nil
}

func (m *AdminRequest) GetGetInfoReq() *GetInfoRequest {
	if m != nil {
		return m.GetInfoReq
	}
	return nil
}

func (m *AdminRequest) GetForceSplitReq() *ForceSplitRequest {
	if m != nil {
		return m.ForceSplitReq
	}
	return nil
}

func (m *AdminRequest) GetCompactionReq() *CompactionRequest {
	if m != nil {
		return m.CompactionReq
	}
	return nil
}

func (m *AdminRequest) GetClearQueueReq() *ClearQueueRequest {
	if m != nil {
		return m.ClearQueueReq
	}
	return nil
}

func (m *AdminRequest) GetGetPendingsReq() *GetPendingsRequest {
	if m != nil {
		return m.GetPendingsReq
	}
	return nil
}

func (m *AdminRequest) GetFlushDbReq() *FlushDBRequest {
	if m != nil {
		return m.FlushDbReq
	}
	return nil
}

type AdminResponse struct {
	Code              uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ErrorMsg          string               `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	SetCfgResp        *SetConfigResponse   `protobuf:"bytes,10,opt,name=set_cfg_resp,json=setCfgResp" json:"set_cfg_resp,omitempty"`
	GetCfgResp        *GetConfigResponse   `protobuf:"bytes,11,opt,name=get_cfg_resp,json=getCfgResp" json:"get_cfg_resp,omitempty"`
	GetStatusResponse *GetInfoResponse     `protobuf:"bytes,12,opt,name=get_status_response,json=getStatusResponse" json:"get_status_response,omitempty"`
	ForceSplitResp    *ForceSplitResponse  `protobuf:"bytes,13,opt,name=force_split_resp,json=forceSplitResp" json:"force_split_resp,omitempty"`
	CompactionResp    *CompactionResponse  `protobuf:"bytes,14,opt,name=compaction_resp,json=compactionResp" json:"compaction_resp,omitempty"`
	ClearQueueResp    *ClearQueueResponse  `protobuf:"bytes,15,opt,name=clear_queue_resp,json=clearQueueResp" json:"clear_queue_resp,omitempty"`
	GetPendingsResp   *GetPendingsResponse `protobuf:"bytes,16,opt,name=get_pendings_resp,json=getPendingsResp" json:"get_pendings_resp,omitempty"`
	FlushDbResp       *FlushDBResponse     `protobuf:"bytes,17,opt,name=flush_db_resp,json=flushDbResp" json:"flush_db_resp,omitempty"`
}

func (m *AdminResponse) Reset()                    { *m = AdminResponse{} }
func (m *AdminResponse) String() string            { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()               {}
func (*AdminResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{2} }

func (m *AdminResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AdminResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *AdminResponse) GetSetCfgResp() *SetConfigResponse {
	if m != nil {
		return m.SetCfgResp
	}
	return nil
}

func (m *AdminResponse) GetGetCfgResp() *GetConfigResponse {
	if m != nil {
		return m.GetCfgResp
	}
	return nil
}

func (m *AdminResponse) GetGetStatusResponse() *GetInfoResponse {
	if m != nil {
		return m.GetStatusResponse
	}
	return nil
}

func (m *AdminResponse) GetForceSplitResp() *ForceSplitResponse {
	if m != nil {
		return m.ForceSplitResp
	}
	return nil
}

func (m *AdminResponse) GetCompactionResp() *CompactionResponse {
	if m != nil {
		return m.CompactionResp
	}
	return nil
}

func (m *AdminResponse) GetClearQueueResp() *ClearQueueResponse {
	if m != nil {
		return m.ClearQueueResp
	}
	return nil
}

func (m *AdminResponse) GetGetPendingsResp() *GetPendingsResponse {
	if m != nil {
		return m.GetPendingsResp
	}
	return nil
}

func (m *AdminResponse) GetFlushDbResp() *FlushDBResponse {
	if m != nil {
		return m.FlushDbResp
	}
	return nil
}

type ConfigKey struct {
	Section string `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ConfigKey) Reset()                    { *m = ConfigKey{} }
func (m *ConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ConfigKey) ProtoMessage()               {}
func (*ConfigKey) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{3} }

func (m *ConfigKey) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *ConfigKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ConfigItem struct {
	Key   *ConfigKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ConfigItem) Reset()                    { *m = ConfigItem{} }
func (m *ConfigItem) String() string            { return proto.CompactTextString(m) }
func (*ConfigItem) ProtoMessage()               {}
func (*ConfigItem) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{4} }

func (m *ConfigItem) GetKey() *ConfigKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ConfigItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetConfigRequest struct {
	Configs []*ConfigItem `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *SetConfigRequest) Reset()                    { *m = SetConfigRequest{} }
func (m *SetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*SetConfigRequest) ProtoMessage()               {}
func (*SetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{5} }

func (m *SetConfigRequest) GetConfigs() []*ConfigItem {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SetConfigResponse struct {
}

func (m *SetConfigResponse) Reset()                    { *m = SetConfigResponse{} }
func (m *SetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SetConfigResponse) ProtoMessage()               {}
func (*SetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{6} }

type GetConfigRequest struct {
	Key []*ConfigKey `protobuf:"bytes,1,rep,name=key" json:"key,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{7} }

func (m *GetConfigRequest) GetKey() []*ConfigKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetConfigResponse struct {
	Configs []*ConfigItem `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{8} }

func (m *GetConfigResponse) GetConfigs() []*ConfigItem {
	if m != nil {
		return m.Configs
	}
	return nil
}

// path: diffent types that caller care about
// eg: rocksdb, rocksdb.cache-usage,
//     server, server.version, server.start
//     raft, raft.{range_id}
// if path is empty, will return server's status summary
type GetInfoRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *GetInfoRequest) Reset()                    { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()               {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{9} }

func (m *GetInfoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type GetInfoResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetInfoResponse) Reset()                    { *m = GetInfoResponse{} }
func (m *GetInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetInfoResponse) ProtoMessage()               {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{10} }

func (m *GetInfoResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ForceSplitRequest struct {
	RangeId uint64 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (m *ForceSplitRequest) Reset()                    { *m = ForceSplitRequest{} }
func (m *ForceSplitRequest) String() string            { return proto.CompactTextString(m) }
func (*ForceSplitRequest) ProtoMessage()               {}
func (*ForceSplitRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{11} }

func (m *ForceSplitRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type ForceSplitResponse struct {
}

func (m *ForceSplitResponse) Reset()                    { *m = ForceSplitResponse{} }
func (m *ForceSplitResponse) String() string            { return proto.CompactTextString(m) }
func (*ForceSplitResponse) ProtoMessage()               {}
func (*ForceSplitResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{12} }

type CompactionRequest struct {
	RangeId uint64 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (m *CompactionRequest) Reset()                    { *m = CompactionRequest{} }
func (m *CompactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CompactionRequest) ProtoMessage()               {}
func (*CompactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{13} }

func (m *CompactionRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type CompactionResponse struct {
	BeginKey []byte `protobuf:"bytes,1,opt,name=begin_key,json=beginKey,proto3" json:"begin_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (m *CompactionResponse) Reset()                    { *m = CompactionResponse{} }
func (m *CompactionResponse) String() string            { return proto.CompactTextString(m) }
func (*CompactionResponse) ProtoMessage()               {}
func (*CompactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{14} }

func (m *CompactionResponse) GetBeginKey() []byte {
	if m != nil {
		return m.BeginKey
	}
	return nil
}

func (m *CompactionResponse) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type ClearQueueRequest struct {
	QueueType ClearQueueRequest_QueueType `protobuf:"varint,1,opt,name=queue_type,json=queueType,proto3,enum=ds_adminpb.ClearQueueRequest_QueueType" json:"queue_type,omitempty"`
}

func (m *ClearQueueRequest) Reset()                    { *m = ClearQueueRequest{} }
func (m *ClearQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearQueueRequest) ProtoMessage()               {}
func (*ClearQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{15} }

func (m *ClearQueueRequest) GetQueueType() ClearQueueRequest_QueueType {
	if m != nil {
		return m.QueueType
	}
	return ClearQueueRequest_ALL
}

type ClearQueueResponse struct {
	Cleared uint64 `protobuf:"varint,1,opt,name=cleared,proto3" json:"cleared,omitempty"`
}

func (m *ClearQueueResponse) Reset()                    { *m = ClearQueueResponse{} }
func (m *ClearQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearQueueResponse) ProtoMessage()               {}
func (*ClearQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{16} }

func (m *ClearQueueResponse) GetCleared() uint64 {
	if m != nil {
		return m.Cleared
	}
	return 0
}

type GetPendingsRequest struct {
	Ptype GetPendingsRequest_PendingType `protobuf:"varint,1,opt,name=ptype,proto3,enum=ds_adminpb.GetPendingsRequest_PendingType" json:"ptype,omitempty"`
	Count uint64                         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetPendingsRequest) Reset()                    { *m = GetPendingsRequest{} }
func (m *GetPendingsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPendingsRequest) ProtoMessage()               {}
func (*GetPendingsRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{17} }

func (m *GetPendingsRequest) GetPtype() GetPendingsRequest_PendingType {
	if m != nil {
		return m.Ptype
	}
	return GetPendingsRequest_ALL
}

func (m *GetPendingsRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetPendingsResponse struct {
	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *GetPendingsResponse) Reset()                    { *m = GetPendingsResponse{} }
func (m *GetPendingsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPendingsResponse) ProtoMessage()               {}
func (*GetPendingsResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{18} }

func (m *GetPendingsResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type FlushDBRequest struct {
	Wait bool `protobuf:"varint,1,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (m *FlushDBRequest) Reset()                    { *m = FlushDBRequest{} }
func (m *FlushDBRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushDBRequest) ProtoMessage()               {}
func (*FlushDBRequest) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{19} }

func (m *FlushDBRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type FlushDBResponse struct {
}

func (m *FlushDBResponse) Reset()                    { *m = FlushDBResponse{} }
func (m *FlushDBResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushDBResponse) ProtoMessage()               {}
func (*FlushDBResponse) Descriptor() ([]byte, []int) { return fileDescriptorDsAdmin, []int{20} }

func init() {
	proto.RegisterType((*AdminAuth)(nil), "ds_adminpb.AdminAuth")
	proto.RegisterType((*AdminRequest)(nil), "ds_adminpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "ds_adminpb.AdminResponse")
	proto.RegisterType((*ConfigKey)(nil), "ds_adminpb.ConfigKey")
	proto.RegisterType((*ConfigItem)(nil), "ds_adminpb.ConfigItem")
	proto.RegisterType((*SetConfigRequest)(nil), "ds_adminpb.SetConfigRequest")
	proto.RegisterType((*SetConfigResponse)(nil), "ds_adminpb.SetConfigResponse")
	proto.RegisterType((*GetConfigRequest)(nil), "ds_adminpb.GetConfigRequest")
	proto.RegisterType((*GetConfigResponse)(nil), "ds_adminpb.GetConfigResponse")
	proto.RegisterType((*GetInfoRequest)(nil), "ds_adminpb.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "ds_adminpb.GetInfoResponse")
	proto.RegisterType((*ForceSplitRequest)(nil), "ds_adminpb.ForceSplitRequest")
	proto.RegisterType((*ForceSplitResponse)(nil), "ds_adminpb.ForceSplitResponse")
	proto.RegisterType((*CompactionRequest)(nil), "ds_adminpb.CompactionRequest")
	proto.RegisterType((*CompactionResponse)(nil), "ds_adminpb.CompactionResponse")
	proto.RegisterType((*ClearQueueRequest)(nil), "ds_adminpb.ClearQueueRequest")
	proto.RegisterType((*ClearQueueResponse)(nil), "ds_adminpb.ClearQueueResponse")
	proto.RegisterType((*GetPendingsRequest)(nil), "ds_adminpb.GetPendingsRequest")
	proto.RegisterType((*GetPendingsResponse)(nil), "ds_adminpb.GetPendingsResponse")
	proto.RegisterType((*FlushDBRequest)(nil), "ds_adminpb.FlushDBRequest")
	proto.RegisterType((*FlushDBResponse)(nil), "ds_adminpb.FlushDBResponse")
	proto.RegisterEnum("ds_adminpb.AdminType", AdminType_name, AdminType_value)
	proto.RegisterEnum("ds_adminpb.AdminAuth_AuthMethod", AdminAuth_AuthMethod_name, AdminAuth_AuthMethod_value)
	proto.RegisterEnum("ds_adminpb.ClearQueueRequest_QueueType", ClearQueueRequest_QueueType_name, ClearQueueRequest_QueueType_value)
	proto.RegisterEnum("ds_adminpb.GetPendingsRequest_PendingType", GetPendingsRequest_PendingType_name, GetPendingsRequest_PendingType_value)
}
func (m *AdminAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Method))
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Typ))
	}
	if m.Auth != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Auth.Size()))
		n1, err := m.Auth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SetCfgReq != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.SetCfgReq.Size()))
		n2, err := m.SetCfgReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.GetCfgReq != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetCfgReq.Size()))
		n3, err := m.GetCfgReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GetInfoReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetInfoReq.Size()))
		n4, err := m.GetInfoReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ForceSplitReq != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.ForceSplitReq.Size()))
		n5, err := m.ForceSplitReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.CompactionReq != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.CompactionReq.Size()))
		n6, err := m.CompactionReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ClearQueueReq != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.ClearQueueReq.Size()))
		n7, err := m.ClearQueueReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GetPendingsReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetPendingsReq.Size()))
		n8, err := m.GetPendingsReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.FlushDbReq != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.FlushDbReq.Size()))
		n9, err := m.FlushDbReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Code))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.SetCfgResp != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.SetCfgResp.Size()))
		n10, err := m.SetCfgResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.GetCfgResp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetCfgResp.Size()))
		n11, err := m.GetCfgResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.GetStatusResponse != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetStatusResponse.Size()))
		n12, err := m.GetStatusResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ForceSplitResp != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.ForceSplitResp.Size()))
		n13, err := m.ForceSplitResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.CompactionResp != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.CompactionResp.Size()))
		n14, err := m.CompactionResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.ClearQueueResp != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.ClearQueueResp.Size()))
		n15, err := m.ClearQueueResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.GetPendingsResp != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.GetPendingsResp.Size()))
		n16, err := m.GetPendingsResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.FlushDbResp != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.FlushDbResp.Size()))
		n17, err := m.FlushDbResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ConfigKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Section) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Section)))
		i += copy(dAtA[i:], m.Section)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Key.Size()))
		n18, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDsAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, msg := range m.Key {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDsAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDsAdmin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func (m *GetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ForceSplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceSplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *ForceSplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceSplitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CompactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *CompactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BeginKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.BeginKey)))
		i += copy(dAtA[i:], m.BeginKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	return i, nil
}

func (m *ClearQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.QueueType))
	}
	return i, nil
}

func (m *ClearQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cleared != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Cleared))
	}
	return i, nil
}

func (m *GetPendingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ptype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Ptype))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetPendingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPendingsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDsAdmin(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *FlushDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wait {
		dAtA[i] = 0x8
		i++
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FlushDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintDsAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminAuth) Size() (n int) {
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovDsAdmin(uint64(m.Method))
	}
	if m.Epoch != 0 {
		n += 1 + sovDsAdmin(uint64(m.Epoch))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovDsAdmin(uint64(m.Typ))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.SetCfgReq != nil {
		l = m.SetCfgReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetCfgReq != nil {
		l = m.GetCfgReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetInfoReq != nil {
		l = m.GetInfoReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.ForceSplitReq != nil {
		l = m.ForceSplitReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.CompactionReq != nil {
		l = m.CompactionReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.ClearQueueReq != nil {
		l = m.ClearQueueReq.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetPendingsReq != nil {
		l = m.GetPendingsReq.Size()
		n += 2 + l + sovDsAdmin(uint64(l))
	}
	if m.FlushDbReq != nil {
		l = m.FlushDbReq.Size()
		n += 2 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDsAdmin(uint64(m.Code))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.SetCfgResp != nil {
		l = m.SetCfgResp.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetCfgResp != nil {
		l = m.GetCfgResp.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetStatusResponse != nil {
		l = m.GetStatusResponse.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.ForceSplitResp != nil {
		l = m.ForceSplitResp.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.CompactionResp != nil {
		l = m.CompactionResp.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.ClearQueueResp != nil {
		l = m.ClearQueueResp.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	if m.GetPendingsResp != nil {
		l = m.GetPendingsResp.Size()
		n += 2 + l + sovDsAdmin(uint64(l))
	}
	if m.FlushDbResp != nil {
		l = m.FlushDbResp.Size()
		n += 2 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *ConfigKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *ConfigItem) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *SetConfigRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovDsAdmin(uint64(l))
		}
	}
	return n
}

func (m *SetConfigResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetConfigRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, e := range m.Key {
			l = e.Size()
			n += 1 + l + sovDsAdmin(uint64(l))
		}
	}
	return n
}

func (m *GetConfigResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovDsAdmin(uint64(l))
		}
	}
	return n
}

func (m *GetInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *GetInfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *ForceSplitRequest) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovDsAdmin(uint64(m.RangeId))
	}
	return n
}

func (m *ForceSplitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CompactionRequest) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovDsAdmin(uint64(m.RangeId))
	}
	return n
}

func (m *CompactionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.BeginKey)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *ClearQueueRequest) Size() (n int) {
	var l int
	_ = l
	if m.QueueType != 0 {
		n += 1 + sovDsAdmin(uint64(m.QueueType))
	}
	return n
}

func (m *ClearQueueResponse) Size() (n int) {
	var l int
	_ = l
	if m.Cleared != 0 {
		n += 1 + sovDsAdmin(uint64(m.Cleared))
	}
	return n
}

func (m *GetPendingsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Ptype != 0 {
		n += 1 + sovDsAdmin(uint64(m.Ptype))
	}
	if m.Count != 0 {
		n += 1 + sovDsAdmin(uint64(m.Count))
	}
	return n
}

func (m *GetPendingsResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDsAdmin(uint64(l))
	}
	return n
}

func (m *FlushDBRequest) Size() (n int) {
	var l int
	_ = l
	if m.Wait {
		n += 2
	}
	return n
}

func (m *FlushDBResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDsAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDsAdmin(x uint64) (n int) {
	return sovDsAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= (AdminAuth_AuthMethod(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (AdminType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &AdminAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCfgReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetCfgReq == nil {
				m.SetCfgReq = &SetConfigRequest{}
			}
			if err := m.SetCfgReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCfgReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetCfgReq == nil {
				m.GetCfgReq = &GetConfigRequest{}
			}
			if err := m.GetCfgReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetInfoReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetInfoReq == nil {
				m.GetInfoReq = &GetInfoRequest{}
			}
			if err := m.GetInfoReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSplitReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForceSplitReq == nil {
				m.ForceSplitReq = &ForceSplitRequest{}
			}
			if err := m.ForceSplitReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompactionReq == nil {
				m.CompactionReq = &CompactionRequest{}
			}
			if err := m.CompactionReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearQueueReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClearQueueReq == nil {
				m.ClearQueueReq = &ClearQueueRequest{}
			}
			if err := m.ClearQueueReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPendingsReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetPendingsReq == nil {
				m.GetPendingsReq = &GetPendingsRequest{}
			}
			if err := m.GetPendingsReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushDbReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushDbReq == nil {
				m.FlushDbReq = &FlushDBRequest{}
			}
			if err := m.FlushDbReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetCfgResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SetCfgResp == nil {
				m.SetCfgResp = &SetConfigResponse{}
			}
			if err := m.SetCfgResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCfgResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetCfgResp == nil {
				m.GetCfgResp = &GetConfigResponse{}
			}
			if err := m.GetCfgResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetStatusResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetStatusResponse == nil {
				m.GetStatusResponse = &GetInfoResponse{}
			}
			if err := m.GetStatusResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceSplitResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForceSplitResp == nil {
				m.ForceSplitResp = &ForceSplitResponse{}
			}
			if err := m.ForceSplitResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompactionResp == nil {
				m.CompactionResp = &CompactionResponse{}
			}
			if err := m.CompactionResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearQueueResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClearQueueResp == nil {
				m.ClearQueueResp = &ClearQueueResponse{}
			}
			if err := m.ClearQueueResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetPendingsResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetPendingsResp == nil {
				m.GetPendingsResp = &GetPendingsResponse{}
			}
			if err := m.GetPendingsResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushDbResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushDbResp == nil {
				m.FlushDbResp = &FlushDBResponse{}
			}
			if err := m.FlushDbResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &ConfigKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigItem{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, &ConfigKey{})
			if err := m.Key[len(m.Key)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigItem{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceSplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceSplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceSplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceSplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceSplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceSplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginKey = append(m.BeginKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BeginKey == nil {
				m.BeginKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueType", wireType)
			}
			m.QueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueType |= (ClearQueueRequest_QueueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleared", wireType)
			}
			m.Cleared = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cleared |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (GetPendingsRequest_PendingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPendingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPendingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPendingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDsAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDsAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDsAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDsAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDsAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDsAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDsAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDsAdmin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ds_admin.proto", fileDescriptorDsAdmin) }

var fileDescriptorDsAdmin = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0xe2, 0x46,
	0x14, 0x8e, 0x03, 0x09, 0xf0, 0x20, 0x60, 0x26, 0xdb, 0x96, 0x36, 0xbb, 0x34, 0xb2, 0x5a, 0x6d,
	0x76, 0x0f, 0xa8, 0xda, 0xaa, 0x55, 0xab, 0x56, 0xda, 0x12, 0x30, 0x84, 0x42, 0x4c, 0x76, 0x4c,
	0x94, 0xa3, 0xe5, 0x98, 0xc1, 0x41, 0x0d, 0xb6, 0xc3, 0x98, 0x56, 0xfc, 0x88, 0x9e, 0x7a, 0xd9,
	0x9f, 0xd3, 0x63, 0x8f, 0xfd, 0x09, 0x55, 0xfa, 0x27, 0xaa, 0x9e, 0xaa, 0x37, 0x8c, 0x8d, 0xc1,
	0x49, 0x0e, 0xbd, 0xa0, 0xf7, 0x1e, 0xdf, 0xf7, 0xf9, 0xcd, 0xf8, 0x9b, 0x37, 0x86, 0xf2, 0x98,
	0x5b, 0xf6, 0x78, 0x36, 0xf5, 0x1a, 0xc1, 0xdc, 0x0f, 0x7d, 0x02, 0x51, 0x1e, 0x5c, 0x6b, 0xbf,
	0x2a, 0x50, 0x68, 0x62, 0xdc, 0x5c, 0x84, 0x37, 0xe4, 0x1b, 0xd8, 0x9f, 0xb1, 0xf0, 0xc6, 0x1f,
	0xd7, 0x94, 0x63, 0xe5, 0xa4, 0xfc, 0xe6, 0xb8, 0xb1, 0x86, 0x36, 0x62, 0x58, 0x03, 0x7f, 0xce,
	0x05, 0x8e, 0x4a, 0x3c, 0x79, 0x06, 0x7b, 0x2c, 0xf0, 0x9d, 0x9b, 0xda, 0xee, 0xb1, 0x72, 0x92,
	0xa5, 0xab, 0x84, 0x10, 0xc8, 0xf2, 0xa9, 0xeb, 0xd5, 0x32, 0xc7, 0xca, 0x49, 0x81, 0x8a, 0x58,
	0x7b, 0x0e, 0xb0, 0xe6, 0x93, 0x32, 0xc0, 0x79, 0xfb, 0x2b, 0xab, 0xdd, 0xeb, 0xea, 0xe6, 0x48,
	0xdd, 0xd1, 0xfe, 0xc9, 0x42, 0x49, 0x3c, 0x88, 0xb2, 0xbb, 0x05, 0xe3, 0x21, 0x79, 0x09, 0x99,
	0x70, 0x19, 0xc8, 0x7e, 0x3e, 0x48, 0xf5, 0x33, 0x5a, 0x06, 0x8c, 0x22, 0x82, 0xbc, 0x82, 0xac,
	0xbd, 0x08, 0x57, 0x0d, 0x14, 0x1f, 0x40, 0xe2, 0x43, 0xa9, 0x80, 0x90, 0xef, 0xa1, 0xc8, 0x59,
	0x68, 0x39, 0x13, 0xd7, 0x9a, 0xb3, 0xbb, 0x1a, 0x08, 0xc6, 0xf3, 0x24, 0xc3, 0x64, 0x61, 0xcb,
	0xf7, 0x26, 0x53, 0x57, 0xb6, 0x41, 0x0b, 0x9c, 0x85, 0xad, 0x09, 0xa6, 0xc8, 0x76, 0x13, 0xec,
	0x62, 0x9a, 0xdd, 0x4d, 0xb1, 0xdd, 0x04, 0xbb, 0x84, 0xec, 0xa9, 0x37, 0xf1, 0x05, 0xbd, 0x24,
	0xe8, 0x9f, 0x6c, 0xd1, 0x7b, 0xde, 0xc4, 0x8f, 0xc8, 0xe0, 0xc6, 0x39, 0xd1, 0xa1, 0x32, 0xf1,
	0xe7, 0x0e, 0xb3, 0x78, 0x70, 0x3b, 0x0d, 0x85, 0xc0, 0x81, 0x10, 0x78, 0x91, 0x14, 0xe8, 0x20,
	0xc4, 0x44, 0x44, 0xa4, 0x71, 0x30, 0x49, 0x96, 0x48, 0x1b, 0xca, 0x8e, 0x3f, 0x0b, 0x6c, 0x27,
	0x9c, 0xfa, 0x9e, 0x50, 0x29, 0xa7, 0x55, 0x5a, 0x31, 0x22, 0x56, 0x71, 0x92, 0x25, 0x6c, 0xc6,
	0xb9, 0x65, 0xf6, 0xdc, 0xba, 0x5b, 0xb0, 0x05, 0x13, 0x32, 0x95, 0x07, 0x64, 0x10, 0xf2, 0x0e,
	0x11, 0x6b, 0x99, 0x64, 0x89, 0x9c, 0x81, 0x8a, 0x3b, 0x12, 0x30, 0x6f, 0x3c, 0xf5, 0x5c, 0x2e,
	0x74, 0x54, 0xa1, 0x53, 0xdf, 0xda, 0x95, 0x0b, 0x09, 0x89, 0x84, 0xca, 0xee, 0x46, 0x0d, 0xf7,
	0x76, 0x72, 0xbb, 0xe0, 0x37, 0xd6, 0xf8, 0x5a, 0xa8, 0x54, 0xd3, 0x7b, 0xdb, 0xc1, 0xff, 0xdb,
	0xa7, 0xf1, 0xde, 0x0a, 0x7c, 0xfb, 0x9a, 0xb2, 0x3b, 0xed, 0xdf, 0x2c, 0x1c, 0x48, 0xeb, 0xf1,
	0xc0, 0xf7, 0x38, 0x43, 0xfb, 0x3a, 0xfe, 0x98, 0x09, 0xf3, 0x1d, 0x50, 0x11, 0x93, 0x23, 0x28,
	0xb0, 0xf9, 0xdc, 0x9f, 0x5b, 0x33, 0xee, 0x0a, 0xaf, 0x15, 0x68, 0x5e, 0x14, 0xce, 0xb9, 0x4b,
	0xde, 0x42, 0x69, 0x6d, 0x2c, 0x1e, 0x48, 0x67, 0xbd, 0x78, 0xc4, 0x59, 0xab, 0xa7, 0x50, 0x88,
	0xac, 0xc5, 0x03, 0x14, 0x70, 0x93, 0x02, 0xc5, 0xb4, 0x40, 0x37, 0x2d, 0xe0, 0xae, 0x05, 0xfa,
	0x70, 0x88, 0x02, 0x3c, 0xb4, 0xc3, 0x05, 0x17, 0x1a, 0x08, 0x91, 0x2e, 0x3b, 0x7a, 0xd0, 0x65,
	0x52, 0xa5, 0xea, 0xb2, 0xd0, 0x14, 0xb4, 0x78, 0xfd, 0x67, 0xa0, 0x6e, 0xba, 0x8d, 0x07, 0xd2,
	0x6e, 0xf5, 0xc7, 0xec, 0x26, 0xc5, 0xca, 0x93, 0x8d, 0x1a, 0xe9, 0x42, 0x65, 0xc3, 0x70, 0x3c,
	0x90, 0x8e, 0xab, 0x3f, 0xe6, 0xb8, 0x48, 0xc8, 0xd9, 0xa8, 0x61, 0x4b, 0x9b, 0x9e, 0xe3, 0x81,
	0x34, 0x5d, 0xfd, 0x31, 0xd3, 0xc5, 0x4a, 0x1b, 0x35, 0xd2, 0x87, 0xea, 0x96, 0xed, 0x78, 0x20,
	0x7d, 0xf7, 0xe9, 0xa3, 0xbe, 0x93, 0x5a, 0x15, 0x77, 0xb3, 0x48, 0xde, 0xc2, 0x41, 0xc2, 0x79,
	0x3c, 0x90, 0xd6, 0x3b, 0x7a, 0xd0, 0x7a, 0x52, 0xa4, 0x18, 0x7b, 0x8f, 0x07, 0xda, 0xb7, 0x50,
	0x58, 0xbd, 0xd5, 0x3e, 0x5b, 0x92, 0x1a, 0xe4, 0x38, 0x13, 0x6b, 0x16, 0xd6, 0x2b, 0xd0, 0x28,
	0x45, 0x47, 0x7a, 0xf6, 0x8c, 0x49, 0xe3, 0x89, 0x58, 0xeb, 0x03, 0xac, 0xa8, 0xbd, 0x90, 0xcd,
	0x70, 0x5e, 0xfe, 0xc4, 0x96, 0x82, 0xb7, 0x35, 0x05, 0x63, 0x7d, 0x8a, 0x08, 0x9c, 0xd8, 0x3f,
	0xdb, 0xb7, 0x8b, 0x48, 0x6b, 0x95, 0x68, 0x6d, 0x50, 0xb7, 0x67, 0x1f, 0xf9, 0x02, 0x72, 0x8e,
	0x28, 0xf0, 0x9a, 0x72, 0x9c, 0x39, 0x29, 0xbe, 0xf9, 0x30, 0x2d, 0x8b, 0xcf, 0xa6, 0x11, 0x4c,
	0x3b, 0x84, 0x6a, 0xca, 0xe7, 0xda, 0x77, 0xa0, 0x6e, 0x0f, 0xc6, 0x75, 0xb7, 0x99, 0xa7, 0xbb,
	0xd5, 0x74, 0xa8, 0xa6, 0x8c, 0xff, 0x3f, 0x1a, 0xfb, 0x0c, 0xca, 0x9b, 0xd3, 0x15, 0x77, 0x34,
	0xb0, 0xc3, 0x1b, 0xb9, 0xd1, 0x22, 0xd6, 0x3e, 0x87, 0xca, 0xd6, 0xe9, 0x40, 0xd8, 0xd8, 0x0e,
	0xed, 0x08, 0x86, 0xb1, 0xd6, 0x80, 0x6a, 0x6a, 0xd2, 0x92, 0x8f, 0x21, 0x3f, 0xb7, 0x3d, 0x97,
	0x59, 0xd3, 0xd5, 0x25, 0x9a, 0xa5, 0x39, 0x91, 0xf7, 0xc6, 0xda, 0x33, 0x20, 0xe9, 0xa3, 0x82,
	0x2a, 0xa9, 0x49, 0xfb, 0x94, 0xca, 0x8f, 0x40, 0xd2, 0xe7, 0x04, 0xc7, 0xd2, 0x35, 0x73, 0xa7,
	0x9e, 0x15, 0xbd, 0xfc, 0x12, 0xcd, 0x8b, 0x02, 0xfa, 0xe9, 0x23, 0xc8, 0x31, 0x6f, 0x2c, 0xfe,
	0xda, 0x15, 0x7f, 0xed, 0x33, 0x6f, 0xdc, 0x67, 0x4b, 0xed, 0x37, 0x05, 0xaa, 0xa9, 0xf9, 0x4c,
	0x3a, 0x00, 0xab, 0xd3, 0x15, 0x2e, 0x03, 0x26, 0x6f, 0xde, 0x97, 0x4f, 0x8e, 0xf4, 0x86, 0x48,
	0xc4, 0x5d, 0x5c, 0xb8, 0x8b, 0x42, 0xed, 0x6b, 0x28, 0xc4, 0x75, 0x92, 0x83, 0x4c, 0x73, 0x30,
	0x50, 0x77, 0x48, 0x05, 0x8a, 0x9d, 0xa6, 0x39, 0xb2, 0xae, 0x86, 0xb4, 0xaf, 0x53, 0x55, 0xc1,
	0x82, 0x39, 0x18, 0x5e, 0x45, 0x85, 0x5d, 0xad, 0x01, 0x24, 0x7d, 0x7e, 0xf1, 0x50, 0x88, 0x13,
	0xcc, 0xe2, 0x1d, 0x91, 0xa9, 0xf6, 0xbb, 0x02, 0x24, 0x7d, 0x3b, 0x90, 0x1f, 0x60, 0x2f, 0x48,
	0xac, 0xe0, 0xf5, 0xd3, 0x97, 0x49, 0x43, 0xe6, 0x62, 0x11, 0x2b, 0x22, 0x1e, 0x11, 0xc7, 0x5f,
	0x78, 0x61, 0xf4, 0x51, 0x23, 0x12, 0x8d, 0x42, 0x31, 0x81, 0x5d, 0x2f, 0x0c, 0x60, 0xbf, 0x67,
	0x98, 0x3a, 0x1d, 0xa9, 0x0a, 0xc6, 0xa6, 0x3e, 0xd0, 0x5b, 0x23, 0x75, 0x97, 0xa8, 0x50, 0xba,
	0x18, 0x1a, 0xbd, 0x91, 0x25, 0x2b, 0x19, 0xac, 0xd0, 0xa6, 0xd1, 0xd5, 0xa3, 0x4a, 0x56, 0x7b,
	0x05, 0x87, 0x0f, 0xcc, 0x19, 0xe1, 0x3a, 0xc6, 0x9d, 0xd8, 0x75, 0x8c, 0x3b, 0x68, 0xe1, 0xcd,
	0x4b, 0x0c, 0x51, 0xbf, 0xd8, 0xd3, 0x50, 0xa0, 0xf2, 0x54, 0xc4, 0x5a, 0x15, 0x2a, 0x5b, 0xf3,
	0xe6, 0xf5, 0xfb, 0xe8, 0x53, 0x4f, 0xb4, 0x5d, 0x84, 0xdc, 0xa5, 0xd1, 0x37, 0x86, 0x57, 0x86,
	0xba, 0x83, 0x5f, 0x61, 0xa6, 0x3e, 0xb2, 0x5a, 0x43, 0xa3, 0xd3, 0xeb, 0xaa, 0x0a, 0xe6, 0xdd,
	0x75, 0xbe, 0x4b, 0x4a, 0x90, 0xc7, 0xbc, 0x67, 0x74, 0x86, 0x6a, 0x46, 0xbc, 0xc1, 0x21, 0x6d,
	0xe9, 0x96, 0x79, 0x31, 0xe8, 0x8d, 0xd4, 0x2c, 0xc2, 0x5b, 0xc3, 0xf3, 0x8b, 0x66, 0x6b, 0xd4,
	0x1b, 0x1a, 0xea, 0x1e, 0x02, 0x5a, 0x03, 0xbd, 0x49, 0xad, 0x77, 0x97, 0xfa, 0xa5, 0xae, 0xee,
	0xe3, 0x82, 0x91, 0x7f, 0xa1, 0x1b, 0xed, 0x9e, 0xd1, 0x35, 0xd5, 0x1c, 0x2a, 0x76, 0x06, 0x97,
	0xe6, 0x99, 0xd5, 0x3e, 0x55, 0xf3, 0xa7, 0xea, 0x1f, 0xf7, 0x75, 0xe5, 0xcf, 0xfb, 0xba, 0xf2,
	0xd7, 0x7d, 0x5d, 0x79, 0xff, 0x77, 0x7d, 0xe7, 0x7a, 0x5f, 0x7c, 0xaa, 0x7e, 0xf9, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x22, 0xae, 0x8f, 0x22, 0xbc, 0x0a, 0x00, 0x00,
}
