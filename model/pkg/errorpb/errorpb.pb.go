// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errorpb.proto

/*
	Package errorpb is a generated protocol buffer package.

	It is generated from these files:
		errorpb.proto

	It has these top-level messages:
		NotLeader
		RangeNotFound
		KeyNotInRange
		StaleCommand
		Timeout
		RaftFail
		StaleEpoch
		StaleRange
		StaleReadIndex
		ServerIsBusy
		EntryTooLarge
		NoLeftSpace
		Error
*/
package errorpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import metapb "model/pkg/metapb"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotLeader struct {
	RangeId uint64             `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Epoch   *metapb.RangeEpoch `protobuf:"bytes,2,opt,name=epoch" json:"epoch,omitempty"`
	Leader  *metapb.Peer       `protobuf:"bytes,3,opt,name=leader" json:"leader,omitempty"`
}

func (m *NotLeader) Reset()                    { *m = NotLeader{} }
func (m *NotLeader) String() string            { return proto.CompactTextString(m) }
func (*NotLeader) ProtoMessage()               {}
func (*NotLeader) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{0} }

func (m *NotLeader) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *NotLeader) GetEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *NotLeader) GetLeader() *metapb.Peer {
	if m != nil {
		return m.Leader
	}
	return nil
}

type RangeNotFound struct {
	RangeId uint64 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (m *RangeNotFound) Reset()                    { *m = RangeNotFound{} }
func (m *RangeNotFound) String() string            { return proto.CompactTextString(m) }
func (*RangeNotFound) ProtoMessage()               {}
func (*RangeNotFound) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{1} }

func (m *RangeNotFound) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type KeyNotInRange struct {
	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	RangeId  uint64 `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	StartKey []byte `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,4,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (m *KeyNotInRange) Reset()                    { *m = KeyNotInRange{} }
func (m *KeyNotInRange) String() string            { return proto.CompactTextString(m) }
func (*KeyNotInRange) ProtoMessage()               {}
func (*KeyNotInRange) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{2} }

func (m *KeyNotInRange) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyNotInRange) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *KeyNotInRange) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *KeyNotInRange) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type StaleCommand struct {
}

func (m *StaleCommand) Reset()                    { *m = StaleCommand{} }
func (m *StaleCommand) String() string            { return proto.CompactTextString(m) }
func (*StaleCommand) ProtoMessage()               {}
func (*StaleCommand) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{3} }

type Timeout struct {
}

func (m *Timeout) Reset()                    { *m = Timeout{} }
func (m *Timeout) String() string            { return proto.CompactTextString(m) }
func (*Timeout) ProtoMessage()               {}
func (*Timeout) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{4} }

type RaftFail struct {
}

func (m *RaftFail) Reset()                    { *m = RaftFail{} }
func (m *RaftFail) String() string            { return proto.CompactTextString(m) }
func (*RaftFail) ProtoMessage()               {}
func (*RaftFail) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{5} }

type StaleEpoch struct {
	OldRange *metapb.Range `protobuf:"bytes,1,opt,name=old_range,json=oldRange" json:"old_range,omitempty"`
	NewRange *metapb.Range `protobuf:"bytes,2,opt,name=new_range,json=newRange" json:"new_range,omitempty"`
}

func (m *StaleEpoch) Reset()                    { *m = StaleEpoch{} }
func (m *StaleEpoch) String() string            { return proto.CompactTextString(m) }
func (*StaleEpoch) ProtoMessage()               {}
func (*StaleEpoch) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{6} }

func (m *StaleEpoch) GetOldRange() *metapb.Range {
	if m != nil {
		return m.OldRange
	}
	return nil
}

func (m *StaleEpoch) GetNewRange() *metapb.Range {
	if m != nil {
		return m.NewRange
	}
	return nil
}

type StaleRange struct {
	Range *metapb.Range `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
}

func (m *StaleRange) Reset()                    { *m = StaleRange{} }
func (m *StaleRange) String() string            { return proto.CompactTextString(m) }
func (*StaleRange) ProtoMessage()               {}
func (*StaleRange) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{7} }

func (m *StaleRange) GetRange() *metapb.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

// 副本进度落后 （实际进度小于ReadIndex)
type StaleReadIndex struct {
	ReadIndex    uint64 `protobuf:"varint,1,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
	ReplicaIndex uint64 `protobuf:"varint,2,opt,name=replica_index,json=replicaIndex,proto3" json:"replica_index,omitempty"`
}

func (m *StaleReadIndex) Reset()                    { *m = StaleReadIndex{} }
func (m *StaleReadIndex) String() string            { return proto.CompactTextString(m) }
func (*StaleReadIndex) ProtoMessage()               {}
func (*StaleReadIndex) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{8} }

func (m *StaleReadIndex) GetReadIndex() uint64 {
	if m != nil {
		return m.ReadIndex
	}
	return 0
}

func (m *StaleReadIndex) GetReplicaIndex() uint64 {
	if m != nil {
		return m.ReplicaIndex
	}
	return 0
}

type ServerIsBusy struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ServerIsBusy) Reset()                    { *m = ServerIsBusy{} }
func (m *ServerIsBusy) String() string            { return proto.CompactTextString(m) }
func (*ServerIsBusy) ProtoMessage()               {}
func (*ServerIsBusy) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{9} }

func (m *ServerIsBusy) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type EntryTooLarge struct {
	RangeId   uint64 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	EntrySize uint64 `protobuf:"varint,2,opt,name=entry_size,json=entrySize,proto3" json:"entry_size,omitempty"`
}

func (m *EntryTooLarge) Reset()                    { *m = EntryTooLarge{} }
func (m *EntryTooLarge) String() string            { return proto.CompactTextString(m) }
func (*EntryTooLarge) ProtoMessage()               {}
func (*EntryTooLarge) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{10} }

func (m *EntryTooLarge) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *EntryTooLarge) GetEntrySize() uint64 {
	if m != nil {
		return m.EntrySize
	}
	return 0
}

type NoLeftSpace struct {
}

func (m *NoLeftSpace) Reset()                    { *m = NoLeftSpace{} }
func (m *NoLeftSpace) String() string            { return proto.CompactTextString(m) }
func (*NoLeftSpace) ProtoMessage()               {}
func (*NoLeftSpace) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{11} }

type Error struct {
	Message        string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NotLeader      *NotLeader      `protobuf:"bytes,2,opt,name=not_leader,json=notLeader" json:"not_leader,omitempty"`
	StaleCommand   *StaleCommand   `protobuf:"bytes,3,opt,name=stale_command,json=staleCommand" json:"stale_command,omitempty"`
	RangeNotFound  *RangeNotFound  `protobuf:"bytes,4,opt,name=range_not_found,json=rangeNotFound" json:"range_not_found,omitempty"`
	KeyNotInRange  *KeyNotInRange  `protobuf:"bytes,5,opt,name=key_not_in_range,json=keyNotInRange" json:"key_not_in_range,omitempty"`
	StaleEpoch     *StaleEpoch     `protobuf:"bytes,6,opt,name=stale_epoch,json=staleEpoch" json:"stale_epoch,omitempty"`
	ServerIsBusy   *ServerIsBusy   `protobuf:"bytes,7,opt,name=server_is_busy,json=serverIsBusy" json:"server_is_busy,omitempty"`
	EntryTooLarge  *EntryTooLarge  `protobuf:"bytes,8,opt,name=entry_too_large,json=entryTooLarge" json:"entry_too_large,omitempty"`
	Timeout        *Timeout        `protobuf:"bytes,9,opt,name=timeout" json:"timeout,omitempty"`
	RaftFail       *RaftFail       `protobuf:"bytes,10,opt,name=raft_fail,json=raftFail" json:"raft_fail,omitempty"`
	StaleRange     *StaleRange     `protobuf:"bytes,11,opt,name=stale_range,json=staleRange" json:"stale_range,omitempty"`
	StaleReadIndex *StaleReadIndex `protobuf:"bytes,12,opt,name=stale_read_index,json=staleReadIndex" json:"stale_read_index,omitempty"`
	NoLeftSpace    *NoLeftSpace    `protobuf:"bytes,13,opt,name=no_left_space,json=noLeftSpace" json:"no_left_space,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{12} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetNotLeader() *NotLeader {
	if m != nil {
		return m.NotLeader
	}
	return nil
}

func (m *Error) GetStaleCommand() *StaleCommand {
	if m != nil {
		return m.StaleCommand
	}
	return nil
}

func (m *Error) GetRangeNotFound() *RangeNotFound {
	if m != nil {
		return m.RangeNotFound
	}
	return nil
}

func (m *Error) GetKeyNotInRange() *KeyNotInRange {
	if m != nil {
		return m.KeyNotInRange
	}
	return nil
}

func (m *Error) GetStaleEpoch() *StaleEpoch {
	if m != nil {
		return m.StaleEpoch
	}
	return nil
}

func (m *Error) GetServerIsBusy() *ServerIsBusy {
	if m != nil {
		return m.ServerIsBusy
	}
	return nil
}

func (m *Error) GetEntryTooLarge() *EntryTooLarge {
	if m != nil {
		return m.EntryTooLarge
	}
	return nil
}

func (m *Error) GetTimeout() *Timeout {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Error) GetRaftFail() *RaftFail {
	if m != nil {
		return m.RaftFail
	}
	return nil
}

func (m *Error) GetStaleRange() *StaleRange {
	if m != nil {
		return m.StaleRange
	}
	return nil
}

func (m *Error) GetStaleReadIndex() *StaleReadIndex {
	if m != nil {
		return m.StaleReadIndex
	}
	return nil
}

func (m *Error) GetNoLeftSpace() *NoLeftSpace {
	if m != nil {
		return m.NoLeftSpace
	}
	return nil
}

func init() {
	proto.RegisterType((*NotLeader)(nil), "errorpb.NotLeader")
	proto.RegisterType((*RangeNotFound)(nil), "errorpb.RangeNotFound")
	proto.RegisterType((*KeyNotInRange)(nil), "errorpb.KeyNotInRange")
	proto.RegisterType((*StaleCommand)(nil), "errorpb.StaleCommand")
	proto.RegisterType((*Timeout)(nil), "errorpb.Timeout")
	proto.RegisterType((*RaftFail)(nil), "errorpb.RaftFail")
	proto.RegisterType((*StaleEpoch)(nil), "errorpb.StaleEpoch")
	proto.RegisterType((*StaleRange)(nil), "errorpb.StaleRange")
	proto.RegisterType((*StaleReadIndex)(nil), "errorpb.StaleReadIndex")
	proto.RegisterType((*ServerIsBusy)(nil), "errorpb.ServerIsBusy")
	proto.RegisterType((*EntryTooLarge)(nil), "errorpb.EntryTooLarge")
	proto.RegisterType((*NoLeftSpace)(nil), "errorpb.NoLeftSpace")
	proto.RegisterType((*Error)(nil), "errorpb.Error")
}
func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RangeId))
	}
	if m.Epoch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Epoch.Size()))
		n1, err := m.Epoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Leader != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Leader.Size()))
		n2, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RangeNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *KeyNotInRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyNotInRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.RangeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RangeId))
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	return i, nil
}

func (m *StaleCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Timeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timeout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RaftFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StaleEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OldRange != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.OldRange.Size()))
		n3, err := m.OldRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NewRange != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NewRange.Size()))
		n4, err := m.NewRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StaleRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Range.Size()))
		n5, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *StaleReadIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleReadIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReadIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ReadIndex))
	}
	if m.ReplicaIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ReplicaIndex))
	}
	return i, nil
}

func (m *ServerIsBusy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerIsBusy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *EntryTooLarge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryTooLarge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RangeId))
	}
	if m.EntrySize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.EntrySize))
	}
	return i, nil
}

func (m *NoLeftSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoLeftSpace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.NotLeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NotLeader.Size()))
		n6, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.StaleCommand != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleCommand.Size()))
		n7, err := m.StaleCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.RangeNotFound != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RangeNotFound.Size()))
		n8, err := m.RangeNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KeyNotInRange != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.KeyNotInRange.Size()))
		n9, err := m.KeyNotInRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StaleEpoch != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleEpoch.Size()))
		n10, err := m.StaleEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ServerIsBusy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ServerIsBusy.Size()))
		n11, err := m.ServerIsBusy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EntryTooLarge != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.EntryTooLarge.Size()))
		n12, err := m.EntryTooLarge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Timeout != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Timeout.Size()))
		n13, err := m.Timeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.RaftFail != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RaftFail.Size()))
		n14, err := m.RaftFail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.StaleRange != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleRange.Size()))
		n15, err := m.StaleRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.StaleReadIndex != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleReadIndex.Size()))
		n16, err := m.StaleReadIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.NoLeftSpace != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NoLeftSpace.Size()))
		n17, err := m.NoLeftSpace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func encodeVarintErrorpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NotLeader) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovErrorpb(uint64(m.RangeId))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *RangeNotFound) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovErrorpb(uint64(m.RangeId))
	}
	return n
}

func (m *KeyNotInRange) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.RangeId != 0 {
		n += 1 + sovErrorpb(uint64(m.RangeId))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *StaleCommand) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Timeout) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RaftFail) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StaleEpoch) Size() (n int) {
	var l int
	_ = l
	if m.OldRange != nil {
		l = m.OldRange.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.NewRange != nil {
		l = m.NewRange.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *StaleRange) Size() (n int) {
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *StaleReadIndex) Size() (n int) {
	var l int
	_ = l
	if m.ReadIndex != 0 {
		n += 1 + sovErrorpb(uint64(m.ReadIndex))
	}
	if m.ReplicaIndex != 0 {
		n += 1 + sovErrorpb(uint64(m.ReplicaIndex))
	}
	return n
}

func (m *ServerIsBusy) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *EntryTooLarge) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovErrorpb(uint64(m.RangeId))
	}
	if m.EntrySize != 0 {
		n += 1 + sovErrorpb(uint64(m.EntrySize))
	}
	return n
}

func (m *NoLeftSpace) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleCommand != nil {
		l = m.StaleCommand.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.RangeNotFound != nil {
		l = m.RangeNotFound.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.KeyNotInRange != nil {
		l = m.KeyNotInRange.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleEpoch != nil {
		l = m.StaleEpoch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ServerIsBusy != nil {
		l = m.ServerIsBusy.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.EntryTooLarge != nil {
		l = m.EntryTooLarge.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.Timeout != nil {
		l = m.Timeout.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.RaftFail != nil {
		l = m.RaftFail.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleRange != nil {
		l = m.StaleRange.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleReadIndex != nil {
		l = m.StaleReadIndex.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.NoLeftSpace != nil {
		l = m.NoLeftSpace.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func sovErrorpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrorpb(x uint64) (n int) {
	return sovErrorpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &metapb.RangeEpoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &metapb.Peer{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyNotInRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyNotInRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyNotInRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldRange == nil {
				m.OldRange = &metapb.Range{}
			}
			if err := m.OldRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRange == nil {
				m.NewRange = &metapb.Range{}
			}
			if err := m.NewRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &metapb.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleReadIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleReadIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleReadIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadIndex", wireType)
			}
			m.ReadIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaIndex", wireType)
			}
			m.ReplicaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerIsBusy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerIsBusy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerIsBusy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryTooLarge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryTooLarge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryTooLarge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrySize", wireType)
			}
			m.EntrySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntrySize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoLeftSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoLeftSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoLeftSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleCommand == nil {
				m.StaleCommand = &StaleCommand{}
			}
			if err := m.StaleCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeNotFound == nil {
				m.RangeNotFound = &RangeNotFound{}
			}
			if err := m.RangeNotFound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNotInRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyNotInRange == nil {
				m.KeyNotInRange = &KeyNotInRange{}
			}
			if err := m.KeyNotInRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleEpoch == nil {
				m.StaleEpoch = &StaleEpoch{}
			}
			if err := m.StaleEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIsBusy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIsBusy == nil {
				m.ServerIsBusy = &ServerIsBusy{}
			}
			if err := m.ServerIsBusy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTooLarge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryTooLarge == nil {
				m.EntryTooLarge = &EntryTooLarge{}
			}
			if err := m.EntryTooLarge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timeout == nil {
				m.Timeout = &Timeout{}
			}
			if err := m.Timeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftFail == nil {
				m.RaftFail = &RaftFail{}
			}
			if err := m.RaftFail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleRange == nil {
				m.StaleRange = &StaleRange{}
			}
			if err := m.StaleRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleReadIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleReadIndex == nil {
				m.StaleReadIndex = &StaleReadIndex{}
			}
			if err := m.StaleReadIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLeftSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoLeftSpace == nil {
				m.NoLeftSpace = &NoLeftSpace{}
			}
			if err := m.NoLeftSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrorpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrorpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrorpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("errorpb.proto", fileDescriptorErrorpb) }

var fileDescriptorErrorpb = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0x3e, 0x01, 0xf2, 0xe3, 0x89, 0x1d, 0x72, 0x7c, 0x38, 0xe0, 0xc3, 0x11, 0x11, 0x32, 0x55,
	0x85, 0x72, 0x41, 0x05, 0xed, 0x45, 0xd5, 0x4a, 0x54, 0xa5, 0x02, 0x29, 0x02, 0x45, 0xd5, 0x86,
	0x7b, 0x6b, 0x89, 0x27, 0xa9, 0x85, 0xb3, 0x1b, 0xed, 0x6e, 0xa0, 0xe6, 0x49, 0xfa, 0x48, 0xbd,
	0xac, 0xd4, 0x17, 0xa8, 0xe8, 0x8b, 0x54, 0xde, 0xdd, 0x38, 0x71, 0x84, 0xb8, 0xdb, 0xd9, 0xf9,
	0xbe, 0x9d, 0xf1, 0x37, 0xdf, 0x18, 0x3c, 0x14, 0x82, 0x8b, 0xe9, 0xcd, 0xd1, 0x54, 0x70, 0xc5,
	0xfd, 0xba, 0x0d, 0x77, 0xdd, 0x09, 0x2a, 0x3a, 0xbf, 0xde, 0xdd, 0x1a, 0xf3, 0x31, 0xd7, 0xc7,
	0x57, 0xf9, 0xc9, 0xdc, 0x86, 0x77, 0xe0, 0xf4, 0xb9, 0xba, 0x42, 0x1a, 0xa3, 0xf0, 0xff, 0x83,
	0x86, 0xa0, 0x6c, 0x8c, 0x51, 0x12, 0x07, 0x95, 0xfd, 0xca, 0xe1, 0x06, 0xa9, 0xeb, 0xb8, 0x17,
	0xfb, 0x87, 0x50, 0xc5, 0x29, 0x1f, 0x7e, 0x09, 0xd6, 0xf6, 0x2b, 0x87, 0xcd, 0x13, 0xff, 0xc8,
	0xbe, 0x4d, 0xf2, 0xfc, 0x79, 0x9e, 0x21, 0x06, 0xe0, 0xbf, 0x80, 0x5a, 0xaa, 0x9f, 0x0b, 0xd6,
	0x35, 0xd4, 0x9d, 0x43, 0x3f, 0x23, 0x0a, 0x62, 0x73, 0x61, 0x17, 0x3c, 0x4d, 0xed, 0x73, 0x75,
	0xc1, 0x67, 0x2c, 0x7e, 0xa6, 0x76, 0x28, 0xc0, 0xbb, 0xc4, 0xac, 0xcf, 0x55, 0x8f, 0x69, 0x8e,
	0xdf, 0x86, 0xf5, 0x5b, 0xcc, 0x34, 0xcc, 0x25, 0xf9, 0xb1, 0xc4, 0x5e, 0x2b, 0x77, 0xfe, 0x3f,
	0x38, 0x52, 0x51, 0xa1, 0xa2, 0x9c, 0xb2, 0xae, 0x29, 0x0d, 0x7d, 0x71, 0x89, 0x99, 0xbf, 0x03,
	0x75, 0x64, 0xb1, 0x4e, 0x6d, 0xe8, 0x54, 0x0d, 0x59, 0x7c, 0x89, 0x59, 0xd8, 0x02, 0x77, 0xa0,
	0x68, 0x8a, 0x9f, 0xf8, 0x64, 0x42, 0x59, 0x1c, 0x3a, 0x50, 0xbf, 0x4e, 0x26, 0xc8, 0x67, 0x2a,
	0x04, 0x68, 0x10, 0x3a, 0x52, 0x17, 0x34, 0x49, 0xc3, 0x18, 0x40, 0xc3, 0xb4, 0x02, 0x7e, 0x17,
	0x1c, 0x9e, 0xc6, 0x91, 0xae, 0xac, 0xbb, 0x6b, 0x9e, 0x78, 0x25, 0xa1, 0x48, 0x83, 0xa7, 0xb1,
	0xf9, 0x86, 0x2e, 0x38, 0x0c, 0xef, 0x2d, 0x76, 0xed, 0x49, 0x2c, 0xc3, 0x7b, 0x7d, 0x0a, 0x8f,
	0x6d, 0x15, 0xc3, 0x3c, 0x80, 0xea, 0x33, 0x15, 0x4c, 0x2e, 0xbc, 0x86, 0x96, 0xa1, 0x20, 0x8d,
	0x7b, 0x2c, 0xc6, 0xaf, 0xfe, 0x1e, 0x80, 0x40, 0x1a, 0x47, 0x49, 0x1e, 0x59, 0x89, 0x1d, 0x51,
	0xa4, 0x0f, 0xc0, 0x13, 0x38, 0x4d, 0x93, 0x21, 0xb5, 0x08, 0x23, 0xa3, 0x6b, 0x2f, 0x35, 0x28,
	0x7c, 0x09, 0xee, 0x00, 0xc5, 0x1d, 0x8a, 0x9e, 0x3c, 0x9b, 0xc9, 0xcc, 0xdf, 0x86, 0x9a, 0x40,
	0x2a, 0x39, 0xd3, 0xef, 0x39, 0xc4, 0x46, 0x61, 0x0f, 0xbc, 0x73, 0xa6, 0x44, 0x76, 0xcd, 0xf9,
	0x15, 0x15, 0x63, 0x7c, 0xce, 0x59, 0x7b, 0x00, 0x98, 0x63, 0x23, 0x99, 0x3c, 0xa0, 0xad, 0xea,
	0xe8, 0x9b, 0x41, 0xf2, 0x80, 0xa1, 0x07, 0xcd, 0x3e, 0xbf, 0xc2, 0x91, 0x1a, 0x4c, 0xe9, 0x10,
	0xc3, 0x9f, 0x55, 0xa8, 0x9e, 0xe7, 0xfe, 0xf6, 0x03, 0xa8, 0x4f, 0x50, 0x4a, 0x6a, 0x85, 0x70,
	0xc8, 0x3c, 0xf4, 0x8f, 0x01, 0x18, 0x57, 0x91, 0x75, 0xe1, 0xdc, 0xb0, 0xf3, 0x25, 0x29, 0xec,
	0x4e, 0x1c, 0x56, 0x38, 0xff, 0x1d, 0x78, 0x32, 0x97, 0x2b, 0x1a, 0x9a, 0x79, 0x5b, 0xef, 0xfe,
	0x5b, 0xb0, 0x96, 0xcd, 0x40, 0x5c, 0xb9, 0x14, 0xf9, 0xa7, 0xb0, 0x69, 0xbe, 0x2d, 0x2f, 0x3a,
	0xca, 0xcd, 0xac, 0xbd, 0xd4, 0x3c, 0xd9, 0x2e, 0xd8, 0x25, 0xab, 0x13, 0x4f, 0x94, 0x9c, 0xff,
	0x01, 0xda, 0xb7, 0x98, 0x69, 0x76, 0xc2, 0xac, 0x21, 0xaa, 0x2b, 0x0f, 0x94, 0xfc, 0x4f, 0xbc,
	0xdb, 0xd2, 0x3a, 0xbc, 0x81, 0xa6, 0x69, 0xde, 0x6c, 0x68, 0x4d, 0x73, 0xff, 0x29, 0xb7, 0x6e,
	0x56, 0x14, 0xe4, 0xc2, 0xac, 0xef, 0xa1, 0x25, 0xf5, 0x2c, 0xa3, 0x44, 0x46, 0x37, 0x33, 0x99,
	0x05, 0xf5, 0xd5, 0x6f, 0x5e, 0x1a, 0x35, 0x71, 0xe5, 0xf2, 0xe0, 0x4f, 0x61, 0xd3, 0x0c, 0x4d,
	0x71, 0x1e, 0xa5, 0xf9, 0x88, 0x83, 0xc6, 0x4a, 0xcb, 0x25, 0x03, 0x10, 0x0f, 0x4b, 0x7e, 0xe8,
	0x42, 0x5d, 0x99, 0x75, 0x0a, 0x1c, 0xcd, 0x6b, 0x17, 0x3c, 0xbb, 0x66, 0x64, 0x0e, 0xf0, 0x8f,
	0xc0, 0x11, 0x74, 0xa4, 0xa2, 0x11, 0x4d, 0xd2, 0x00, 0x34, 0xfa, 0xef, 0x25, 0x65, 0xcd, 0x26,
	0x92, 0x86, 0xb0, 0xa7, 0x85, 0x1c, 0x46, 0xca, 0xe6, 0x53, 0x72, 0x18, 0x1d, 0x8d, 0x1c, 0x46,
	0xc4, 0x8f, 0xd0, 0xb6, 0xac, 0xc5, 0x92, 0xb8, 0x9a, 0xba, 0xb3, 0x42, 0x9d, 0xaf, 0x0c, 0x69,
	0xc9, 0xf2, 0x86, 0xbd, 0x05, 0x8f, 0xf1, 0x28, 0xc5, 0x91, 0x8a, 0x64, 0x6e, 0xd6, 0xc0, 0xd3,
	0xfc, 0xad, 0x25, 0xeb, 0x15, 0x46, 0x26, 0x4d, 0xb6, 0x08, 0xce, 0xda, 0xdf, 0x1f, 0x3b, 0x95,
	0x1f, 0x8f, 0x9d, 0xca, 0xaf, 0xc7, 0x4e, 0xe5, 0xdb, 0xef, 0xce, 0x5f, 0x37, 0x35, 0xfd, 0x7b,
	0x7e, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xac, 0xc6, 0xe5, 0xdc, 0x05, 0x00, 0x00,
}
