// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: taskpb.proto

/*
	Package taskpb is a generated protocol buffer package.

	It is generated from these files:
		taskpb.proto

	It has these top-level messages:
		TaskRangeMerge
		TaskRangeDelete
		TaskRangeLeaderTransfer
		TaskRangeAddPeer
		TaskRangeDelPeer
		Task
*/
package taskpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import metapb "model/pkg/metapb"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskType int32

const (
	TaskType_EmptyTask           TaskType = 0
	TaskType_RangeMerge          TaskType = 1
	TaskType_RangeDelete         TaskType = 2
	TaskType_RangeLeaderTransfer TaskType = 3
	TaskType_RangeAddPeer        TaskType = 4
	TaskType_RangeDelPeer        TaskType = 5
)

var TaskType_name = map[int32]string{
	0: "EmptyTask",
	1: "RangeMerge",
	2: "RangeDelete",
	3: "RangeLeaderTransfer",
	4: "RangeAddPeer",
	5: "RangeDelPeer",
}
var TaskType_value = map[string]int32{
	"EmptyTask":           0,
	"RangeMerge":          1,
	"RangeDelete":         2,
	"RangeLeaderTransfer": 3,
	"RangeAddPeer":        4,
	"RangeDelPeer":        5,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}
func (TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{0} }

// TODO range merge
type TaskRangeMerge struct {
}

func (m *TaskRangeMerge) Reset()                    { *m = TaskRangeMerge{} }
func (m *TaskRangeMerge) String() string            { return proto.CompactTextString(m) }
func (*TaskRangeMerge) ProtoMessage()               {}
func (*TaskRangeMerge) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{0} }

type TaskRangeDelete struct {
	RangeId uint64 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (m *TaskRangeDelete) Reset()                    { *m = TaskRangeDelete{} }
func (m *TaskRangeDelete) String() string            { return proto.CompactTextString(m) }
func (*TaskRangeDelete) ProtoMessage()               {}
func (*TaskRangeDelete) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{1} }

func (m *TaskRangeDelete) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type TaskRangeLeaderTransfer struct {
	ExpLeader *metapb.Peer `protobuf:"bytes,1,opt,name=exp_leader,json=expLeader" json:"exp_leader,omitempty"`
}

func (m *TaskRangeLeaderTransfer) Reset()                    { *m = TaskRangeLeaderTransfer{} }
func (m *TaskRangeLeaderTransfer) String() string            { return proto.CompactTextString(m) }
func (*TaskRangeLeaderTransfer) ProtoMessage()               {}
func (*TaskRangeLeaderTransfer) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{2} }

func (m *TaskRangeLeaderTransfer) GetExpLeader() *metapb.Peer {
	if m != nil {
		return m.ExpLeader
	}
	return nil
}

type TaskRangeAddPeer struct {
	Peer *metapb.Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TaskRangeAddPeer) Reset()                    { *m = TaskRangeAddPeer{} }
func (m *TaskRangeAddPeer) String() string            { return proto.CompactTextString(m) }
func (*TaskRangeAddPeer) ProtoMessage()               {}
func (*TaskRangeAddPeer) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{3} }

func (m *TaskRangeAddPeer) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type TaskRangeDelPeer struct {
	Peer *metapb.Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TaskRangeDelPeer) Reset()                    { *m = TaskRangeDelPeer{} }
func (m *TaskRangeDelPeer) String() string            { return proto.CompactTextString(m) }
func (*TaskRangeDelPeer) ProtoMessage()               {}
func (*TaskRangeDelPeer) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{4} }

func (m *TaskRangeDelPeer) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type Task struct {
	Type                TaskType                 `protobuf:"varint,1,opt,name=type,proto3,enum=taskpb.TaskType" json:"type,omitempty"`
	RangeMerge          *TaskRangeMerge          `protobuf:"bytes,2,opt,name=range_merge,json=rangeMerge" json:"range_merge,omitempty"`
	RangeDelete         *TaskRangeDelete         `protobuf:"bytes,3,opt,name=range_delete,json=rangeDelete" json:"range_delete,omitempty"`
	RangeLeaderTransfer *TaskRangeLeaderTransfer `protobuf:"bytes,4,opt,name=range_leader_transfer,json=rangeLeaderTransfer" json:"range_leader_transfer,omitempty"`
	RangeAddPeer        *TaskRangeAddPeer        `protobuf:"bytes,5,opt,name=range_add_peer,json=rangeAddPeer" json:"range_add_peer,omitempty"`
	RangeDelPeer        *TaskRangeDelPeer        `protobuf:"bytes,6,opt,name=range_del_peer,json=rangeDelPeer" json:"range_del_peer,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorTaskpb, []int{5} }

func (m *Task) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_EmptyTask
}

func (m *Task) GetRangeMerge() *TaskRangeMerge {
	if m != nil {
		return m.RangeMerge
	}
	return nil
}

func (m *Task) GetRangeDelete() *TaskRangeDelete {
	if m != nil {
		return m.RangeDelete
	}
	return nil
}

func (m *Task) GetRangeLeaderTransfer() *TaskRangeLeaderTransfer {
	if m != nil {
		return m.RangeLeaderTransfer
	}
	return nil
}

func (m *Task) GetRangeAddPeer() *TaskRangeAddPeer {
	if m != nil {
		return m.RangeAddPeer
	}
	return nil
}

func (m *Task) GetRangeDelPeer() *TaskRangeDelPeer {
	if m != nil {
		return m.RangeDelPeer
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskRangeMerge)(nil), "taskpb.TaskRangeMerge")
	proto.RegisterType((*TaskRangeDelete)(nil), "taskpb.TaskRangeDelete")
	proto.RegisterType((*TaskRangeLeaderTransfer)(nil), "taskpb.TaskRangeLeaderTransfer")
	proto.RegisterType((*TaskRangeAddPeer)(nil), "taskpb.TaskRangeAddPeer")
	proto.RegisterType((*TaskRangeDelPeer)(nil), "taskpb.TaskRangeDelPeer")
	proto.RegisterType((*Task)(nil), "taskpb.Task")
	proto.RegisterEnum("taskpb.TaskType", TaskType_name, TaskType_value)
}
func (m *TaskRangeMerge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRangeMerge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TaskRangeDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRangeDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *TaskRangeLeaderTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRangeLeaderTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExpLeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.ExpLeader.Size()))
		n1, err := m.ExpLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TaskRangeAddPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRangeAddPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.Peer.Size()))
		n2, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TaskRangeDelPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRangeDelPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.Peer.Size()))
		n3, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.Type))
	}
	if m.RangeMerge != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeMerge.Size()))
		n4, err := m.RangeMerge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.RangeDelete != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeDelete.Size()))
		n5, err := m.RangeDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.RangeLeaderTransfer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeLeaderTransfer.Size()))
		n6, err := m.RangeLeaderTransfer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.RangeAddPeer != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeAddPeer.Size()))
		n7, err := m.RangeAddPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.RangeDelPeer != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTaskpb(dAtA, i, uint64(m.RangeDelPeer.Size()))
		n8, err := m.RangeDelPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeVarintTaskpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskRangeMerge) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TaskRangeDelete) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovTaskpb(uint64(m.RangeId))
	}
	return n
}

func (m *TaskRangeLeaderTransfer) Size() (n int) {
	var l int
	_ = l
	if m.ExpLeader != nil {
		l = m.ExpLeader.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	return n
}

func (m *TaskRangeAddPeer) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	return n
}

func (m *TaskRangeDelPeer) Size() (n int) {
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTaskpb(uint64(m.Type))
	}
	if m.RangeMerge != nil {
		l = m.RangeMerge.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	if m.RangeDelete != nil {
		l = m.RangeDelete.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	if m.RangeLeaderTransfer != nil {
		l = m.RangeLeaderTransfer.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	if m.RangeAddPeer != nil {
		l = m.RangeAddPeer.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	if m.RangeDelPeer != nil {
		l = m.RangeDelPeer.Size()
		n += 1 + l + sovTaskpb(uint64(l))
	}
	return n
}

func sovTaskpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTaskpb(x uint64) (n int) {
	return sovTaskpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskRangeMerge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRangeMerge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRangeMerge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRangeDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRangeDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRangeDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRangeLeaderTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRangeLeaderTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRangeLeaderTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpLeader == nil {
				m.ExpLeader = &metapb.Peer{}
			}
			if err := m.ExpLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRangeAddPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRangeAddPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRangeAddPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &metapb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRangeDelPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRangeDelPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRangeDelPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &metapb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TaskType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMerge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeMerge == nil {
				m.RangeMerge = &TaskRangeMerge{}
			}
			if err := m.RangeMerge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeDelete == nil {
				m.RangeDelete = &TaskRangeDelete{}
			}
			if err := m.RangeDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeLeaderTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeLeaderTransfer == nil {
				m.RangeLeaderTransfer = &TaskRangeLeaderTransfer{}
			}
			if err := m.RangeLeaderTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeAddPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeAddPeer == nil {
				m.RangeAddPeer = &TaskRangeAddPeer{}
			}
			if err := m.RangeAddPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeDelPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeDelPeer == nil {
				m.RangeDelPeer = &TaskRangeDelPeer{}
			}
			if err := m.RangeDelPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTaskpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTaskpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTaskpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTaskpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("taskpb.proto", fileDescriptorTaskpb) }

var fileDescriptorTaskpb = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6b, 0x1a, 0x41,
	0x14, 0xc7, 0x5d, 0x5d, 0xad, 0x3e, 0xb7, 0xeb, 0x30, 0xb6, 0x75, 0xeb, 0x61, 0x2b, 0x4b, 0x0f,
	0xa5, 0x2d, 0x16, 0x6c, 0xa1, 0xd0, 0x43, 0xa1, 0xc5, 0x04, 0x02, 0x09, 0x84, 0x89, 0xf7, 0x65,
	0x65, 0x5e, 0x96, 0xe0, 0xea, 0x0e, 0xe3, 0x42, 0xf4, 0x9b, 0xe4, 0x23, 0xe5, 0x98, 0x8f, 0x10,
	0xcc, 0x77, 0xc8, 0x39, 0xec, 0xcc, 0xb8, 0x2a, 0x2a, 0xe4, 0x36, 0xf3, 0xde, 0xfc, 0xfe, 0x3b,
	0xf3, 0x7b, 0x0b, 0x4e, 0x16, 0xcd, 0x27, 0x62, 0xdc, 0x17, 0x32, 0xcd, 0x52, 0x5a, 0xd3, 0xbb,
	0xae, 0x33, 0xc5, 0x2c, 0x5a, 0x57, 0xbb, 0xef, 0xe2, 0x34, 0x4e, 0xd5, 0xf2, 0x47, 0xbe, 0xd2,
	0xd5, 0x80, 0x80, 0x3b, 0x8a, 0xe6, 0x13, 0x16, 0xcd, 0x62, 0xbc, 0x40, 0x19, 0x63, 0xf0, 0x1d,
	0x5a, 0x45, 0x65, 0x88, 0x09, 0x66, 0x48, 0x3f, 0x42, 0x5d, 0xe6, 0xdb, 0xf0, 0x86, 0x7b, 0x56,
	0xcf, 0xfa, 0x62, 0xb3, 0x37, 0x6a, 0x7f, 0xc6, 0x83, 0x53, 0xe8, 0x14, 0xa7, 0xcf, 0x31, 0xe2,
	0x28, 0x47, 0x32, 0x9a, 0xcd, 0xaf, 0x51, 0xd2, 0x6f, 0x00, 0xb8, 0x10, 0x61, 0xa2, 0xaa, 0x8a,
	0x6b, 0x0e, 0x9c, 0xbe, 0xb9, 0xd3, 0x25, 0xa2, 0x64, 0x0d, 0x5c, 0x08, 0x0d, 0x05, 0xbf, 0x80,
	0x14, 0x39, 0xff, 0x38, 0xcf, 0xdb, 0xb4, 0x07, 0xb6, 0xc0, 0x23, 0xa8, 0xea, 0xec, 0x50, 0x43,
	0x4c, 0x5e, 0x49, 0x3d, 0x97, 0xc1, 0xce, 0x31, 0xfa, 0x19, 0xec, 0x6c, 0x29, 0x50, 0x1d, 0x75,
	0x07, 0xa4, 0x6f, 0x2c, 0xe6, 0xbd, 0xd1, 0x52, 0x20, 0x53, 0x5d, 0xfa, 0x1b, 0x9a, 0xfa, 0xf5,
	0xd3, 0xdc, 0x8f, 0x57, 0x56, 0xb9, 0x1f, 0xb6, 0x0f, 0x6f, 0xec, 0x31, 0x90, 0xc5, 0x9a, 0xfe,
	0x01, 0x47, 0x83, 0x5c, 0x69, 0xf4, 0x2a, 0x8a, 0xec, 0xec, 0x91, 0xda, 0x32, 0xd3, 0x5f, 0x31,
	0xca, 0xaf, 0xe0, 0xbd, 0x66, 0xb5, 0xbe, 0x30, 0x33, 0x56, 0x3d, 0x5b, 0x85, 0x7c, 0xda, 0x0b,
	0xd9, 0x95, 0xcf, 0xda, 0xf2, 0xc0, 0x44, 0xfe, 0x82, 0xab, 0x43, 0x23, 0xce, 0x43, 0x25, 0xa9,
	0xaa, 0xd2, 0xbc, 0xbd, 0x34, 0x33, 0x02, 0xa6, 0x1f, 0xb0, 0x1e, 0x48, 0xc1, 0x73, 0x4c, 0x34,
	0x5f, 0x3b, 0xc2, 0x9b, 0x61, 0x18, 0xde, 0xec, 0xbe, 0xde, 0x42, 0x7d, 0xed, 0x96, 0xbe, 0x85,
	0xc6, 0xc9, 0x54, 0x64, 0xcb, 0xbc, 0x40, 0x4a, 0xd4, 0x05, 0xd8, 0x58, 0x24, 0x16, 0x6d, 0x41,
	0x73, 0xcb, 0x0d, 0x29, 0xd3, 0x0e, 0xb4, 0x0f, 0xbc, 0x93, 0x54, 0x28, 0x01, 0x67, 0xfb, 0xca,
	0xc4, 0x2e, 0x2a, 0xe6, 0xb3, 0xa4, 0xfa, 0x9f, 0xdc, 0xaf, 0x7c, 0xeb, 0x61, 0xe5, 0x5b, 0x8f,
	0x2b, 0xdf, 0xba, 0x7b, 0xf2, 0x4b, 0xe3, 0x9a, 0xfa, 0xfd, 0x7f, 0xbe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xcc, 0xc9, 0x16, 0xe0, 0x3a, 0x03, 0x00, 0x00,
}
