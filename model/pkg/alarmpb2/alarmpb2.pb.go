// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alarmpb2.proto

/*
	Package alarmpb2 is a generated protocol buffer package.

	It is generated from these files:
		alarmpb2.proto

	It has these top-level messages:
		AlarmRequest
		RequestHeader
		RuleAlarmRequest
		AppHeartbeatRequest
		AppNotAliveRequest
		GatewaySlowLogRequest
		GatewayErrorLogRequest
		GatewayInputOpsRequest
		AlarmResponse
		ResponseHeader
*/
package alarmpb2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AlarmResponseCode int32

const (
	AlarmResponseCode_OK    AlarmResponseCode = 0
	AlarmResponseCode_ERROR AlarmResponseCode = 1
)

var AlarmResponseCode_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var AlarmResponseCode_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x AlarmResponseCode) String() string {
	return proto.EnumName(AlarmResponseCode_name, int32(x))
}
func (AlarmResponseCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{0} }

type AlarmType int32

const (
	AlarmType_INVALID          AlarmType = 0
	AlarmType_APP_HEARTBEAT    AlarmType = 1
	AlarmType_RULE_ALARM       AlarmType = 2
	AlarmType_APP_NOT_ALIVE    AlarmType = 3
	AlarmType_GATEWAY_SLOWLOG  AlarmType = 4
	AlarmType_GATEWAY_ERRORLOG AlarmType = 5
)

var AlarmType_name = map[int32]string{
	0: "INVALID",
	1: "APP_HEARTBEAT",
	2: "RULE_ALARM",
	3: "APP_NOT_ALIVE",
	4: "GATEWAY_SLOWLOG",
	5: "GATEWAY_ERRORLOG",
}
var AlarmType_value = map[string]int32{
	"INVALID":          0,
	"APP_HEARTBEAT":    1,
	"RULE_ALARM":       2,
	"APP_NOT_ALIVE":    3,
	"GATEWAY_SLOWLOG":  4,
	"GATEWAY_ERRORLOG": 5,
}

func (x AlarmType) String() string {
	return proto.EnumName(AlarmType_name, int32(x))
}
func (AlarmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{1} }

type AlarmValueCompareType int32

const (
	AlarmValueCompareType_EQUAL            AlarmValueCompareType = 0
	AlarmValueCompareType_GREATER_THAN     AlarmValueCompareType = 1
	AlarmValueCompareType_LESS_THAN        AlarmValueCompareType = 2
	AlarmValueCompareType_NOT_EQUAL        AlarmValueCompareType = 3
	AlarmValueCompareType_NOT_GREATER_THAN AlarmValueCompareType = 4
	AlarmValueCompareType_NOT_LESS_THAN    AlarmValueCompareType = 5
)

var AlarmValueCompareType_name = map[int32]string{
	0: "EQUAL",
	1: "GREATER_THAN",
	2: "LESS_THAN",
	3: "NOT_EQUAL",
	4: "NOT_GREATER_THAN",
	5: "NOT_LESS_THAN",
}
var AlarmValueCompareType_value = map[string]int32{
	"EQUAL":            0,
	"GREATER_THAN":     1,
	"LESS_THAN":        2,
	"NOT_EQUAL":        3,
	"NOT_GREATER_THAN": 4,
	"NOT_LESS_THAN":    5,
}

func (x AlarmValueCompareType) String() string {
	return proto.EnumName(AlarmValueCompareType_name, int32(x))
}
func (AlarmValueCompareType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{2} }

// request
type AlarmRequest struct {
	Header       *RequestHeader       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	RuleAlarm    *RuleAlarmRequest    `protobuf:"bytes,2,opt,name=rule_alarm,json=ruleAlarm" json:"rule_alarm,omitempty"`
	AppHeartbeat *AppHeartbeatRequest `protobuf:"bytes,3,opt,name=app_heartbeat,json=appHeartbeat" json:"app_heartbeat,omitempty"`
}

func (m *AlarmRequest) Reset()                    { *m = AlarmRequest{} }
func (m *AlarmRequest) String() string            { return proto.CompactTextString(m) }
func (*AlarmRequest) ProtoMessage()               {}
func (*AlarmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{0} }

func (m *AlarmRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AlarmRequest) GetRuleAlarm() *RuleAlarmRequest {
	if m != nil {
		return m.RuleAlarm
	}
	return nil
}

func (m *AlarmRequest) GetAppHeartbeat() *AppHeartbeatRequest {
	if m != nil {
		return m.AppHeartbeat
	}
	return nil
}

type RequestHeader struct {
	Type      AlarmType `protobuf:"varint,1,opt,name=type,proto3,enum=alarmpb2.AlarmType" json:"type,omitempty"`
	ClusterId int64     `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	IpAddr    string    `protobuf:"bytes,3,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	AppName   string    `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{1} }

func (m *RequestHeader) GetType() AlarmType {
	if m != nil {
		return m.Type
	}
	return AlarmType_INVALID
}

func (m *RequestHeader) GetClusterId() int64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RequestHeader) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *RequestHeader) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

//
type RuleAlarmRequest struct {
	RuleName   string                `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	AlarmValue float64               `protobuf:"fixed64,2,opt,name=alarm_value,json=alarmValue,proto3" json:"alarm_value,omitempty"`
	CmpType    AlarmValueCompareType `protobuf:"varint,3,opt,name=cmp_type,json=cmpType,proto3,enum=alarmpb2.AlarmValueCompareType" json:"cmp_type,omitempty"`
	Remark     []string              `protobuf:"bytes,4,rep,name=remark" json:"remark,omitempty"`
}

func (m *RuleAlarmRequest) Reset()                    { *m = RuleAlarmRequest{} }
func (m *RuleAlarmRequest) String() string            { return proto.CompactTextString(m) }
func (*RuleAlarmRequest) ProtoMessage()               {}
func (*RuleAlarmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{2} }

func (m *RuleAlarmRequest) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *RuleAlarmRequest) GetAlarmValue() float64 {
	if m != nil {
		return m.AlarmValue
	}
	return 0
}

func (m *RuleAlarmRequest) GetCmpType() AlarmValueCompareType {
	if m != nil {
		return m.CmpType
	}
	return AlarmValueCompareType_EQUAL
}

func (m *RuleAlarmRequest) GetRemark() []string {
	if m != nil {
		return m.Remark
	}
	return nil
}

//
type AppHeartbeatRequest struct {
	HbIntervalTime int64 `protobuf:"varint,1,opt,name=hb_interval_time,json=hbIntervalTime,proto3" json:"hb_interval_time,omitempty"`
}

func (m *AppHeartbeatRequest) Reset()                    { *m = AppHeartbeatRequest{} }
func (m *AppHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*AppHeartbeatRequest) ProtoMessage()               {}
func (*AppHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{3} }

func (m *AppHeartbeatRequest) GetHbIntervalTime() int64 {
	if m != nil {
		return m.HbIntervalTime
	}
	return 0
}

//
type AppNotAliveRequest struct {
	AppName        string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	AliveCheckTime string `protobuf:"bytes,2,opt,name=alive_check_time,json=aliveCheckTime,proto3" json:"alive_check_time,omitempty"`
}

func (m *AppNotAliveRequest) Reset()                    { *m = AppNotAliveRequest{} }
func (m *AppNotAliveRequest) String() string            { return proto.CompactTextString(m) }
func (*AppNotAliveRequest) ProtoMessage()               {}
func (*AppNotAliveRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{4} }

func (m *AppNotAliveRequest) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AppNotAliveRequest) GetAliveCheckTime() string {
	if m != nil {
		return m.AliveCheckTime
	}
	return ""
}

//
type GatewaySlowLogRequest struct {
	SlowLog []string `protobuf:"bytes,1,rep,name=slow_log,json=slowLog" json:"slow_log,omitempty"`
}

func (m *GatewaySlowLogRequest) Reset()                    { *m = GatewaySlowLogRequest{} }
func (m *GatewaySlowLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewaySlowLogRequest) ProtoMessage()               {}
func (*GatewaySlowLogRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{5} }

func (m *GatewaySlowLogRequest) GetSlowLog() []string {
	if m != nil {
		return m.SlowLog
	}
	return nil
}

//
type GatewayErrorLogRequest struct {
	ErrorLog []string `protobuf:"bytes,1,rep,name=error_log,json=errorLog" json:"error_log,omitempty"`
}

func (m *GatewayErrorLogRequest) Reset()                    { *m = GatewayErrorLogRequest{} }
func (m *GatewayErrorLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayErrorLogRequest) ProtoMessage()               {}
func (*GatewayErrorLogRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{6} }

func (m *GatewayErrorLogRequest) GetErrorLog() []string {
	if m != nil {
		return m.ErrorLog
	}
	return nil
}

//
type GatewayInputOpsRequest struct {
	AlarmValue float64               `protobuf:"fixed64,1,opt,name=alarm_value,json=alarmValue,proto3" json:"alarm_value,omitempty"`
	CmpType    AlarmValueCompareType `protobuf:"varint,2,opt,name=cmp_type,json=cmpType,proto3,enum=alarmpb2.AlarmValueCompareType" json:"cmp_type,omitempty"`
}

func (m *GatewayInputOpsRequest) Reset()                    { *m = GatewayInputOpsRequest{} }
func (m *GatewayInputOpsRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayInputOpsRequest) ProtoMessage()               {}
func (*GatewayInputOpsRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{7} }

func (m *GatewayInputOpsRequest) GetAlarmValue() float64 {
	if m != nil {
		return m.AlarmValue
	}
	return 0
}

func (m *GatewayInputOpsRequest) GetCmpType() AlarmValueCompareType {
	if m != nil {
		return m.CmpType
	}
	return AlarmValueCompareType_EQUAL
}

// response
type AlarmResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AlarmResponse) Reset()                    { *m = AlarmResponse{} }
func (m *AlarmResponse) String() string            { return proto.CompactTextString(m) }
func (*AlarmResponse) ProtoMessage()               {}
func (*AlarmResponse) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{8} }

func (m *AlarmResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type ResponseHeader struct {
	Code  AlarmResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=alarmpb2.AlarmResponseCode" json:"code,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb2, []int{9} }

func (m *ResponseHeader) GetCode() AlarmResponseCode {
	if m != nil {
		return m.Code
	}
	return AlarmResponseCode_OK
}

func (m *ResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*AlarmRequest)(nil), "alarmpb2.AlarmRequest")
	proto.RegisterType((*RequestHeader)(nil), "alarmpb2.RequestHeader")
	proto.RegisterType((*RuleAlarmRequest)(nil), "alarmpb2.RuleAlarmRequest")
	proto.RegisterType((*AppHeartbeatRequest)(nil), "alarmpb2.AppHeartbeatRequest")
	proto.RegisterType((*AppNotAliveRequest)(nil), "alarmpb2.AppNotAliveRequest")
	proto.RegisterType((*GatewaySlowLogRequest)(nil), "alarmpb2.GatewaySlowLogRequest")
	proto.RegisterType((*GatewayErrorLogRequest)(nil), "alarmpb2.GatewayErrorLogRequest")
	proto.RegisterType((*GatewayInputOpsRequest)(nil), "alarmpb2.GatewayInputOpsRequest")
	proto.RegisterType((*AlarmResponse)(nil), "alarmpb2.AlarmResponse")
	proto.RegisterType((*ResponseHeader)(nil), "alarmpb2.ResponseHeader")
	proto.RegisterEnum("alarmpb2.AlarmResponseCode", AlarmResponseCode_name, AlarmResponseCode_value)
	proto.RegisterEnum("alarmpb2.AlarmType", AlarmType_name, AlarmType_value)
	proto.RegisterEnum("alarmpb2.AlarmValueCompareType", AlarmValueCompareType_name, AlarmValueCompareType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Alarm service

type AlarmClient interface {
	Alarm(ctx context.Context, in *AlarmRequest, opts ...grpc.CallOption) (*AlarmResponse, error)
}

type alarmClient struct {
	cc *grpc.ClientConn
}

func NewAlarmClient(cc *grpc.ClientConn) AlarmClient {
	return &alarmClient{cc}
}

func (c *alarmClient) Alarm(ctx context.Context, in *AlarmRequest, opts ...grpc.CallOption) (*AlarmResponse, error) {
	out := new(AlarmResponse)
	err := grpc.Invoke(ctx, "/alarmpb2.Alarm/Alarm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Alarm service

type AlarmServer interface {
	Alarm(context.Context, *AlarmRequest) (*AlarmResponse, error)
}

func RegisterAlarmServer(s *grpc.Server, srv AlarmServer) {
	s.RegisterService(&_Alarm_serviceDesc, srv)
}

func _Alarm_Alarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).Alarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alarmpb2.Alarm/Alarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).Alarm(ctx, req.(*AlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Alarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alarmpb2.Alarm",
	HandlerType: (*AlarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alarm",
			Handler:    _Alarm_Alarm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alarmpb2.proto",
}

func (m *AlarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlarmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RuleAlarm != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.RuleAlarm.Size()))
		n2, err := m.RuleAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AppHeartbeat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.AppHeartbeat.Size()))
		n3, err := m.AppHeartbeat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.Type))
	}
	if m.ClusterId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.ClusterId))
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	return i, nil
}

func (m *RuleAlarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleAlarmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RuleName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.RuleName)))
		i += copy(dAtA[i:], m.RuleName)
	}
	if m.AlarmValue != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AlarmValue))))
		i += 8
	}
	if m.CmpType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.CmpType))
	}
	if len(m.Remark) > 0 {
		for _, s := range m.Remark {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AppHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HbIntervalTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.HbIntervalTime))
	}
	return i, nil
}

func (m *AppNotAliveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppNotAliveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.AliveCheckTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.AliveCheckTime)))
		i += copy(dAtA[i:], m.AliveCheckTime)
	}
	return i, nil
}

func (m *GatewaySlowLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewaySlowLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SlowLog) > 0 {
		for _, s := range m.SlowLog {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GatewayErrorLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayErrorLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrorLog) > 0 {
		for _, s := range m.ErrorLog {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GatewayInputOpsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayInputOpsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AlarmValue != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AlarmValue))))
		i += 8
	}
	if m.CmpType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.CmpType))
	}
	return i, nil
}

func (m *AlarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlarmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb2(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintAlarmpb2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AlarmRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	if m.RuleAlarm != nil {
		l = m.RuleAlarm.Size()
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	if m.AppHeartbeat != nil {
		l = m.AppHeartbeat.Size()
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAlarmpb2(uint64(m.Type))
	}
	if m.ClusterId != 0 {
		n += 1 + sovAlarmpb2(uint64(m.ClusterId))
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	return n
}

func (m *RuleAlarmRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	if m.AlarmValue != 0 {
		n += 9
	}
	if m.CmpType != 0 {
		n += 1 + sovAlarmpb2(uint64(m.CmpType))
	}
	if len(m.Remark) > 0 {
		for _, s := range m.Remark {
			l = len(s)
			n += 1 + l + sovAlarmpb2(uint64(l))
		}
	}
	return n
}

func (m *AppHeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	if m.HbIntervalTime != 0 {
		n += 1 + sovAlarmpb2(uint64(m.HbIntervalTime))
	}
	return n
}

func (m *AppNotAliveRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	l = len(m.AliveCheckTime)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	return n
}

func (m *GatewaySlowLogRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.SlowLog) > 0 {
		for _, s := range m.SlowLog {
			l = len(s)
			n += 1 + l + sovAlarmpb2(uint64(l))
		}
	}
	return n
}

func (m *GatewayErrorLogRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ErrorLog) > 0 {
		for _, s := range m.ErrorLog {
			l = len(s)
			n += 1 + l + sovAlarmpb2(uint64(l))
		}
	}
	return n
}

func (m *GatewayInputOpsRequest) Size() (n int) {
	var l int
	_ = l
	if m.AlarmValue != 0 {
		n += 9
	}
	if m.CmpType != 0 {
		n += 1 + sovAlarmpb2(uint64(m.CmpType))
	}
	return n
}

func (m *AlarmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAlarmpb2(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovAlarmpb2(uint64(l))
	}
	return n
}

func sovAlarmpb2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAlarmpb2(x uint64) (n int) {
	return sovAlarmpb2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuleAlarm == nil {
				m.RuleAlarm = &RuleAlarmRequest{}
			}
			if err := m.RuleAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHeartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppHeartbeat == nil {
				m.AppHeartbeat = &AppHeartbeatRequest{}
			}
			if err := m.AppHeartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AlarmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleAlarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleAlarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleAlarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AlarmValue = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpType", wireType)
			}
			m.CmpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmpType |= (AlarmValueCompareType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = append(m.Remark, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HbIntervalTime", wireType)
			}
			m.HbIntervalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HbIntervalTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppNotAliveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppNotAliveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppNotAliveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveCheckTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliveCheckTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewaySlowLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewaySlowLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewaySlowLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlowLog = append(m.SlowLog, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayErrorLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayErrorLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayErrorLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorLog = append(m.ErrorLog, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayInputOpsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayInputOpsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayInputOpsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AlarmValue = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmpType", wireType)
			}
			m.CmpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmpType |= (AlarmValueCompareType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (AlarmResponseCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarmpb2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarmpb2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmpb2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAlarmpb2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlarmpb2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlarmpb2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlarmpb2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarmpb2   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("alarmpb2.proto", fileDescriptorAlarmpb2) }

var fileDescriptorAlarmpb2 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0x36, 0xfd, 0xef, 0x49, 0xec, 0x6a, 0x99, 0x6c, 0xe2, 0x26, 0x58, 0xef, 0x42, 0x87, 0x76,
	0x91, 0x43, 0x52, 0xb8, 0xe8, 0xa1, 0xb9, 0x14, 0x8c, 0x2b, 0xd8, 0x46, 0x55, 0x3b, 0xa5, 0x95,
	0x04, 0x39, 0x09, 0xb4, 0x45, 0xd8, 0x46, 0x24, 0x8b, 0xa5, 0xe5, 0x04, 0x46, 0x1f, 0xa1, 0x2f,
	0xd0, 0x07, 0xe8, 0x73, 0xf4, 0xdc, 0x63, 0x1f, 0xa1, 0x48, 0x5f, 0xa4, 0x20, 0x25, 0x25, 0xb2,
	0x93, 0x16, 0xd8, 0x1b, 0xe7, 0x9b, 0xef, 0x1b, 0x7e, 0x33, 0x23, 0x0a, 0x1a, 0xcc, 0x67, 0x32,
	0x10, 0xe3, 0xf6, 0xa9, 0x90, 0x61, 0x14, 0xe2, 0x6a, 0x1a, 0x1f, 0xed, 0x4f, 0xc3, 0x69, 0xa8,
	0xc1, 0x33, 0x75, 0x8a, 0xf3, 0xe6, 0x1f, 0x08, 0x76, 0x89, 0xa2, 0x50, 0xfe, 0xf3, 0x8a, 0x2f,
	0x23, 0x7c, 0x06, 0xe5, 0x19, 0x67, 0x1e, 0x97, 0x4d, 0xf4, 0x01, 0x7d, 0xdc, 0x69, 0x1f, 0x9e,
	0x3e, 0x55, 0x4c, 0x28, 0x3d, 0x9d, 0xa6, 0x09, 0x0d, 0x7f, 0x0b, 0x20, 0x57, 0x3e, 0x77, 0x35,
	0xad, 0x99, 0xd7, 0xa2, 0xa3, 0x8c, 0x68, 0xe5, 0xf3, 0xec, 0x05, 0xb4, 0x26, 0x53, 0x04, 0x5f,
	0x40, 0x9d, 0x09, 0xe1, 0xce, 0x38, 0x93, 0xd1, 0x98, 0xb3, 0xa8, 0x59, 0xd0, 0xea, 0x77, 0xcf,
	0x6a, 0x22, 0x44, 0x2f, 0xcd, 0xa6, 0x05, 0x76, 0x59, 0x06, 0x34, 0x7f, 0x45, 0x50, 0xdf, 0x30,
	0x86, 0xbf, 0x84, 0x62, 0xb4, 0x16, 0x5c, 0xfb, 0x6f, 0xb4, 0xf7, 0x32, 0xc5, 0xd4, 0xc1, 0x59,
	0x0b, 0x4e, 0x35, 0x01, 0xbf, 0x03, 0x98, 0xf8, 0xab, 0x65, 0xc4, 0xa5, 0x3b, 0xf7, 0xb4, 0xf3,
	0x02, 0xad, 0x25, 0x48, 0xdf, 0xc3, 0x87, 0x50, 0x99, 0x0b, 0x97, 0x79, 0x9e, 0xd4, 0xbe, 0x6a,
	0xb4, 0x3c, 0x17, 0xc4, 0xf3, 0x24, 0xfe, 0x1c, 0xaa, 0xca, 0xf6, 0x82, 0x05, 0xbc, 0x59, 0xd4,
	0x99, 0x0a, 0x13, 0x62, 0xc0, 0x02, 0x6e, 0xfe, 0x8e, 0xc0, 0xd8, 0xee, 0x18, 0x1f, 0x83, 0xee,
	0x39, 0x16, 0x20, 0x2d, 0xa8, 0x2a, 0x40, 0x29, 0xf0, 0x7b, 0xd8, 0xd1, 0x06, 0xdd, 0x7b, 0xe6,
	0xaf, 0xb8, 0x76, 0x81, 0x28, 0x68, 0xe8, 0x5a, 0x21, 0xf8, 0x1c, 0xaa, 0x93, 0x40, 0xb8, 0xba,
	0xa5, 0x82, 0x6e, 0xe9, 0xfd, 0x56, 0x4b, 0x9a, 0xd7, 0x09, 0x03, 0xc1, 0x24, 0xd7, 0xed, 0x55,
	0x26, 0x81, 0x50, 0x07, 0x7c, 0x00, 0x65, 0xc9, 0x03, 0x26, 0xef, 0x9a, 0xc5, 0x0f, 0x05, 0xd5,
	0x41, 0x1c, 0x99, 0xdf, 0xc1, 0xde, 0x2b, 0x93, 0xc5, 0x1f, 0xc1, 0x98, 0x8d, 0xdd, 0xf9, 0x22,
	0xe2, 0xf2, 0x9e, 0xf9, 0x6e, 0x34, 0x4f, 0xfc, 0x16, 0x68, 0x63, 0x36, 0xee, 0x27, 0xb0, 0x33,
	0x0f, 0xb8, 0x79, 0x0b, 0x98, 0x08, 0x31, 0x08, 0x23, 0xe2, 0xcf, 0xef, 0x79, 0xaa, 0xcf, 0x0e,
	0x06, 0x6d, 0x0c, 0x46, 0x95, 0x66, 0x8a, 0xea, 0x4e, 0x66, 0x7c, 0x72, 0x17, 0x97, 0xce, 0x6b,
	0x4a, 0x43, 0xe3, 0x1d, 0x05, 0xeb, 0xd2, 0x6d, 0x78, 0xdb, 0x65, 0x11, 0x7f, 0x60, 0xeb, 0x91,
	0x1f, 0x3e, 0xd8, 0xe1, 0x34, 0x53, 0x7d, 0xe9, 0x87, 0x0f, 0xae, 0x1f, 0x4e, 0x9b, 0x48, 0xb7,
	0x53, 0x59, 0xc6, 0x0c, 0xf3, 0x1b, 0x38, 0x48, 0x34, 0x96, 0x94, 0xa1, 0xcc, 0x88, 0x8e, 0xa1,
	0xc6, 0x15, 0x94, 0x51, 0x55, 0x79, 0xc2, 0x31, 0x57, 0x4f, 0xb2, 0xfe, 0x42, 0xac, 0xa2, 0xa1,
	0x58, 0xa6, 0xb2, 0xad, 0xad, 0xa0, 0xff, 0xdd, 0x4a, 0xfe, 0xd3, 0xb6, 0x62, 0x12, 0xa8, 0x27,
	0xdf, 0xc7, 0x52, 0x84, 0x8b, 0x25, 0xc7, 0x5f, 0x6d, 0xbd, 0xb9, 0x66, 0xf6, 0xcd, 0xc5, 0x9c,
	0xcd, 0x47, 0x67, 0xde, 0x40, 0x63, 0x33, 0x83, 0xcf, 0xa0, 0x38, 0x09, 0xbd, 0xf4, 0xab, 0x3f,
	0xde, 0x32, 0x93, 0x92, 0x3b, 0xa1, 0xc7, 0xa9, 0x26, 0xe2, 0x7d, 0x28, 0xe9, 0x41, 0x24, 0x6b,
	0x88, 0x83, 0x93, 0x2f, 0xe0, 0xcd, 0x0b, 0x01, 0x2e, 0x43, 0x7e, 0xf8, 0x83, 0x91, 0xc3, 0x35,
	0x28, 0x59, 0x94, 0x0e, 0xa9, 0x81, 0x4e, 0xd6, 0x50, 0x7b, 0x7a, 0x4e, 0x78, 0x07, 0x2a, 0xfd,
	0xc1, 0x35, 0xb1, 0xfb, 0xdf, 0x1b, 0x39, 0xfc, 0x06, 0xea, 0xe4, 0xf2, 0xd2, 0xed, 0x59, 0x84,
	0x3a, 0x17, 0x16, 0x71, 0x0c, 0x84, 0x1b, 0x00, 0xf4, 0xca, 0xb6, 0x5c, 0x62, 0x13, 0xfa, 0xa3,
	0x91, 0x4f, 0x29, 0x83, 0xa1, 0xe3, 0x12, 0xbb, 0x7f, 0x6d, 0x19, 0x05, 0xbc, 0x07, 0x9f, 0x75,
	0x89, 0x63, 0xdd, 0x90, 0x5b, 0x77, 0x64, 0x0f, 0x6f, 0xec, 0x61, 0xd7, 0x28, 0xe2, 0x7d, 0x30,
	0x52, 0x50, 0xdf, 0xab, 0xd0, 0xd2, 0xc9, 0x2f, 0xf0, 0xf6, 0xd5, 0x01, 0x6b, 0x7b, 0x3f, 0x5d,
	0x11, 0xdb, 0xc8, 0x61, 0x03, 0x76, 0xbb, 0xd4, 0x22, 0x8e, 0x45, 0x5d, 0xa7, 0x47, 0x06, 0x06,
	0xc2, 0x75, 0xa8, 0xd9, 0xd6, 0x68, 0x14, 0x87, 0x79, 0x15, 0xaa, 0xeb, 0x63, 0x7e, 0x41, 0xdd,
	0xa4, 0xc2, 0x0d, 0x4d, 0x51, 0xf9, 0x54, 0xe8, 0xb3, 0xae, 0xd4, 0xee, 0x40, 0x29, 0xfe, 0x77,
	0x9d, 0xa7, 0x87, 0x83, 0x17, 0xa3, 0xd6, 0x9f, 0xd0, 0xd1, 0xe1, 0x7f, 0xac, 0xc0, 0xcc, 0x5d,
	0x18, 0x7f, 0x3e, 0xb6, 0xd0, 0x5f, 0x8f, 0x2d, 0xf4, 0xf7, 0x63, 0x0b, 0xfd, 0xf6, 0x4f, 0x2b,
	0x37, 0x2e, 0xeb, 0xbf, 0xf1, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x02, 0x68, 0x6f, 0x45,
	0xbf, 0x05, 0x00, 0x00,
}
