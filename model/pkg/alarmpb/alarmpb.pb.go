// Code generated by protoc-gen-gogo.
// source: alarmpb.proto
// DO NOT EDIT!

/*
	Package alarmpb is a generated protocol buffer package.

	It is generated from these files:
		alarmpb.proto

	It has these top-level messages:
		RequestHeader
		ResponseHeader
		TaskAlarmRequest
		TaskTimeout
		TaskLongTimeRunning
		TaskAlarmResponse
		NodeRangeAlarmRequest
		RangeNoHeartbeatAlarm
		NodeNoHeartbeatAlarm
		NodeDiskSizeAlarm
		NodeLeaderCountAlarm
		NodeRangeAlarmResponse
		AliveRequest
		AliveResponse
*/
package alarmpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	taskpb "model/pkg/taskpb"

	metapb "model/pkg/metapb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskAlarmType int32

const (
	TaskAlarmType_TIMEOUT           TaskAlarmType = 0
	TaskAlarmType_LONG_TIME_RUNNING TaskAlarmType = 1
)

var TaskAlarmType_name = map[int32]string{
	0: "TIMEOUT",
	1: "LONG_TIME_RUNNING",
}
var TaskAlarmType_value = map[string]int32{
	"TIMEOUT":           0,
	"LONG_TIME_RUNNING": 1,
}

func (x TaskAlarmType) String() string {
	return proto.EnumName(TaskAlarmType_name, int32(x))
}
func (TaskAlarmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{0} }

type NodeRangeAlarmType int32

const (
	NodeRangeAlarmType_RANGE_NO_HEARTBEAT NodeRangeAlarmType = 0
	NodeRangeAlarmType_NODE_NO_HEARTBEAT  NodeRangeAlarmType = 1
	NodeRangeAlarmType_NODE_DISK_SIZE     NodeRangeAlarmType = 2
	NodeRangeAlarmType_NODE_LEADER_COUNT  NodeRangeAlarmType = 3
)

var NodeRangeAlarmType_name = map[int32]string{
	0: "RANGE_NO_HEARTBEAT",
	1: "NODE_NO_HEARTBEAT",
	2: "NODE_DISK_SIZE",
	3: "NODE_LEADER_COUNT",
}
var NodeRangeAlarmType_value = map[string]int32{
	"RANGE_NO_HEARTBEAT": 0,
	"NODE_NO_HEARTBEAT":  1,
	"NODE_DISK_SIZE":     2,
	"NODE_LEADER_COUNT":  3,
}

func (x NodeRangeAlarmType) String() string {
	return proto.EnumName(NodeRangeAlarmType_name, int32(x))
}
func (NodeRangeAlarmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{1} }

type RequestHeader struct {
	ClusterId int64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{0} }

func (m *RequestHeader) GetClusterId() int64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

type ResponseHeader struct {
	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{1} }

func (m *ResponseHeader) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TaskAlarmRequest struct {
	Head                     *RequestHeader       `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Type                     TaskAlarmType        `protobuf:"varint,2,opt,name=type,proto3,enum=alarmpb.TaskAlarmType" json:"type,omitempty"`
	Task                     *taskpb.Task         `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
	TaskTimeoutAlarm         *TaskTimeout         `protobuf:"bytes,4,opt,name=task_timeout_alarm,json=taskTimeoutAlarm" json:"task_timeout_alarm,omitempty"`
	TaskLongTimeRunningAlarm *TaskLongTimeRunning `protobuf:"bytes,5,opt,name=task_long_time_running_alarm,json=taskLongTimeRunningAlarm" json:"task_long_time_running_alarm,omitempty"`
	Describe                 string               `protobuf:"bytes,6,opt,name=Describe,proto3" json:"Describe,omitempty"`
}

func (m *TaskAlarmRequest) Reset()                    { *m = TaskAlarmRequest{} }
func (m *TaskAlarmRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskAlarmRequest) ProtoMessage()               {}
func (*TaskAlarmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{2} }

func (m *TaskAlarmRequest) GetHead() *RequestHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *TaskAlarmRequest) GetType() TaskAlarmType {
	if m != nil {
		return m.Type
	}
	return TaskAlarmType_TIMEOUT
}

func (m *TaskAlarmRequest) GetTask() *taskpb.Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *TaskAlarmRequest) GetTaskTimeoutAlarm() *TaskTimeout {
	if m != nil {
		return m.TaskTimeoutAlarm
	}
	return nil
}

func (m *TaskAlarmRequest) GetTaskLongTimeRunningAlarm() *TaskLongTimeRunning {
	if m != nil {
		return m.TaskLongTimeRunningAlarm
	}
	return nil
}

func (m *TaskAlarmRequest) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

type TaskTimeout struct {
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	Takes int64  `protobuf:"varint,3,opt,name=takes,proto3" json:"takes,omitempty"`
}

func (m *TaskTimeout) Reset()                    { *m = TaskTimeout{} }
func (m *TaskTimeout) String() string            { return proto.CompactTextString(m) }
func (*TaskTimeout) ProtoMessage()               {}
func (*TaskTimeout) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{3} }

func (m *TaskTimeout) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *TaskTimeout) GetTakes() int64 {
	if m != nil {
		return m.Takes
	}
	return 0
}

type TaskLongTimeRunning struct {
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	Takes int64  `protobuf:"varint,3,opt,name=takes,proto3" json:"takes,omitempty"`
}

func (m *TaskLongTimeRunning) Reset()                    { *m = TaskLongTimeRunning{} }
func (m *TaskLongTimeRunning) String() string            { return proto.CompactTextString(m) }
func (*TaskLongTimeRunning) ProtoMessage()               {}
func (*TaskLongTimeRunning) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{4} }

func (m *TaskLongTimeRunning) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *TaskLongTimeRunning) GetTakes() int64 {
	if m != nil {
		return m.Takes
	}
	return 0
}

type TaskAlarmResponse struct {
	Head *ResponseHeader `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
}

func (m *TaskAlarmResponse) Reset()                    { *m = TaskAlarmResponse{} }
func (m *TaskAlarmResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskAlarmResponse) ProtoMessage()               {}
func (*TaskAlarmResponse) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{5} }

func (m *TaskAlarmResponse) GetHead() *ResponseHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

type NodeRangeAlarmRequest struct {
	Head                 *RequestHeader         `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	Type                 NodeRangeAlarmType     `protobuf:"varint,2,opt,name=type,proto3,enum=alarmpb.NodeRangeAlarmType" json:"type,omitempty"`
	RangeNoHbAlarm       *RangeNoHeartbeatAlarm `protobuf:"bytes,3,opt,name=range_no_hb_alarm,json=rangeNoHbAlarm" json:"range_no_hb_alarm,omitempty"`
	NodeNoHbAlarm        *NodeNoHeartbeatAlarm  `protobuf:"bytes,4,opt,name=node_no_hb_alarm,json=nodeNoHbAlarm" json:"node_no_hb_alarm,omitempty"`
	NodeDiskSizeAlarm    *NodeDiskSizeAlarm     `protobuf:"bytes,5,opt,name=node_disk_size_alarm,json=nodeDiskSizeAlarm" json:"node_disk_size_alarm,omitempty"`
	NodeLeaderCountAlarm *NodeLeaderCountAlarm  `protobuf:"bytes,6,opt,name=node_leader_count_alarm,json=nodeLeaderCountAlarm" json:"node_leader_count_alarm,omitempty"`
	Describe             string                 `protobuf:"bytes,7,opt,name=Describe,proto3" json:"Describe,omitempty"`
}

func (m *NodeRangeAlarmRequest) Reset()                    { *m = NodeRangeAlarmRequest{} }
func (m *NodeRangeAlarmRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeRangeAlarmRequest) ProtoMessage()               {}
func (*NodeRangeAlarmRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{6} }

func (m *NodeRangeAlarmRequest) GetHead() *RequestHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *NodeRangeAlarmRequest) GetType() NodeRangeAlarmType {
	if m != nil {
		return m.Type
	}
	return NodeRangeAlarmType_RANGE_NO_HEARTBEAT
}

func (m *NodeRangeAlarmRequest) GetRangeNoHbAlarm() *RangeNoHeartbeatAlarm {
	if m != nil {
		return m.RangeNoHbAlarm
	}
	return nil
}

func (m *NodeRangeAlarmRequest) GetNodeNoHbAlarm() *NodeNoHeartbeatAlarm {
	if m != nil {
		return m.NodeNoHbAlarm
	}
	return nil
}

func (m *NodeRangeAlarmRequest) GetNodeDiskSizeAlarm() *NodeDiskSizeAlarm {
	if m != nil {
		return m.NodeDiskSizeAlarm
	}
	return nil
}

func (m *NodeRangeAlarmRequest) GetNodeLeaderCountAlarm() *NodeLeaderCountAlarm {
	if m != nil {
		return m.NodeLeaderCountAlarm
	}
	return nil
}

func (m *NodeRangeAlarmRequest) GetDescribe() string {
	if m != nil {
		return m.Describe
	}
	return ""
}

type RangeNoHeartbeatAlarm struct {
	Range             *metapb.Range `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	LastHeartbeatTime string        `protobuf:"bytes,2,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
}

func (m *RangeNoHeartbeatAlarm) Reset()                    { *m = RangeNoHeartbeatAlarm{} }
func (m *RangeNoHeartbeatAlarm) String() string            { return proto.CompactTextString(m) }
func (*RangeNoHeartbeatAlarm) ProtoMessage()               {}
func (*RangeNoHeartbeatAlarm) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{7} }

func (m *RangeNoHeartbeatAlarm) GetRange() *metapb.Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *RangeNoHeartbeatAlarm) GetLastHeartbeatTime() string {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return ""
}

type NodeNoHeartbeatAlarm struct {
	Node              *metapb.Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	LastHeartbeatTime string       `protobuf:"bytes,2,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
}

func (m *NodeNoHeartbeatAlarm) Reset()                    { *m = NodeNoHeartbeatAlarm{} }
func (m *NodeNoHeartbeatAlarm) String() string            { return proto.CompactTextString(m) }
func (*NodeNoHeartbeatAlarm) ProtoMessage()               {}
func (*NodeNoHeartbeatAlarm) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{8} }

func (m *NodeNoHeartbeatAlarm) GetNode() *metapb.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeNoHeartbeatAlarm) GetLastHeartbeatTime() string {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return ""
}

type NodeDiskSizeAlarm struct {
	Node     *metapb.Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	DiskSize int64        `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (m *NodeDiskSizeAlarm) Reset()                    { *m = NodeDiskSizeAlarm{} }
func (m *NodeDiskSizeAlarm) String() string            { return proto.CompactTextString(m) }
func (*NodeDiskSizeAlarm) ProtoMessage()               {}
func (*NodeDiskSizeAlarm) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{9} }

func (m *NodeDiskSizeAlarm) GetNode() *metapb.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeDiskSizeAlarm) GetDiskSize() int64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

type NodeLeaderCountAlarm struct {
	Node        *metapb.Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	LeaderCount int64        `protobuf:"varint,2,opt,name=leader_count,json=leaderCount,proto3" json:"leader_count,omitempty"`
}

func (m *NodeLeaderCountAlarm) Reset()                    { *m = NodeLeaderCountAlarm{} }
func (m *NodeLeaderCountAlarm) String() string            { return proto.CompactTextString(m) }
func (*NodeLeaderCountAlarm) ProtoMessage()               {}
func (*NodeLeaderCountAlarm) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{10} }

func (m *NodeLeaderCountAlarm) GetNode() *metapb.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeLeaderCountAlarm) GetLeaderCount() int64 {
	if m != nil {
		return m.LeaderCount
	}
	return 0
}

type NodeRangeAlarmResponse struct {
	Head *ResponseHeader `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
}

func (m *NodeRangeAlarmResponse) Reset()                    { *m = NodeRangeAlarmResponse{} }
func (m *NodeRangeAlarmResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeRangeAlarmResponse) ProtoMessage()               {}
func (*NodeRangeAlarmResponse) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{11} }

func (m *NodeRangeAlarmResponse) GetHead() *ResponseHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

type AliveRequest struct {
	Head *RequestHeader `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
}

func (m *AliveRequest) Reset()                    { *m = AliveRequest{} }
func (m *AliveRequest) String() string            { return proto.CompactTextString(m) }
func (*AliveRequest) ProtoMessage()               {}
func (*AliveRequest) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{12} }

func (m *AliveRequest) GetHead() *RequestHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

type AliveResponse struct {
	Head *ResponseHeader `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
}

func (m *AliveResponse) Reset()                    { *m = AliveResponse{} }
func (m *AliveResponse) String() string            { return proto.CompactTextString(m) }
func (*AliveResponse) ProtoMessage()               {}
func (*AliveResponse) Descriptor() ([]byte, []int) { return fileDescriptorAlarmpb, []int{13} }

func (m *AliveResponse) GetHead() *ResponseHeader {
	if m != nil {
		return m.Head
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "alarmpb.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "alarmpb.ResponseHeader")
	proto.RegisterType((*TaskAlarmRequest)(nil), "alarmpb.TaskAlarmRequest")
	proto.RegisterType((*TaskTimeout)(nil), "alarmpb.TaskTimeout")
	proto.RegisterType((*TaskLongTimeRunning)(nil), "alarmpb.TaskLongTimeRunning")
	proto.RegisterType((*TaskAlarmResponse)(nil), "alarmpb.TaskAlarmResponse")
	proto.RegisterType((*NodeRangeAlarmRequest)(nil), "alarmpb.NodeRangeAlarmRequest")
	proto.RegisterType((*RangeNoHeartbeatAlarm)(nil), "alarmpb.RangeNoHeartbeatAlarm")
	proto.RegisterType((*NodeNoHeartbeatAlarm)(nil), "alarmpb.NodeNoHeartbeatAlarm")
	proto.RegisterType((*NodeDiskSizeAlarm)(nil), "alarmpb.NodeDiskSizeAlarm")
	proto.RegisterType((*NodeLeaderCountAlarm)(nil), "alarmpb.NodeLeaderCountAlarm")
	proto.RegisterType((*NodeRangeAlarmResponse)(nil), "alarmpb.NodeRangeAlarmResponse")
	proto.RegisterType((*AliveRequest)(nil), "alarmpb.AliveRequest")
	proto.RegisterType((*AliveResponse)(nil), "alarmpb.AliveResponse")
	proto.RegisterEnum("alarmpb.TaskAlarmType", TaskAlarmType_name, TaskAlarmType_value)
	proto.RegisterEnum("alarmpb.NodeRangeAlarmType", NodeRangeAlarmType_name, NodeRangeAlarmType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Alarm service

type AlarmClient interface {
	TaskAlarm(ctx context.Context, in *TaskAlarmRequest, opts ...grpc.CallOption) (*TaskAlarmResponse, error)
	NodeRangeAlarm(ctx context.Context, in *NodeRangeAlarmRequest, opts ...grpc.CallOption) (*NodeRangeAlarmResponse, error)
	AliveAlarm(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*AliveResponse, error)
}

type alarmClient struct {
	cc *grpc.ClientConn
}

func NewAlarmClient(cc *grpc.ClientConn) AlarmClient {
	return &alarmClient{cc}
}

func (c *alarmClient) TaskAlarm(ctx context.Context, in *TaskAlarmRequest, opts ...grpc.CallOption) (*TaskAlarmResponse, error) {
	out := new(TaskAlarmResponse)
	err := grpc.Invoke(ctx, "/alarmpb.Alarm/TaskAlarm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) NodeRangeAlarm(ctx context.Context, in *NodeRangeAlarmRequest, opts ...grpc.CallOption) (*NodeRangeAlarmResponse, error) {
	out := new(NodeRangeAlarmResponse)
	err := grpc.Invoke(ctx, "/alarmpb.Alarm/NodeRangeAlarm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmClient) AliveAlarm(ctx context.Context, in *AliveRequest, opts ...grpc.CallOption) (*AliveResponse, error) {
	out := new(AliveResponse)
	err := grpc.Invoke(ctx, "/alarmpb.Alarm/AliveAlarm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Alarm service

type AlarmServer interface {
	TaskAlarm(context.Context, *TaskAlarmRequest) (*TaskAlarmResponse, error)
	NodeRangeAlarm(context.Context, *NodeRangeAlarmRequest) (*NodeRangeAlarmResponse, error)
	AliveAlarm(context.Context, *AliveRequest) (*AliveResponse, error)
}

func RegisterAlarmServer(s *grpc.Server, srv AlarmServer) {
	s.RegisterService(&_Alarm_serviceDesc, srv)
}

func _Alarm_TaskAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).TaskAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alarmpb.Alarm/TaskAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).TaskAlarm(ctx, req.(*TaskAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_NodeRangeAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRangeAlarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).NodeRangeAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alarmpb.Alarm/NodeRangeAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).NodeRangeAlarm(ctx, req.(*NodeRangeAlarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alarm_AliveAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmServer).AliveAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alarmpb.Alarm/AliveAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmServer).AliveAlarm(ctx, req.(*AliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Alarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alarmpb.Alarm",
	HandlerType: (*AlarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskAlarm",
			Handler:    _Alarm_TaskAlarm_Handler,
		},
		{
			MethodName: "NodeRangeAlarm",
			Handler:    _Alarm_NodeRangeAlarm_Handler,
		},
		{
			MethodName: "AliveAlarm",
			Handler:    _Alarm_AliveAlarm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alarmpb.proto",
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.ClusterId))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *TaskAlarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskAlarmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n1, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Type))
	}
	if m.Task != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Task.Size()))
		n2, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TaskTimeoutAlarm != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.TaskTimeoutAlarm.Size()))
		n3, err := m.TaskTimeoutAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TaskLongTimeRunningAlarm != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.TaskLongTimeRunningAlarm.Size()))
		n4, err := m.TaskLongTimeRunningAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Describe) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.Describe)))
		i += copy(dAtA[i:], m.Describe)
	}
	return i, nil
}

func (m *TaskTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskTimeout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if m.Takes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Takes))
	}
	return i, nil
}

func (m *TaskLongTimeRunning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskLongTimeRunning) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if m.Takes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Takes))
	}
	return i, nil
}

func (m *TaskAlarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskAlarmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n5, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *NodeRangeAlarmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRangeAlarmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n6, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Type))
	}
	if m.RangeNoHbAlarm != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.RangeNoHbAlarm.Size()))
		n7, err := m.RangeNoHbAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.NodeNoHbAlarm != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.NodeNoHbAlarm.Size()))
		n8, err := m.NodeNoHbAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.NodeDiskSizeAlarm != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.NodeDiskSizeAlarm.Size()))
		n9, err := m.NodeDiskSizeAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.NodeLeaderCountAlarm != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.NodeLeaderCountAlarm.Size()))
		n10, err := m.NodeLeaderCountAlarm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Describe) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.Describe)))
		i += copy(dAtA[i:], m.Describe)
	}
	return i, nil
}

func (m *RangeNoHeartbeatAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeNoHeartbeatAlarm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Range.Size()))
		n11, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.LastHeartbeatTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.LastHeartbeatTime)))
		i += copy(dAtA[i:], m.LastHeartbeatTime)
	}
	return i, nil
}

func (m *NodeNoHeartbeatAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeNoHeartbeatAlarm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Node.Size()))
		n12, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.LastHeartbeatTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(len(m.LastHeartbeatTime)))
		i += copy(dAtA[i:], m.LastHeartbeatTime)
	}
	return i, nil
}

func (m *NodeDiskSizeAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDiskSizeAlarm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Node.Size()))
		n13, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.DiskSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.DiskSize))
	}
	return i, nil
}

func (m *NodeLeaderCountAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLeaderCountAlarm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Node.Size()))
		n14, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.LeaderCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.LeaderCount))
	}
	return i, nil
}

func (m *NodeRangeAlarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRangeAlarmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n15, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *AliveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n16, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *AliveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AliveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlarmpb(dAtA, i, uint64(m.Head.Size()))
		n17, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func encodeFixed64Alarmpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Alarmpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAlarmpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovAlarmpb(uint64(m.ClusterId))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAlarmpb(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *TaskAlarmRequest) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAlarmpb(uint64(m.Type))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.TaskTimeoutAlarm != nil {
		l = m.TaskTimeoutAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.TaskLongTimeRunningAlarm != nil {
		l = m.TaskLongTimeRunningAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *TaskTimeout) Size() (n int) {
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.Takes != 0 {
		n += 1 + sovAlarmpb(uint64(m.Takes))
	}
	return n
}

func (m *TaskLongTimeRunning) Size() (n int) {
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.Takes != 0 {
		n += 1 + sovAlarmpb(uint64(m.Takes))
	}
	return n
}

func (m *TaskAlarmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *NodeRangeAlarmRequest) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAlarmpb(uint64(m.Type))
	}
	if m.RangeNoHbAlarm != nil {
		l = m.RangeNoHbAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.NodeNoHbAlarm != nil {
		l = m.NodeNoHbAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.NodeDiskSizeAlarm != nil {
		l = m.NodeDiskSizeAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.NodeLeaderCountAlarm != nil {
		l = m.NodeLeaderCountAlarm.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *RangeNoHeartbeatAlarm) Size() (n int) {
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	l = len(m.LastHeartbeatTime)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *NodeNoHeartbeatAlarm) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	l = len(m.LastHeartbeatTime)
	if l > 0 {
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *NodeDiskSizeAlarm) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.DiskSize != 0 {
		n += 1 + sovAlarmpb(uint64(m.DiskSize))
	}
	return n
}

func (m *NodeLeaderCountAlarm) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	if m.LeaderCount != 0 {
		n += 1 + sovAlarmpb(uint64(m.LeaderCount))
	}
	return n
}

func (m *NodeRangeAlarmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *AliveRequest) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func (m *AliveResponse) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovAlarmpb(uint64(l))
	}
	return n
}

func sovAlarmpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAlarmpb(x uint64) (n int) {
	return sovAlarmpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskAlarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskAlarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskAlarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TaskAlarmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &taskpb.Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTimeoutAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskTimeoutAlarm == nil {
				m.TaskTimeoutAlarm = &TaskTimeout{}
			}
			if err := m.TaskTimeoutAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskLongTimeRunningAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskLongTimeRunningAlarm == nil {
				m.TaskLongTimeRunningAlarm = &TaskLongTimeRunning{}
			}
			if err := m.TaskLongTimeRunningAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Takes", wireType)
			}
			m.Takes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Takes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskLongTimeRunning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskLongTimeRunning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskLongTimeRunning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Takes", wireType)
			}
			m.Takes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Takes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskAlarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskAlarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskAlarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRangeAlarmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRangeAlarmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRangeAlarmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (NodeRangeAlarmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeNoHbAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RangeNoHbAlarm == nil {
				m.RangeNoHbAlarm = &RangeNoHeartbeatAlarm{}
			}
			if err := m.RangeNoHbAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeNoHbAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeNoHbAlarm == nil {
				m.NodeNoHbAlarm = &NodeNoHeartbeatAlarm{}
			}
			if err := m.NodeNoHbAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDiskSizeAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDiskSizeAlarm == nil {
				m.NodeDiskSizeAlarm = &NodeDiskSizeAlarm{}
			}
			if err := m.NodeDiskSizeAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLeaderCountAlarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeLeaderCountAlarm == nil {
				m.NodeLeaderCountAlarm = &NodeLeaderCountAlarm{}
			}
			if err := m.NodeLeaderCountAlarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeNoHeartbeatAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeNoHeartbeatAlarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeNoHeartbeatAlarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &metapb.Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastHeartbeatTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeNoHeartbeatAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeNoHeartbeatAlarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeNoHeartbeatAlarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &metapb.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastHeartbeatTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDiskSizeAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDiskSizeAlarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDiskSizeAlarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &metapb.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeLeaderCountAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLeaderCountAlarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLeaderCountAlarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &metapb.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderCount", wireType)
			}
			m.LeaderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeRangeAlarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRangeAlarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRangeAlarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RequestHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AliveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AliveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AliveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ResponseHeader{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarmpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarmpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAlarmpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlarmpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlarmpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlarmpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarmpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("alarmpb.proto", fileDescriptorAlarmpb) }

var fileDescriptorAlarmpb = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xdd, 0x4e, 0xeb, 0x46,
	0x10, 0xc7, 0x31, 0x49, 0xe0, 0x64, 0xf2, 0x21, 0x67, 0x4f, 0x12, 0x52, 0x03, 0x29, 0x75, 0x6f,
	0x10, 0x95, 0x82, 0x04, 0x57, 0x45, 0xad, 0xd4, 0x40, 0x5c, 0x88, 0x48, 0x1d, 0x69, 0x63, 0x6e,
	0xda, 0x4a, 0x96, 0x13, 0xaf, 0x12, 0x2b, 0xc6, 0x4e, 0x6d, 0xa7, 0x12, 0x3c, 0x49, 0x9f, 0xa8,
	0xaa, 0x7a, 0xd5, 0x47, 0x68, 0xe9, 0x8b, 0x54, 0xfb, 0x61, 0x63, 0x27, 0x41, 0x3d, 0xe4, 0x0a,
	0xef, 0xec, 0x7f, 0x7f, 0x33, 0x9e, 0xf9, 0xaf, 0x09, 0x54, 0x2c, 0xd7, 0x0a, 0x1e, 0x17, 0xe3,
	0xce, 0x22, 0xf0, 0x23, 0x1f, 0xed, 0x8b, 0xa5, 0x52, 0x9f, 0xfa, 0x53, 0x9f, 0xc5, 0xce, 0xe9,
	0x13, 0xdf, 0x56, 0xca, 0x91, 0x15, 0xce, 0x63, 0xb1, 0x52, 0x7e, 0x24, 0x91, 0x15, 0xaf, 0xd4,
	0x0e, 0x54, 0x30, 0xf9, 0x65, 0x49, 0xc2, 0xe8, 0x8e, 0x58, 0x36, 0x09, 0xd0, 0x31, 0xc0, 0xc4,
	0x5d, 0x86, 0x11, 0x09, 0x4c, 0xc7, 0x6e, 0x49, 0x27, 0xd2, 0x69, 0x0e, 0x17, 0x45, 0xa4, 0x6f,
	0xab, 0x57, 0x50, 0xc5, 0x24, 0x5c, 0xf8, 0x5e, 0x48, 0xc4, 0x01, 0x04, 0xf9, 0x89, 0x6f, 0x13,
	0x26, 0x2d, 0x60, 0xf6, 0x8c, 0xea, 0x50, 0x20, 0x41, 0xe0, 0x07, 0xad, 0xdd, 0x13, 0xe9, 0xb4,
	0x88, 0xf9, 0x42, 0xfd, 0x73, 0x17, 0x64, 0xc3, 0x0a, 0xe7, 0x5d, 0x5a, 0xad, 0xc8, 0x8a, 0xce,
	0x20, 0x3f, 0x23, 0x16, 0xcf, 0x54, 0xba, 0x68, 0x76, 0xe2, 0x37, 0xcb, 0x54, 0x85, 0x99, 0x86,
	0x6a, 0xa3, 0xa7, 0x05, 0x61, 0xd4, 0x6a, 0x4a, 0x9b, 0x40, 0x8d, 0xa7, 0x05, 0xc1, 0x4c, 0x83,
	0x4e, 0x20, 0x4f, 0x5f, 0xbb, 0x95, 0x63, 0xdc, 0x72, 0x47, 0xf4, 0x80, 0x4a, 0x31, 0xdb, 0x41,
	0xd7, 0x80, 0xe8, 0x5f, 0x33, 0x72, 0x1e, 0x89, 0xbf, 0x8c, 0x4c, 0x46, 0x6b, 0xe5, 0x99, 0xbe,
	0x9e, 0x61, 0x1b, 0x5c, 0x81, 0xe5, 0xe8, 0x75, 0xc1, 0xf2, 0xa1, 0x9f, 0xe1, 0x88, 0x31, 0x5c,
	0xdf, 0x9b, 0x32, 0x90, 0x19, 0x2c, 0x3d, 0xcf, 0xf1, 0xa6, 0x82, 0x56, 0x60, 0xb4, 0xa3, 0x0c,
	0x6d, 0xe0, 0x7b, 0x53, 0x0a, 0xc1, 0x5c, 0x89, 0x5b, 0xd1, 0x7a, 0x90, 0xd3, 0x15, 0xf8, 0xd0,
	0x23, 0xe1, 0x24, 0x70, 0xc6, 0xa4, 0xb5, 0xc7, 0x3a, 0x99, 0xac, 0xd5, 0xaf, 0xa1, 0x94, 0x2a,
	0x8d, 0x76, 0x3c, 0x8c, 0xac, 0x20, 0x8a, 0x3b, 0xce, 0x16, 0x34, 0x1a, 0x59, 0x73, 0x12, 0xb2,
	0x2e, 0xe4, 0x30, 0x5f, 0xa8, 0x5d, 0xf8, 0xb8, 0xa1, 0x8e, 0x77, 0x21, 0xbe, 0x83, 0x5a, 0x6a,
	0x92, 0xdc, 0x0f, 0xe8, 0xab, 0xcc, 0x28, 0x0f, 0x52, 0xa3, 0x4c, 0x1b, 0x86, 0xcf, 0x52, 0xfd,
	0x3d, 0x07, 0x0d, 0xdd, 0xb7, 0x09, 0xb6, 0xbc, 0x29, 0xd9, 0xda, 0x11, 0xe7, 0x19, 0x47, 0x1c,
	0x26, 0xda, 0x2c, 0x39, 0x65, 0x8b, 0x3e, 0xd4, 0x02, 0x1a, 0x37, 0x3d, 0xdf, 0x9c, 0x8d, 0xc5,
	0x94, 0xb8, 0x47, 0xda, 0xaf, 0x99, 0xa8, 0x42, 0xf7, 0xef, 0x88, 0x15, 0x44, 0x63, 0x62, 0xf1,
	0x59, 0xe3, 0x6a, 0x20, 0xc2, 0x63, 0x3e, 0x9d, 0xef, 0x41, 0xf6, 0x7c, 0x3b, 0x4b, 0xe2, 0xee,
	0x39, 0xce, 0xd4, 0xb1, 0x06, 0xaa, 0x78, 0x3c, 0x2a, 0x38, 0xf7, 0x50, 0x67, 0x1c, 0xdb, 0x09,
	0xe7, 0x66, 0xe8, 0x3c, 0x93, 0x8c, 0x77, 0x94, 0x0c, 0xab, 0xe7, 0x84, 0xf3, 0x91, 0xf3, 0x2c,
	0x1a, 0x56, 0xf3, 0x56, 0x43, 0xc8, 0x80, 0x03, 0x06, 0x73, 0x59, 0x97, 0xcc, 0x89, 0xbf, 0xf4,
	0x62, 0x67, 0xef, 0x6d, 0xa8, 0x6d, 0xc0, 0x64, 0x37, 0x54, 0xc5, 0x91, 0xac, 0x94, 0xd5, 0x68,
	0xc6, 0x88, 0xfb, 0x2b, 0x46, 0x74, 0xa1, 0xb1, 0xb1, 0x5f, 0xe8, 0x4b, 0x28, 0xb0, 0x8e, 0x89,
	0x41, 0x56, 0x3a, 0xe2, 0xc3, 0xc3, 0xd4, 0x98, 0xef, 0xa1, 0x0e, 0x7c, 0x74, 0xad, 0x30, 0x32,
	0x67, 0xf1, 0x59, 0x76, 0x8b, 0x84, 0x05, 0x6b, 0x74, 0x2b, 0xa1, 0x52, 0xaf, 0xaa, 0x33, 0xa8,
	0x6f, 0xea, 0x29, 0xbd, 0xee, 0x5e, 0xfc, 0x15, 0xa2, 0xd7, 0x5d, 0xe4, 0x62, 0x3e, 0x60, 0x3b,
	0xef, 0xce, 0x84, 0xa1, 0xb6, 0xd6, 0xf1, 0x4f, 0x48, 0x73, 0x08, 0xc5, 0x64, 0x90, 0x0c, 0x9e,
	0xc3, 0x1f, 0x6c, 0xc1, 0x50, 0x7f, 0xe2, 0xd5, 0xaf, 0xf5, 0xf7, 0xff, 0xb1, 0x5f, 0x40, 0x39,
	0x3d, 0x52, 0x41, 0x2e, 0xb9, 0xaf, 0x24, 0x55, 0x83, 0xe6, 0xea, 0x85, 0xda, 0xe6, 0x62, 0x5e,
	0x41, 0xb9, 0xeb, 0x3a, 0xbf, 0x92, 0x2d, 0xae, 0xa3, 0xfa, 0x0d, 0x54, 0xc4, 0xd9, 0x2d, 0x32,
	0x9f, 0x5d, 0x42, 0x25, 0xf3, 0x25, 0x47, 0x25, 0xd8, 0x37, 0xfa, 0x3f, 0x68, 0xc3, 0x07, 0x43,
	0xde, 0x41, 0x0d, 0xa8, 0x0d, 0x86, 0xfa, 0xad, 0x49, 0x23, 0x26, 0x7e, 0xd0, 0xf5, 0xbe, 0x7e,
	0x2b, 0x4b, 0x67, 0x1e, 0xa0, 0xf5, 0xcb, 0x8e, 0x9a, 0x80, 0x70, 0x57, 0xbf, 0xd5, 0x4c, 0x7d,
	0x68, 0xde, 0x69, 0x5d, 0x6c, 0x5c, 0x6b, 0x5d, 0x01, 0xd1, 0x87, 0xbd, 0x95, 0xb0, 0x84, 0x10,
	0x54, 0x59, 0xb8, 0xd7, 0x1f, 0xdd, 0x9b, 0xa3, 0xfe, 0x8f, 0x9a, 0xbc, 0x9b, 0x48, 0x07, 0x5a,
	0xb7, 0xa7, 0x61, 0xf3, 0x66, 0xf8, 0xa0, 0x1b, 0x72, 0xee, 0xe2, 0x1f, 0x09, 0x0a, 0x7c, 0x68,
	0x3d, 0x28, 0x26, 0xe5, 0xa2, 0xcf, 0xd6, 0xff, 0x19, 0x89, 0x06, 0x29, 0xca, 0xa6, 0x2d, 0xfe,
	0xfa, 0xea, 0x0e, 0x1a, 0x41, 0x35, 0x5b, 0x3f, 0x6a, 0xbf, 0xf1, 0x15, 0x8b, 0x79, 0x9f, 0xbf,
	0xb9, 0x9f, 0x40, 0xbf, 0x05, 0x60, 0x73, 0xe0, 0xc0, 0x46, 0x72, 0x20, 0x3d, 0x58, 0xa5, 0xb9,
	0x1a, 0x8e, 0x8f, 0x5f, 0xcb, 0x7f, 0xbc, 0xb4, 0xa5, 0xbf, 0x5e, 0xda, 0xd2, 0xdf, 0x2f, 0x6d,
	0xe9, 0xb7, 0x7f, 0xdb, 0x3b, 0xe3, 0x3d, 0xf6, 0x6b, 0xe1, 0xf2, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0x65, 0x6b, 0xba, 0x79, 0x08, 0x00, 0x00,
}
