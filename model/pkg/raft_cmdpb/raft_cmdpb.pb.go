// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_cmdpb.proto

/*
	Package raft_cmdpb is a generated protocol buffer package.

	It is generated from these files:
		raft_cmdpb.proto

	It has these top-level messages:
		SplitRequest
		SplitResponse
		MergeRequest
		MergeResponse
		LeaderChangeRequest
		LeaderChangeResponse
		CmdID
		Command
		PeerTask
		SnapshotKVPair
		SnapshotContext
*/
package raft_cmdpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import metapb "model/pkg/metapb"
import kvrpcpb "model/pkg/kvrpcpb"
import _ "github.com/gogo/protobuf/gogoproto"
import watchpb "model/pkg/watchpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	CmdType_Invalid           CmdType = 0
	CmdType_RawGet            CmdType = 1
	CmdType_RawPut            CmdType = 2
	CmdType_RawDelete         CmdType = 3
	CmdType_RawExecute        CmdType = 4
	CmdType_Select            CmdType = 7
	CmdType_Insert            CmdType = 8
	CmdType_Delete            CmdType = 9
	CmdType_Update            CmdType = 10
	CmdType_Replace           CmdType = 11
	CmdType_BatchInsert       CmdType = 12
	CmdType_KvSet             CmdType = 13
	CmdType_KvGet             CmdType = 14
	CmdType_KvBatchSet        CmdType = 15
	CmdType_KvBatchGet        CmdType = 16
	CmdType_KvScan            CmdType = 17
	CmdType_KvDelete          CmdType = 18
	CmdType_KvBatchDel        CmdType = 19
	CmdType_KvRangeDel        CmdType = 20
	CmdType_KvWatchPut        CmdType = 21
	CmdType_KvWatchDel        CmdType = 22
	CmdType_AdminSplit        CmdType = 30
	CmdType_AdminMerge        CmdType = 31
	CmdType_AdminLeaderChange CmdType = 32
	CmdType_Lock              CmdType = 40
	CmdType_LockUpdate        CmdType = 41
	CmdType_Unlock            CmdType = 42
	CmdType_UnlockForce       CmdType = 43
)

var CmdType_name = map[int32]string{
	0:  "Invalid",
	1:  "RawGet",
	2:  "RawPut",
	3:  "RawDelete",
	4:  "RawExecute",
	7:  "Select",
	8:  "Insert",
	9:  "Delete",
	10: "Update",
	11: "Replace",
	12: "BatchInsert",
	13: "KvSet",
	14: "KvGet",
	15: "KvBatchSet",
	16: "KvBatchGet",
	17: "KvScan",
	18: "KvDelete",
	19: "KvBatchDel",
	20: "KvRangeDel",
	21: "KvWatchPut",
	22: "KvWatchDel",
	30: "AdminSplit",
	31: "AdminMerge",
	32: "AdminLeaderChange",
	40: "Lock",
	41: "LockUpdate",
	42: "Unlock",
	43: "UnlockForce",
}
var CmdType_value = map[string]int32{
	"Invalid":           0,
	"RawGet":            1,
	"RawPut":            2,
	"RawDelete":         3,
	"RawExecute":        4,
	"Select":            7,
	"Insert":            8,
	"Delete":            9,
	"Update":            10,
	"Replace":           11,
	"BatchInsert":       12,
	"KvSet":             13,
	"KvGet":             14,
	"KvBatchSet":        15,
	"KvBatchGet":        16,
	"KvScan":            17,
	"KvDelete":          18,
	"KvBatchDel":        19,
	"KvRangeDel":        20,
	"KvWatchPut":        21,
	"KvWatchDel":        22,
	"AdminSplit":        30,
	"AdminMerge":        31,
	"AdminLeaderChange": 32,
	"Lock":              40,
	"LockUpdate":        41,
	"Unlock":            42,
	"UnlockForce":       43,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{0} }

type SplitRequest struct {
	Leader   uint64             `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	SplitKey []byte             `protobuf:"bytes,2,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	Epoch    *metapb.RangeEpoch `protobuf:"bytes,3,opt,name=epoch" json:"epoch,omitempty"`
	NewRange *metapb.Range      `protobuf:"bytes,4,opt,name=new_range,json=newRange" json:"new_range,omitempty"`
}

func (m *SplitRequest) Reset()                    { *m = SplitRequest{} }
func (m *SplitRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitRequest) ProtoMessage()               {}
func (*SplitRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{0} }

func (m *SplitRequest) GetLeader() uint64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *SplitRequest) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

func (m *SplitRequest) GetEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *SplitRequest) GetNewRange() *metapb.Range {
	if m != nil {
		return m.NewRange
	}
	return nil
}

type SplitResponse struct {
}

func (m *SplitResponse) Reset()                    { *m = SplitResponse{} }
func (m *SplitResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitResponse) ProtoMessage()               {}
func (*SplitResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{1} }

type MergeRequest struct {
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{2} }

type MergeResponse struct {
}

func (m *MergeResponse) Reset()                    { *m = MergeResponse{} }
func (m *MergeResponse) String() string            { return proto.CompactTextString(m) }
func (*MergeResponse) ProtoMessage()               {}
func (*MergeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{3} }

type LeaderChangeRequest struct {
	RangeId uint64             `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Epoch   *metapb.RangeEpoch `protobuf:"bytes,2,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *LeaderChangeRequest) Reset()                    { *m = LeaderChangeRequest{} }
func (m *LeaderChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaderChangeRequest) ProtoMessage()               {}
func (*LeaderChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{4} }

func (m *LeaderChangeRequest) GetRangeId() uint64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *LeaderChangeRequest) GetEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.Epoch
	}
	return nil
}

type LeaderChangeResponse struct {
}

func (m *LeaderChangeResponse) Reset()                    { *m = LeaderChangeResponse{} }
func (m *LeaderChangeResponse) String() string            { return proto.CompactTextString(m) }
func (*LeaderChangeResponse) ProtoMessage()               {}
func (*LeaderChangeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{5} }

type CmdID struct {
	NodeId uint64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Seq    uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *CmdID) Reset()                    { *m = CmdID{} }
func (m *CmdID) String() string            { return proto.CompactTextString(m) }
func (*CmdID) ProtoMessage()               {}
func (*CmdID) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{6} }

func (m *CmdID) GetNodeId() uint64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CmdID) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type Command struct {
	CmdId                *CmdID                        `protobuf:"bytes,1,opt,name=cmd_id,json=cmdId" json:"cmd_id,omitempty"`
	CmdType              CmdType                       `protobuf:"varint,2,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.CmdType" json:"cmd_type,omitempty"`
	VerifyEpoch          *metapb.RangeEpoch            `protobuf:"bytes,3,opt,name=verify_epoch,json=verifyEpoch" json:"verify_epoch,omitempty"`
	KvRawGetReq          *kvrpcpb.KvRawGetRequest      `protobuf:"bytes,4,opt,name=kv_raw_get_req,json=kvRawGetReq" json:"kv_raw_get_req,omitempty"`
	KvRawPutReq          *kvrpcpb.KvRawPutRequest      `protobuf:"bytes,5,opt,name=kv_raw_put_req,json=kvRawPutReq" json:"kv_raw_put_req,omitempty"`
	KvRawDeleteReq       *kvrpcpb.KvRawDeleteRequest   `protobuf:"bytes,6,opt,name=kv_raw_delete_req,json=kvRawDeleteReq" json:"kv_raw_delete_req,omitempty"`
	KvRawExecuteReq      *kvrpcpb.KvRawExecuteRequest  `protobuf:"bytes,7,opt,name=kv_raw_execute_req,json=kvRawExecuteReq" json:"kv_raw_execute_req,omitempty"`
	SelectReq            *kvrpcpb.SelectRequest        `protobuf:"bytes,8,opt,name=select_req,json=selectReq" json:"select_req,omitempty"`
	InsertReq            *kvrpcpb.InsertRequest        `protobuf:"bytes,9,opt,name=insert_req,json=insertReq" json:"insert_req,omitempty"`
	DeleteReq            *kvrpcpb.DeleteRequest        `protobuf:"bytes,10,opt,name=delete_req,json=deleteReq" json:"delete_req,omitempty"`
	BatchInsertReq       *kvrpcpb.BatchInsertRequest   `protobuf:"bytes,11,opt,name=batch_insert_req,json=batchInsertReq" json:"batch_insert_req,omitempty"`
	KvSetReq             *kvrpcpb.KvSetRequest         `protobuf:"bytes,12,opt,name=kv_set_req,json=kvSetReq" json:"kv_set_req,omitempty"`
	KvGetReq             *kvrpcpb.KvGetRequest         `protobuf:"bytes,13,opt,name=kv_get_req,json=kvGetReq" json:"kv_get_req,omitempty"`
	KvBatchSetReq        *kvrpcpb.KvBatchSetRequest    `protobuf:"bytes,14,opt,name=kv_batch_set_req,json=kvBatchSetReq" json:"kv_batch_set_req,omitempty"`
	KvBatchGetReq        *kvrpcpb.KvBatchGetRequest    `protobuf:"bytes,15,opt,name=kv_batch_get_req,json=kvBatchGetReq" json:"kv_batch_get_req,omitempty"`
	KvScanReq            *kvrpcpb.KvScanRequest        `protobuf:"bytes,16,opt,name=kv_scan_req,json=kvScanReq" json:"kv_scan_req,omitempty"`
	KvDeleteReq          *kvrpcpb.KvDeleteRequest      `protobuf:"bytes,17,opt,name=kv_delete_req,json=kvDeleteReq" json:"kv_delete_req,omitempty"`
	KvBatchDelReq        *kvrpcpb.KvBatchDeleteRequest `protobuf:"bytes,18,opt,name=kv_batch_del_req,json=kvBatchDelReq" json:"kv_batch_del_req,omitempty"`
	KvRangeDelReq        *kvrpcpb.KvRangeDeleteRequest `protobuf:"bytes,19,opt,name=kv_range_del_req,json=kvRangeDelReq" json:"kv_range_del_req,omitempty"`
	KvWatchPutReq        *watchpb.KvWatchPutRequest    `protobuf:"bytes,20,opt,name=kv_watch_put_req,json=kvWatchPutReq" json:"kv_watch_put_req,omitempty"`
	KvWatchDelReq        *watchpb.KvWatchDeleteRequest `protobuf:"bytes,21,opt,name=kv_watch_del_req,json=kvWatchDelReq" json:"kv_watch_del_req,omitempty"`
	AdminSplitReq        *SplitRequest                 `protobuf:"bytes,30,opt,name=admin_split_req,json=adminSplitReq" json:"admin_split_req,omitempty"`
	AdminMergeReq        *MergeRequest                 `protobuf:"bytes,31,opt,name=admin_merge_req,json=adminMergeReq" json:"admin_merge_req,omitempty"`
	AdminLeaderChangeReq *LeaderChangeRequest          `protobuf:"bytes,32,opt,name=admin_leader_change_req,json=adminLeaderChangeReq" json:"admin_leader_change_req,omitempty"`
	LockReq              *kvrpcpb.LockRequest          `protobuf:"bytes,40,opt,name=lock_req,json=lockReq" json:"lock_req,omitempty"`
	LockUpdateReq        *kvrpcpb.LockUpdateRequest    `protobuf:"bytes,41,opt,name=lock_update_req,json=lockUpdateReq" json:"lock_update_req,omitempty"`
	UnlockReq            *kvrpcpb.UnlockRequest        `protobuf:"bytes,42,opt,name=unlock_req,json=unlockReq" json:"unlock_req,omitempty"`
	UnlockForceReq       *kvrpcpb.UnlockForceRequest   `protobuf:"bytes,43,opt,name=unlock_force_req,json=unlockForceReq" json:"unlock_force_req,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{7} }

func (m *Command) GetCmdId() *CmdID {
	if m != nil {
		return m.CmdId
	}
	return nil
}

func (m *Command) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_Invalid
}

func (m *Command) GetVerifyEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.VerifyEpoch
	}
	return nil
}

func (m *Command) GetKvRawGetReq() *kvrpcpb.KvRawGetRequest {
	if m != nil {
		return m.KvRawGetReq
	}
	return nil
}

func (m *Command) GetKvRawPutReq() *kvrpcpb.KvRawPutRequest {
	if m != nil {
		return m.KvRawPutReq
	}
	return nil
}

func (m *Command) GetKvRawDeleteReq() *kvrpcpb.KvRawDeleteRequest {
	if m != nil {
		return m.KvRawDeleteReq
	}
	return nil
}

func (m *Command) GetKvRawExecuteReq() *kvrpcpb.KvRawExecuteRequest {
	if m != nil {
		return m.KvRawExecuteReq
	}
	return nil
}

func (m *Command) GetSelectReq() *kvrpcpb.SelectRequest {
	if m != nil {
		return m.SelectReq
	}
	return nil
}

func (m *Command) GetInsertReq() *kvrpcpb.InsertRequest {
	if m != nil {
		return m.InsertReq
	}
	return nil
}

func (m *Command) GetDeleteReq() *kvrpcpb.DeleteRequest {
	if m != nil {
		return m.DeleteReq
	}
	return nil
}

func (m *Command) GetBatchInsertReq() *kvrpcpb.BatchInsertRequest {
	if m != nil {
		return m.BatchInsertReq
	}
	return nil
}

func (m *Command) GetKvSetReq() *kvrpcpb.KvSetRequest {
	if m != nil {
		return m.KvSetReq
	}
	return nil
}

func (m *Command) GetKvGetReq() *kvrpcpb.KvGetRequest {
	if m != nil {
		return m.KvGetReq
	}
	return nil
}

func (m *Command) GetKvBatchSetReq() *kvrpcpb.KvBatchSetRequest {
	if m != nil {
		return m.KvBatchSetReq
	}
	return nil
}

func (m *Command) GetKvBatchGetReq() *kvrpcpb.KvBatchGetRequest {
	if m != nil {
		return m.KvBatchGetReq
	}
	return nil
}

func (m *Command) GetKvScanReq() *kvrpcpb.KvScanRequest {
	if m != nil {
		return m.KvScanReq
	}
	return nil
}

func (m *Command) GetKvDeleteReq() *kvrpcpb.KvDeleteRequest {
	if m != nil {
		return m.KvDeleteReq
	}
	return nil
}

func (m *Command) GetKvBatchDelReq() *kvrpcpb.KvBatchDeleteRequest {
	if m != nil {
		return m.KvBatchDelReq
	}
	return nil
}

func (m *Command) GetKvRangeDelReq() *kvrpcpb.KvRangeDeleteRequest {
	if m != nil {
		return m.KvRangeDelReq
	}
	return nil
}

func (m *Command) GetKvWatchPutReq() *watchpb.KvWatchPutRequest {
	if m != nil {
		return m.KvWatchPutReq
	}
	return nil
}

func (m *Command) GetKvWatchDelReq() *watchpb.KvWatchDeleteRequest {
	if m != nil {
		return m.KvWatchDelReq
	}
	return nil
}

func (m *Command) GetAdminSplitReq() *SplitRequest {
	if m != nil {
		return m.AdminSplitReq
	}
	return nil
}

func (m *Command) GetAdminMergeReq() *MergeRequest {
	if m != nil {
		return m.AdminMergeReq
	}
	return nil
}

func (m *Command) GetAdminLeaderChangeReq() *LeaderChangeRequest {
	if m != nil {
		return m.AdminLeaderChangeReq
	}
	return nil
}

func (m *Command) GetLockReq() *kvrpcpb.LockRequest {
	if m != nil {
		return m.LockReq
	}
	return nil
}

func (m *Command) GetLockUpdateReq() *kvrpcpb.LockUpdateRequest {
	if m != nil {
		return m.LockUpdateReq
	}
	return nil
}

func (m *Command) GetUnlockReq() *kvrpcpb.UnlockRequest {
	if m != nil {
		return m.UnlockReq
	}
	return nil
}

func (m *Command) GetUnlockForceReq() *kvrpcpb.UnlockForceRequest {
	if m != nil {
		return m.UnlockForceReq
	}
	return nil
}

type PeerTask struct {
	VerifyEpoch *metapb.RangeEpoch `protobuf:"bytes,1,opt,name=verify_epoch,json=verifyEpoch" json:"verify_epoch,omitempty"`
	Peer        *metapb.Peer       `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *PeerTask) Reset()                    { *m = PeerTask{} }
func (m *PeerTask) String() string            { return proto.CompactTextString(m) }
func (*PeerTask) ProtoMessage()               {}
func (*PeerTask) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{8} }

func (m *PeerTask) GetVerifyEpoch() *metapb.RangeEpoch {
	if m != nil {
		return m.VerifyEpoch
	}
	return nil
}

func (m *PeerTask) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type SnapshotKVPair struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SnapshotKVPair) Reset()                    { *m = SnapshotKVPair{} }
func (m *SnapshotKVPair) String() string            { return proto.CompactTextString(m) }
func (*SnapshotKVPair) ProtoMessage()               {}
func (*SnapshotKVPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{9} }

func (m *SnapshotKVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SnapshotKVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SnapshotContext struct {
	Meta *metapb.Range `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *SnapshotContext) Reset()                    { *m = SnapshotContext{} }
func (m *SnapshotContext) String() string            { return proto.CompactTextString(m) }
func (*SnapshotContext) ProtoMessage()               {}
func (*SnapshotContext) Descriptor() ([]byte, []int) { return fileDescriptorRaftCmdpb, []int{10} }

func (m *SnapshotContext) GetMeta() *metapb.Range {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*SplitRequest)(nil), "raft_cmdpb.SplitRequest")
	proto.RegisterType((*SplitResponse)(nil), "raft_cmdpb.SplitResponse")
	proto.RegisterType((*MergeRequest)(nil), "raft_cmdpb.MergeRequest")
	proto.RegisterType((*MergeResponse)(nil), "raft_cmdpb.MergeResponse")
	proto.RegisterType((*LeaderChangeRequest)(nil), "raft_cmdpb.LeaderChangeRequest")
	proto.RegisterType((*LeaderChangeResponse)(nil), "raft_cmdpb.LeaderChangeResponse")
	proto.RegisterType((*CmdID)(nil), "raft_cmdpb.CmdID")
	proto.RegisterType((*Command)(nil), "raft_cmdpb.Command")
	proto.RegisterType((*PeerTask)(nil), "raft_cmdpb.PeerTask")
	proto.RegisterType((*SnapshotKVPair)(nil), "raft_cmdpb.SnapshotKVPair")
	proto.RegisterType((*SnapshotContext)(nil), "raft_cmdpb.SnapshotContext")
	proto.RegisterEnum("raft_cmdpb.CmdType", CmdType_name, CmdType_value)
}
func (m *SplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Leader != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Leader))
	}
	if len(m.SplitKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.SplitKey)))
		i += copy(dAtA[i:], m.SplitKey)
	}
	if m.Epoch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Epoch.Size()))
		n1, err := m.Epoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NewRange != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.NewRange.Size()))
		n2, err := m.NewRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MergeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MergeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LeaderChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.RangeId))
	}
	if m.Epoch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Epoch.Size()))
		n3, err := m.Epoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LeaderChangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderChangeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CmdID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.NodeId))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdId.Size()))
		n4, err := m.CmdId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CmdType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.CmdType))
	}
	if m.VerifyEpoch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.VerifyEpoch.Size()))
		n5, err := m.VerifyEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KvRawGetReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawGetReq.Size()))
		n6, err := m.KvRawGetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KvRawPutReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawPutReq.Size()))
		n7, err := m.KvRawPutReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.KvRawDeleteReq != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawDeleteReq.Size()))
		n8, err := m.KvRawDeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KvRawExecuteReq != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRawExecuteReq.Size()))
		n9, err := m.KvRawExecuteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.SelectReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.SelectReq.Size()))
		n10, err := m.SelectReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.InsertReq != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.InsertReq.Size()))
		n11, err := m.InsertReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.DeleteReq != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.DeleteReq.Size()))
		n12, err := m.DeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.BatchInsertReq != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.BatchInsertReq.Size()))
		n13, err := m.BatchInsertReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.KvSetReq != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvSetReq.Size()))
		n14, err := m.KvSetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.KvGetReq != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvGetReq.Size()))
		n15, err := m.KvGetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.KvBatchSetReq != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvBatchSetReq.Size()))
		n16, err := m.KvBatchSetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.KvBatchGetReq != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvBatchGetReq.Size()))
		n17, err := m.KvBatchGetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.KvScanReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvScanReq.Size()))
		n18, err := m.KvScanReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.KvDeleteReq != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvDeleteReq.Size()))
		n19, err := m.KvDeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.KvBatchDelReq != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvBatchDelReq.Size()))
		n20, err := m.KvBatchDelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.KvRangeDelReq != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvRangeDelReq.Size()))
		n21, err := m.KvRangeDelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.KvWatchPutReq != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvWatchPutReq.Size()))
		n22, err := m.KvWatchPutReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.KvWatchDelReq != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.KvWatchDelReq.Size()))
		n23, err := m.KvWatchDelReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.AdminSplitReq != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.AdminSplitReq.Size()))
		n24, err := m.AdminSplitReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.AdminMergeReq != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.AdminMergeReq.Size()))
		n25, err := m.AdminMergeReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.AdminLeaderChangeReq != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.AdminLeaderChangeReq.Size()))
		n26, err := m.AdminLeaderChangeReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.LockReq != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.LockReq.Size()))
		n27, err := m.LockReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.LockUpdateReq != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.LockUpdateReq.Size()))
		n28, err := m.LockUpdateReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.UnlockReq != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.UnlockReq.Size()))
		n29, err := m.UnlockReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.UnlockForceReq != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.UnlockForceReq.Size()))
		n30, err := m.UnlockForceReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *PeerTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VerifyEpoch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.VerifyEpoch.Size()))
		n31, err := m.VerifyEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Peer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Peer.Size()))
		n32, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *SnapshotKVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotKVPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SnapshotContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftCmdpb(dAtA, i, uint64(m.Meta.Size()))
		n33, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func encodeVarintRaftCmdpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SplitRequest) Size() (n int) {
	var l int
	_ = l
	if m.Leader != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.Leader))
	}
	l = len(m.SplitKey)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.NewRange != nil {
		l = m.NewRange.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *SplitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MergeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MergeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LeaderChangeRequest) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.RangeId))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *LeaderChangeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CmdID) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.NodeId))
	}
	if m.Seq != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.Seq))
	}
	return n
}

func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.CmdId != nil {
		l = m.CmdId.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.CmdType != 0 {
		n += 1 + sovRaftCmdpb(uint64(m.CmdType))
	}
	if m.VerifyEpoch != nil {
		l = m.VerifyEpoch.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawGetReq != nil {
		l = m.KvRawGetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawPutReq != nil {
		l = m.KvRawPutReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawDeleteReq != nil {
		l = m.KvRawDeleteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRawExecuteReq != nil {
		l = m.KvRawExecuteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.SelectReq != nil {
		l = m.SelectReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.InsertReq != nil {
		l = m.InsertReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.DeleteReq != nil {
		l = m.DeleteReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.BatchInsertReq != nil {
		l = m.BatchInsertReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvSetReq != nil {
		l = m.KvSetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvGetReq != nil {
		l = m.KvGetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvBatchSetReq != nil {
		l = m.KvBatchSetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvBatchGetReq != nil {
		l = m.KvBatchGetReq.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvScanReq != nil {
		l = m.KvScanReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvDeleteReq != nil {
		l = m.KvDeleteReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvBatchDelReq != nil {
		l = m.KvBatchDelReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvRangeDelReq != nil {
		l = m.KvRangeDelReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvWatchPutReq != nil {
		l = m.KvWatchPutReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.KvWatchDelReq != nil {
		l = m.KvWatchDelReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.AdminSplitReq != nil {
		l = m.AdminSplitReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.AdminMergeReq != nil {
		l = m.AdminMergeReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.AdminLeaderChangeReq != nil {
		l = m.AdminLeaderChangeReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.LockReq != nil {
		l = m.LockReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.LockUpdateReq != nil {
		l = m.LockUpdateReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.UnlockReq != nil {
		l = m.UnlockReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	if m.UnlockForceReq != nil {
		l = m.UnlockForceReq.Size()
		n += 2 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *PeerTask) Size() (n int) {
	var l int
	_ = l
	if m.VerifyEpoch != nil {
		l = m.VerifyEpoch.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *SnapshotKVPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func (m *SnapshotContext) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRaftCmdpb(uint64(l))
	}
	return n
}

func sovRaftCmdpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftCmdpb(x uint64) (n int) {
	return sovRaftCmdpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &metapb.RangeEpoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRange == nil {
				m.NewRange = &metapb.Range{}
			}
			if err := m.NewRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &metapb.RangeEpoch{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderChangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderChangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderChangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CmdId == nil {
				m.CmdId = &CmdID{}
			}
			if err := m.CmdId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyEpoch == nil {
				m.VerifyEpoch = &metapb.RangeEpoch{}
			}
			if err := m.VerifyEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawGetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawGetReq == nil {
				m.KvRawGetReq = &kvrpcpb.KvRawGetRequest{}
			}
			if err := m.KvRawGetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawPutReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawPutReq == nil {
				m.KvRawPutReq = &kvrpcpb.KvRawPutRequest{}
			}
			if err := m.KvRawPutReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawDeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawDeleteReq == nil {
				m.KvRawDeleteReq = &kvrpcpb.KvRawDeleteRequest{}
			}
			if err := m.KvRawDeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRawExecuteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRawExecuteReq == nil {
				m.KvRawExecuteReq = &kvrpcpb.KvRawExecuteRequest{}
			}
			if err := m.KvRawExecuteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectReq == nil {
				m.SelectReq = &kvrpcpb.SelectRequest{}
			}
			if err := m.SelectReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsertReq == nil {
				m.InsertReq = &kvrpcpb.InsertRequest{}
			}
			if err := m.InsertReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteReq == nil {
				m.DeleteReq = &kvrpcpb.DeleteRequest{}
			}
			if err := m.DeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchInsertReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchInsertReq == nil {
				m.BatchInsertReq = &kvrpcpb.BatchInsertRequest{}
			}
			if err := m.BatchInsertReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvSetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvSetReq == nil {
				m.KvSetReq = &kvrpcpb.KvSetRequest{}
			}
			if err := m.KvSetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvGetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvGetReq == nil {
				m.KvGetReq = &kvrpcpb.KvGetRequest{}
			}
			if err := m.KvGetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatchSetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvBatchSetReq == nil {
				m.KvBatchSetReq = &kvrpcpb.KvBatchSetRequest{}
			}
			if err := m.KvBatchSetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatchGetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvBatchGetReq == nil {
				m.KvBatchGetReq = &kvrpcpb.KvBatchGetRequest{}
			}
			if err := m.KvBatchGetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvScanReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvScanReq == nil {
				m.KvScanReq = &kvrpcpb.KvScanRequest{}
			}
			if err := m.KvScanReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvDeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvDeleteReq == nil {
				m.KvDeleteReq = &kvrpcpb.KvDeleteRequest{}
			}
			if err := m.KvDeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvBatchDelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvBatchDelReq == nil {
				m.KvBatchDelReq = &kvrpcpb.KvBatchDeleteRequest{}
			}
			if err := m.KvBatchDelReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvRangeDelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvRangeDelReq == nil {
				m.KvRangeDelReq = &kvrpcpb.KvRangeDeleteRequest{}
			}
			if err := m.KvRangeDelReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvWatchPutReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvWatchPutReq == nil {
				m.KvWatchPutReq = &watchpb.KvWatchPutRequest{}
			}
			if err := m.KvWatchPutReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvWatchDelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvWatchDelReq == nil {
				m.KvWatchDelReq = &watchpb.KvWatchDeleteRequest{}
			}
			if err := m.KvWatchDelReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminSplitReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminSplitReq == nil {
				m.AdminSplitReq = &SplitRequest{}
			}
			if err := m.AdminSplitReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminMergeReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminMergeReq == nil {
				m.AdminMergeReq = &MergeRequest{}
			}
			if err := m.AdminMergeReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLeaderChangeReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminLeaderChangeReq == nil {
				m.AdminLeaderChangeReq = &LeaderChangeRequest{}
			}
			if err := m.AdminLeaderChangeReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockReq == nil {
				m.LockReq = &kvrpcpb.LockRequest{}
			}
			if err := m.LockReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockUpdateReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockUpdateReq == nil {
				m.LockUpdateReq = &kvrpcpb.LockUpdateRequest{}
			}
			if err := m.LockUpdateReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnlockReq == nil {
				m.UnlockReq = &kvrpcpb.UnlockRequest{}
			}
			if err := m.UnlockReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockForceReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnlockForceReq == nil {
				m.UnlockForceReq = &kvrpcpb.UnlockForceRequest{}
			}
			if err := m.UnlockForceReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyEpoch == nil {
				m.VerifyEpoch = &metapb.RangeEpoch{}
			}
			if err := m.VerifyEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &metapb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotKVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotKVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotKVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &metapb.Range{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftCmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftCmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftCmdpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftCmdpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftCmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftCmdpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftCmdpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftCmdpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftCmdpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftCmdpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft_cmdpb.proto", fileDescriptorRaftCmdpb) }

var fileDescriptorRaftCmdpb = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x8e, 0x62, 0x3d, 0x47, 0xaf, 0xf5, 0x5a, 0x76, 0x5c, 0xa7, 0x95, 0x55, 0x9d, 0x14, 0x07,
	0x70, 0x00, 0xa7, 0x29, 0x7a, 0x68, 0x81, 0xc6, 0x4f, 0x08, 0x4e, 0x01, 0x83, 0xce, 0x03, 0xe8,
	0x85, 0xa0, 0xc9, 0xb5, 0x2d, 0x90, 0x22, 0x69, 0x92, 0xa2, 0xe2, 0x7f, 0xd2, 0xfc, 0xa3, 0x1e,
	0xfb, 0x13, 0x0a, 0xf7, 0xdc, 0xff, 0x50, 0xec, 0xec, 0x2e, 0xb9, 0xa4, 0x0c, 0xa4, 0xb7, 0x79,
	0x7d, 0xdf, 0xcc, 0xee, 0x0e, 0x67, 0x08, 0x24, 0xb2, 0xae, 0x13, 0xd3, 0x9e, 0x3b, 0xe1, 0xd5,
	0x7e, 0x18, 0x05, 0x49, 0x40, 0x21, 0xb7, 0xec, 0x74, 0xe6, 0x2c, 0xb1, 0x94, 0x67, 0xa7, 0xeb,
	0xa6, 0x51, 0x68, 0x67, 0xea, 0xe0, 0x26, 0xb8, 0x09, 0x50, 0x7c, 0xc5, 0x25, 0x15, 0xb4, 0xb4,
	0x12, 0xfb, 0x56, 0x05, 0x8d, 0xbf, 0x54, 0xa0, 0x73, 0x19, 0x7a, 0xb3, 0xc4, 0x60, 0x77, 0x0b,
	0x16, 0x27, 0x74, 0x0b, 0xea, 0x1e, 0xb3, 0x1c, 0x16, 0x6d, 0x57, 0x46, 0x95, 0x49, 0xd5, 0x90,
	0x1a, 0x7d, 0x0e, 0xad, 0x98, 0xc7, 0x99, 0x2e, 0xbb, 0xdf, 0x7e, 0x3a, 0xaa, 0x4c, 0x3a, 0x46,
	0x13, 0x0d, 0xe7, 0xec, 0x9e, 0x4e, 0xa0, 0xc6, 0xc2, 0xc0, 0xbe, 0xdd, 0x5e, 0x1b, 0x55, 0x26,
	0xed, 0x03, 0xba, 0x2f, 0xeb, 0x32, 0x2c, 0xff, 0x86, 0x9d, 0x70, 0x8f, 0x21, 0x02, 0xe8, 0x1e,
	0xb4, 0x7c, 0xb6, 0x34, 0x23, 0xee, 0xd8, 0xae, 0x62, 0x74, 0xb7, 0x10, 0x6d, 0x34, 0x7d, 0xb6,
	0x44, 0x69, 0xdc, 0x87, 0xae, 0x2c, 0x2d, 0x0e, 0x03, 0x3f, 0x66, 0xe3, 0x1e, 0x74, 0x7e, 0x63,
	0xd1, 0x0d, 0x93, 0xb5, 0xf2, 0x00, 0xa9, 0xcb, 0x80, 0xdf, 0x61, 0xe3, 0x1d, 0x96, 0x7b, 0x74,
	0x8b, 0x5c, 0xf2, 0x4c, 0xdf, 0x40, 0x13, 0x13, 0x9a, 0x33, 0x47, 0x9e, 0xaa, 0x81, 0xfa, 0xd4,
	0xc9, 0x2b, 0x7f, 0xfa, 0x95, 0xca, 0xc7, 0x5b, 0x30, 0x28, 0x72, 0xcb, 0x9c, 0x07, 0x50, 0x3b,
	0x9a, 0x3b, 0xd3, 0x63, 0xfa, 0x0c, 0x1a, 0x7e, 0xe0, 0x68, 0x49, 0xea, 0x5c, 0x9d, 0x3a, 0x94,
	0xc0, 0x5a, 0xcc, 0xee, 0x30, 0x43, 0xd5, 0xe0, 0xe2, 0xf8, 0xdf, 0x2e, 0x34, 0x8e, 0x82, 0xf9,
	0xdc, 0xf2, 0x79, 0x05, 0x75, 0x7b, 0xee, 0x28, 0x54, 0xfb, 0x60, 0x7d, 0x5f, 0x7b, 0x72, 0x64,
	0x36, 0x6a, 0xf6, 0xdc, 0x99, 0x3a, 0x74, 0x1f, 0x9a, 0x3c, 0x32, 0xb9, 0x0f, 0x19, 0x92, 0xf5,
	0x0e, 0x36, 0x4a, 0xb1, 0xef, 0xef, 0x43, 0x66, 0x34, 0x6c, 0x21, 0xd0, 0x37, 0xd0, 0x49, 0x59,
	0x34, 0xbb, 0xbe, 0x37, 0xbf, 0xf6, 0x38, 0x6d, 0x11, 0x87, 0x0a, 0xfd, 0x05, 0x7a, 0x6e, 0x6a,
	0x46, 0xd6, 0xd2, 0xbc, 0x61, 0x89, 0x19, 0xb1, 0x3b, 0xf9, 0x4e, 0xdb, 0xfb, 0xaa, 0xbf, 0xce,
	0x53, 0xc3, 0x5a, 0x9e, 0x31, 0xd5, 0x33, 0x46, 0xdb, 0xcd, 0x0d, 0x1a, 0x3c, 0x5c, 0x08, 0x78,
	0xed, 0x31, 0xf8, 0xc5, 0xa2, 0x04, 0x17, 0x06, 0x7a, 0x0a, 0xeb, 0x12, 0xee, 0x30, 0x8f, 0x25,
	0x0c, 0x19, 0xea, 0xc8, 0xf0, 0xbc, 0xc8, 0x70, 0x8c, 0x7e, 0x45, 0xd2, 0x73, 0x0b, 0x36, 0x3a,
	0x05, 0x2a, 0x79, 0xd8, 0x67, 0x66, 0x2f, 0x24, 0x51, 0x03, 0x89, 0xbe, 0x2d, 0x12, 0x9d, 0x88,
	0x00, 0xc5, 0xd4, 0x77, 0x8b, 0x46, 0xfa, 0x06, 0x20, 0x66, 0x1e, 0xb3, 0xc5, 0x69, 0x9a, 0x48,
	0xb1, 0x95, 0x51, 0x5c, 0xa2, 0x4b, 0x81, 0x5b, 0xb1, 0x52, 0x39, 0x6c, 0xe6, 0xc7, 0x2c, 0x12,
	0xb0, 0x56, 0x09, 0x36, 0x45, 0x57, 0x06, 0x9b, 0x29, 0x95, 0xc3, 0xb4, 0x93, 0x43, 0x09, 0x56,
	0x3c, 0x74, 0xcb, 0xc9, 0xce, 0x7b, 0x02, 0xe4, 0x8a, 0x7f, 0xd9, 0xa6, 0x96, 0xb3, 0x5d, 0xba,
	0xb6, 0x43, 0x1e, 0x50, 0x4c, 0xdc, 0xbb, 0x2a, 0xd8, 0xe8, 0x6b, 0x00, 0x37, 0x35, 0x63, 0xf9,
	0xf0, 0x1d, 0x24, 0xd8, 0xd4, 0xae, 0xeb, 0x32, 0x7f, 0xf5, 0xa6, 0x2b, 0x35, 0x09, 0x52, 0xdd,
	0xd2, 0x5d, 0x01, 0x9d, 0x15, 0x40, 0xb2, 0x4f, 0x8e, 0x80, 0xb8, 0xa9, 0x29, 0x6a, 0x56, 0xf9,
	0x7a, 0x08, 0xdd, 0xd1, 0xa0, 0x58, 0xb2, 0x96, 0xb4, 0xeb, 0xea, 0xa6, 0x02, 0x89, 0xca, 0xdf,
	0x7f, 0x9c, 0xe4, 0x6c, 0x95, 0x44, 0x56, 0xf2, 0x23, 0xb4, 0xf9, 0x99, 0x6d, 0xcb, 0x47, 0x3c,
	0x29, 0x5d, 0xf9, 0x79, 0x7a, 0x69, 0x5b, 0x7e, 0x76, 0xe5, 0xae, 0x52, 0xe9, 0xcf, 0xd0, 0x75,
	0x53, 0xbd, 0x4d, 0xd7, 0x57, 0x1a, 0xbd, 0xf8, 0x5c, 0x6d, 0x37, 0x37, 0xd0, 0x53, 0xad, 0x74,
	0x87, 0x79, 0x48, 0x40, 0x91, 0xe0, 0xbb, 0x72, 0xe9, 0x45, 0x16, 0x55, 0xfd, 0x31, 0xf3, 0x72,
	0x1e, 0x31, 0xdf, 0x14, 0xcf, 0xc6, 0x0a, 0x0f, 0x7e, 0xec, 0x2b, 0x3c, 0xca, 0x9a, 0x5f, 0x25,
	0x6e, 0x87, 0xec, 0xcb, 0x1d, 0xc8, 0xab, 0x54, 0x3b, 0xe3, 0x3c, 0xfd, 0xc4, 0x25, 0xed, 0xdb,
	0xed, 0xba, 0xba, 0x49, 0x16, 0xb3, 0x2c, 0x1c, 0x6a, 0x53, 0x16, 0x53, 0x22, 0x59, 0x29, 0xe6,
	0x93, 0x76, 0xa8, 0x5f, 0xa1, 0x6f, 0x39, 0xf3, 0x99, 0x6f, 0x8a, 0x9d, 0xc3, 0x69, 0x86, 0xf2,
	0x72, 0xb5, 0x89, 0xa7, 0x2f, 0x2e, 0xa3, 0x8b, 0x00, 0x65, 0xca, 0x19, 0xe6, 0x7c, 0x43, 0x20,
	0xc3, 0xee, 0x2a, 0x83, 0xbe, 0x4e, 0x24, 0x83, 0x32, 0xd1, 0x8f, 0xf0, 0x4c, 0x30, 0x88, 0x0d,
	0x68, 0xda, 0x38, 0xf7, 0x91, 0x69, 0x84, 0x4c, 0xbb, 0x3a, 0xd3, 0x23, 0x7b, 0xc7, 0x18, 0x20,
	0xbe, 0xe4, 0xa1, 0xaf, 0xa0, 0xe9, 0x05, 0xb6, 0x8b, 0x44, 0x13, 0x24, 0x1a, 0x64, 0x0f, 0xf5,
	0x2e, 0xb0, 0x5d, 0x85, 0x6e, 0x78, 0x42, 0xa1, 0x87, 0xd0, 0x47, 0xc0, 0x22, 0x74, 0x2c, 0xd9,
	0x69, 0x2f, 0x4a, 0x3d, 0xce, 0x71, 0x1f, 0xd0, 0x9d, 0x1d, 0xc6, 0xd3, 0x4d, 0x7c, 0xaa, 0x2c,
	0xfc, 0x2c, 0xed, 0x5e, 0xa9, 0xc5, 0x3f, 0xf8, 0x9e, 0x96, 0xb8, 0xb5, 0x50, 0x2a, 0x9f, 0x2a,
	0x12, 0x76, 0x1d, 0x44, 0xb6, 0xc8, 0xfd, 0xb2, 0x34, 0x55, 0x04, 0xf8, 0x94, 0xfb, 0xb3, 0xa9,
	0xb2, 0x28, 0xd8, 0xc6, 0x36, 0x34, 0x2f, 0x18, 0x8b, 0xde, 0x5b, 0xb1, 0xbb, 0xb2, 0x95, 0x2a,
	0xff, 0x6f, 0x2b, 0x8d, 0xa0, 0x1a, 0x32, 0x16, 0xc9, 0x3d, 0xdd, 0x51, 0xe1, 0x9c, 0xd6, 0x40,
	0xcf, 0xf8, 0x27, 0xe8, 0x5d, 0xfa, 0x56, 0x18, 0xdf, 0x06, 0xc9, 0xf9, 0xc7, 0x0b, 0x6b, 0x16,
	0xf1, 0xc5, 0xcb, 0xff, 0x56, 0x2a, 0xf8, 0xb7, 0xc2, 0x45, 0x3a, 0x80, 0x5a, 0x6a, 0x79, 0x0b,
	0x26, 0xff, 0x60, 0x84, 0x32, 0xfe, 0x01, 0xfa, 0x0a, 0x79, 0x14, 0xf8, 0x09, 0xfb, 0x9c, 0xd0,
	0xef, 0xa1, 0xca, 0x33, 0xc8, 0xea, 0x4a, 0xbf, 0x28, 0xe8, 0xda, 0xfb, 0xb2, 0x06, 0x0d, 0xb9,
	0x73, 0x69, 0x1b, 0x1a, 0x53, 0x3f, 0xb5, 0xbc, 0x99, 0x43, 0x9e, 0x50, 0x80, 0xba, 0x58, 0x87,
	0xa4, 0x22, 0xe5, 0x8b, 0x45, 0x42, 0x9e, 0xd2, 0x2e, 0xb4, 0xb2, 0x15, 0x45, 0xd6, 0x68, 0x0f,
	0x20, 0xdf, 0x33, 0xa4, 0xca, 0x43, 0xc5, 0x2e, 0x21, 0x0d, 0x2e, 0x8b, 0x99, 0x4c, 0x9a, 0x5c,
	0x96, 0x98, 0x16, 0x97, 0xc5, 0x9b, 0x12, 0xe0, 0x39, 0x0d, 0x16, 0x7a, 0x96, 0xcd, 0x48, 0x9b,
	0xf6, 0xa1, 0xad, 0x4d, 0x77, 0xd2, 0xa1, 0x2d, 0xa8, 0xe1, 0xb4, 0x26, 0x5d, 0x21, 0xf2, 0x72,
	0x7a, 0x3c, 0x67, 0x3e, 0x53, 0x49, 0x5f, 0xd3, 0xb9, 0x9f, 0x70, 0x7e, 0x31, 0xee, 0xc8, 0x3a,
	0xed, 0x40, 0x53, 0x0d, 0x30, 0x42, 0xb5, 0xc8, 0x63, 0xe6, 0x91, 0x0d, 0xa1, 0xab, 0xf9, 0x41,
	0x06, 0x42, 0x57, 0xa3, 0x80, 0x6c, 0x6a, 0x3a, 0xf7, 0x6f, 0x71, 0xfd, 0x6d, 0xf6, 0x81, 0x92,
	0x61, 0xa6, 0xe3, 0xe7, 0x46, 0x76, 0xe9, 0x26, 0xac, 0xbf, 0x2d, 0x7f, 0x2d, 0x64, 0x44, 0x9b,
	0x50, 0xe5, 0xbd, 0x4d, 0x26, 0x1c, 0x90, 0x77, 0x39, 0x79, 0x81, 0x57, 0x81, 0x5d, 0x46, 0xf6,
	0xf8, 0xe9, 0xb5, 0x2e, 0x24, 0x2f, 0x0f, 0xc9, 0x9f, 0x0f, 0xc3, 0xca, 0x5f, 0x0f, 0xc3, 0xca,
	0xdf, 0x0f, 0xc3, 0xca, 0x1f, 0xff, 0x0c, 0x9f, 0x5c, 0xd5, 0xf1, 0x7f, 0xf7, 0xf5, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa5, 0x97, 0xc5, 0x09, 0x51, 0x0b, 0x00, 0x00,
}
