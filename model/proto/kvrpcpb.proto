syntax = "proto3";
package kvrpcpb;

import "metapb.proto";
import "errorpb.proto";

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message KvPair {
    bytes   key   = 1;
    bytes   value = 2;
}

message RequestHeader {
    uint64 cluster_id              = 1;
    // 2 is reserved for backward-compatible
    uint64 trace_id                = 3;
    uint64 range_id                = 4;
    metapb.RangeEpoch range_epoch  = 5;
    uint64 read_index              = 6;
}

message ResponseHeader {
    uint64 cluster_id              = 1;
    // 2 is reserved for backward-compatible
    uint64 trace_id                = 3;
    // 4 is reserved for backward-compatible
    errorpb.Error     error        = 5;
    uint64 apply_index             = 6;
}

message DsKvRawGetRequest {
    RequestHeader header     = 1;
    KvRawGetRequest req      = 2;
}

message DsKvRawGetResponse {
    ResponseHeader header    = 1;
    KvRawGetResponse resp    = 2;
}

message KvRawGetRequest {
    bytes key            = 1;
}

message KvRawGetResponse {
    // 0: success 1: not leader 2: raft busy 3: other error
    int32  code           = 1;
    bytes  value          = 2;
}

message DsKvRawPutRequest {
    RequestHeader header = 1;
    KvRawPutRequest req  = 2;
}

message DsKvRawPutResponse {
    ResponseHeader header = 1;
    KvRawPutResponse resp = 2;
}

message KvRawPutRequest {
    bytes key            = 1;
    bytes value          = 2;
}

message KvRawPutResponse {
    int32  code           = 1;
}

message DsKvRawDeleteRequest {
    RequestHeader header     = 1;
    KvRawDeleteRequest req   = 2;
}

message DsKvRawDeleteResponse {
    ResponseHeader header         = 1;
    KvRawDeleteResponse resp      = 2;
}

message KvRawDeleteRequest {
    bytes key            = 1;
}

message KvRawDeleteResponse {
    int32  code           = 1;
}

enum ExecuteType {
    ExecInvalid     = 0;
    ExecPut         = 1;
    ExecDelete      = 2;
}

message KvPairRawExecute {
    ExecuteType do           = 1;
    KvPair   kv_pair         = 2;
}

message DsKvRawExecuteRequest {
    RequestHeader header                 = 1;
    KvRawExecuteRequest  req             = 2;
}

message DsKvRawExecuteResponse {
    ResponseHeader header       = 1;
    KvRawExecuteResponse resp   = 2;
}

message KvRawExecuteRequest {
    // 历史原因，只能是2
    repeated KvPairRawExecute  execs     = 1;
}

message KvRawExecuteResponse {
    int32 code              = 1;
}

// for SQL
message Scope {
    bytes  start     = 1;
    bytes  limit     = 2;
}

message SelectField {
    enum Type {
        Column = 0;
        AggreFunction = 1;
    }

    Type typ                = 1;
    string aggre_func       = 2;
    metapb.Column column    = 3; // select column(if typ is Column) or aggregate function parameter(is typ is AggreFunction)
}

enum MatchType {
    //proto restrict
    Invalid       = 0;
    Equal         = 1;
    NotEqual      = 2;
    Less          = 3;
    LessOrEqual   = 4;
    Larger        = 5;
    LargerOrEqual = 6;

    LogicAnd      = 11;
    LogicOr       = 12;
    LogicNot      = 13;
}

enum ExprType {
    E_Invalid    = 0;

    E_LogicAnd    = 1;
    E_LogicOr     = 2;
    E_LogicNot    = 3;

    E_Equal       = 11; 
    E_NotEqual    = 12;
    E_Less        = 13;
    E_LessOrEqual      = 14;
    E_Larger           = 15;
    E_LargerOrEqual    = 16;

    E_Plus             = 21;
    E_Minus            = 22;
    E_Mult             = 23;
    E_Div              = 24;

    E_ExprCol     = 31;
    E_ExprConst   = 32;
}

enum FieldType {
    Assign           = 0;
    Plus             = 1;
    Minus            = 2;
    Mult             = 3;
    Div              = 4;
}

message Match {
    metapb.Column column   = 1;
    // 匹配对象
    bytes threshold        = 2;
    MatchType match_type   = 3;
}

message MatchExt {
    Expr expr      = 1;
}

message Expr {
    ExprType expr_type      = 1;    // uint32
    uint32 expr_func        = 2;    // reserve
    metapb.Column column    = 3;    // left in optimization
    bytes value             = 4;    // maybe left or right, but right in optimization
    repeated Expr  child    = 5;    // alwayse 2 expr left and right, but LogicNot
}

message Limit {
    uint64   offset     = 1;
    uint64   count      = 2;
}

message DsSelectRequest {
    RequestHeader header              = 1;
    SelectRequest req                 = 2;
}

message SelectRequest {
    bytes key                           = 1;       // 只查询单行
    Scope scope                         = 2;       // 查询主键在某个范围的行
    repeated SelectField field_list     = 3;       // select filed list
    repeated Match where_filters        = 4;       // where matches
    repeated metapb.Column group_bys    = 5;       // group by column ids
    Limit limit                         = 6;       // max range query num, 0 means no limit

    // 7 is reserved for backward-compatible
    MatchExt ext_filter                 = 10;      // extend where condition
}

message Row {
    bytes key                    = 1;              // encoded group by columns(pk if group-by not exist) value
    bytes fields                 = 2;              //  encoded fields
    repeated int64 aggred_counts = 3;              // aggregated row count(for avg)
}

message DsSelectResponse {
    ResponseHeader header = 1;
    SelectResponse resp = 2;
 }

 message SelectResponse {
    // 0: success 1: not leader 2: raft busy 3: raft stop 4: read only 5: other error
    // >= 1000 SQL server error code
    // >= 2000 SQL client error code
    int32 code        = 1;
    repeated Row rows = 2;
    // for limit, offset in the range
    uint64 offset     = 3;
}

message KeyValue {
    bytes Key       = 1; // 编码后的主键
    bytes Value     = 2; // 编码后的列值（所有非主键列）
    uint64 TTL      = 3; // 相对时间（时间，秒）
}

message DsInsertRequest {
    RequestHeader header = 1;
    InsertRequest req  = 2;
}

message DsInsertResponse {
    ResponseHeader header = 1;
    InsertResponse resp = 2;
}

message InsertRequest {
    repeated KeyValue rows  = 1; // 多行
    bool  check_duplicate   = 2; // 是否检查对应的主键已经存在
    // 3 is reserved for backward-compatible
}

message InsertResponse {
    int32 code              = 1;
    //受影响的KV
    uint64 affected_keys    = 2;
    // code != 0有效
    bytes  duplicate_key    = 3;
}

message BatchInsertRequest {
    repeated InsertRequest reqs   = 1;
}

message BatchInsertResponse {
    repeated InsertResponse resps = 2;
}

message DsDeleteRequest {
    RequestHeader header = 1;
    DeleteRequest req  = 2;
}

message DsDeleteResponse {
    ResponseHeader header = 1;
    DeleteResponse resp = 2;
}

message DeleteRequest {
    bytes key                       = 1; // 只删除单行
    Scope scope                     = 2; // 删除某个范围
    repeated Match where_filters    = 3;
    repeated uint64 indexs          = 4; // 删除操作同时需要删除索引记录，因此提供对应的索引列
    // 10 is reserved for backward-compatible
}

message DeleteResponse {
    int32 code              = 1;
    //受影响的KV
    uint64 affected_keys    = 2;
}

message Field {
    metapb.Column column    = 1;
    bytes value             = 2;
    FieldType field_type    = 3;
}

message UpdateRequest {
    bytes key                       = 1;
    Scope scope                     = 2;
    repeated Field fields           = 3;
    repeated Match where_filters    = 4;
    Limit limit                     = 5;       // max update num, only rowCount, 0 means no limit
}

message DsUpdateRequest {
    RequestHeader header = 1;
    UpdateRequest req    = 2;
}

message UpdateResponse {
    int32 code              = 1;
    uint64 affected_keys    = 2;
}

message DsUpdateResponse {
    ResponseHeader header = 1;
    UpdateResponse resp = 2;
}

message IndexScanRequest {
    bytes key             = 1;
    Scope scope           = 2;
    Limit limit           = 3;
}

message DsIndexScanRequest {
    RequestHeader    header = 1;
    IndexScanRequest req    = 2;
}

message IndexScanResponse {
    repeated bytes pk_values = 1;
}

message DsIndexScanResponse {
    ResponseHeader    header = 1;
    IndexScanResponse resp   = 2;
}

message LockValue {
    bytes value             = 2;
    string id               = 3;
    int64 delete_time       = 4;
    int64 update_time       = 5;
    //int64 delete_flag       = 6;
    string by               = 7;
}

message LockRequest {
    bytes key               = 1;
    LockValue value         = 2;
}

message DsLockRequest {
    RequestHeader header        = 1;
    LockRequest req             = 2;
}

message LockResponse {
    int64 code      = 1;
    string error    = 2;
    bytes value             = 3;
    int64 update_time       = 4;
}

message LockInfo {
    bytes key               = 1;
    LockValue value         = 2;
}

message LockScanResponse  {
    repeated LockInfo info      = 1;
    bytes last_key              = 2;
}

message DsLockResponse {
    ResponseHeader header           = 1;
    LockResponse resp               = 2;
}

message LockUpdateRequest {
    bytes key               = 1;
    string id               = 3;
    int64 delete_time       = 5;
    bytes update_value      = 6;
    string by               = 11;
}

message DsLockUpdateRequest {
    RequestHeader header        = 1;
    LockUpdateRequest req       = 2;
}

message DsLockUpdateResponse {
    ResponseHeader header           = 1;
    LockResponse resp               = 2;
}

message UnlockRequest {
    bytes key               = 1;
    string id               = 3;
    string by               = 11;
}

message DsUnlockRequest {
    RequestHeader header        = 1;
    UnlockRequest req           = 2;
}

message DsUnlockResponse {
    ResponseHeader header           = 1;
    LockResponse resp               = 2;
}

message UnlockForceRequest {
    bytes key               = 1;
    string by               = 11;
}

message DsUnlockForceRequest {
    RequestHeader header        = 1;
    UnlockForceRequest req      = 2;
}

message DsUnlockForceResponse {
    ResponseHeader header           = 1;
    LockResponse resp               = 2;
}

message LockScanRequest {
    bytes start              = 1;
    bytes limit              = 2;
    uint32 count             = 3;
}

message DsLockScanRequest {
    RequestHeader header     = 1;
    LockScanRequest req      = 2;
}

message DsLockScanResponse {
    ResponseHeader header           = 1;
    LockScanResponse resp           = 2;
}


message LockGetRequest {
    bytes key               = 1;
}

message LockGetResponse {
    int64 code      = 1;
    string error    = 2;
    LockValue value             = 3;
}

message DsLockGetRequest {
    RequestHeader header        = 1;
    LockGetRequest req          = 2;
}

message DsLockGetResponse {
    ResponseHeader header           = 1;
    LockGetResponse resp            = 2;
}
