syntax = "proto3";
package watchpb;

import "gogoproto/gogo.proto";
import "kvrpcpb.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum EventType {
    PUT    = 0;
    DELETE = 1;
    //cancel watch
    //CANCEL = 2;
}

enum FilterType {
    // filter out put event.
    NOPUT    = 0;
    // filter out delete event.
    NODELETE = 1;
}

message Event {
    // type is the kind of event. If type is a PUT, it indicates
    // new data has been stored to the key. If type is a DELETE,
    // it indicates the key was deleted.
    EventType type   = 1;
    // kv holds the KeyValue for the event.
    // A PUT event contains current kv pair.
    // A PUT event with kv.Version=1 indicates the creation of a key.
    // A DELETE/EXPIRE event contains the deleted key with
    // its modification revision set to the revision of deletion.
    WatchKeyValue kv = 2;
}

//simple key
message WatchKeyValue {
    // key is the key in bytes. An empty key is not allowed.
    bytes key       = 1;
    // version is the version of the key. A deletion resets
    // the version to zero and any modification of the key
    // increases its version.
    int64 version   = 2;
    // value is the value held by the key, in bytes.
    bytes value     = 3;
    //expire time
    int64 ExpireAt  = 4;
}

//1 create watch simple key
message DsWatchCreateRequest {
		kvrpcpb.RequestHeader header    = 1;
		WatchCreateRequest req          = 2;
}

message WatchCreateRequest {
    // key is the key to register for watching.
    bytes key           = 1;

    // start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
    int64 start_version = 2;

    // filters filter the events at server side before it sends back to the watcher.
    repeated FilterType filters = 3;

    // If watch_id is provided and non-zero, it will be assigned to this watcher.
    // Since creating a watcher in etcd is not a synchronous operation,
    // this can be used ensure that ordering is correct when creating multiple
    // watchers on the same stream. Creating a watcher with an ID already in
    // use on the stream will cause an error to be returned.
    int64 watch_id  = 4; //暂时不传
    //TTL
    int64 ExpireAt  = 5;    
}

//3 watch multiple keys request
message DsWatchRangeRequest {
    kvrpcpb.RequestHeader header    = 1;
    WatchCreateRequest req          = 2;
    bool prefix                     = 3;
    uint32 limit                    = 4;	
}

//4 watch multiple keys response
message DsWatchRangeResponse {
    kvrpcpb.ResponseHeader header    = 1;    
    WatchRangeResponse resp          = 2;
}

message WatchRangeResponse {
    //0 success 1 failure
    int32 code               = 1;
    //count of keys
    uint32 count             = 2;
    //加一个返回的最大reversion或者是范围
    //keys list
    repeated Event events    = 3;    
}


//5 watch simple key response
message DsWatchResponse {
    kvrpcpb.ResponseHeader header = 1;
    WatchResponse resp             = 2;
}

//common watch response
message WatchResponse {
  // watch_id is the ID of the watcher that corresponds to the response.
    int64 watch_id           = 1;
    repeated Event events    = 2; // 是否需要只返回一个
}

//6 simple KV add request
message DsKvWatchPutRequest {
    kvrpcpb.RequestHeader header    = 1;
    KvWatchPutRequest  req          = 2;
}

//7 simple KV add response
message DsKvWatchPutResponse {
    kvrpcpb.ResponseHeader header    = 1;
    KvWatchResponse resp             = 2;
}

message KvWatchPutRequest {
    WatchKeyValue kv    = 1;
}

//8 simple KV delete request
message DsKvWatchDeleteRequest {
    kvrpcpb.RequestHeader header     = 1;
    KvWatchDeleteRequest req      = 2;
}

//9 simple KV delete response
message DsKvWatchDeleteResponse {
    kvrpcpb.ResponseHeader header    = 1;
    KvWatchResponse resp             = 2;
}

message KvWatchDeleteRequest {
    WatchKeyValue kv       = 1;
}

//common simple KV operation response 
message KvWatchResponse {
    int32 code          = 1;
    WatchKeyValue kv    = 2;
}



//12 get multiple keys request 
message DsKvWatchGetMultiRequest {
    kvrpcpb.RequestHeader header    = 1;
    WatchKeyValue kv                = 2;
    bool prefix                     = 3; // 单key false ，prefix（多key） true
    uint32 limit                    = 4;	
}

//13 get multiple keys response
message DsKvWatchGetMultiResponse {
    kvrpcpb.ResponseHeader header    = 1;
    int32 code                       = 2;
    repeated WatchKeyValue kvs       = 3;
}
