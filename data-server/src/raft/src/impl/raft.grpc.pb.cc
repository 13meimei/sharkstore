// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raft.proto

#include "raft.pb.h"
#include "raft.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace fbase {
namespace raft {
namespace impl {
namespace pb {

static const char* MultiRaft_method_names[] = {
  "/fbase.raft.impl.pb.MultiRaft/RaftMessage",
};

std::unique_ptr< MultiRaft::Stub> MultiRaft::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< MultiRaft::Stub> stub(new MultiRaft::Stub(channel));
  return stub;
}

MultiRaft::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RaftMessage_(MultiRaft_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MultiRaft::Stub::RaftMessage(::grpc::ClientContext* context, const ::fbase::raft::impl::pb::RaftMessageRequest& request, ::fbase::raft::impl::pb::RaftMessageResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RaftMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fbase::raft::impl::pb::RaftMessageResponse>* MultiRaft::Stub::AsyncRaftMessageRaw(::grpc::ClientContext* context, const ::fbase::raft::impl::pb::RaftMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::fbase::raft::impl::pb::RaftMessageResponse>::Create(channel_.get(), cq, rpcmethod_RaftMessage_, context, request);
}

MultiRaft::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      MultiRaft_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< MultiRaft::Service, ::fbase::raft::impl::pb::RaftMessageRequest, ::fbase::raft::impl::pb::RaftMessageResponse>(
          std::mem_fn(&MultiRaft::Service::RaftMessage), this)));
}

MultiRaft::Service::~Service() {
}

::grpc::Status MultiRaft::Service::RaftMessage(::grpc::ServerContext* context, const ::fbase::raft::impl::pb::RaftMessageRequest* request, ::fbase::raft::impl::pb::RaftMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fbase
}  // namespace raft
}  // namespace impl
}  // namespace pb

