// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mspb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mspb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mspb {
class MSLeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MSLeader>
     _instance;
} _MSLeader_default_instance_;
class GetMSLeaderRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetMSLeaderRequest>
     _instance;
} _GetMSLeaderRequest_default_instance_;
class GetMSLeaderResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetMSLeaderResponse>
     _instance;
} _GetMSLeaderResponse_default_instance_;
class RangeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeStats>
     _instance;
} _RangeStats_default_instance_;
class RangeHeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeHeartbeatRequest>
     _instance;
} _RangeHeartbeatRequest_default_instance_;
class RangeHeartbeatResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeHeartbeatResponse>
     _instance;
} _RangeHeartbeatResponse_default_instance_;
class NodeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeStats>
     _instance;
} _NodeStats_default_instance_;
class NodeHeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeHeartbeatRequest>
     _instance;
} _NodeHeartbeatRequest_default_instance_;
class NodeHeartbeatResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeHeartbeatResponse>
     _instance;
} _NodeHeartbeatResponse_default_instance_;
class AskSplitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AskSplitRequest>
     _instance;
} _AskSplitRequest_default_instance_;
class AskSplitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AskSplitResponse>
     _instance;
} _AskSplitResponse_default_instance_;
class ReportSplitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportSplitRequest>
     _instance;
} _ReportSplitRequest_default_instance_;
class ReportSplitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportSplitResponse>
     _instance;
} _ReportSplitResponse_default_instance_;
class NodeLoginRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeLoginRequest>
     _instance;
} _NodeLoginRequest_default_instance_;
class NodeLoginResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeLoginResponse>
     _instance;
} _NodeLoginResponse_default_instance_;
class GetNodeIdRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeIdRequest>
     _instance;
} _GetNodeIdRequest_default_instance_;
class GetNodeIdResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeIdResponse>
     _instance;
} _GetNodeIdResponse_default_instance_;
class GetRouteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteRequest>
     _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetRouteResponse>
     _instance;
} _GetRouteResponse_default_instance_;
class GetNodeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeRequest>
     _instance;
} _GetNodeRequest_default_instance_;
class GetNodeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetNodeResponse>
     _instance;
} _GetNodeResponse_default_instance_;
class GetDBRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDBRequest>
     _instance;
} _GetDBRequest_default_instance_;
class GetDBResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDBResponse>
     _instance;
} _GetDBResponse_default_instance_;
class GetTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableRequest>
     _instance;
} _GetTableRequest_default_instance_;
class GetTableByIdRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableByIdRequest>
     _instance;
} _GetTableByIdRequest_default_instance_;
class GetTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableResponse>
     _instance;
} _GetTableResponse_default_instance_;
class GetTableByIdResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetTableByIdResponse>
     _instance;
} _GetTableByIdResponse_default_instance_;
class GetColumnsRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsRequest>
     _instance;
} _GetColumnsRequest_default_instance_;
class GetColumnsResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnsResponse>
     _instance;
} _GetColumnsResponse_default_instance_;
class GetColumnByNameRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnByNameRequest>
     _instance;
} _GetColumnByNameRequest_default_instance_;
class GetColumnByNameResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnByNameResponse>
     _instance;
} _GetColumnByNameResponse_default_instance_;
class GetColumnByIdRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnByIdRequest>
     _instance;
} _GetColumnByIdRequest_default_instance_;
class GetColumnByIdResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetColumnByIdResponse>
     _instance;
} _GetColumnByIdResponse_default_instance_;
class AddColumnRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddColumnRequest>
     _instance;
} _AddColumnRequest_default_instance_;
class AddColumnResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddColumnResponse>
     _instance;
} _AddColumnResponse_default_instance_;
class TruncateTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TruncateTableRequest>
     _instance;
} _TruncateTableRequest_default_instance_;
class TruncateTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TruncateTableResponse>
     _instance;
} _TruncateTableResponse_default_instance_;
class CreateDatabaseRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseRequest>
     _instance;
} _CreateDatabaseRequest_default_instance_;
class CreateDatabaseResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseResponse>
     _instance;
} _CreateDatabaseResponse_default_instance_;
class CreateTableRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateTableRequest>
     _instance;
} _CreateTableRequest_default_instance_;
class CreateTableResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateTableResponse>
     _instance;
} _CreateTableResponse_default_instance_;
class GetAutoIncIdRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAutoIncIdRequest>
     _instance;
} _GetAutoIncIdRequest_default_instance_;
class GetAutoIncIdResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAutoIncIdResponse>
     _instance;
} _GetAutoIncIdResponse_default_instance_;
class RequestHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
     _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
     _instance;
} _ResponseHeader_default_instance_;
class LeaderHintDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeaderHint>
     _instance;
} _LeaderHint_default_instance_;
class NoLeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NoLeader>
     _instance;
} _NoLeader_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;

namespace protobuf_mspb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[48];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSLeader, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSLeader, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSLeader, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMSLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMSLeaderRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMSLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMSLeaderResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMSLeaderResponse, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, bytes_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, bytes_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, keys_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, keys_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, approximate_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatRequest, peers_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, target_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeHeartbeatResponse, task_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_split_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, sending_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, receiving_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, applying_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, range_leader_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, used_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, bytes_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, keys_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, bytes_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, keys_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, is_busy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStats, start_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatRequest, isolated_replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeHeartbeatResponse, delete_replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, force_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_peer_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, split_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLoginRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLoginRequest, node_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLoginResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, raft_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, admin_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdRequest, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdResponse, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeIdResponse, clearup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteResponse, routes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodeResponse, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDBResponse, db_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableRequest, table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdRequest, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableByIdResponse, table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsRequest, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnsResponse, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameRequest, col_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByNameResponse, column_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdRequest, col_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetColumnByIdResponse, column_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnRequest, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddColumnResponse, columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableRequest, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateTableResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, db_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableRequest, properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTableResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, db_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdRequest, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoIncIdResponse, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderHint, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderHint, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, new_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, no_leader_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MSLeader)},
  { 8, -1, sizeof(GetMSLeaderRequest)},
  { 14, -1, sizeof(GetMSLeaderResponse)},
  { 21, -1, sizeof(RangeStats)},
  { 31, -1, sizeof(RangeHeartbeatRequest)},
  { 42, -1, sizeof(RangeHeartbeatResponse)},
  { 52, -1, sizeof(NodeStats)},
  { 72, -1, sizeof(NodeHeartbeatRequest)},
  { 81, -1, sizeof(NodeHeartbeatResponse)},
  { 89, -1, sizeof(AskSplitRequest)},
  { 98, -1, sizeof(AskSplitResponse)},
  { 108, -1, sizeof(ReportSplitRequest)},
  { 116, -1, sizeof(ReportSplitResponse)},
  { 122, -1, sizeof(NodeLoginRequest)},
  { 129, -1, sizeof(NodeLoginResponse)},
  { 135, -1, sizeof(GetNodeIdRequest)},
  { 145, -1, sizeof(GetNodeIdResponse)},
  { 153, -1, sizeof(GetRouteRequest)},
  { 162, -1, sizeof(GetRouteResponse)},
  { 169, -1, sizeof(GetNodeRequest)},
  { 176, -1, sizeof(GetNodeResponse)},
  { 183, -1, sizeof(GetDBRequest)},
  { 190, -1, sizeof(GetDBResponse)},
  { 197, -1, sizeof(GetTableRequest)},
  { 205, -1, sizeof(GetTableByIdRequest)},
  { 213, -1, sizeof(GetTableResponse)},
  { 220, -1, sizeof(GetTableByIdResponse)},
  { 227, -1, sizeof(GetColumnsRequest)},
  { 235, -1, sizeof(GetColumnsResponse)},
  { 242, -1, sizeof(GetColumnByNameRequest)},
  { 251, -1, sizeof(GetColumnByNameResponse)},
  { 258, -1, sizeof(GetColumnByIdRequest)},
  { 267, -1, sizeof(GetColumnByIdResponse)},
  { 274, -1, sizeof(AddColumnRequest)},
  { 283, -1, sizeof(AddColumnResponse)},
  { 290, -1, sizeof(TruncateTableRequest)},
  { 298, -1, sizeof(TruncateTableResponse)},
  { 304, -1, sizeof(CreateDatabaseRequest)},
  { 311, -1, sizeof(CreateDatabaseResponse)},
  { 317, -1, sizeof(CreateTableRequest)},
  { 326, -1, sizeof(CreateTableResponse)},
  { 332, -1, sizeof(GetAutoIncIdRequest)},
  { 341, -1, sizeof(GetAutoIncIdResponse)},
  { 348, -1, sizeof(RequestHeader)},
  { 354, -1, sizeof(ResponseHeader)},
  { 361, -1, sizeof(LeaderHint)},
  { 368, -1, sizeof(NoLeader)},
  { 373, -1, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MSLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMSLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMSLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AskSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeLoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeLoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetRouteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDBRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDBResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableByIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTableByIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnByNameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnByNameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnByIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetColumnByIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddColumnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddColumnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TruncateTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TruncateTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAutoIncIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAutoIncIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaderHint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mspb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 48);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  ::taskpb::protobuf_taskpb_2eproto::InitDefaults();
  _MSLeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MSLeader_default_instance_);_GetMSLeaderRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetMSLeaderRequest_default_instance_);_GetMSLeaderResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetMSLeaderResponse_default_instance_);_RangeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeStats_default_instance_);_RangeHeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeHeartbeatRequest_default_instance_);_RangeHeartbeatResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeHeartbeatResponse_default_instance_);_NodeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeStats_default_instance_);_NodeHeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeHeartbeatRequest_default_instance_);_NodeHeartbeatResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeHeartbeatResponse_default_instance_);_AskSplitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AskSplitRequest_default_instance_);_AskSplitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AskSplitResponse_default_instance_);_ReportSplitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportSplitRequest_default_instance_);_ReportSplitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportSplitResponse_default_instance_);_NodeLoginRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeLoginRequest_default_instance_);_NodeLoginResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeLoginResponse_default_instance_);_GetNodeIdRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeIdRequest_default_instance_);_GetNodeIdResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeIdResponse_default_instance_);_GetRouteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteRequest_default_instance_);_GetRouteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetRouteResponse_default_instance_);_GetNodeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeRequest_default_instance_);_GetNodeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetNodeResponse_default_instance_);_GetDBRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDBRequest_default_instance_);_GetDBResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDBResponse_default_instance_);_GetTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableRequest_default_instance_);_GetTableByIdRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableByIdRequest_default_instance_);_GetTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableResponse_default_instance_);_GetTableByIdResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetTableByIdResponse_default_instance_);_GetColumnsRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnsRequest_default_instance_);_GetColumnsResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnsResponse_default_instance_);_GetColumnByNameRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnByNameRequest_default_instance_);_GetColumnByNameResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnByNameResponse_default_instance_);_GetColumnByIdRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnByIdRequest_default_instance_);_GetColumnByIdResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetColumnByIdResponse_default_instance_);_AddColumnRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddColumnRequest_default_instance_);_AddColumnResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddColumnResponse_default_instance_);_TruncateTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TruncateTableRequest_default_instance_);_TruncateTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TruncateTableResponse_default_instance_);_CreateDatabaseRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateDatabaseRequest_default_instance_);_CreateDatabaseResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateDatabaseResponse_default_instance_);_CreateTableRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateTableRequest_default_instance_);_CreateTableResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateTableResponse_default_instance_);_GetAutoIncIdRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAutoIncIdRequest_default_instance_);_GetAutoIncIdResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAutoIncIdResponse_default_instance_);_RequestHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestHeader_default_instance_);_ResponseHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseHeader_default_instance_);_LeaderHint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeaderHint_default_instance_);_NoLeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NoLeader_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_GetMSLeaderRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetMSLeaderResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetMSLeaderResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::mspb::MSLeader*>(
      ::mspb::MSLeader::internal_default_instance());
  _RangeHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _RangeHeartbeatRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _RangeHeartbeatRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _RangeHeartbeatRequest_default_instance_._instance.get_mutable()->stats_ = const_cast< ::mspb::RangeStats*>(
      ::mspb::RangeStats::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->target_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _RangeHeartbeatResponse_default_instance_._instance.get_mutable()->task_ = const_cast< ::taskpb::Task*>(
      ::taskpb::Task::internal_default_instance());
  _NodeHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _NodeHeartbeatRequest_default_instance_._instance.get_mutable()->stats_ = const_cast< ::mspb::NodeStats*>(
      ::mspb::NodeStats::internal_default_instance());
  _NodeHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _AskSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _AskSplitRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _AskSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _AskSplitResponse_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _ReportSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _ReportSplitRequest_default_instance_._instance.get_mutable()->left_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _ReportSplitRequest_default_instance_._instance.get_mutable()->right_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _ReportSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _NodeLoginRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _NodeLoginResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetNodeIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetRouteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetRouteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetNodeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetNodeResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::metapb::Node*>(
      ::metapb::Node::internal_default_instance());
  _GetDBRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetDBResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetDBResponse_default_instance_._instance.get_mutable()->db_ = const_cast< ::metapb::DataBase*>(
      ::metapb::DataBase::internal_default_instance());
  _GetTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetTableByIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetTableResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::metapb::Table*>(
      ::metapb::Table::internal_default_instance());
  _GetTableByIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetTableByIdResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::metapb::Table*>(
      ::metapb::Table::internal_default_instance());
  _GetColumnsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetColumnsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetColumnByNameRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetColumnByNameResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetColumnByNameResponse_default_instance_._instance.get_mutable()->column_ = const_cast< ::metapb::Column*>(
      ::metapb::Column::internal_default_instance());
  _GetColumnByIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetColumnByIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetColumnByIdResponse_default_instance_._instance.get_mutable()->column_ = const_cast< ::metapb::Column*>(
      ::metapb::Column::internal_default_instance());
  _AddColumnRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _AddColumnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _TruncateTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _TruncateTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _CreateDatabaseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _CreateDatabaseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _CreateTableRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _CreateTableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _GetAutoIncIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::RequestHeader*>(
      ::mspb::RequestHeader::internal_default_instance());
  _GetAutoIncIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::mspb::ResponseHeader*>(
      ::mspb::ResponseHeader::internal_default_instance());
  _ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::mspb::Error*>(
      ::mspb::Error::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->new_leader_ = const_cast< ::mspb::LeaderHint*>(
      ::mspb::LeaderHint::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->no_leader_ = const_cast< ::mspb::NoLeader*>(
      ::mspb::NoLeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nmspb.proto\022\004mspb\032\014metapb.proto\032\014taskpb"
      ".proto\"5\n\010MSLeader\022\n\n\002id\030\001 \001(\004\022\017\n\007addres"
      "s\030\002 \001(\t\022\014\n\004term\030\003 \001(\004\"9\n\022GetMSLeaderRequ"
      "est\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader"
      "\"[\n\023GetMSLeaderResponse\022$\n\006header\030\001 \001(\0132"
      "\024.mspb.ResponseHeader\022\036\n\006leader\030\002 \001(\0132\016."
      "mspb.MSLeader\"z\n\nRangeStats\022\025\n\rbytes_wri"
      "tten\030\001 \001(\004\022\022\n\nbytes_read\030\002 \001(\004\022\024\n\014keys_w"
      "ritten\030\003 \001(\004\022\021\n\tkeys_read\030\004 \001(\004\022\030\n\020appro"
      "ximate_size\030\005 \001(\004\"\321\001\n\025RangeHeartbeatRequ"
      "est\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHeader"
      "\022\034\n\005range\030\002 \001(\0132\r.metapb.Range\022\034\n\006leader"
      "\030\003 \001(\0132\014.metapb.Peer\022\037\n\005stats\030\006 \001(\0132\020.ms"
      "pb.RangeStats\022\014\n\004term\030\007 \001(\004\022(\n\014peers_sta"
      "tus\030\010 \003(\0132\022.metapb.PeerStatus\"\262\001\n\026RangeH"
      "eartbeatResponse\022$\n\006header\030\001 \001(\0132\024.mspb."
      "ResponseHeader\022\020\n\010range_id\030\002 \001(\004\022!\n\005epoc"
      "h\030\003 \001(\0132\022.metapb.RangeEpoch\022!\n\013target_pe"
      "er\030\004 \001(\0132\014.metapb.Peer\022\032\n\004task\030\005 \001(\0132\014.t"
      "askpb.Task\"\332\002\n\tNodeStats\022\023\n\013range_count\030"
      "\001 \001(\r\022\031\n\021range_split_count\030\002 \001(\r\022\032\n\022send"
      "ing_snap_count\030\003 \001(\r\022\034\n\024receiving_snap_c"
      "ount\030\004 \001(\r\022\033\n\023applying_snap_count\030\005 \001(\r\022"
      "\032\n\022range_leader_count\030\006 \001(\r\022\020\n\010capacity\030"
      "\007 \001(\004\022\021\n\tused_size\030\010 \001(\004\022\021\n\tavailable\030\t "
      "\001(\004\022\025\n\rbytes_written\030\n \001(\004\022\024\n\014keys_writt"
      "en\030\013 \001(\004\022\022\n\nbytes_read\030\014 \001(\004\022\021\n\tkeys_rea"
      "d\030\r \001(\004\022\017\n\007is_busy\030\016 \001(\010\022\r\n\005start\030\017 \001(\r\""
      "\207\001\n\024NodeHeartbeatRequest\022#\n\006header\030\001 \001(\013"
      "2\023.mspb.RequestHeader\022\017\n\007node_id\030\002 \001(\004\022\036"
      "\n\005stats\030\003 \001(\0132\017.mspb.NodeStats\022\031\n\021isolat"
      "ed_replicas\030\004 \003(\004\"g\n\025NodeHeartbeatRespon"
      "se\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeader"
      "\022\017\n\007node_id\030\002 \001(\004\022\027\n\017delete_replicas\030\003 \003"
      "(\004\"v\n\017AskSplitRequest\022#\n\006header\030\001 \001(\0132\023."
      "mspb.RequestHeader\022\034\n\005range\030\002 \001(\0132\r.meta"
      "pb.Range\022\021\n\tsplit_key\030\003 \001(\014\022\r\n\005force\030\004 \001"
      "(\010\"\225\001\n\020AskSplitResponse\022$\n\006header\030\001 \001(\0132"
      "\024.mspb.ResponseHeader\022\034\n\005range\030\002 \001(\0132\r.m"
      "etapb.Range\022\024\n\014new_range_id\030\003 \001(\004\022\024\n\014new"
      "_peer_ids\030\004 \003(\004\022\021\n\tsplit_key\030\005 \001(\014\"t\n\022Re"
      "portSplitRequest\022#\n\006header\030\001 \001(\0132\023.mspb."
      "RequestHeader\022\033\n\004left\030\002 \001(\0132\r.metapb.Ran"
      "ge\022\034\n\005right\030\003 \001(\0132\r.metapb.Range\";\n\023Repo"
      "rtSplitResponse\022$\n\006header\030\001 \001(\0132\024.mspb.R"
      "esponseHeader\"H\n\020NodeLoginRequest\022#\n\006hea"
      "der\030\001 \001(\0132\023.mspb.RequestHeader\022\017\n\007node_i"
      "d\030\002 \001(\004\"9\n\021NodeLoginResponse\022$\n\006header\030\001"
      " \001(\0132\024.mspb.ResponseHeader\"\204\001\n\020GetNodeId"
      "Request\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHe"
      "ader\022\023\n\013server_port\030\002 \001(\r\022\021\n\traft_port\030\003"
      " \001(\r\022\022\n\nadmin_port\030\004 \001(\r\022\017\n\007version\030\005 \001("
      "\t\"[\n\021GetNodeIdResponse\022$\n\006header\030\001 \001(\0132\024"
      ".mspb.ResponseHeader\022\017\n\007node_id\030\002 \001(\004\022\017\n"
      "\007clearup\030\003 \001(\010\"d\n\017GetRouteRequest\022#\n\006hea"
      "der\030\001 \001(\0132\023.mspb.RequestHeader\022\r\n\005db_id\030"
      "\002 \001(\004\022\020\n\010table_id\030\003 \001(\004\022\013\n\003key\030\004 \001(\014\"W\n\020"
      "GetRouteResponse\022$\n\006header\030\001 \001(\0132\024.mspb."
      "ResponseHeader\022\035\n\006routes\030\002 \003(\0132\r.metapb."
      "Route\"A\n\016GetNodeRequest\022#\n\006header\030\001 \001(\0132"
      "\023.mspb.RequestHeader\022\n\n\002id\030\002 \001(\004\"S\n\017GetN"
      "odeResponse\022$\n\006header\030\001 \001(\0132\024.mspb.Respo"
      "nseHeader\022\032\n\004node\030\002 \001(\0132\014.metapb.Node\"A\n"
      "\014GetDBRequest\022#\n\006header\030\001 \001(\0132\023.mspb.Req"
      "uestHeader\022\014\n\004name\030\002 \001(\t\"S\n\rGetDBRespons"
      "e\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeader\022"
      "\034\n\002db\030\002 \001(\0132\020.metapb.DataBase\"[\n\017GetTabl"
      "eRequest\022#\n\006header\030\001 \001(\0132\023.mspb.RequestH"
      "eader\022\017\n\007db_name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001"
      "(\t\"[\n\023GetTableByIdRequest\022#\n\006header\030\001 \001("
      "\0132\023.mspb.RequestHeader\022\r\n\005db_id\030\002 \001(\004\022\020\n"
      "\010table_id\030\003 \001(\004\"V\n\020GetTableResponse\022$\n\006h"
      "eader\030\001 \001(\0132\024.mspb.ResponseHeader\022\034\n\005tab"
      "le\030\002 \001(\0132\r.metapb.Table\"Z\n\024GetTableByIdR"
      "esponse\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseH"
      "eader\022\034\n\005table\030\002 \001(\0132\r.metapb.Table\"Y\n\021G"
      "etColumnsRequest\022#\n\006header\030\001 \001(\0132\023.mspb."
      "RequestHeader\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id"
      "\030\003 \001(\004\"[\n\022GetColumnsResponse\022$\n\006header\030\001"
      " \001(\0132\024.mspb.ResponseHeader\022\037\n\007columns\030\002 "
      "\003(\0132\016.metapb.Column\"p\n\026GetColumnByNameRe"
      "quest\022#\n\006header\030\001 \001(\0132\023.mspb.RequestHead"
      "er\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\004\022\020\n\010c"
      "ol_name\030\004 \001(\t\"_\n\027GetColumnByNameResponse"
      "\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHeader\022\036"
      "\n\006column\030\002 \001(\0132\016.metapb.Column\"l\n\024GetCol"
      "umnByIdRequest\022#\n\006header\030\001 \001(\0132\023.mspb.Re"
      "questHeader\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id\030\003"
      " \001(\004\022\016\n\006col_id\030\004 \001(\004\"]\n\025GetColumnByIdRes"
      "ponse\022$\n\006header\030\001 \001(\0132\024.mspb.ResponseHea"
      "der\022\036\n\006column\030\002 \001(\0132\016.metapb.Column\"y\n\020A"
      "ddColumnRequest\022#\n\006header\030\001 \001(\0132\023.mspb.R"
      "equestHeader\022\r\n\005db_id\030\002 \001(\004\022\020\n\010table_id\030"
      "\003 \001(\004\022\037\n\007columns\030\004 \003(\0132\016.metapb.Column\"Z"
      "\n\021AddColumnResponse\022$\n\006header\030\001 \001(\0132\024.ms"
      "pb.ResponseHeader\022\037\n\007columns\030\002 \003(\0132\016.met"
      "apb.Column\"\\\n\024TruncateTableRequest\022#\n\006he"
      "ader\030\001 \001(\0132\023.mspb.RequestHeader\022\r\n\005db_id"
      "\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\004\"=\n\025TruncateTabl"
      "eResponse\022$\n\006header\030\001 \001(\0132\024.mspb.Respons"
      "eHeader\"M\n\025CreateDatabaseRequest\022#\n\006head"
      "er\030\001 \001(\0132\023.mspb.RequestHeader\022\017\n\007db_name"
      "\030\002 \001(\t\">\n\026CreateDatabaseResponse\022$\n\006head"
      "er\030\001 \001(\0132\024.mspb.ResponseHeader\"r\n\022Create"
      "TableRequest\022#\n\006header\030\001 \001(\0132\023.mspb.Requ"
      "estHeader\022\017\n\007db_name\030\002 \001(\t\022\022\n\ntable_name"
      "\030\003 \001(\t\022\022\n\nproperties\030\004 \001(\t\";\n\023CreateTabl"
      "eResponse\022$\n\006header\030\001 \001(\0132\024.mspb.Respons"
      "eHeader\"i\n\023GetAutoIncIdRequest\022#\n\006header"
      "\030\001 \001(\0132\023.mspb.RequestHeader\022\r\n\005db_id\030\002 \001"
      "(\004\022\020\n\010table_id\030\003 \001(\004\022\014\n\004size\030\004 \001(\r\"I\n\024Ge"
      "tAutoIncIdResponse\022$\n\006header\030\001 \001(\0132\024.msp"
      "b.ResponseHeader\022\013\n\003ids\030\002 \003(\004\"#\n\rRequest"
      "Header\022\022\n\ncluster_id\030\001 \001(\004\"@\n\016ResponseHe"
      "ader\022\022\n\ncluster_id\030\001 \001(\004\022\032\n\005error\030\002 \001(\0132"
      "\013.mspb.Error\"+\n\nLeaderHint\022\017\n\007address\030\001 "
      "\001(\t\022\014\n\004term\030\002 \001(\004\"\n\n\010NoLeader\"P\n\005Error\022$"
      "\n\nnew_leader\030\002 \001(\0132\020.mspb.LeaderHint\022!\n\t"
      "no_leader\030\003 \001(\0132\016.mspb.NoLeader2\352\n\n\010MsSe"
      "rver\022J\n\rNodeHeartbeat\022\032.mspb.NodeHeartbe"
      "atRequest\032\033.mspb.NodeHeartbeatResponse\"\000"
      "\022M\n\016RangeHeartbeat\022\033.mspb.RangeHeartbeat"
      "Request\032\034.mspb.RangeHeartbeatResponse\"\000\022"
      ";\n\010AskSplit\022\025.mspb.AskSplitRequest\032\026.msp"
      "b.AskSplitResponse\"\000\022D\n\013ReportSplit\022\030.ms"
      "pb.ReportSplitRequest\032\031.mspb.ReportSplit"
      "Response\"\000\022>\n\tNodeLogin\022\026.mspb.NodeLogin"
      "Request\032\027.mspb.NodeLoginResponse\"\000\022>\n\tGe"
      "tNodeId\022\026.mspb.GetNodeIdRequest\032\027.mspb.G"
      "etNodeIdResponse\"\000\022D\n\013GetMSLeader\022\030.mspb"
      ".GetMSLeaderRequest\032\031.mspb.GetMSLeaderRe"
      "sponse\"\000\022;\n\010GetRoute\022\025.mspb.GetRouteRequ"
      "est\032\026.mspb.GetRouteResponse\"\000\0228\n\007GetNode"
      "\022\024.mspb.GetNodeRequest\032\025.mspb.GetNodeRes"
      "ponse\"\000\0222\n\005GetDB\022\022.mspb.GetDBRequest\032\023.m"
      "spb.GetDBResponse\"\000\022;\n\010GetTable\022\025.mspb.G"
      "etTableRequest\032\026.mspb.GetTableResponse\"\000"
      "\022G\n\014GetTableById\022\031.mspb.GetTableByIdRequ"
      "est\032\032.mspb.GetTableByIdResponse\"\000\022A\n\nGet"
      "Columns\022\027.mspb.GetColumnsRequest\032\030.mspb."
      "GetColumnsResponse\"\000\022P\n\017GetColumnByName\022"
      "\034.mspb.GetColumnByNameRequest\032\035.mspb.Get"
      "ColumnByNameResponse\"\000\022J\n\rGetColumnById\022"
      "\032.mspb.GetColumnByIdRequest\032\033.mspb.GetCo"
      "lumnByIdResponse\"\000\022J\n\rTruncateTable\022\032.ms"
      "pb.TruncateTableRequest\032\033.mspb.TruncateT"
      "ableResponse\"\000\022>\n\tAddColumn\022\026.mspb.AddCo"
      "lumnRequest\032\027.mspb.AddColumnResponse\"\000\022M"
      "\n\016CreateDatabase\022\033.mspb.CreateDatabaseRe"
      "quest\032\034.mspb.CreateDatabaseResponse\"\000\022D\n"
      "\013CreateTable\022\030.mspb.CreateTableRequest\032\031"
      ".mspb.CreateTableResponse\"\000\022G\n\014GetAutoIn"
      "cId\022\031.mspb.GetAutoIncIdRequest\032\032.mspb.Ge"
      "tAutoIncIdResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mspb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
  ::taskpb::protobuf_taskpb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mspb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MSLeader::kIdFieldNumber;
const int MSLeader::kAddressFieldNumber;
const int MSLeader::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MSLeader::MSLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.MSLeader)
}
MSLeader::MSLeader(const MSLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&id_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:mspb.MSLeader)
}

void MSLeader::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&id_)) + sizeof(term_));
  _cached_size_ = 0;
}

MSLeader::~MSLeader() {
  // @@protoc_insertion_point(destructor:mspb.MSLeader)
  SharedDtor();
}

void MSLeader::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MSLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSLeader::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MSLeader& MSLeader::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

MSLeader* MSLeader::New(::google::protobuf::Arena* arena) const {
  MSLeader* n = new MSLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MSLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.MSLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&id_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

bool MSLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.MSLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.MSLeader.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.MSLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.MSLeader)
  return false;
#undef DO_
}

void MSLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.MSLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.MSLeader.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.MSLeader)
}

::google::protobuf::uint8* MSLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.MSLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.MSLeader.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.MSLeader)
  return target;
}

size_t MSLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.MSLeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.MSLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MSLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MSLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.MSLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.MSLeader)
    MergeFrom(*source);
  }
}

void MSLeader::MergeFrom(const MSLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.MSLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void MSLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.MSLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSLeader::CopyFrom(const MSLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.MSLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSLeader::IsInitialized() const {
  return true;
}

void MSLeader::Swap(MSLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MSLeader::InternalSwap(MSLeader* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(id_, other->id_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MSLeader::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MSLeader

// uint64 id = 1;
void MSLeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MSLeader::id() const {
  // @@protoc_insertion_point(field_get:mspb.MSLeader.id)
  return id_;
}
void MSLeader::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mspb.MSLeader.id)
}

// string address = 2;
void MSLeader::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MSLeader::address() const {
  // @@protoc_insertion_point(field_get:mspb.MSLeader.address)
  return address_.GetNoArena();
}
void MSLeader::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.MSLeader.address)
}
#if LANG_CXX11
void MSLeader::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.MSLeader.address)
}
#endif
void MSLeader::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.MSLeader.address)
}
void MSLeader::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.MSLeader.address)
}
::std::string* MSLeader::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:mspb.MSLeader.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MSLeader::release_address() {
  // @@protoc_insertion_point(field_release:mspb.MSLeader.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MSLeader::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:mspb.MSLeader.address)
}

// uint64 term = 3;
void MSLeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MSLeader::term() const {
  // @@protoc_insertion_point(field_get:mspb.MSLeader.term)
  return term_;
}
void MSLeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mspb.MSLeader.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMSLeaderRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMSLeaderRequest::GetMSLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetMSLeaderRequest)
}
GetMSLeaderRequest::GetMSLeaderRequest(const GetMSLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetMSLeaderRequest)
}

void GetMSLeaderRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetMSLeaderRequest::~GetMSLeaderRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetMSLeaderRequest)
  SharedDtor();
}

void GetMSLeaderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetMSLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMSLeaderRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMSLeaderRequest& GetMSLeaderRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMSLeaderRequest* GetMSLeaderRequest::New(::google::protobuf::Arena* arena) const {
  GetMSLeaderRequest* n = new GetMSLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMSLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetMSLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetMSLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetMSLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetMSLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetMSLeaderRequest)
  return false;
#undef DO_
}

void GetMSLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetMSLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetMSLeaderRequest)
}

::google::protobuf::uint8* GetMSLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetMSLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetMSLeaderRequest)
  return target;
}

size_t GetMSLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetMSLeaderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMSLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetMSLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMSLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMSLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetMSLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetMSLeaderRequest)
    MergeFrom(*source);
  }
}

void GetMSLeaderRequest::MergeFrom(const GetMSLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetMSLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetMSLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetMSLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMSLeaderRequest::CopyFrom(const GetMSLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetMSLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMSLeaderRequest::IsInitialized() const {
  return true;
}

void GetMSLeaderRequest::Swap(GetMSLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMSLeaderRequest::InternalSwap(GetMSLeaderRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMSLeaderRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMSLeaderRequest

// .mspb.RequestHeader header = 1;
bool GetMSLeaderRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMSLeaderRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetMSLeaderRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetMSLeaderRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetMSLeaderRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetMSLeaderRequest.header)
  return header_;
}
::mspb::RequestHeader* GetMSLeaderRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetMSLeaderRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMSLeaderRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetMSLeaderRequest.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMSLeaderResponse::kHeaderFieldNumber;
const int GetMSLeaderResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMSLeaderResponse::GetMSLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetMSLeaderResponse)
}
GetMSLeaderResponse::GetMSLeaderResponse(const GetMSLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::mspb::MSLeader(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetMSLeaderResponse)
}

void GetMSLeaderResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(leader_));
  _cached_size_ = 0;
}

GetMSLeaderResponse::~GetMSLeaderResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetMSLeaderResponse)
  SharedDtor();
}

void GetMSLeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete leader_;
}

void GetMSLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMSLeaderResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMSLeaderResponse& GetMSLeaderResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMSLeaderResponse* GetMSLeaderResponse::New(::google::protobuf::Arena* arena) const {
  GetMSLeaderResponse* n = new GetMSLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMSLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetMSLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

bool GetMSLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetMSLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.MSLeader leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetMSLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetMSLeaderResponse)
  return false;
#undef DO_
}

void GetMSLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetMSLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .mspb.MSLeader leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetMSLeaderResponse)
}

::google::protobuf::uint8* GetMSLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetMSLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .mspb.MSLeader leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetMSLeaderResponse)
  return target;
}

size_t GetMSLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetMSLeaderResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .mspb.MSLeader leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMSLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetMSLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMSLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMSLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetMSLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetMSLeaderResponse)
    MergeFrom(*source);
  }
}

void GetMSLeaderResponse::MergeFrom(const GetMSLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetMSLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::mspb::MSLeader::MergeFrom(from.leader());
  }
}

void GetMSLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetMSLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMSLeaderResponse::CopyFrom(const GetMSLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetMSLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMSLeaderResponse::IsInitialized() const {
  return true;
}

void GetMSLeaderResponse::Swap(GetMSLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMSLeaderResponse::InternalSwap(GetMSLeaderResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMSLeaderResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMSLeaderResponse

// .mspb.ResponseHeader header = 1;
bool GetMSLeaderResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMSLeaderResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetMSLeaderResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetMSLeaderResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetMSLeaderResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetMSLeaderResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetMSLeaderResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetMSLeaderResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMSLeaderResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetMSLeaderResponse.header)
}

// .mspb.MSLeader leader = 2;
bool GetMSLeaderResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void GetMSLeaderResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::mspb::MSLeader& GetMSLeaderResponse::leader() const {
  const ::mspb::MSLeader* p = leader_;
  // @@protoc_insertion_point(field_get:mspb.GetMSLeaderResponse.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::MSLeader*>(
      &::mspb::_MSLeader_default_instance_);
}
::mspb::MSLeader* GetMSLeaderResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::mspb::MSLeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetMSLeaderResponse.leader)
  return leader_;
}
::mspb::MSLeader* GetMSLeaderResponse::release_leader() {
  // @@protoc_insertion_point(field_release:mspb.GetMSLeaderResponse.leader)
  
  ::mspb::MSLeader* temp = leader_;
  leader_ = NULL;
  return temp;
}
void GetMSLeaderResponse::set_allocated_leader(::mspb::MSLeader* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetMSLeaderResponse.leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeStats::kBytesWrittenFieldNumber;
const int RangeStats::kBytesReadFieldNumber;
const int RangeStats::kKeysWrittenFieldNumber;
const int RangeStats::kKeysReadFieldNumber;
const int RangeStats::kApproximateSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeStats::RangeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RangeStats)
}
RangeStats::RangeStats(const RangeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_written_, &from.bytes_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&approximate_size_) -
    reinterpret_cast<char*>(&bytes_written_)) + sizeof(approximate_size_));
  // @@protoc_insertion_point(copy_constructor:mspb.RangeStats)
}

void RangeStats::SharedCtor() {
  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approximate_size_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(approximate_size_));
  _cached_size_ = 0;
}

RangeStats::~RangeStats() {
  // @@protoc_insertion_point(destructor:mspb.RangeStats)
  SharedDtor();
}

void RangeStats::SharedDtor() {
}

void RangeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeStats::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeStats& RangeStats::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeStats* RangeStats::New(::google::protobuf::Arena* arena) const {
  RangeStats* n = new RangeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approximate_size_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(approximate_size_));
  _internal_metadata_.Clear();
}

bool RangeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RangeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 bytes_written = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_read = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_written = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_read = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 approximate_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RangeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RangeStats)
  return false;
#undef DO_
}

void RangeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bytes_written = 1;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bytes_written(), output);
  }

  // uint64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_read(), output);
  }

  // uint64 keys_written = 3;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->keys_written(), output);
  }

  // uint64 keys_read = 4;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->keys_read(), output);
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->approximate_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RangeStats)
}

::google::protobuf::uint8* RangeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bytes_written = 1;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bytes_written(), target);
  }

  // uint64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_read(), target);
  }

  // uint64 keys_written = 3;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->keys_written(), target);
  }

  // uint64 keys_read = 4;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->keys_read(), target);
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->approximate_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RangeStats)
  return target;
}

size_t RangeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RangeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 bytes_written = 1;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // uint64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // uint64 keys_written = 3;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // uint64 keys_read = 4;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  // uint64 approximate_size = 5;
  if (this->approximate_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RangeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RangeStats)
    MergeFrom(*source);
  }
}

void RangeStats::MergeFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
  if (from.approximate_size() != 0) {
    set_approximate_size(from.approximate_size());
  }
}

void RangeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeStats::CopyFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeStats::IsInitialized() const {
  return true;
}

void RangeStats::Swap(RangeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeStats::InternalSwap(RangeStats* other) {
  using std::swap;
  swap(bytes_written_, other->bytes_written_);
  swap(bytes_read_, other->bytes_read_);
  swap(keys_written_, other->keys_written_);
  swap(keys_read_, other->keys_read_);
  swap(approximate_size_, other->approximate_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeStats::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeStats

// uint64 bytes_written = 1;
void RangeStats::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:mspb.RangeStats.bytes_written)
  return bytes_written_;
}
void RangeStats::set_bytes_written(::google::protobuf::uint64 value) {
  
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeStats.bytes_written)
}

// uint64 bytes_read = 2;
void RangeStats::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:mspb.RangeStats.bytes_read)
  return bytes_read_;
}
void RangeStats::set_bytes_read(::google::protobuf::uint64 value) {
  
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeStats.bytes_read)
}

// uint64 keys_written = 3;
void RangeStats::clear_keys_written() {
  keys_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::keys_written() const {
  // @@protoc_insertion_point(field_get:mspb.RangeStats.keys_written)
  return keys_written_;
}
void RangeStats::set_keys_written(::google::protobuf::uint64 value) {
  
  keys_written_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeStats.keys_written)
}

// uint64 keys_read = 4;
void RangeStats::clear_keys_read() {
  keys_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::keys_read() const {
  // @@protoc_insertion_point(field_get:mspb.RangeStats.keys_read)
  return keys_read_;
}
void RangeStats::set_keys_read(::google::protobuf::uint64 value) {
  
  keys_read_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeStats.keys_read)
}

// uint64 approximate_size = 5;
void RangeStats::clear_approximate_size() {
  approximate_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::approximate_size() const {
  // @@protoc_insertion_point(field_get:mspb.RangeStats.approximate_size)
  return approximate_size_;
}
void RangeStats::set_approximate_size(::google::protobuf::uint64 value) {
  
  approximate_size_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeStats.approximate_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeHeartbeatRequest::kHeaderFieldNumber;
const int RangeHeartbeatRequest::kRangeFieldNumber;
const int RangeHeartbeatRequest::kLeaderFieldNumber;
const int RangeHeartbeatRequest::kStatsFieldNumber;
const int RangeHeartbeatRequest::kTermFieldNumber;
const int RangeHeartbeatRequest::kPeersStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeHeartbeatRequest::RangeHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RangeHeartbeatRequest)
}
RangeHeartbeatRequest::RangeHeartbeatRequest(const RangeHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_status_(from.peers_status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::mspb::RangeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:mspb.RangeHeartbeatRequest)
}

void RangeHeartbeatRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&header_)) + sizeof(term_));
  _cached_size_ = 0;
}

RangeHeartbeatRequest::~RangeHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:mspb.RangeHeartbeatRequest)
  SharedDtor();
}

void RangeHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete leader_;
  if (this != internal_default_instance()) delete stats_;
}

void RangeHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeHeartbeatRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeHeartbeatRequest& RangeHeartbeatRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeHeartbeatRequest* RangeHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  RangeHeartbeatRequest* n = new RangeHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_status_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  term_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RangeHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.RangeStats stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.PeerStatus peers_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peers_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RangeHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RangeHeartbeatRequest)
  return false;
#undef DO_
}

void RangeHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leader_, output);
  }

  // .mspb.RangeStats stats = 6;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stats_, output);
  }

  // uint64 term = 7;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->term(), output);
  }

  // repeated .metapb.PeerStatus peers_status = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->peers_status(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RangeHeartbeatRequest)
}

::google::protobuf::uint8* RangeHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RangeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leader_, deterministic, target);
  }

  // .mspb.RangeStats stats = 6;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stats_, deterministic, target);
  }

  // uint64 term = 7;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->term(), target);
  }

  // repeated .metapb.PeerStatus peers_status = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peers_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->peers_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RangeHeartbeatRequest)
  return target;
}

size_t RangeHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RangeHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metapb.PeerStatus peers_status = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->peers_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers_status(static_cast<int>(i)));
    }
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  // .mspb.RangeStats stats = 6;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 term = 7;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RangeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RangeHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RangeHeartbeatRequest)
    MergeFrom(*source);
  }
}

void RangeHeartbeatRequest::MergeFrom(const RangeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RangeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_status_.MergeFrom(from.peers_status_);
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.has_stats()) {
    mutable_stats()->::mspb::RangeStats::MergeFrom(from.stats());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RangeHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RangeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeHeartbeatRequest::CopyFrom(const RangeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RangeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeHeartbeatRequest::IsInitialized() const {
  return true;
}

void RangeHeartbeatRequest::Swap(RangeHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeHeartbeatRequest::InternalSwap(RangeHeartbeatRequest* other) {
  using std::swap;
  peers_status_.InternalSwap(&other->peers_status_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(leader_, other->leader_);
  swap(stats_, other->stats_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeHeartbeatRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeHeartbeatRequest

// .mspb.RequestHeader header = 1;
bool RangeHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& RangeHeartbeatRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* RangeHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.header)
  return header_;
}
::mspb::RequestHeader* RangeHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.header)
}

// .metapb.Range range = 2;
bool RangeHeartbeatRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void RangeHeartbeatRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& RangeHeartbeatRequest::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* RangeHeartbeatRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.range)
  return range_;
}
::metapb::Range* RangeHeartbeatRequest::release_range() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.range)
}

// .metapb.Peer leader = 3;
bool RangeHeartbeatRequest::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void RangeHeartbeatRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& RangeHeartbeatRequest::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* RangeHeartbeatRequest::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.leader)
  return leader_;
}
::metapb::Peer* RangeHeartbeatRequest::release_leader() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.leader)
}

// .mspb.RangeStats stats = 6;
bool RangeHeartbeatRequest::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void RangeHeartbeatRequest::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::mspb::RangeStats& RangeHeartbeatRequest::stats() const {
  const ::mspb::RangeStats* p = stats_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RangeStats*>(
      &::mspb::_RangeStats_default_instance_);
}
::mspb::RangeStats* RangeHeartbeatRequest::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::mspb::RangeStats;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.stats)
  return stats_;
}
::mspb::RangeStats* RangeHeartbeatRequest::release_stats() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatRequest.stats)
  
  ::mspb::RangeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void RangeHeartbeatRequest::set_allocated_stats(::mspb::RangeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatRequest.stats)
}

// uint64 term = 7;
void RangeHeartbeatRequest::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeHeartbeatRequest::term() const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.term)
  return term_;
}
void RangeHeartbeatRequest::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeHeartbeatRequest.term)
}

// repeated .metapb.PeerStatus peers_status = 8;
int RangeHeartbeatRequest::peers_status_size() const {
  return peers_status_.size();
}
void RangeHeartbeatRequest::clear_peers_status() {
  peers_status_.Clear();
}
const ::metapb::PeerStatus& RangeHeartbeatRequest::peers_status(int index) const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Get(index);
}
::metapb::PeerStatus* RangeHeartbeatRequest::mutable_peers_status(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Mutable(index);
}
::metapb::PeerStatus* RangeHeartbeatRequest::add_peers_status() {
  // @@protoc_insertion_point(field_add:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::PeerStatus >*
RangeHeartbeatRequest::mutable_peers_status() {
  // @@protoc_insertion_point(field_mutable_list:mspb.RangeHeartbeatRequest.peers_status)
  return &peers_status_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::PeerStatus >&
RangeHeartbeatRequest::peers_status() const {
  // @@protoc_insertion_point(field_list:mspb.RangeHeartbeatRequest.peers_status)
  return peers_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeHeartbeatResponse::kHeaderFieldNumber;
const int RangeHeartbeatResponse::kRangeIdFieldNumber;
const int RangeHeartbeatResponse::kEpochFieldNumber;
const int RangeHeartbeatResponse::kTargetPeerFieldNumber;
const int RangeHeartbeatResponse::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeHeartbeatResponse::RangeHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RangeHeartbeatResponse)
}
RangeHeartbeatResponse::RangeHeartbeatResponse(const RangeHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_epoch()) {
    epoch_ = new ::metapb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  if (from.has_target_peer()) {
    target_peer_ = new ::metapb::Peer(*from.target_peer_);
  } else {
    target_peer_ = NULL;
  }
  if (from.has_task()) {
    task_ = new ::taskpb::Task(*from.task_);
  } else {
    task_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.RangeHeartbeatResponse)
}

void RangeHeartbeatResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

RangeHeartbeatResponse::~RangeHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mspb.RangeHeartbeatResponse)
  SharedDtor();
}

void RangeHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete target_peer_;
  if (this != internal_default_instance()) delete task_;
}

void RangeHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeHeartbeatResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeHeartbeatResponse& RangeHeartbeatResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeHeartbeatResponse* RangeHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  RangeHeartbeatResponse* n = new RangeHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) {
    delete target_peer_;
  }
  target_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_ != NULL) {
    delete task_;
  }
  task_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RangeHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer target_peer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.Task task = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RangeHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RangeHeartbeatResponse)
  return false;
#undef DO_
}

void RangeHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->epoch_, output);
  }

  // .metapb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_peer_, output);
  }

  // .taskpb.Task task = 5;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->task_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RangeHeartbeatResponse)
}

::google::protobuf::uint8* RangeHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RangeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->epoch_, deterministic, target);
  }

  // .metapb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_peer_, deterministic, target);
  }

  // .taskpb.Task task = 5;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->task_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RangeHeartbeatResponse)
  return target;
}

size_t RangeHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RangeHeartbeatResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // .metapb.Peer target_peer = 4;
  if (this->has_target_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_peer_);
  }

  // .taskpb.Task task = 5;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RangeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RangeHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RangeHeartbeatResponse)
    MergeFrom(*source);
  }
}

void RangeHeartbeatResponse::MergeFrom(const RangeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RangeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_epoch()) {
    mutable_epoch()->::metapb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.has_target_peer()) {
    mutable_target_peer()->::metapb::Peer::MergeFrom(from.target_peer());
  }
  if (from.has_task()) {
    mutable_task()->::taskpb::Task::MergeFrom(from.task());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void RangeHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RangeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeHeartbeatResponse::CopyFrom(const RangeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RangeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeHeartbeatResponse::IsInitialized() const {
  return true;
}

void RangeHeartbeatResponse::Swap(RangeHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeHeartbeatResponse::InternalSwap(RangeHeartbeatResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(epoch_, other->epoch_);
  swap(target_peer_, other->target_peer_);
  swap(task_, other->task_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeHeartbeatResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeHeartbeatResponse

// .mspb.ResponseHeader header = 1;
bool RangeHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RangeHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& RangeHeartbeatResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* RangeHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.header)
  return header_;
}
::mspb::ResponseHeader* RangeHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.header)
}

// uint64 range_id = 2;
void RangeHeartbeatResponse::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeHeartbeatResponse::range_id() const {
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.range_id)
  return range_id_;
}
void RangeHeartbeatResponse::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.RangeHeartbeatResponse.range_id)
}

// .metapb.RangeEpoch epoch = 3;
bool RangeHeartbeatResponse::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void RangeHeartbeatResponse::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::metapb::RangeEpoch& RangeHeartbeatResponse::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* RangeHeartbeatResponse::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.epoch)
  return epoch_;
}
::metapb::RangeEpoch* RangeHeartbeatResponse::release_epoch() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.epoch)
}

// .metapb.Peer target_peer = 4;
bool RangeHeartbeatResponse::has_target_peer() const {
  return this != internal_default_instance() && target_peer_ != NULL;
}
void RangeHeartbeatResponse::clear_target_peer() {
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) delete target_peer_;
  target_peer_ = NULL;
}
const ::metapb::Peer& RangeHeartbeatResponse::target_peer() const {
  const ::metapb::Peer* p = target_peer_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.target_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* RangeHeartbeatResponse::mutable_target_peer() {
  
  if (target_peer_ == NULL) {
    target_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.target_peer)
  return target_peer_;
}
::metapb::Peer* RangeHeartbeatResponse::release_target_peer() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.target_peer)
  
  ::metapb::Peer* temp = target_peer_;
  target_peer_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_target_peer(::metapb::Peer* target_peer) {
  delete target_peer_;
  target_peer_ = target_peer;
  if (target_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.target_peer)
}

// .taskpb.Task task = 5;
bool RangeHeartbeatResponse::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
void RangeHeartbeatResponse::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}
const ::taskpb::Task& RangeHeartbeatResponse::task() const {
  const ::taskpb::Task* p = task_;
  // @@protoc_insertion_point(field_get:mspb.RangeHeartbeatResponse.task)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::Task*>(
      &::taskpb::_Task_default_instance_);
}
::taskpb::Task* RangeHeartbeatResponse::mutable_task() {
  
  if (task_ == NULL) {
    task_ = new ::taskpb::Task;
  }
  // @@protoc_insertion_point(field_mutable:mspb.RangeHeartbeatResponse.task)
  return task_;
}
::taskpb::Task* RangeHeartbeatResponse::release_task() {
  // @@protoc_insertion_point(field_release:mspb.RangeHeartbeatResponse.task)
  
  ::taskpb::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void RangeHeartbeatResponse::set_allocated_task(::taskpb::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.RangeHeartbeatResponse.task)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeStats::kRangeCountFieldNumber;
const int NodeStats::kRangeSplitCountFieldNumber;
const int NodeStats::kSendingSnapCountFieldNumber;
const int NodeStats::kReceivingSnapCountFieldNumber;
const int NodeStats::kApplyingSnapCountFieldNumber;
const int NodeStats::kRangeLeaderCountFieldNumber;
const int NodeStats::kCapacityFieldNumber;
const int NodeStats::kUsedSizeFieldNumber;
const int NodeStats::kAvailableFieldNumber;
const int NodeStats::kBytesWrittenFieldNumber;
const int NodeStats::kKeysWrittenFieldNumber;
const int NodeStats::kBytesReadFieldNumber;
const int NodeStats::kKeysReadFieldNumber;
const int NodeStats::kIsBusyFieldNumber;
const int NodeStats::kStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeStats::NodeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeStats)
}
NodeStats::NodeStats(const NodeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_count_, &from.range_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&range_count_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:mspb.NodeStats)
}

void NodeStats::SharedCtor() {
  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(start_));
  _cached_size_ = 0;
}

NodeStats::~NodeStats() {
  // @@protoc_insertion_point(destructor:mspb.NodeStats)
  SharedDtor();
}

void NodeStats::SharedDtor() {
}

void NodeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStats::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeStats& NodeStats::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeStats* NodeStats::New(::google::protobuf::Arena* arena) const {
  NodeStats* n = new NodeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(start_));
  _internal_metadata_.Clear();
}

bool NodeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 range_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_split_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_split_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sending_snap_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiving_snap_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 applying_snap_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_leader_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_leader_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 capacity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 available = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_written = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_written = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_read = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_read = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_busy = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeStats)
  return false;
#undef DO_
}

void NodeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->range_count(), output);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range_split_count(), output);
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sending_snap_count(), output);
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receiving_snap_count(), output);
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->applying_snap_count(), output);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->range_leader_count(), output);
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->capacity(), output);
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->used_size(), output);
  }

  // uint64 available = 9;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->available(), output);
  }

  // uint64 bytes_written = 10;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bytes_written(), output);
  }

  // uint64 keys_written = 11;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->keys_written(), output);
  }

  // uint64 bytes_read = 12;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bytes_read(), output);
  }

  // uint64 keys_read = 13;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->keys_read(), output);
  }

  // bool is_busy = 14;
  if (this->is_busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_busy(), output);
  }

  // uint32 start = 15;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->start(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeStats)
}

::google::protobuf::uint8* NodeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->range_count(), target);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range_split_count(), target);
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sending_snap_count(), target);
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receiving_snap_count(), target);
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->applying_snap_count(), target);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->range_leader_count(), target);
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->capacity(), target);
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->used_size(), target);
  }

  // uint64 available = 9;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->available(), target);
  }

  // uint64 bytes_written = 10;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->bytes_written(), target);
  }

  // uint64 keys_written = 11;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->keys_written(), target);
  }

  // uint64 bytes_read = 12;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bytes_read(), target);
  }

  // uint64 keys_read = 13;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->keys_read(), target);
  }

  // bool is_busy = 14;
  if (this->is_busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_busy(), target);
  }

  // uint32 start = 15;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->start(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeStats)
  return target;
}

size_t NodeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 range_count = 1;
  if (this->range_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_count());
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_split_count());
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sending_snap_count());
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiving_snap_count());
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->applying_snap_count());
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_leader_count());
  }

  // uint64 capacity = 7;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // uint64 used_size = 8;
  if (this->used_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_size());
  }

  // uint64 available = 9;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->available());
  }

  // uint64 bytes_written = 10;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // uint64 keys_written = 11;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // uint64 bytes_read = 12;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // uint64 keys_read = 13;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  // bool is_busy = 14;
  if (this->is_busy() != 0) {
    total_size += 1 + 1;
  }

  // uint32 start = 15;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeStats)
    MergeFrom(*source);
  }
}

void NodeStats::MergeFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_count() != 0) {
    set_range_count(from.range_count());
  }
  if (from.range_split_count() != 0) {
    set_range_split_count(from.range_split_count());
  }
  if (from.sending_snap_count() != 0) {
    set_sending_snap_count(from.sending_snap_count());
  }
  if (from.receiving_snap_count() != 0) {
    set_receiving_snap_count(from.receiving_snap_count());
  }
  if (from.applying_snap_count() != 0) {
    set_applying_snap_count(from.applying_snap_count());
  }
  if (from.range_leader_count() != 0) {
    set_range_leader_count(from.range_leader_count());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.used_size() != 0) {
    set_used_size(from.used_size());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
  if (from.is_busy() != 0) {
    set_is_busy(from.is_busy());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
}

void NodeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStats::CopyFrom(const NodeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStats::IsInitialized() const {
  return true;
}

void NodeStats::Swap(NodeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeStats::InternalSwap(NodeStats* other) {
  using std::swap;
  swap(range_count_, other->range_count_);
  swap(range_split_count_, other->range_split_count_);
  swap(sending_snap_count_, other->sending_snap_count_);
  swap(receiving_snap_count_, other->receiving_snap_count_);
  swap(applying_snap_count_, other->applying_snap_count_);
  swap(range_leader_count_, other->range_leader_count_);
  swap(capacity_, other->capacity_);
  swap(used_size_, other->used_size_);
  swap(available_, other->available_);
  swap(bytes_written_, other->bytes_written_);
  swap(keys_written_, other->keys_written_);
  swap(bytes_read_, other->bytes_read_);
  swap(keys_read_, other->keys_read_);
  swap(is_busy_, other->is_busy_);
  swap(start_, other->start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeStats::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeStats

// uint32 range_count = 1;
void NodeStats::clear_range_count() {
  range_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.range_count)
  return range_count_;
}
void NodeStats::set_range_count(::google::protobuf::uint32 value) {
  
  range_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.range_count)
}

// uint32 range_split_count = 2;
void NodeStats::clear_range_split_count() {
  range_split_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_split_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.range_split_count)
  return range_split_count_;
}
void NodeStats::set_range_split_count(::google::protobuf::uint32 value) {
  
  range_split_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.range_split_count)
}

// uint32 sending_snap_count = 3;
void NodeStats::clear_sending_snap_count() {
  sending_snap_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::sending_snap_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.sending_snap_count)
  return sending_snap_count_;
}
void NodeStats::set_sending_snap_count(::google::protobuf::uint32 value) {
  
  sending_snap_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.sending_snap_count)
}

// uint32 receiving_snap_count = 4;
void NodeStats::clear_receiving_snap_count() {
  receiving_snap_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::receiving_snap_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.receiving_snap_count)
  return receiving_snap_count_;
}
void NodeStats::set_receiving_snap_count(::google::protobuf::uint32 value) {
  
  receiving_snap_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.receiving_snap_count)
}

// uint32 applying_snap_count = 5;
void NodeStats::clear_applying_snap_count() {
  applying_snap_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::applying_snap_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.applying_snap_count)
  return applying_snap_count_;
}
void NodeStats::set_applying_snap_count(::google::protobuf::uint32 value) {
  
  applying_snap_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.applying_snap_count)
}

// uint32 range_leader_count = 6;
void NodeStats::clear_range_leader_count() {
  range_leader_count_ = 0u;
}
::google::protobuf::uint32 NodeStats::range_leader_count() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.range_leader_count)
  return range_leader_count_;
}
void NodeStats::set_range_leader_count(::google::protobuf::uint32 value) {
  
  range_leader_count_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.range_leader_count)
}

// uint64 capacity = 7;
void NodeStats::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::capacity() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.capacity)
  return capacity_;
}
void NodeStats::set_capacity(::google::protobuf::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.capacity)
}

// uint64 used_size = 8;
void NodeStats::clear_used_size() {
  used_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::used_size() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.used_size)
  return used_size_;
}
void NodeStats::set_used_size(::google::protobuf::uint64 value) {
  
  used_size_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.used_size)
}

// uint64 available = 9;
void NodeStats::clear_available() {
  available_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::available() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.available)
  return available_;
}
void NodeStats::set_available(::google::protobuf::uint64 value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.available)
}

// uint64 bytes_written = 10;
void NodeStats::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.bytes_written)
  return bytes_written_;
}
void NodeStats::set_bytes_written(::google::protobuf::uint64 value) {
  
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.bytes_written)
}

// uint64 keys_written = 11;
void NodeStats::clear_keys_written() {
  keys_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::keys_written() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.keys_written)
  return keys_written_;
}
void NodeStats::set_keys_written(::google::protobuf::uint64 value) {
  
  keys_written_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.keys_written)
}

// uint64 bytes_read = 12;
void NodeStats::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.bytes_read)
  return bytes_read_;
}
void NodeStats::set_bytes_read(::google::protobuf::uint64 value) {
  
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.bytes_read)
}

// uint64 keys_read = 13;
void NodeStats::clear_keys_read() {
  keys_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeStats::keys_read() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.keys_read)
  return keys_read_;
}
void NodeStats::set_keys_read(::google::protobuf::uint64 value) {
  
  keys_read_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.keys_read)
}

// bool is_busy = 14;
void NodeStats::clear_is_busy() {
  is_busy_ = false;
}
bool NodeStats::is_busy() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.is_busy)
  return is_busy_;
}
void NodeStats::set_is_busy(bool value) {
  
  is_busy_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.is_busy)
}

// uint32 start = 15;
void NodeStats::clear_start() {
  start_ = 0u;
}
::google::protobuf::uint32 NodeStats::start() const {
  // @@protoc_insertion_point(field_get:mspb.NodeStats.start)
  return start_;
}
void NodeStats::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeStats.start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeHeartbeatRequest::kHeaderFieldNumber;
const int NodeHeartbeatRequest::kNodeIdFieldNumber;
const int NodeHeartbeatRequest::kStatsFieldNumber;
const int NodeHeartbeatRequest::kIsolatedReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeHeartbeatRequest::NodeHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeHeartbeatRequest)
}
NodeHeartbeatRequest::NodeHeartbeatRequest(const NodeHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      isolated_replicas_(from.isolated_replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::mspb::NodeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.NodeHeartbeatRequest)
}

void NodeHeartbeatRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeHeartbeatRequest::~NodeHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:mspb.NodeHeartbeatRequest)
  SharedDtor();
}

void NodeHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete stats_;
}

void NodeHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeHeartbeatRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeHeartbeatRequest& NodeHeartbeatRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeHeartbeatRequest* NodeHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  NodeHeartbeatRequest* n = new NodeHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isolated_replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.NodeStats stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 isolated_replicas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_isolated_replicas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_isolated_replicas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeHeartbeatRequest)
  return false;
#undef DO_
}

void NodeHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // .mspb.NodeStats stats = 3;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stats_, output);
  }

  // repeated uint64 isolated_replicas = 4;
  if (this->isolated_replicas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isolated_replicas_cached_byte_size_));
  }
  for (int i = 0, n = this->isolated_replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->isolated_replicas(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeHeartbeatRequest)
}

::google::protobuf::uint8* NodeHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // .mspb.NodeStats stats = 3;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stats_, deterministic, target);
  }

  // repeated uint64 isolated_replicas = 4;
  if (this->isolated_replicas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _isolated_replicas_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->isolated_replicas_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeHeartbeatRequest)
  return target;
}

size_t NodeHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 isolated_replicas = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->isolated_replicas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isolated_replicas_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .mspb.NodeStats stats = 3;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeHeartbeatRequest)
    MergeFrom(*source);
  }
}

void NodeHeartbeatRequest::MergeFrom(const NodeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  isolated_replicas_.MergeFrom(from.isolated_replicas_);
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_stats()) {
    mutable_stats()->::mspb::NodeStats::MergeFrom(from.stats());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeHeartbeatRequest::CopyFrom(const NodeHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeartbeatRequest::IsInitialized() const {
  return true;
}

void NodeHeartbeatRequest::Swap(NodeHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeHeartbeatRequest::InternalSwap(NodeHeartbeatRequest* other) {
  using std::swap;
  isolated_replicas_.InternalSwap(&other->isolated_replicas_);
  swap(header_, other->header_);
  swap(stats_, other->stats_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeHeartbeatRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeHeartbeatRequest

// .mspb.RequestHeader header = 1;
bool NodeHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& NodeHeartbeatRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* NodeHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeHeartbeatRequest.header)
  return header_;
}
::mspb::RequestHeader* NodeHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeHeartbeatRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeHeartbeatRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeHeartbeatRequest.header)
}

// uint64 node_id = 2;
void NodeHeartbeatRequest::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeHeartbeatRequest::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.node_id)
  return node_id_;
}
void NodeHeartbeatRequest::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatRequest.node_id)
}

// .mspb.NodeStats stats = 3;
bool NodeHeartbeatRequest::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void NodeHeartbeatRequest::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::mspb::NodeStats& NodeHeartbeatRequest::stats() const {
  const ::mspb::NodeStats* p = stats_;
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::NodeStats*>(
      &::mspb::_NodeStats_default_instance_);
}
::mspb::NodeStats* NodeHeartbeatRequest::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::mspb::NodeStats;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeHeartbeatRequest.stats)
  return stats_;
}
::mspb::NodeStats* NodeHeartbeatRequest::release_stats() {
  // @@protoc_insertion_point(field_release:mspb.NodeHeartbeatRequest.stats)
  
  ::mspb::NodeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void NodeHeartbeatRequest::set_allocated_stats(::mspb::NodeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeHeartbeatRequest.stats)
}

// repeated uint64 isolated_replicas = 4;
int NodeHeartbeatRequest::isolated_replicas_size() const {
  return isolated_replicas_.size();
}
void NodeHeartbeatRequest::clear_isolated_replicas() {
  isolated_replicas_.Clear();
}
::google::protobuf::uint64 NodeHeartbeatRequest::isolated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatRequest.isolated_replicas)
  return isolated_replicas_.Get(index);
}
void NodeHeartbeatRequest::set_isolated_replicas(int index, ::google::protobuf::uint64 value) {
  isolated_replicas_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatRequest.isolated_replicas)
}
void NodeHeartbeatRequest::add_isolated_replicas(::google::protobuf::uint64 value) {
  isolated_replicas_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.NodeHeartbeatRequest.isolated_replicas)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NodeHeartbeatRequest::isolated_replicas() const {
  // @@protoc_insertion_point(field_list:mspb.NodeHeartbeatRequest.isolated_replicas)
  return isolated_replicas_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NodeHeartbeatRequest::mutable_isolated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:mspb.NodeHeartbeatRequest.isolated_replicas)
  return &isolated_replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeHeartbeatResponse::kHeaderFieldNumber;
const int NodeHeartbeatResponse::kNodeIdFieldNumber;
const int NodeHeartbeatResponse::kDeleteReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeHeartbeatResponse::NodeHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeHeartbeatResponse)
}
NodeHeartbeatResponse::NodeHeartbeatResponse(const NodeHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      delete_replicas_(from.delete_replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.NodeHeartbeatResponse)
}

void NodeHeartbeatResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeHeartbeatResponse::~NodeHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:mspb.NodeHeartbeatResponse)
  SharedDtor();
}

void NodeHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NodeHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeHeartbeatResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeHeartbeatResponse& NodeHeartbeatResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeHeartbeatResponse* NodeHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  NodeHeartbeatResponse* n = new NodeHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete_replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 delete_replicas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_delete_replicas())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_delete_replicas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeHeartbeatResponse)
  return false;
#undef DO_
}

void NodeHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // repeated uint64 delete_replicas = 3;
  if (this->delete_replicas_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _delete_replicas_cached_byte_size_));
  }
  for (int i = 0, n = this->delete_replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->delete_replicas(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeHeartbeatResponse)
}

::google::protobuf::uint8* NodeHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // repeated uint64 delete_replicas = 3;
  if (this->delete_replicas_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _delete_replicas_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->delete_replicas_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeHeartbeatResponse)
  return target;
}

size_t NodeHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeHeartbeatResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 delete_replicas = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->delete_replicas_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delete_replicas_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeHeartbeatResponse)
    MergeFrom(*source);
  }
}

void NodeHeartbeatResponse::MergeFrom(const NodeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delete_replicas_.MergeFrom(from.delete_replicas_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeHeartbeatResponse::CopyFrom(const NodeHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeartbeatResponse::IsInitialized() const {
  return true;
}

void NodeHeartbeatResponse::Swap(NodeHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeHeartbeatResponse::InternalSwap(NodeHeartbeatResponse* other) {
  using std::swap;
  delete_replicas_.InternalSwap(&other->delete_replicas_);
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeHeartbeatResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeHeartbeatResponse

// .mspb.ResponseHeader header = 1;
bool NodeHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& NodeHeartbeatResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* NodeHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeHeartbeatResponse.header)
  return header_;
}
::mspb::ResponseHeader* NodeHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeHeartbeatResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeHeartbeatResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeHeartbeatResponse.header)
}

// uint64 node_id = 2;
void NodeHeartbeatResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeHeartbeatResponse::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatResponse.node_id)
  return node_id_;
}
void NodeHeartbeatResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatResponse.node_id)
}

// repeated uint64 delete_replicas = 3;
int NodeHeartbeatResponse::delete_replicas_size() const {
  return delete_replicas_.size();
}
void NodeHeartbeatResponse::clear_delete_replicas() {
  delete_replicas_.Clear();
}
::google::protobuf::uint64 NodeHeartbeatResponse::delete_replicas(int index) const {
  // @@protoc_insertion_point(field_get:mspb.NodeHeartbeatResponse.delete_replicas)
  return delete_replicas_.Get(index);
}
void NodeHeartbeatResponse::set_delete_replicas(int index, ::google::protobuf::uint64 value) {
  delete_replicas_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.NodeHeartbeatResponse.delete_replicas)
}
void NodeHeartbeatResponse::add_delete_replicas(::google::protobuf::uint64 value) {
  delete_replicas_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.NodeHeartbeatResponse.delete_replicas)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NodeHeartbeatResponse::delete_replicas() const {
  // @@protoc_insertion_point(field_list:mspb.NodeHeartbeatResponse.delete_replicas)
  return delete_replicas_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NodeHeartbeatResponse::mutable_delete_replicas() {
  // @@protoc_insertion_point(field_mutable_list:mspb.NodeHeartbeatResponse.delete_replicas)
  return &delete_replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitRequest::kHeaderFieldNumber;
const int AskSplitRequest::kRangeFieldNumber;
const int AskSplitRequest::kSplitKeyFieldNumber;
const int AskSplitRequest::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitRequest::AskSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AskSplitRequest)
}
AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:mspb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&header_)) + sizeof(force_));
  _cached_size_ = 0;
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:mspb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void AskSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskSplitRequest& AskSplitRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskSplitRequest* AskSplitRequest::New(::google::protobuf::Arena* arena) const {
  AskSplitRequest* n = new AskSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  force_ = false;
  _internal_metadata_.Clear();
}

bool AskSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AskSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AskSplitRequest)
  return false;
#undef DO_
}

void AskSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->split_key(), output);
  }

  // bool force = 4;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->force(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AskSplitRequest)
}

::google::protobuf::uint8* AskSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->split_key(), target);
  }

  // bool force = 4;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->force(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AskSplitRequest)
  return target;
}

size_t AskSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AskSplitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // bool force = 4;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AskSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AskSplitRequest)
    MergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
}

void AskSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {
  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitRequest::InternalSwap(AskSplitRequest* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(force_, other->force_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitRequest

// .mspb.RequestHeader header = 1;
bool AskSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& AskSplitRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* AskSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.header)
  return header_;
}
::mspb::RequestHeader* AskSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.header)
}

// .metapb.Range range = 2;
bool AskSplitRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void AskSplitRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& AskSplitRequest::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* AskSplitRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.range)
  return range_;
}
::metapb::Range* AskSplitRequest::release_range() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.range)
}

// bytes split_key = 3;
void AskSplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AskSplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.split_key)
  return split_key_.GetNoArena();
}
void AskSplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitRequest.split_key)
}
#if LANG_CXX11
void AskSplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.AskSplitRequest.split_key)
}
#endif
void AskSplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.AskSplitRequest.split_key)
}
void AskSplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.AskSplitRequest.split_key)
}
::std::string* AskSplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskSplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskSplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitRequest.split_key)
}

// bool force = 4;
void AskSplitRequest::clear_force() {
  force_ = false;
}
bool AskSplitRequest::force() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitRequest.force)
  return force_;
}
void AskSplitRequest::set_force(bool value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:mspb.AskSplitRequest.force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitResponse::kHeaderFieldNumber;
const int AskSplitResponse::kRangeFieldNumber;
const int AskSplitResponse::kNewRangeIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
const int AskSplitResponse::kSplitKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitResponse::AskSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AskSplitResponse)
}
AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      new_peer_ids_(from.new_peer_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  new_range_id_ = from.new_range_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_range_id_));
  _cached_size_ = 0;
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:mspb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void AskSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AskSplitResponse& AskSplitResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AskSplitResponse* AskSplitResponse::New(::google::protobuf::Arena* arena) const {
  AskSplitResponse* n = new AskSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  new_range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AskSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AskSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_range_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AskSplitResponse)
  return false;
#undef DO_
}

void AskSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->new_range_id(), output);
  }

  // repeated uint64 new_peer_ids = 4;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _new_peer_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->split_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AskSplitResponse)
}

::google::protobuf::uint8* AskSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->new_range_id(), target);
  }

  // repeated uint64 new_peer_ids = 4;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _new_peer_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->split_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AskSplitResponse)
  return target;
}

size_t AskSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AskSplitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 new_peer_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes split_key = 5;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 new_range_id = 3;
  if (this->new_range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AskSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AskSplitResponse)
    MergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.new_range_id() != 0) {
    set_new_range_id(from.new_range_id());
  }
}

void AskSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {
  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitResponse::InternalSwap(AskSplitResponse* other) {
  using std::swap;
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  split_key_.Swap(&other->split_key_);
  swap(header_, other->header_);
  swap(range_, other->range_);
  swap(new_range_id_, other->new_range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitResponse

// .mspb.ResponseHeader header = 1;
bool AskSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& AskSplitResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* AskSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.header)
  return header_;
}
::mspb::ResponseHeader* AskSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.header)
}

// .metapb.Range range = 2;
bool AskSplitResponse::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void AskSplitResponse::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& AskSplitResponse::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* AskSplitResponse::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.range)
  return range_;
}
::metapb::Range* AskSplitResponse::release_range() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void AskSplitResponse::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.range)
}

// uint64 new_range_id = 3;
void AskSplitResponse::clear_new_range_id() {
  new_range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AskSplitResponse::new_range_id() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.new_range_id)
  return new_range_id_;
}
void AskSplitResponse::set_new_range_id(::google::protobuf::uint64 value) {
  
  new_range_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.new_range_id)
}

// repeated uint64 new_peer_ids = 4;
int AskSplitResponse::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void AskSplitResponse::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 AskSplitResponse::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void AskSplitResponse::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.new_peer_ids)
}
void AskSplitResponse::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.AskSplitResponse.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AskSplitResponse::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:mspb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AskSplitResponse::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:mspb.AskSplitResponse.new_peer_ids)
  return &new_peer_ids_;
}

// bytes split_key = 5;
void AskSplitResponse::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AskSplitResponse::split_key() const {
  // @@protoc_insertion_point(field_get:mspb.AskSplitResponse.split_key)
  return split_key_.GetNoArena();
}
void AskSplitResponse::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.AskSplitResponse.split_key)
}
#if LANG_CXX11
void AskSplitResponse::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.AskSplitResponse.split_key)
}
#endif
void AskSplitResponse::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.AskSplitResponse.split_key)
}
void AskSplitResponse::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.AskSplitResponse.split_key)
}
::std::string* AskSplitResponse::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.AskSplitResponse.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AskSplitResponse::release_split_key() {
  // @@protoc_insertion_point(field_release:mspb.AskSplitResponse.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AskSplitResponse::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:mspb.AskSplitResponse.split_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitRequest::kHeaderFieldNumber;
const int ReportSplitRequest::kLeftFieldNumber;
const int ReportSplitRequest::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitRequest::ReportSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.ReportSplitRequest)
}
ReportSplitRequest::ReportSplitRequest(const ReportSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_left()) {
    left_ = new ::metapb::Range(*from.left_);
  } else {
    left_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::metapb::Range(*from.right_);
  } else {
    right_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.ReportSplitRequest)
}

void ReportSplitRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&header_)) + sizeof(right_));
  _cached_size_ = 0;
}

ReportSplitRequest::~ReportSplitRequest() {
  // @@protoc_insertion_point(destructor:mspb.ReportSplitRequest)
  SharedDtor();
}

void ReportSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void ReportSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportSplitRequest& ReportSplitRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportSplitRequest* ReportSplitRequest::New(::google::protobuf::Arena* arena) const {
  ReportSplitRequest* n = new ReportSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
  _internal_metadata_.Clear();
}

bool ReportSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.ReportSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.ReportSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.ReportSplitRequest)
  return false;
#undef DO_
}

void ReportSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range left = 2;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_, output);
  }

  // .metapb.Range right = 3;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.ReportSplitRequest)
}

::google::protobuf::uint8* ReportSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range left = 2;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->left_, deterministic, target);
  }

  // .metapb.Range right = 3;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.ReportSplitRequest)
  return target;
}

size_t ReportSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.ReportSplitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);
  }

  // .metapb.Range right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.ReportSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.ReportSplitRequest)
    MergeFrom(*source);
  }
}

void ReportSplitRequest::MergeFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_left()) {
    mutable_left()->::metapb::Range::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Range::MergeFrom(from.right());
  }
}

void ReportSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitRequest::CopyFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitRequest::IsInitialized() const {
  return true;
}

void ReportSplitRequest::Swap(ReportSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitRequest::InternalSwap(ReportSplitRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportSplitRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportSplitRequest

// .mspb.RequestHeader header = 1;
bool ReportSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& ReportSplitRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.ReportSplitRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* ReportSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ReportSplitRequest.header)
  return header_;
}
::mspb::RequestHeader* ReportSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.ReportSplitRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ReportSplitRequest.header)
}

// .metapb.Range left = 2;
bool ReportSplitRequest::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
void ReportSplitRequest::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
}
const ::metapb::Range& ReportSplitRequest::left() const {
  const ::metapb::Range* p = left_;
  // @@protoc_insertion_point(field_get:mspb.ReportSplitRequest.left)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* ReportSplitRequest::mutable_left() {
  
  if (left_ == NULL) {
    left_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ReportSplitRequest.left)
  return left_;
}
::metapb::Range* ReportSplitRequest::release_left() {
  // @@protoc_insertion_point(field_release:mspb.ReportSplitRequest.left)
  
  ::metapb::Range* temp = left_;
  left_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_left(::metapb::Range* left) {
  delete left_;
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ReportSplitRequest.left)
}

// .metapb.Range right = 3;
bool ReportSplitRequest::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
void ReportSplitRequest::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}
const ::metapb::Range& ReportSplitRequest::right() const {
  const ::metapb::Range* p = right_;
  // @@protoc_insertion_point(field_get:mspb.ReportSplitRequest.right)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* ReportSplitRequest::mutable_right() {
  
  if (right_ == NULL) {
    right_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ReportSplitRequest.right)
  return right_;
}
::metapb::Range* ReportSplitRequest::release_right() {
  // @@protoc_insertion_point(field_release:mspb.ReportSplitRequest.right)
  
  ::metapb::Range* temp = right_;
  right_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_right(::metapb::Range* right) {
  delete right_;
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ReportSplitRequest.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitResponse::ReportSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.ReportSplitResponse)
}
ReportSplitResponse::ReportSplitResponse(const ReportSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.ReportSplitResponse)
}

void ReportSplitResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReportSplitResponse::~ReportSplitResponse() {
  // @@protoc_insertion_point(destructor:mspb.ReportSplitResponse)
  SharedDtor();
}

void ReportSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReportSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportSplitResponse& ReportSplitResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportSplitResponse* ReportSplitResponse::New(::google::protobuf::Arena* arena) const {
  ReportSplitResponse* n = new ReportSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ReportSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.ReportSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.ReportSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.ReportSplitResponse)
  return false;
#undef DO_
}

void ReportSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.ReportSplitResponse)
}

::google::protobuf::uint8* ReportSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.ReportSplitResponse)
  return target;
}

size_t ReportSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.ReportSplitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.ReportSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.ReportSplitResponse)
    MergeFrom(*source);
  }
}

void ReportSplitResponse::MergeFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitResponse::CopyFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitResponse::IsInitialized() const {
  return true;
}

void ReportSplitResponse::Swap(ReportSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitResponse::InternalSwap(ReportSplitResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportSplitResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportSplitResponse

// .mspb.ResponseHeader header = 1;
bool ReportSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& ReportSplitResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.ReportSplitResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* ReportSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ReportSplitResponse.header)
  return header_;
}
::mspb::ResponseHeader* ReportSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.ReportSplitResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportSplitResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ReportSplitResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeLoginRequest::kHeaderFieldNumber;
const int NodeLoginRequest::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeLoginRequest::NodeLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeLoginRequest)
}
NodeLoginRequest::NodeLoginRequest(const NodeLoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.NodeLoginRequest)
}

void NodeLoginRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_id_));
  _cached_size_ = 0;
}

NodeLoginRequest::~NodeLoginRequest() {
  // @@protoc_insertion_point(destructor:mspb.NodeLoginRequest)
  SharedDtor();
}

void NodeLoginRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NodeLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLoginRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeLoginRequest& NodeLoginRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeLoginRequest* NodeLoginRequest::New(::google::protobuf::Arena* arena) const {
  NodeLoginRequest* n = new NodeLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  node_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeLoginRequest)
  return false;
#undef DO_
}

void NodeLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeLoginRequest)
}

::google::protobuf::uint8* NodeLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeLoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeLoginRequest)
  return target;
}

size_t NodeLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeLoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeLoginRequest)
    MergeFrom(*source);
  }
}

void NodeLoginRequest::MergeFrom(const NodeLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodeLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLoginRequest::CopyFrom(const NodeLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLoginRequest::IsInitialized() const {
  return true;
}

void NodeLoginRequest::Swap(NodeLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeLoginRequest::InternalSwap(NodeLoginRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeLoginRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeLoginRequest

// .mspb.RequestHeader header = 1;
bool NodeLoginRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeLoginRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& NodeLoginRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeLoginRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* NodeLoginRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeLoginRequest.header)
  return header_;
}
::mspb::RequestHeader* NodeLoginRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeLoginRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeLoginRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeLoginRequest.header)
}

// uint64 node_id = 2;
void NodeLoginRequest::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NodeLoginRequest::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.NodeLoginRequest.node_id)
  return node_id_;
}
void NodeLoginRequest::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.NodeLoginRequest.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeLoginResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeLoginResponse::NodeLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NodeLoginResponse)
}
NodeLoginResponse::NodeLoginResponse(const NodeLoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.NodeLoginResponse)
}

void NodeLoginResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

NodeLoginResponse::~NodeLoginResponse() {
  // @@protoc_insertion_point(destructor:mspb.NodeLoginResponse)
  SharedDtor();
}

void NodeLoginResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NodeLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLoginResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeLoginResponse& NodeLoginResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeLoginResponse* NodeLoginResponse::New(::google::protobuf::Arena* arena) const {
  NodeLoginResponse* n = new NodeLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NodeLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool NodeLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NodeLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NodeLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NodeLoginResponse)
  return false;
#undef DO_
}

void NodeLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NodeLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NodeLoginResponse)
}

::google::protobuf::uint8* NodeLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NodeLoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NodeLoginResponse)
  return target;
}

size_t NodeLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NodeLoginResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NodeLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NodeLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NodeLoginResponse)
    MergeFrom(*source);
  }
}

void NodeLoginResponse::MergeFrom(const NodeLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NodeLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void NodeLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NodeLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLoginResponse::CopyFrom(const NodeLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NodeLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLoginResponse::IsInitialized() const {
  return true;
}

void NodeLoginResponse::Swap(NodeLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeLoginResponse::InternalSwap(NodeLoginResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeLoginResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeLoginResponse

// .mspb.ResponseHeader header = 1;
bool NodeLoginResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NodeLoginResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& NodeLoginResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.NodeLoginResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* NodeLoginResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.NodeLoginResponse.header)
  return header_;
}
::mspb::ResponseHeader* NodeLoginResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.NodeLoginResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NodeLoginResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.NodeLoginResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeIdRequest::kHeaderFieldNumber;
const int GetNodeIdRequest::kServerPortFieldNumber;
const int GetNodeIdRequest::kRaftPortFieldNumber;
const int GetNodeIdRequest::kAdminPortFieldNumber;
const int GetNodeIdRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeIdRequest::GetNodeIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeIdRequest)
}
GetNodeIdRequest::GetNodeIdRequest(const GetNodeIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&server_port_, &from.server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_port_) -
    reinterpret_cast<char*>(&server_port_)) + sizeof(admin_port_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeIdRequest)
}

void GetNodeIdRequest::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_port_) -
      reinterpret_cast<char*>(&header_)) + sizeof(admin_port_));
  _cached_size_ = 0;
}

GetNodeIdRequest::~GetNodeIdRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeIdRequest)
  SharedDtor();
}

void GetNodeIdRequest::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetNodeIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeIdRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeIdRequest& GetNodeIdRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeIdRequest* GetNodeIdRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeIdRequest* n = new GetNodeIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&server_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_port_) -
      reinterpret_cast<char*>(&server_port_)) + sizeof(admin_port_));
  _internal_metadata_.Clear();
}

bool GetNodeIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 raft_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raft_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 admin_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admin_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetNodeIdRequest.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeIdRequest)
  return false;
#undef DO_
}

void GetNodeIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raft_port(), output);
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->admin_port(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetNodeIdRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeIdRequest)
}

::google::protobuf::uint8* GetNodeIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raft_port(), target);
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->admin_port(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetNodeIdRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeIdRequest)
  return target;
}

size_t GetNodeIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint32 server_port = 2;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_port());
  }

  // uint32 raft_port = 3;
  if (this->raft_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raft_port());
  }

  // uint32 admin_port = 4;
  if (this->admin_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->admin_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeIdRequest)
    MergeFrom(*source);
  }
}

void GetNodeIdRequest::MergeFrom(const GetNodeIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.server_port() != 0) {
    set_server_port(from.server_port());
  }
  if (from.raft_port() != 0) {
    set_raft_port(from.raft_port());
  }
  if (from.admin_port() != 0) {
    set_admin_port(from.admin_port());
  }
}

void GetNodeIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeIdRequest::CopyFrom(const GetNodeIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeIdRequest::IsInitialized() const {
  return true;
}

void GetNodeIdRequest::Swap(GetNodeIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeIdRequest::InternalSwap(GetNodeIdRequest* other) {
  using std::swap;
  version_.Swap(&other->version_);
  swap(header_, other->header_);
  swap(server_port_, other->server_port_);
  swap(raft_port_, other->raft_port_);
  swap(admin_port_, other->admin_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeIdRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeIdRequest

// .mspb.RequestHeader header = 1;
bool GetNodeIdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeIdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetNodeIdRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetNodeIdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeIdRequest.header)
  return header_;
}
::mspb::RequestHeader* GetNodeIdRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeIdRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeIdRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeIdRequest.header)
}

// uint32 server_port = 2;
void GetNodeIdRequest::clear_server_port() {
  server_port_ = 0u;
}
::google::protobuf::uint32 GetNodeIdRequest::server_port() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdRequest.server_port)
  return server_port_;
}
void GetNodeIdRequest::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdRequest.server_port)
}

// uint32 raft_port = 3;
void GetNodeIdRequest::clear_raft_port() {
  raft_port_ = 0u;
}
::google::protobuf::uint32 GetNodeIdRequest::raft_port() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdRequest.raft_port)
  return raft_port_;
}
void GetNodeIdRequest::set_raft_port(::google::protobuf::uint32 value) {
  
  raft_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdRequest.raft_port)
}

// uint32 admin_port = 4;
void GetNodeIdRequest::clear_admin_port() {
  admin_port_ = 0u;
}
::google::protobuf::uint32 GetNodeIdRequest::admin_port() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdRequest.admin_port)
  return admin_port_;
}
void GetNodeIdRequest::set_admin_port(::google::protobuf::uint32 value) {
  
  admin_port_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdRequest.admin_port)
}

// string version = 5;
void GetNodeIdRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodeIdRequest::version() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdRequest.version)
  return version_.GetNoArena();
}
void GetNodeIdRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdRequest.version)
}
#if LANG_CXX11
void GetNodeIdRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetNodeIdRequest.version)
}
#endif
void GetNodeIdRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetNodeIdRequest.version)
}
void GetNodeIdRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetNodeIdRequest.version)
}
::std::string* GetNodeIdRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeIdRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodeIdRequest::release_version() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeIdRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodeIdRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeIdRequest.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeIdResponse::kHeaderFieldNumber;
const int GetNodeIdResponse::kNodeIdFieldNumber;
const int GetNodeIdResponse::kClearupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeIdResponse::GetNodeIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeIdResponse)
}
GetNodeIdResponse::GetNodeIdResponse(const GetNodeIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clearup_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(clearup_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeIdResponse)
}

void GetNodeIdResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clearup_) -
      reinterpret_cast<char*>(&header_)) + sizeof(clearup_));
  _cached_size_ = 0;
}

GetNodeIdResponse::~GetNodeIdResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeIdResponse)
  SharedDtor();
}

void GetNodeIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodeIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeIdResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeIdResponse& GetNodeIdResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeIdResponse* GetNodeIdResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeIdResponse* n = new GetNodeIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clearup_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(clearup_));
  _internal_metadata_.Clear();
}

bool GetNodeIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool clearup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeIdResponse)
  return false;
#undef DO_
}

void GetNodeIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->node_id(), output);
  }

  // bool clearup = 3;
  if (this->clearup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->clearup(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeIdResponse)
}

::google::protobuf::uint8* GetNodeIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->node_id(), target);
  }

  // bool clearup = 3;
  if (this->clearup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->clearup(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeIdResponse)
  return target;
}

size_t GetNodeIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // bool clearup = 3;
  if (this->clearup() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeIdResponse)
    MergeFrom(*source);
  }
}

void GetNodeIdResponse::MergeFrom(const GetNodeIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.clearup() != 0) {
    set_clearup(from.clearup());
  }
}

void GetNodeIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeIdResponse::CopyFrom(const GetNodeIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeIdResponse::IsInitialized() const {
  return true;
}

void GetNodeIdResponse::Swap(GetNodeIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeIdResponse::InternalSwap(GetNodeIdResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_id_, other->node_id_);
  swap(clearup_, other->clearup_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeIdResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeIdResponse

// .mspb.ResponseHeader header = 1;
bool GetNodeIdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeIdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetNodeIdResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetNodeIdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeIdResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetNodeIdResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeIdResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeIdResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeIdResponse.header)
}

// uint64 node_id = 2;
void GetNodeIdResponse::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetNodeIdResponse::node_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdResponse.node_id)
  return node_id_;
}
void GetNodeIdResponse::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdResponse.node_id)
}

// bool clearup = 3;
void GetNodeIdResponse::clear_clearup() {
  clearup_ = false;
}
bool GetNodeIdResponse::clearup() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeIdResponse.clearup)
  return clearup_;
}
void GetNodeIdResponse::set_clearup(bool value) {
  
  clearup_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeIdResponse.clearup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kHeaderFieldNumber;
const int GetRouteRequest::kDbIdFieldNumber;
const int GetRouteRequest::kTableIdFieldNumber;
const int GetRouteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetRouteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteRequest& GetRouteRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteRequest* GetRouteRequest::New(::google::protobuf::Arena* arena) const {
  GetRouteRequest* n = new GetRouteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetRouteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetRouteRequest)
  return false;
#undef DO_
}

void GetRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetRouteRequest)
}

::google::protobuf::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetRouteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteRequest

// .mspb.RequestHeader header = 1;
bool GetRouteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRouteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetRouteRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetRouteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteRequest.header)
  return header_;
}
::mspb::RequestHeader* GetRouteRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRouteRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteRequest.header)
}

// uint64 db_id = 2;
void GetRouteRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRouteRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.db_id)
  return db_id_;
}
void GetRouteRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.db_id)
}

// uint64 table_id = 3;
void GetRouteRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRouteRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.table_id)
  return table_id_;
}
void GetRouteRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.table_id)
}

// bytes key = 4;
void GetRouteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRouteRequest::key() const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteRequest.key)
  return key_.GetNoArena();
}
void GetRouteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetRouteRequest.key)
}
#if LANG_CXX11
void GetRouteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetRouteRequest.key)
}
#endif
void GetRouteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetRouteRequest.key)
}
void GetRouteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetRouteRequest.key)
}
::std::string* GetRouteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRouteRequest::release_key() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRouteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteResponse::kHeaderFieldNumber;
const int GetRouteResponse::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteResponse::GetRouteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      routes_(from.routes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetRouteResponse)
  SharedDtor();
}

void GetRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetRouteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRouteResponse& GetRouteResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetRouteResponse* GetRouteResponse::New(::google::protobuf::Arena* arena) const {
  GetRouteResponse* n = new GetRouteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetRouteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetRouteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Route routes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetRouteResponse)
  return false;
#undef DO_
}

void GetRouteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetRouteResponse)
}

::google::protobuf::uint8* GetRouteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .metapb.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetRouteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metapb.Route routes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRouteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetRouteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetRouteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::Swap(GetRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  routes_.InternalSwap(&other->routes_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRouteResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRouteResponse

// .mspb.ResponseHeader header = 1;
bool GetRouteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRouteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetRouteResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetRouteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetRouteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetRouteResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetRouteResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRouteResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetRouteResponse.header)
}

// repeated .metapb.Route routes = 2;
int GetRouteResponse::routes_size() const {
  return routes_.size();
}
void GetRouteResponse::clear_routes() {
  routes_.Clear();
}
const ::metapb::Route& GetRouteResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetRouteResponse.routes)
  return routes_.Get(index);
}
::metapb::Route* GetRouteResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetRouteResponse.routes)
  return routes_.Mutable(index);
}
::metapb::Route* GetRouteResponse::add_routes() {
  // @@protoc_insertion_point(field_add:mspb.GetRouteResponse.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Route >*
GetRouteResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetRouteResponse.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Route >&
GetRouteResponse::routes() const {
  // @@protoc_insertion_point(field_list:mspb.GetRouteResponse.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeRequest::kHeaderFieldNumber;
const int GetNodeRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeRequest::GetNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeRequest)
}
GetNodeRequest::GetNodeRequest(const GetNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeRequest)
}

void GetNodeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
  _cached_size_ = 0;
}

GetNodeRequest::~GetNodeRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeRequest)
  SharedDtor();
}

void GetNodeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeRequest& GetNodeRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeRequest* GetNodeRequest::New(::google::protobuf::Arena* arena) const {
  GetNodeRequest* n = new GetNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeRequest)
  return false;
#undef DO_
}

void GetNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeRequest)
}

::google::protobuf::uint8* GetNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeRequest)
  return target;
}

size_t GetNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeRequest)
    MergeFrom(*source);
  }
}

void GetNodeRequest::MergeFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeRequest::CopyFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRequest::IsInitialized() const {
  return true;
}

void GetNodeRequest::Swap(GetNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeRequest::InternalSwap(GetNodeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeRequest

// .mspb.RequestHeader header = 1;
bool GetNodeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetNodeRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetNodeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeRequest.header)
  return header_;
}
::mspb::RequestHeader* GetNodeRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeRequest.header)
}

// uint64 id = 2;
void GetNodeRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetNodeRequest::id() const {
  // @@protoc_insertion_point(field_get:mspb.GetNodeRequest.id)
  return id_;
}
void GetNodeRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetNodeRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeResponse::kHeaderFieldNumber;
const int GetNodeResponse::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeResponse::GetNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetNodeResponse)
}
GetNodeResponse::GetNodeResponse(const GetNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::metapb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetNodeResponse)
}

void GetNodeResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_) -
      reinterpret_cast<char*>(&header_)) + sizeof(node_));
  _cached_size_ = 0;
}

GetNodeResponse::~GetNodeResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetNodeResponse)
  SharedDtor();
}

void GetNodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete node_;
}

void GetNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodeResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodeResponse& GetNodeResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodeResponse* GetNodeResponse::New(::google::protobuf::Arena* arena) const {
  GetNodeResponse* n = new GetNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  _internal_metadata_.Clear();
}

bool GetNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetNodeResponse)
  return false;
#undef DO_
}

void GetNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetNodeResponse)
}

::google::protobuf::uint8* GetNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetNodeResponse)
  return target;
}

size_t GetNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetNodeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetNodeResponse)
    MergeFrom(*source);
  }
}

void GetNodeResponse::MergeFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_node()) {
    mutable_node()->::metapb::Node::MergeFrom(from.node());
  }
}

void GetNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeResponse::CopyFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeResponse::IsInitialized() const {
  return true;
}

void GetNodeResponse::Swap(GetNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeResponse::InternalSwap(GetNodeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodeResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodeResponse

// .mspb.ResponseHeader header = 1;
bool GetNodeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetNodeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetNodeResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetNodeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetNodeResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetNodeResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeResponse.header)
}

// .metapb.Node node = 2;
bool GetNodeResponse::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void GetNodeResponse::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::metapb::Node& GetNodeResponse::node() const {
  const ::metapb::Node* p = node_;
  // @@protoc_insertion_point(field_get:mspb.GetNodeResponse.node)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Node*>(
      &::metapb::_Node_default_instance_);
}
::metapb::Node* GetNodeResponse::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::metapb::Node;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetNodeResponse.node)
  return node_;
}
::metapb::Node* GetNodeResponse::release_node() {
  // @@protoc_insertion_point(field_release:mspb.GetNodeResponse.node)
  
  ::metapb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void GetNodeResponse::set_allocated_node(::metapb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetNodeResponse.node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDBRequest::kHeaderFieldNumber;
const int GetDBRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDBRequest::GetDBRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetDBRequest)
}
GetDBRequest::GetDBRequest(const GetDBRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetDBRequest)
}

void GetDBRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetDBRequest::~GetDBRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetDBRequest)
  SharedDtor();
}

void GetDBRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDBRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDBRequest& GetDBRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDBRequest* GetDBRequest::New(::google::protobuf::Arena* arena) const {
  GetDBRequest* n = new GetDBRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetDBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetDBRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetDBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetDBRequest)
  return false;
#undef DO_
}

void GetDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetDBRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetDBRequest)
}

::google::protobuf::uint8* GetDBRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetDBRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetDBRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetDBRequest)
  return target;
}

size_t GetDBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetDBRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDBRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDBRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetDBRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetDBRequest)
    MergeFrom(*source);
  }
}

void GetDBRequest::MergeFrom(const GetDBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetDBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDBRequest::CopyFrom(const GetDBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetDBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDBRequest::IsInitialized() const {
  return true;
}

void GetDBRequest::Swap(GetDBRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDBRequest::InternalSwap(GetDBRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDBRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDBRequest

// .mspb.RequestHeader header = 1;
bool GetDBRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetDBRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetDBRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetDBRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetDBRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBRequest.header)
  return header_;
}
::mspb::RequestHeader* GetDBRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetDBRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetDBRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBRequest.header)
}

// string name = 2;
void GetDBRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDBRequest::name() const {
  // @@protoc_insertion_point(field_get:mspb.GetDBRequest.name)
  return name_.GetNoArena();
}
void GetDBRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetDBRequest.name)
}
#if LANG_CXX11
void GetDBRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetDBRequest.name)
}
#endif
void GetDBRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetDBRequest.name)
}
void GetDBRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetDBRequest.name)
}
::std::string* GetDBRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetDBRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDBRequest::release_name() {
  // @@protoc_insertion_point(field_release:mspb.GetDBRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDBRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDBResponse::kHeaderFieldNumber;
const int GetDBResponse::kDbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDBResponse::GetDBResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetDBResponse)
}
GetDBResponse::GetDBResponse(const GetDBResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_db()) {
    db_ = new ::metapb::DataBase(*from.db_);
  } else {
    db_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetDBResponse)
}

void GetDBResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_) -
      reinterpret_cast<char*>(&header_)) + sizeof(db_));
  _cached_size_ = 0;
}

GetDBResponse::~GetDBResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetDBResponse)
  SharedDtor();
}

void GetDBResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete db_;
}

void GetDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDBResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDBResponse& GetDBResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDBResponse* GetDBResponse::New(::google::protobuf::Arena* arena) const {
  GetDBResponse* n = new GetDBResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && db_ != NULL) {
    delete db_;
  }
  db_ = NULL;
  _internal_metadata_.Clear();
}

bool GetDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetDBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.DataBase db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetDBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetDBResponse)
  return false;
#undef DO_
}

void GetDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.DataBase db = 2;
  if (this->has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->db_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetDBResponse)
}

::google::protobuf::uint8* GetDBResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetDBResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.DataBase db = 2;
  if (this->has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->db_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetDBResponse)
  return target;
}

size_t GetDBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetDBResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.DataBase db = 2;
  if (this->has_db()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->db_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDBResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDBResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetDBResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetDBResponse)
    MergeFrom(*source);
  }
}

void GetDBResponse::MergeFrom(const GetDBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetDBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_db()) {
    mutable_db()->::metapb::DataBase::MergeFrom(from.db());
  }
}

void GetDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDBResponse::CopyFrom(const GetDBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetDBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDBResponse::IsInitialized() const {
  return true;
}

void GetDBResponse::Swap(GetDBResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDBResponse::InternalSwap(GetDBResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_, other->db_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDBResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDBResponse

// .mspb.ResponseHeader header = 1;
bool GetDBResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetDBResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetDBResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetDBResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetDBResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetDBResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetDBResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetDBResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBResponse.header)
}

// .metapb.DataBase db = 2;
bool GetDBResponse::has_db() const {
  return this != internal_default_instance() && db_ != NULL;
}
void GetDBResponse::clear_db() {
  if (GetArenaNoVirtual() == NULL && db_ != NULL) delete db_;
  db_ = NULL;
}
const ::metapb::DataBase& GetDBResponse::db() const {
  const ::metapb::DataBase* p = db_;
  // @@protoc_insertion_point(field_get:mspb.GetDBResponse.db)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::DataBase*>(
      &::metapb::_DataBase_default_instance_);
}
::metapb::DataBase* GetDBResponse::mutable_db() {
  
  if (db_ == NULL) {
    db_ = new ::metapb::DataBase;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetDBResponse.db)
  return db_;
}
::metapb::DataBase* GetDBResponse::release_db() {
  // @@protoc_insertion_point(field_release:mspb.GetDBResponse.db)
  
  ::metapb::DataBase* temp = db_;
  db_ = NULL;
  return temp;
}
void GetDBResponse::set_allocated_db(::metapb::DataBase* db) {
  delete db_;
  db_ = db;
  if (db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetDBResponse.db)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableRequest::kHeaderFieldNumber;
const int GetTableRequest::kDbNameFieldNumber;
const int GetTableRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableRequest::GetTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableRequest)
}
GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetTableRequest)
  SharedDtor();
}

void GetTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableRequest& GetTableRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableRequest* GetTableRequest::New(::google::protobuf::Arena* arena) const {
  GetTableRequest* n = new GetTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetTableRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableRequest)
  return false;
#undef DO_
}

void GetTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableRequest)
}

::google::protobuf::uint8* GetTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableRequest)
    MergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void GetTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  return true;
}

void GetTableRequest::Swap(GetTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableRequest::InternalSwap(GetTableRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableRequest

// .mspb.RequestHeader header = 1;
bool GetTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.header)
  return header_;
}
::mspb::RequestHeader* GetTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.header)
}

// string db_name = 2;
void GetTableRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTableRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.db_name)
  return db_name_.GetNoArena();
}
void GetTableRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.db_name)
}
#if LANG_CXX11
void GetTableRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetTableRequest.db_name)
}
#endif
void GetTableRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetTableRequest.db_name)
}
void GetTableRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetTableRequest.db_name)
}
::std::string* GetTableRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTableRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.db_name)
}

// string table_name = 3;
void GetTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableRequest.table_name)
  return table_name_.GetNoArena();
}
void GetTableRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetTableRequest.table_name)
}
#if LANG_CXX11
void GetTableRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetTableRequest.table_name)
}
#endif
void GetTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetTableRequest.table_name)
}
void GetTableRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetTableRequest.table_name)
}
::std::string* GetTableRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mspb.GetTableRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableByIdRequest::kHeaderFieldNumber;
const int GetTableByIdRequest::kDbIdFieldNumber;
const int GetTableByIdRequest::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableByIdRequest::GetTableByIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableByIdRequest)
}
GetTableByIdRequest::GetTableByIdRequest(const GetTableByIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableByIdRequest)
}

void GetTableByIdRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetTableByIdRequest::~GetTableByIdRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetTableByIdRequest)
  SharedDtor();
}

void GetTableByIdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetTableByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableByIdRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableByIdRequest& GetTableByIdRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableByIdRequest* GetTableByIdRequest::New(::google::protobuf::Arena* arena) const {
  GetTableByIdRequest* n = new GetTableByIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetTableByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableByIdRequest)
  return false;
#undef DO_
}

void GetTableByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableByIdRequest)
}

::google::protobuf::uint8* GetTableByIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableByIdRequest)
  return target;
}

size_t GetTableByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableByIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableByIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableByIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableByIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableByIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableByIdRequest)
    MergeFrom(*source);
  }
}

void GetTableByIdRequest::MergeFrom(const GetTableByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetTableByIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableByIdRequest::CopyFrom(const GetTableByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableByIdRequest::IsInitialized() const {
  return true;
}

void GetTableByIdRequest::Swap(GetTableByIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableByIdRequest::InternalSwap(GetTableByIdRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableByIdRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableByIdRequest

// .mspb.RequestHeader header = 1;
bool GetTableByIdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableByIdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetTableByIdRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableByIdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetTableByIdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableByIdRequest.header)
  return header_;
}
::mspb::RequestHeader* GetTableByIdRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableByIdRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableByIdRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableByIdRequest.header)
}

// uint64 db_id = 2;
void GetTableByIdRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetTableByIdRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableByIdRequest.db_id)
  return db_id_;
}
void GetTableByIdRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetTableByIdRequest.db_id)
}

// uint64 table_id = 3;
void GetTableByIdRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetTableByIdRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetTableByIdRequest.table_id)
  return table_id_;
}
void GetTableByIdRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetTableByIdRequest.table_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableResponse::kHeaderFieldNumber;
const int GetTableResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableResponse::GetTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableResponse)
}
GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::metapb::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableResponse)
}

void GetTableResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_));
  _cached_size_ = 0;
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetTableResponse)
  SharedDtor();
}

void GetTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete table_;
}

void GetTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableResponse& GetTableResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableResponse* GetTableResponse::New(::google::protobuf::Arena* arena) const {
  GetTableResponse* n = new GetTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Table table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableResponse)
  return false;
#undef DO_
}

void GetTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableResponse)
}

::google::protobuf::uint8* GetTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableResponse)
  return target;
}

size_t GetTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableResponse)
    MergeFrom(*source);
  }
}

void GetTableResponse::MergeFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_table()) {
    mutable_table()->::metapb::Table::MergeFrom(from.table());
  }
}

void GetTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  return true;
}

void GetTableResponse::Swap(GetTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableResponse::InternalSwap(GetTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableResponse

// .mspb.ResponseHeader header = 1;
bool GetTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableResponse.header)
}

// .metapb.Table table = 2;
bool GetTableResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void GetTableResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::metapb::Table& GetTableResponse::table() const {
  const ::metapb::Table* p = table_;
  // @@protoc_insertion_point(field_get:mspb.GetTableResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Table*>(
      &::metapb::_Table_default_instance_);
}
::metapb::Table* GetTableResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::metapb::Table;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableResponse.table)
  return table_;
}
::metapb::Table* GetTableResponse::release_table() {
  // @@protoc_insertion_point(field_release:mspb.GetTableResponse.table)
  
  ::metapb::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void GetTableResponse::set_allocated_table(::metapb::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableResponse.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableByIdResponse::kHeaderFieldNumber;
const int GetTableByIdResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableByIdResponse::GetTableByIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetTableByIdResponse)
}
GetTableByIdResponse::GetTableByIdResponse(const GetTableByIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::metapb::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetTableByIdResponse)
}

void GetTableByIdResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_));
  _cached_size_ = 0;
}

GetTableByIdResponse::~GetTableByIdResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetTableByIdResponse)
  SharedDtor();
}

void GetTableByIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete table_;
}

void GetTableByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableByIdResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTableByIdResponse& GetTableByIdResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTableByIdResponse* GetTableByIdResponse::New(::google::protobuf::Arena* arena) const {
  GetTableByIdResponse* n = new GetTableByIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetTableByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTableByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetTableByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Table table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetTableByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetTableByIdResponse)
  return false;
#undef DO_
}

void GetTableByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetTableByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetTableByIdResponse)
}

::google::protobuf::uint8* GetTableByIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetTableByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetTableByIdResponse)
  return target;
}

size_t GetTableByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetTableByIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Table table = 2;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableByIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetTableByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableByIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableByIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetTableByIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetTableByIdResponse)
    MergeFrom(*source);
  }
}

void GetTableByIdResponse::MergeFrom(const GetTableByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetTableByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_table()) {
    mutable_table()->::metapb::Table::MergeFrom(from.table());
  }
}

void GetTableByIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetTableByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableByIdResponse::CopyFrom(const GetTableByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetTableByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableByIdResponse::IsInitialized() const {
  return true;
}

void GetTableByIdResponse::Swap(GetTableByIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableByIdResponse::InternalSwap(GetTableByIdResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(table_, other->table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableByIdResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableByIdResponse

// .mspb.ResponseHeader header = 1;
bool GetTableByIdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetTableByIdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetTableByIdResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetTableByIdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetTableByIdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableByIdResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetTableByIdResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetTableByIdResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetTableByIdResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableByIdResponse.header)
}

// .metapb.Table table = 2;
bool GetTableByIdResponse::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
void GetTableByIdResponse::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) delete table_;
  table_ = NULL;
}
const ::metapb::Table& GetTableByIdResponse::table() const {
  const ::metapb::Table* p = table_;
  // @@protoc_insertion_point(field_get:mspb.GetTableByIdResponse.table)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Table*>(
      &::metapb::_Table_default_instance_);
}
::metapb::Table* GetTableByIdResponse::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::metapb::Table;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetTableByIdResponse.table)
  return table_;
}
::metapb::Table* GetTableByIdResponse::release_table() {
  // @@protoc_insertion_point(field_release:mspb.GetTableByIdResponse.table)
  
  ::metapb::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void GetTableByIdResponse::set_allocated_table(::metapb::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetTableByIdResponse.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsRequest::kHeaderFieldNumber;
const int GetColumnsRequest::kDbIdFieldNumber;
const int GetColumnsRequest::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsRequest::GetColumnsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnsRequest)
}
GetColumnsRequest::GetColumnsRequest(const GetColumnsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnsRequest)
}

void GetColumnsRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetColumnsRequest::~GetColumnsRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnsRequest)
  SharedDtor();
}

void GetColumnsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetColumnsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnsRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsRequest& GetColumnsRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnsRequest* GetColumnsRequest::New(::google::protobuf::Arena* arena) const {
  GetColumnsRequest* n = new GetColumnsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetColumnsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnsRequest)
  return false;
#undef DO_
}

void GetColumnsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnsRequest)
}

::google::protobuf::uint8* GetColumnsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnsRequest)
  return target;
}

size_t GetColumnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnsRequest)
    MergeFrom(*source);
  }
}

void GetColumnsRequest::MergeFrom(const GetColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetColumnsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsRequest::CopyFrom(const GetColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsRequest::IsInitialized() const {
  return true;
}

void GetColumnsRequest::Swap(GetColumnsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsRequest::InternalSwap(GetColumnsRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnsRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnsRequest

// .mspb.RequestHeader header = 1;
bool GetColumnsRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnsRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetColumnsRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetColumnsRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsRequest.header)
  return header_;
}
::mspb::RequestHeader* GetColumnsRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnsRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnsRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnsRequest.header)
}

// uint64 db_id = 2;
void GetColumnsRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.db_id)
  return db_id_;
}
void GetColumnsRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnsRequest.db_id)
}

// uint64 table_id = 3;
void GetColumnsRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnsRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsRequest.table_id)
  return table_id_;
}
void GetColumnsRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnsRequest.table_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnsResponse::kHeaderFieldNumber;
const int GetColumnsResponse::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnsResponse::GetColumnsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnsResponse)
}
GetColumnsResponse::GetColumnsResponse(const GetColumnsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnsResponse)
}

void GetColumnsResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetColumnsResponse::~GetColumnsResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnsResponse)
  SharedDtor();
}

void GetColumnsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetColumnsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnsResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnsResponse& GetColumnsResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnsResponse* GetColumnsResponse::New(::google::protobuf::Arena* arena) const {
  GetColumnsResponse* n = new GetColumnsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetColumnsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Column columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnsResponse)
  return false;
#undef DO_
}

void GetColumnsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnsResponse)
}

::google::protobuf::uint8* GetColumnsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .metapb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnsResponse)
  return target;
}

size_t GetColumnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metapb.Column columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnsResponse)
    MergeFrom(*source);
  }
}

void GetColumnsResponse::MergeFrom(const GetColumnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetColumnsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnsResponse::CopyFrom(const GetColumnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnsResponse::IsInitialized() const {
  return true;
}

void GetColumnsResponse::Swap(GetColumnsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnsResponse::InternalSwap(GetColumnsResponse* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnsResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnsResponse

// .mspb.ResponseHeader header = 1;
bool GetColumnsResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnsResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetColumnsResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnsResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetColumnsResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetColumnsResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnsResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnsResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnsResponse.header)
}

// repeated .metapb.Column columns = 2;
int GetColumnsResponse::columns_size() const {
  return columns_.size();
}
void GetColumnsResponse::clear_columns() {
  columns_.Clear();
}
const ::metapb::Column& GetColumnsResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnsResponse.columns)
  return columns_.Get(index);
}
::metapb::Column* GetColumnsResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnsResponse.columns)
  return columns_.Mutable(index);
}
::metapb::Column* GetColumnsResponse::add_columns() {
  // @@protoc_insertion_point(field_add:mspb.GetColumnsResponse.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Column >*
GetColumnsResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetColumnsResponse.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
GetColumnsResponse::columns() const {
  // @@protoc_insertion_point(field_list:mspb.GetColumnsResponse.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnByNameRequest::kHeaderFieldNumber;
const int GetColumnByNameRequest::kDbIdFieldNumber;
const int GetColumnByNameRequest::kTableIdFieldNumber;
const int GetColumnByNameRequest::kColNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnByNameRequest::GetColumnByNameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnByNameRequest)
}
GetColumnByNameRequest::GetColumnByNameRequest(const GetColumnByNameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.col_name().size() > 0) {
    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnByNameRequest)
}

void GetColumnByNameRequest::SharedCtor() {
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

GetColumnByNameRequest::~GetColumnByNameRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnByNameRequest)
  SharedDtor();
}

void GetColumnByNameRequest::SharedDtor() {
  col_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetColumnByNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnByNameRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnByNameRequest& GetColumnByNameRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnByNameRequest* GetColumnByNameRequest::New(::google::protobuf::Arena* arena) const {
  GetColumnByNameRequest* n = new GetColumnByNameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnByNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool GetColumnByNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnByNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string col_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name().data(), static_cast<int>(this->col_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.GetColumnByNameRequest.col_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnByNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnByNameRequest)
  return false;
#undef DO_
}

void GetColumnByNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // string col_name = 4;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), static_cast<int>(this->col_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetColumnByNameRequest.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->col_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnByNameRequest)
}

::google::protobuf::uint8* GetColumnByNameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // string col_name = 4;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), static_cast<int>(this->col_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.GetColumnByNameRequest.col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->col_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnByNameRequest)
  return target;
}

size_t GetColumnByNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnByNameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string col_name = 4;
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnByNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnByNameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnByNameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnByNameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnByNameRequest)
    MergeFrom(*source);
  }
}

void GetColumnByNameRequest::MergeFrom(const GetColumnByNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.col_name().size() > 0) {

    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void GetColumnByNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnByNameRequest::CopyFrom(const GetColumnByNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnByNameRequest::IsInitialized() const {
  return true;
}

void GetColumnByNameRequest::Swap(GetColumnByNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnByNameRequest::InternalSwap(GetColumnByNameRequest* other) {
  using std::swap;
  col_name_.Swap(&other->col_name_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnByNameRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnByNameRequest

// .mspb.RequestHeader header = 1;
bool GetColumnByNameRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnByNameRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetColumnByNameRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetColumnByNameRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByNameRequest.header)
  return header_;
}
::mspb::RequestHeader* GetColumnByNameRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByNameRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnByNameRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByNameRequest.header)
}

// uint64 db_id = 2;
void GetColumnByNameRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnByNameRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameRequest.db_id)
  return db_id_;
}
void GetColumnByNameRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnByNameRequest.db_id)
}

// uint64 table_id = 3;
void GetColumnByNameRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnByNameRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameRequest.table_id)
  return table_id_;
}
void GetColumnByNameRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnByNameRequest.table_id)
}

// string col_name = 4;
void GetColumnByNameRequest::clear_col_name() {
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetColumnByNameRequest::col_name() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameRequest.col_name)
  return col_name_.GetNoArena();
}
void GetColumnByNameRequest::set_col_name(const ::std::string& value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.GetColumnByNameRequest.col_name)
}
#if LANG_CXX11
void GetColumnByNameRequest::set_col_name(::std::string&& value) {
  
  col_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.GetColumnByNameRequest.col_name)
}
#endif
void GetColumnByNameRequest::set_col_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.GetColumnByNameRequest.col_name)
}
void GetColumnByNameRequest::set_col_name(const char* value, size_t size) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.GetColumnByNameRequest.col_name)
}
::std::string* GetColumnByNameRequest::mutable_col_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByNameRequest.col_name)
  return col_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetColumnByNameRequest::release_col_name() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByNameRequest.col_name)
  
  return col_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetColumnByNameRequest::set_allocated_col_name(::std::string* col_name) {
  if (col_name != NULL) {
    
  } else {
    
  }
  col_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByNameRequest.col_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnByNameResponse::kHeaderFieldNumber;
const int GetColumnByNameResponse::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnByNameResponse::GetColumnByNameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnByNameResponse)
}
GetColumnByNameResponse::GetColumnByNameResponse(const GetColumnByNameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_column()) {
    column_ = new ::metapb::Column(*from.column_);
  } else {
    column_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnByNameResponse)
}

void GetColumnByNameResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&header_)) + sizeof(column_));
  _cached_size_ = 0;
}

GetColumnByNameResponse::~GetColumnByNameResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnByNameResponse)
  SharedDtor();
}

void GetColumnByNameResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete column_;
}

void GetColumnByNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnByNameResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnByNameResponse& GetColumnByNameResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnByNameResponse* GetColumnByNameResponse::New(::google::protobuf::Arena* arena) const {
  GetColumnByNameResponse* n = new GetColumnByNameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnByNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  _internal_metadata_.Clear();
}

bool GetColumnByNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnByNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Column column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnByNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnByNameResponse)
  return false;
#undef DO_
}

void GetColumnByNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->column_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnByNameResponse)
}

::google::protobuf::uint8* GetColumnByNameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->column_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnByNameResponse)
  return target;
}

size_t GetColumnByNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnByNameResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnByNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnByNameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnByNameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnByNameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnByNameResponse)
    MergeFrom(*source);
  }
}

void GetColumnByNameResponse::MergeFrom(const GetColumnByNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_column()) {
    mutable_column()->::metapb::Column::MergeFrom(from.column());
  }
}

void GetColumnByNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnByNameResponse::CopyFrom(const GetColumnByNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnByNameResponse::IsInitialized() const {
  return true;
}

void GetColumnByNameResponse::Swap(GetColumnByNameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnByNameResponse::InternalSwap(GetColumnByNameResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(column_, other->column_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnByNameResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnByNameResponse

// .mspb.ResponseHeader header = 1;
bool GetColumnByNameResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnByNameResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetColumnByNameResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetColumnByNameResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByNameResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetColumnByNameResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByNameResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnByNameResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByNameResponse.header)
}

// .metapb.Column column = 2;
bool GetColumnByNameResponse::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void GetColumnByNameResponse::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::metapb::Column& GetColumnByNameResponse::column() const {
  const ::metapb::Column* p = column_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByNameResponse.column)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Column*>(
      &::metapb::_Column_default_instance_);
}
::metapb::Column* GetColumnByNameResponse::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::metapb::Column;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByNameResponse.column)
  return column_;
}
::metapb::Column* GetColumnByNameResponse::release_column() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByNameResponse.column)
  
  ::metapb::Column* temp = column_;
  column_ = NULL;
  return temp;
}
void GetColumnByNameResponse::set_allocated_column(::metapb::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByNameResponse.column)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnByIdRequest::kHeaderFieldNumber;
const int GetColumnByIdRequest::kDbIdFieldNumber;
const int GetColumnByIdRequest::kTableIdFieldNumber;
const int GetColumnByIdRequest::kColIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnByIdRequest::GetColumnByIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnByIdRequest)
}
GetColumnByIdRequest::GetColumnByIdRequest(const GetColumnByIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(col_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnByIdRequest)
}

void GetColumnByIdRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(col_id_));
  _cached_size_ = 0;
}

GetColumnByIdRequest::~GetColumnByIdRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnByIdRequest)
  SharedDtor();
}

void GetColumnByIdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetColumnByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnByIdRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnByIdRequest& GetColumnByIdRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnByIdRequest* GetColumnByIdRequest::New(::google::protobuf::Arena* arena) const {
  GetColumnByIdRequest* n = new GetColumnByIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(col_id_));
  _internal_metadata_.Clear();
}

bool GetColumnByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 col_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &col_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnByIdRequest)
  return false;
#undef DO_
}

void GetColumnByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->col_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnByIdRequest)
}

::google::protobuf::uint8* GetColumnByIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->col_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnByIdRequest)
  return target;
}

size_t GetColumnByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnByIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint64 col_id = 4;
  if (this->col_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->col_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnByIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnByIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnByIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnByIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnByIdRequest)
    MergeFrom(*source);
  }
}

void GetColumnByIdRequest::MergeFrom(const GetColumnByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.col_id() != 0) {
    set_col_id(from.col_id());
  }
}

void GetColumnByIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnByIdRequest::CopyFrom(const GetColumnByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnByIdRequest::IsInitialized() const {
  return true;
}

void GetColumnByIdRequest::Swap(GetColumnByIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnByIdRequest::InternalSwap(GetColumnByIdRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(col_id_, other->col_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnByIdRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnByIdRequest

// .mspb.RequestHeader header = 1;
bool GetColumnByIdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnByIdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetColumnByIdRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetColumnByIdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByIdRequest.header)
  return header_;
}
::mspb::RequestHeader* GetColumnByIdRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByIdRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnByIdRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByIdRequest.header)
}

// uint64 db_id = 2;
void GetColumnByIdRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnByIdRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdRequest.db_id)
  return db_id_;
}
void GetColumnByIdRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnByIdRequest.db_id)
}

// uint64 table_id = 3;
void GetColumnByIdRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnByIdRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdRequest.table_id)
  return table_id_;
}
void GetColumnByIdRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnByIdRequest.table_id)
}

// uint64 col_id = 4;
void GetColumnByIdRequest::clear_col_id() {
  col_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetColumnByIdRequest::col_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdRequest.col_id)
  return col_id_;
}
void GetColumnByIdRequest::set_col_id(::google::protobuf::uint64 value) {
  
  col_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetColumnByIdRequest.col_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetColumnByIdResponse::kHeaderFieldNumber;
const int GetColumnByIdResponse::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetColumnByIdResponse::GetColumnByIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetColumnByIdResponse)
}
GetColumnByIdResponse::GetColumnByIdResponse(const GetColumnByIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_column()) {
    column_ = new ::metapb::Column(*from.column_);
  } else {
    column_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetColumnByIdResponse)
}

void GetColumnByIdResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&header_)) + sizeof(column_));
  _cached_size_ = 0;
}

GetColumnByIdResponse::~GetColumnByIdResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetColumnByIdResponse)
  SharedDtor();
}

void GetColumnByIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete column_;
}

void GetColumnByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetColumnByIdResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetColumnByIdResponse& GetColumnByIdResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetColumnByIdResponse* GetColumnByIdResponse::New(::google::protobuf::Arena* arena) const {
  GetColumnByIdResponse* n = new GetColumnByIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetColumnByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetColumnByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  _internal_metadata_.Clear();
}

bool GetColumnByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetColumnByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Column column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetColumnByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetColumnByIdResponse)
  return false;
#undef DO_
}

void GetColumnByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetColumnByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->column_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetColumnByIdResponse)
}

::google::protobuf::uint8* GetColumnByIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetColumnByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->column_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetColumnByIdResponse)
  return target;
}

size_t GetColumnByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetColumnByIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Column column = 2;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetColumnByIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetColumnByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetColumnByIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetColumnByIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetColumnByIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetColumnByIdResponse)
    MergeFrom(*source);
  }
}

void GetColumnByIdResponse::MergeFrom(const GetColumnByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetColumnByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_column()) {
    mutable_column()->::metapb::Column::MergeFrom(from.column());
  }
}

void GetColumnByIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetColumnByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetColumnByIdResponse::CopyFrom(const GetColumnByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetColumnByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetColumnByIdResponse::IsInitialized() const {
  return true;
}

void GetColumnByIdResponse::Swap(GetColumnByIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetColumnByIdResponse::InternalSwap(GetColumnByIdResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(column_, other->column_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetColumnByIdResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetColumnByIdResponse

// .mspb.ResponseHeader header = 1;
bool GetColumnByIdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetColumnByIdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetColumnByIdResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetColumnByIdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByIdResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetColumnByIdResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByIdResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetColumnByIdResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByIdResponse.header)
}

// .metapb.Column column = 2;
bool GetColumnByIdResponse::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void GetColumnByIdResponse::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::metapb::Column& GetColumnByIdResponse::column() const {
  const ::metapb::Column* p = column_;
  // @@protoc_insertion_point(field_get:mspb.GetColumnByIdResponse.column)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Column*>(
      &::metapb::_Column_default_instance_);
}
::metapb::Column* GetColumnByIdResponse::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::metapb::Column;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetColumnByIdResponse.column)
  return column_;
}
::metapb::Column* GetColumnByIdResponse::release_column() {
  // @@protoc_insertion_point(field_release:mspb.GetColumnByIdResponse.column)
  
  ::metapb::Column* temp = column_;
  column_ = NULL;
  return temp;
}
void GetColumnByIdResponse::set_allocated_column(::metapb::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetColumnByIdResponse.column)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddColumnRequest::kHeaderFieldNumber;
const int AddColumnRequest::kDbIdFieldNumber;
const int AddColumnRequest::kTableIdFieldNumber;
const int AddColumnRequest::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddColumnRequest::AddColumnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AddColumnRequest)
}
AddColumnRequest::AddColumnRequest(const AddColumnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.AddColumnRequest)
}

void AddColumnRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

AddColumnRequest::~AddColumnRequest() {
  // @@protoc_insertion_point(destructor:mspb.AddColumnRequest)
  SharedDtor();
}

void AddColumnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddColumnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColumnRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddColumnRequest& AddColumnRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddColumnRequest* AddColumnRequest::New(::google::protobuf::Arena* arena) const {
  AddColumnRequest* n = new AddColumnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddColumnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AddColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool AddColumnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AddColumnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Column columns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AddColumnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AddColumnRequest)
  return false;
#undef DO_
}

void AddColumnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AddColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // repeated .metapb.Column columns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->columns(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AddColumnRequest)
}

::google::protobuf::uint8* AddColumnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AddColumnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // repeated .metapb.Column columns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AddColumnRequest)
  return target;
}

size_t AddColumnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AddColumnRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metapb.Column columns = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColumnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AddColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddColumnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddColumnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AddColumnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AddColumnRequest)
    MergeFrom(*source);
  }
}

void AddColumnRequest::MergeFrom(const AddColumnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AddColumnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void AddColumnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AddColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColumnRequest::CopyFrom(const AddColumnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AddColumnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColumnRequest::IsInitialized() const {
  return true;
}

void AddColumnRequest::Swap(AddColumnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddColumnRequest::InternalSwap(AddColumnRequest* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddColumnRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddColumnRequest

// .mspb.RequestHeader header = 1;
bool AddColumnRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddColumnRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& AddColumnRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AddColumnRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* AddColumnRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AddColumnRequest.header)
  return header_;
}
::mspb::RequestHeader* AddColumnRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AddColumnRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddColumnRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AddColumnRequest.header)
}

// uint64 db_id = 2;
void AddColumnRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AddColumnRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.AddColumnRequest.db_id)
  return db_id_;
}
void AddColumnRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.AddColumnRequest.db_id)
}

// uint64 table_id = 3;
void AddColumnRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AddColumnRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.AddColumnRequest.table_id)
  return table_id_;
}
void AddColumnRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.AddColumnRequest.table_id)
}

// repeated .metapb.Column columns = 4;
int AddColumnRequest::columns_size() const {
  return columns_.size();
}
void AddColumnRequest::clear_columns() {
  columns_.Clear();
}
const ::metapb::Column& AddColumnRequest::columns(int index) const {
  // @@protoc_insertion_point(field_get:mspb.AddColumnRequest.columns)
  return columns_.Get(index);
}
::metapb::Column* AddColumnRequest::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.AddColumnRequest.columns)
  return columns_.Mutable(index);
}
::metapb::Column* AddColumnRequest::add_columns() {
  // @@protoc_insertion_point(field_add:mspb.AddColumnRequest.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Column >*
AddColumnRequest::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:mspb.AddColumnRequest.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
AddColumnRequest::columns() const {
  // @@protoc_insertion_point(field_list:mspb.AddColumnRequest.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddColumnResponse::kHeaderFieldNumber;
const int AddColumnResponse::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddColumnResponse::AddColumnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.AddColumnResponse)
}
AddColumnResponse::AddColumnResponse(const AddColumnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.AddColumnResponse)
}

void AddColumnResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AddColumnResponse::~AddColumnResponse() {
  // @@protoc_insertion_point(destructor:mspb.AddColumnResponse)
  SharedDtor();
}

void AddColumnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddColumnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddColumnResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddColumnResponse& AddColumnResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddColumnResponse* AddColumnResponse::New(::google::protobuf::Arena* arena) const {
  AddColumnResponse* n = new AddColumnResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddColumnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.AddColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool AddColumnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.AddColumnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Column columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.AddColumnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.AddColumnResponse)
  return false;
#undef DO_
}

void AddColumnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.AddColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.AddColumnResponse)
}

::google::protobuf::uint8* AddColumnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.AddColumnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .metapb.Column columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.AddColumnResponse)
  return target;
}

size_t AddColumnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.AddColumnResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .metapb.Column columns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(static_cast<int>(i)));
    }
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddColumnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.AddColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddColumnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddColumnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.AddColumnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.AddColumnResponse)
    MergeFrom(*source);
  }
}

void AddColumnResponse::MergeFrom(const AddColumnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.AddColumnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void AddColumnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.AddColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddColumnResponse::CopyFrom(const AddColumnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.AddColumnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddColumnResponse::IsInitialized() const {
  return true;
}

void AddColumnResponse::Swap(AddColumnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddColumnResponse::InternalSwap(AddColumnResponse* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddColumnResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddColumnResponse

// .mspb.ResponseHeader header = 1;
bool AddColumnResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AddColumnResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& AddColumnResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.AddColumnResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* AddColumnResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.AddColumnResponse.header)
  return header_;
}
::mspb::ResponseHeader* AddColumnResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.AddColumnResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AddColumnResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.AddColumnResponse.header)
}

// repeated .metapb.Column columns = 2;
int AddColumnResponse::columns_size() const {
  return columns_.size();
}
void AddColumnResponse::clear_columns() {
  columns_.Clear();
}
const ::metapb::Column& AddColumnResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:mspb.AddColumnResponse.columns)
  return columns_.Get(index);
}
::metapb::Column* AddColumnResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:mspb.AddColumnResponse.columns)
  return columns_.Mutable(index);
}
::metapb::Column* AddColumnResponse::add_columns() {
  // @@protoc_insertion_point(field_add:mspb.AddColumnResponse.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Column >*
AddColumnResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:mspb.AddColumnResponse.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
AddColumnResponse::columns() const {
  // @@protoc_insertion_point(field_list:mspb.AddColumnResponse.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateTableRequest::kHeaderFieldNumber;
const int TruncateTableRequest::kDbIdFieldNumber;
const int TruncateTableRequest::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateTableRequest::TruncateTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.TruncateTableRequest)
}
TruncateTableRequest::TruncateTableRequest(const TruncateTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:mspb.TruncateTableRequest)
}

void TruncateTableRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(table_id_));
  _cached_size_ = 0;
}

TruncateTableRequest::~TruncateTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.TruncateTableRequest)
  SharedDtor();
}

void TruncateTableRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TruncateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateTableRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TruncateTableRequest& TruncateTableRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TruncateTableRequest* TruncateTableRequest::New(::google::protobuf::Arena* arena) const {
  TruncateTableRequest* n = new TruncateTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.TruncateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear();
}

bool TruncateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.TruncateTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.TruncateTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.TruncateTableRequest)
  return false;
#undef DO_
}

void TruncateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.TruncateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.TruncateTableRequest)
}

::google::protobuf::uint8* TruncateTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.TruncateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.TruncateTableRequest)
  return target;
}

size_t TruncateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.TruncateTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.TruncateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TruncateTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.TruncateTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.TruncateTableRequest)
    MergeFrom(*source);
  }
}

void TruncateTableRequest::MergeFrom(const TruncateTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.TruncateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
}

void TruncateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.TruncateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateTableRequest::CopyFrom(const TruncateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.TruncateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableRequest::IsInitialized() const {
  return true;
}

void TruncateTableRequest::Swap(TruncateTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateTableRequest::InternalSwap(TruncateTableRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncateTableRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TruncateTableRequest

// .mspb.RequestHeader header = 1;
bool TruncateTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TruncateTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& TruncateTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.TruncateTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* TruncateTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.TruncateTableRequest.header)
  return header_;
}
::mspb::RequestHeader* TruncateTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.TruncateTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TruncateTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.TruncateTableRequest.header)
}

// uint64 db_id = 2;
void TruncateTableRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TruncateTableRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.TruncateTableRequest.db_id)
  return db_id_;
}
void TruncateTableRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.TruncateTableRequest.db_id)
}

// uint64 table_id = 3;
void TruncateTableRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TruncateTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.TruncateTableRequest.table_id)
  return table_id_;
}
void TruncateTableRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.TruncateTableRequest.table_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncateTableResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncateTableResponse::TruncateTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.TruncateTableResponse)
}
TruncateTableResponse::TruncateTableResponse(const TruncateTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.TruncateTableResponse)
}

void TruncateTableResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

TruncateTableResponse::~TruncateTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.TruncateTableResponse)
  SharedDtor();
}

void TruncateTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TruncateTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateTableResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TruncateTableResponse& TruncateTableResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TruncateTableResponse* TruncateTableResponse::New(::google::protobuf::Arena* arena) const {
  TruncateTableResponse* n = new TruncateTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncateTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.TruncateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool TruncateTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.TruncateTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.TruncateTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.TruncateTableResponse)
  return false;
#undef DO_
}

void TruncateTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.TruncateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.TruncateTableResponse)
}

::google::protobuf::uint8* TruncateTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.TruncateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.TruncateTableResponse)
  return target;
}

size_t TruncateTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.TruncateTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.TruncateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncateTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TruncateTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.TruncateTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.TruncateTableResponse)
    MergeFrom(*source);
  }
}

void TruncateTableResponse::MergeFrom(const TruncateTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.TruncateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void TruncateTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.TruncateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateTableResponse::CopyFrom(const TruncateTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.TruncateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateTableResponse::IsInitialized() const {
  return true;
}

void TruncateTableResponse::Swap(TruncateTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncateTableResponse::InternalSwap(TruncateTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncateTableResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TruncateTableResponse

// .mspb.ResponseHeader header = 1;
bool TruncateTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TruncateTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& TruncateTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.TruncateTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* TruncateTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.TruncateTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* TruncateTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.TruncateTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TruncateTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.TruncateTableResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseRequest::kHeaderFieldNumber;
const int CreateDatabaseRequest::kDbNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseRequest::CreateDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateDatabaseRequest)
}
CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateDatabaseRequest)
}

void CreateDatabaseRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

CreateDatabaseRequest::~CreateDatabaseRequest() {
  // @@protoc_insertion_point(destructor:mspb.CreateDatabaseRequest)
  SharedDtor();
}

void CreateDatabaseRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseRequest& CreateDatabaseRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseRequest* CreateDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseRequest* n = new CreateDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateDatabaseRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateDatabaseRequest)
  return false;
#undef DO_
}

void CreateDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateDatabaseRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateDatabaseRequest)
}

::google::protobuf::uint8* CreateDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateDatabaseRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateDatabaseRequest)
  return target;
}

size_t CreateDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateDatabaseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateDatabaseRequest)
    MergeFrom(*source);
  }
}

void CreateDatabaseRequest::MergeFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void CreateDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseRequest::CopyFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseRequest::IsInitialized() const {
  return true;
}

void CreateDatabaseRequest::Swap(CreateDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseRequest::InternalSwap(CreateDatabaseRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseRequest

// .mspb.RequestHeader header = 1;
bool CreateDatabaseRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateDatabaseRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& CreateDatabaseRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* CreateDatabaseRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseRequest.header)
  return header_;
}
::mspb::RequestHeader* CreateDatabaseRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateDatabaseRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseRequest.header)
}

// string db_name = 2;
void CreateDatabaseRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDatabaseRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseRequest.db_name)
  return db_name_.GetNoArena();
}
void CreateDatabaseRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateDatabaseRequest.db_name)
}
#if LANG_CXX11
void CreateDatabaseRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateDatabaseRequest.db_name)
}
#endif
void CreateDatabaseRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateDatabaseRequest.db_name)
}
void CreateDatabaseRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateDatabaseRequest.db_name)
}
::std::string* CreateDatabaseRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDatabaseRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDatabaseRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseRequest.db_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseResponse::CreateDatabaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateDatabaseResponse)
}
CreateDatabaseResponse::CreateDatabaseResponse(const CreateDatabaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateDatabaseResponse)
}

void CreateDatabaseResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateDatabaseResponse::~CreateDatabaseResponse() {
  // @@protoc_insertion_point(destructor:mspb.CreateDatabaseResponse)
  SharedDtor();
}

void CreateDatabaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CreateDatabaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseResponse& CreateDatabaseResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseResponse* CreateDatabaseResponse::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseResponse* n = new CreateDatabaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateDatabaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateDatabaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateDatabaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateDatabaseResponse)
  return false;
#undef DO_
}

void CreateDatabaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateDatabaseResponse)
}

::google::protobuf::uint8* CreateDatabaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateDatabaseResponse)
  return target;
}

size_t CreateDatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateDatabaseResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateDatabaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateDatabaseResponse)
    MergeFrom(*source);
  }
}

void CreateDatabaseResponse::MergeFrom(const CreateDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void CreateDatabaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseResponse::CopyFrom(const CreateDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseResponse::IsInitialized() const {
  return true;
}

void CreateDatabaseResponse::Swap(CreateDatabaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseResponse::InternalSwap(CreateDatabaseResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseResponse

// .mspb.ResponseHeader header = 1;
bool CreateDatabaseResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateDatabaseResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& CreateDatabaseResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateDatabaseResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* CreateDatabaseResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateDatabaseResponse.header)
  return header_;
}
::mspb::ResponseHeader* CreateDatabaseResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateDatabaseResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateDatabaseResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateDatabaseResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableRequest::kHeaderFieldNumber;
const int CreateTableRequest::kDbNameFieldNumber;
const int CreateTableRequest::kTableNameFieldNumber;
const int CreateTableRequest::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableRequest::CreateTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateTableRequest)
}
CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.properties().size() > 0) {
    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateTableRequest)
}

void CreateTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:mspb.CreateTableRequest)
  SharedDtor();
}

void CreateTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CreateTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTableRequest& CreateTableRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableRequest* CreateTableRequest::New(::google::protobuf::Arena* arena) const {
  CreateTableRequest* n = new CreateTableRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateTableRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_properties()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->properties().data(), static_cast<int>(this->properties().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.CreateTableRequest.properties"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateTableRequest)
  return false;
#undef DO_
}

void CreateTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_name(), output);
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.properties");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->properties(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateTableRequest)
}

::google::protobuf::uint8* CreateTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string db_name = 2;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->properties().data(), static_cast<int>(this->properties().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.CreateTableRequest.properties");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->properties(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateTableRequest)
  return target;
}

size_t CreateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateTableRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 2;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 3;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // string properties = 4;
  if (this->properties().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->properties());
  }

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateTableRequest)
    MergeFrom(*source);
  }
}

void CreateTableRequest::MergeFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.properties().size() > 0) {

    properties_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.properties_);
  }
  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
}

void CreateTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  return true;
}

void CreateTableRequest::Swap(CreateTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableRequest::InternalSwap(CreateTableRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  properties_.Swap(&other->properties_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableRequest

// .mspb.RequestHeader header = 1;
bool CreateTableRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& CreateTableRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* CreateTableRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.header)
  return header_;
}
::mspb::RequestHeader* CreateTableRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.header)
}

// string db_name = 2;
void CreateTableRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::db_name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.db_name)
  return db_name_.GetNoArena();
}
void CreateTableRequest::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.db_name)
}
#if LANG_CXX11
void CreateTableRequest::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.db_name)
}
#endif
void CreateTableRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.db_name)
}
void CreateTableRequest::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.db_name)
}
::std::string* CreateTableRequest::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.db_name)
}

// string table_name = 3;
void CreateTableRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.table_name)
  return table_name_.GetNoArena();
}
void CreateTableRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.table_name)
}
#if LANG_CXX11
void CreateTableRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.table_name)
}
#endif
void CreateTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.table_name)
}
void CreateTableRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.table_name)
}
::std::string* CreateTableRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.table_name)
}

// string properties = 4;
void CreateTableRequest::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateTableRequest::properties() const {
  // @@protoc_insertion_point(field_get:mspb.CreateTableRequest.properties)
  return properties_.GetNoArena();
}
void CreateTableRequest::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.CreateTableRequest.properties)
}
#if LANG_CXX11
void CreateTableRequest::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.CreateTableRequest.properties)
}
#endif
void CreateTableRequest::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.CreateTableRequest.properties)
}
void CreateTableRequest::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.CreateTableRequest.properties)
}
::std::string* CreateTableRequest::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableRequest.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateTableRequest::release_properties() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableRequest.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateTableRequest::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableRequest.properties)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateTableResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateTableResponse::CreateTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.CreateTableResponse)
}
CreateTableResponse::CreateTableResponse(const CreateTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.CreateTableResponse)
}

void CreateTableResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateTableResponse::~CreateTableResponse() {
  // @@protoc_insertion_point(destructor:mspb.CreateTableResponse)
  SharedDtor();
}

void CreateTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CreateTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTableResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateTableResponse& CreateTableResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateTableResponse* CreateTableResponse::New(::google::protobuf::Arena* arena) const {
  CreateTableResponse* n = new CreateTableResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.CreateTableResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.CreateTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.CreateTableResponse)
  return false;
#undef DO_
}

void CreateTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.CreateTableResponse)
}

::google::protobuf::uint8* CreateTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.CreateTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.CreateTableResponse)
  return target;
}

size_t CreateTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.CreateTableResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.CreateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.CreateTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.CreateTableResponse)
    MergeFrom(*source);
  }
}

void CreateTableResponse::MergeFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.CreateTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void CreateTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTableResponse::CopyFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponse::IsInitialized() const {
  return true;
}

void CreateTableResponse::Swap(CreateTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateTableResponse::InternalSwap(CreateTableResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateTableResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateTableResponse

// .mspb.ResponseHeader header = 1;
bool CreateTableResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateTableResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& CreateTableResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.CreateTableResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* CreateTableResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.CreateTableResponse.header)
  return header_;
}
::mspb::ResponseHeader* CreateTableResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.CreateTableResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateTableResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.CreateTableResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutoIncIdRequest::kHeaderFieldNumber;
const int GetAutoIncIdRequest::kDbIdFieldNumber;
const int GetAutoIncIdRequest::kTableIdFieldNumber;
const int GetAutoIncIdRequest::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoIncIdRequest::GetAutoIncIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetAutoIncIdRequest)
}
GetAutoIncIdRequest::GetAutoIncIdRequest(const GetAutoIncIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&db_id_, &from.db_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&db_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:mspb.GetAutoIncIdRequest)
}

void GetAutoIncIdRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(size_));
  _cached_size_ = 0;
}

GetAutoIncIdRequest::~GetAutoIncIdRequest() {
  // @@protoc_insertion_point(destructor:mspb.GetAutoIncIdRequest)
  SharedDtor();
}

void GetAutoIncIdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAutoIncIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoIncIdRequest::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAutoIncIdRequest& GetAutoIncIdRequest::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAutoIncIdRequest* GetAutoIncIdRequest::New(::google::protobuf::Arena* arena) const {
  GetAutoIncIdRequest* n = new GetAutoIncIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAutoIncIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&db_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&db_id_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool GetAutoIncIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetAutoIncIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetAutoIncIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetAutoIncIdRequest)
  return false;
#undef DO_
}

void GetAutoIncIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->db_id(), output);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table_id(), output);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetAutoIncIdRequest)
}

::google::protobuf::uint8* GetAutoIncIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetAutoIncIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->db_id(), target);
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table_id(), target);
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetAutoIncIdRequest)
  return target;
}

size_t GetAutoIncIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetAutoIncIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 db_id = 2;
  if (this->db_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_id());
  }

  // uint64 table_id = 3;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_id());
  }

  // uint32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoIncIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetAutoIncIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoIncIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAutoIncIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetAutoIncIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetAutoIncIdRequest)
    MergeFrom(*source);
  }
}

void GetAutoIncIdRequest::MergeFrom(const GetAutoIncIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetAutoIncIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::mspb::RequestHeader::MergeFrom(from.header());
  }
  if (from.db_id() != 0) {
    set_db_id(from.db_id());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void GetAutoIncIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetAutoIncIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoIncIdRequest::CopyFrom(const GetAutoIncIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetAutoIncIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoIncIdRequest::IsInitialized() const {
  return true;
}

void GetAutoIncIdRequest::Swap(GetAutoIncIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoIncIdRequest::InternalSwap(GetAutoIncIdRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(db_id_, other->db_id_);
  swap(table_id_, other->table_id_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAutoIncIdRequest::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAutoIncIdRequest

// .mspb.RequestHeader header = 1;
bool GetAutoIncIdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAutoIncIdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::RequestHeader& GetAutoIncIdRequest::header() const {
  const ::mspb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RequestHeader*>(
      &::mspb::_RequestHeader_default_instance_);
}
::mspb::RequestHeader* GetAutoIncIdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetAutoIncIdRequest.header)
  return header_;
}
::mspb::RequestHeader* GetAutoIncIdRequest::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetAutoIncIdRequest.header)
  
  ::mspb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAutoIncIdRequest::set_allocated_header(::mspb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetAutoIncIdRequest.header)
}

// uint64 db_id = 2;
void GetAutoIncIdRequest::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAutoIncIdRequest::db_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.db_id)
  return db_id_;
}
void GetAutoIncIdRequest::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.db_id)
}

// uint64 table_id = 3;
void GetAutoIncIdRequest::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetAutoIncIdRequest::table_id() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.table_id)
  return table_id_;
}
void GetAutoIncIdRequest::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.table_id)
}

// uint32 size = 4;
void GetAutoIncIdRequest::clear_size() {
  size_ = 0u;
}
::google::protobuf::uint32 GetAutoIncIdRequest::size() const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdRequest.size)
  return size_;
}
void GetAutoIncIdRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdRequest.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutoIncIdResponse::kHeaderFieldNumber;
const int GetAutoIncIdResponse::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoIncIdResponse::GetAutoIncIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.GetAutoIncIdResponse)
}
GetAutoIncIdResponse::GetAutoIncIdResponse(const GetAutoIncIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::mspb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.GetAutoIncIdResponse)
}

void GetAutoIncIdResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetAutoIncIdResponse::~GetAutoIncIdResponse() {
  // @@protoc_insertion_point(destructor:mspb.GetAutoIncIdResponse)
  SharedDtor();
}

void GetAutoIncIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAutoIncIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoIncIdResponse::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAutoIncIdResponse& GetAutoIncIdResponse::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAutoIncIdResponse* GetAutoIncIdResponse::New(::google::protobuf::Arena* arena) const {
  GetAutoIncIdResponse* n = new GetAutoIncIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAutoIncIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool GetAutoIncIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.GetAutoIncIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.GetAutoIncIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.GetAutoIncIdResponse)
  return false;
#undef DO_
}

void GetAutoIncIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ids_cached_byte_size_));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.GetAutoIncIdResponse)
}

::google::protobuf::uint8* GetAutoIncIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.GetAutoIncIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.GetAutoIncIdResponse)
  return target;
}

size_t GetAutoIncIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.GetAutoIncIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .mspb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoIncIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.GetAutoIncIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoIncIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAutoIncIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.GetAutoIncIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.GetAutoIncIdResponse)
    MergeFrom(*source);
  }
}

void GetAutoIncIdResponse::MergeFrom(const GetAutoIncIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.GetAutoIncIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_header()) {
    mutable_header()->::mspb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetAutoIncIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.GetAutoIncIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoIncIdResponse::CopyFrom(const GetAutoIncIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.GetAutoIncIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoIncIdResponse::IsInitialized() const {
  return true;
}

void GetAutoIncIdResponse::Swap(GetAutoIncIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoIncIdResponse::InternalSwap(GetAutoIncIdResponse* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAutoIncIdResponse::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAutoIncIdResponse

// .mspb.ResponseHeader header = 1;
bool GetAutoIncIdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAutoIncIdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::mspb::ResponseHeader& GetAutoIncIdResponse::header() const {
  const ::mspb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::ResponseHeader*>(
      &::mspb::_ResponseHeader_default_instance_);
}
::mspb::ResponseHeader* GetAutoIncIdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::mspb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.GetAutoIncIdResponse.header)
  return header_;
}
::mspb::ResponseHeader* GetAutoIncIdResponse::release_header() {
  // @@protoc_insertion_point(field_release:mspb.GetAutoIncIdResponse.header)
  
  ::mspb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAutoIncIdResponse::set_allocated_header(::mspb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.GetAutoIncIdResponse.header)
}

// repeated uint64 ids = 2;
int GetAutoIncIdResponse::ids_size() const {
  return ids_.size();
}
void GetAutoIncIdResponse::clear_ids() {
  ids_.Clear();
}
::google::protobuf::uint64 GetAutoIncIdResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:mspb.GetAutoIncIdResponse.ids)
  return ids_.Get(index);
}
void GetAutoIncIdResponse::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mspb.GetAutoIncIdResponse.ids)
}
void GetAutoIncIdResponse::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:mspb.GetAutoIncIdResponse.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GetAutoIncIdResponse::ids() const {
  // @@protoc_insertion_point(field_list:mspb.GetAutoIncIdResponse.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GetAutoIncIdResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:mspb.GetAutoIncIdResponse.ids)
  return &ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:mspb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.RequestHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// uint64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:mspb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.RequestHeader.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::mspb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:mspb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:mspb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .mspb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .mspb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.ResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::mspb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:mspb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:mspb.ResponseHeader.cluster_id)
}

// .mspb.Error error = 2;
bool ResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::mspb::Error& ResponseHeader::error() const {
  const ::mspb::Error* p = error_;
  // @@protoc_insertion_point(field_get:mspb.ResponseHeader.error)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::Error*>(
      &::mspb::_Error_default_instance_);
}
::mspb::Error* ResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::mspb::Error;
  }
  // @@protoc_insertion_point(field_mutable:mspb.ResponseHeader.error)
  return error_;
}
::mspb::Error* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:mspb.ResponseHeader.error)
  
  ::mspb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_error(::mspb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.ResponseHeader.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderHint::kAddressFieldNumber;
const int LeaderHint::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderHint::LeaderHint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.LeaderHint)
}
LeaderHint::LeaderHint(const LeaderHint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:mspb.LeaderHint)
}

void LeaderHint::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

LeaderHint::~LeaderHint() {
  // @@protoc_insertion_point(destructor:mspb.LeaderHint)
  SharedDtor();
}

void LeaderHint::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LeaderHint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderHint::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderHint& LeaderHint::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaderHint* LeaderHint::New(::google::protobuf::Arena* arena) const {
  LeaderHint* n = new LeaderHint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderHint::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.LeaderHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LeaderHint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.LeaderHint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mspb.LeaderHint.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.LeaderHint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.LeaderHint)
  return false;
#undef DO_
}

void LeaderHint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.LeaderHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.LeaderHint.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.LeaderHint)
}

::google::protobuf::uint8* LeaderHint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.LeaderHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mspb.LeaderHint.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.LeaderHint)
  return target;
}

size_t LeaderHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.LeaderHint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderHint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.LeaderHint)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderHint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderHint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.LeaderHint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.LeaderHint)
    MergeFrom(*source);
  }
}

void LeaderHint::MergeFrom(const LeaderHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.LeaderHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void LeaderHint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.LeaderHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderHint::CopyFrom(const LeaderHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.LeaderHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderHint::IsInitialized() const {
  return true;
}

void LeaderHint::Swap(LeaderHint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderHint::InternalSwap(LeaderHint* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderHint::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderHint

// string address = 1;
void LeaderHint::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LeaderHint::address() const {
  // @@protoc_insertion_point(field_get:mspb.LeaderHint.address)
  return address_.GetNoArena();
}
void LeaderHint::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mspb.LeaderHint.address)
}
#if LANG_CXX11
void LeaderHint::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mspb.LeaderHint.address)
}
#endif
void LeaderHint::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mspb.LeaderHint.address)
}
void LeaderHint::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mspb.LeaderHint.address)
}
::std::string* LeaderHint::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:mspb.LeaderHint.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LeaderHint::release_address() {
  // @@protoc_insertion_point(field_release:mspb.LeaderHint.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LeaderHint::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:mspb.LeaderHint.address)
}

// uint64 term = 2;
void LeaderHint::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LeaderHint::term() const {
  // @@protoc_insertion_point(field_get:mspb.LeaderHint.term)
  return term_;
}
void LeaderHint::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:mspb.LeaderHint.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoLeader::NoLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.NoLeader)
}
NoLeader::NoLeader(const NoLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mspb.NoLeader)
}

void NoLeader::SharedCtor() {
  _cached_size_ = 0;
}

NoLeader::~NoLeader() {
  // @@protoc_insertion_point(destructor:mspb.NoLeader)
  SharedDtor();
}

void NoLeader::SharedDtor() {
}

void NoLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoLeader::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoLeader& NoLeader::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoLeader* NoLeader::New(::google::protobuf::Arena* arena) const {
  NoLeader* n = new NoLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.NoLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NoLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.NoLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.NoLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.NoLeader)
  return false;
#undef DO_
}

void NoLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.NoLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.NoLeader)
}

::google::protobuf::uint8* NoLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.NoLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.NoLeader)
  return target;
}

size_t NoLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.NoLeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.NoLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const NoLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.NoLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.NoLeader)
    MergeFrom(*source);
  }
}

void NoLeader::MergeFrom(const NoLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.NoLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.NoLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoLeader::CopyFrom(const NoLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.NoLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoLeader::IsInitialized() const {
  return true;
}

void NoLeader::Swap(NoLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoLeader::InternalSwap(NoLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoLeader::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoLeader

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kNewLeaderFieldNumber;
const int Error::kNoLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mspb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_leader()) {
    new_leader_ = new ::mspb::LeaderHint(*from.new_leader_);
  } else {
    new_leader_ = NULL;
  }
  if (from.has_no_leader()) {
    no_leader_ = new ::mspb::NoLeader(*from.no_leader_);
  } else {
    no_leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mspb.Error)
}

void Error::SharedCtor() {
  ::memset(&new_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_leader_) -
      reinterpret_cast<char*>(&new_leader_)) + sizeof(no_leader_));
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:mspb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != internal_default_instance()) delete new_leader_;
  if (this != internal_default_instance()) delete no_leader_;
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_mspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && new_leader_ != NULL) {
    delete new_leader_;
  }
  new_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && no_leader_ != NULL) {
    delete no_leader_;
  }
  no_leader_ = NULL;
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mspb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mspb.LeaderHint new_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.NoLeader no_leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mspb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mspb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.LeaderHint new_leader = 2;
  if (this->has_new_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_leader_, output);
  }

  // .mspb.NoLeader no_leader = 3;
  if (this->has_no_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->no_leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mspb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mspb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mspb.LeaderHint new_leader = 2;
  if (this->has_new_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_leader_, deterministic, target);
  }

  // .mspb.NoLeader no_leader = 3;
  if (this->has_no_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->no_leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mspb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mspb.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mspb.LeaderHint new_leader = 2;
  if (this->has_new_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_leader_);
  }

  // .mspb.NoLeader no_leader = 3;
  if (this->has_no_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->no_leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mspb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mspb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mspb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_leader()) {
    mutable_new_leader()->::mspb::LeaderHint::MergeFrom(from.new_leader());
  }
  if (from.has_no_leader()) {
    mutable_no_leader()->::mspb::NoLeader::MergeFrom(from.no_leader());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mspb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  swap(new_leader_, other->new_leader_);
  swap(no_leader_, other->no_leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_mspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// .mspb.LeaderHint new_leader = 2;
bool Error::has_new_leader() const {
  return this != internal_default_instance() && new_leader_ != NULL;
}
void Error::clear_new_leader() {
  if (GetArenaNoVirtual() == NULL && new_leader_ != NULL) delete new_leader_;
  new_leader_ = NULL;
}
const ::mspb::LeaderHint& Error::new_leader() const {
  const ::mspb::LeaderHint* p = new_leader_;
  // @@protoc_insertion_point(field_get:mspb.Error.new_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::LeaderHint*>(
      &::mspb::_LeaderHint_default_instance_);
}
::mspb::LeaderHint* Error::mutable_new_leader() {
  
  if (new_leader_ == NULL) {
    new_leader_ = new ::mspb::LeaderHint;
  }
  // @@protoc_insertion_point(field_mutable:mspb.Error.new_leader)
  return new_leader_;
}
::mspb::LeaderHint* Error::release_new_leader() {
  // @@protoc_insertion_point(field_release:mspb.Error.new_leader)
  
  ::mspb::LeaderHint* temp = new_leader_;
  new_leader_ = NULL;
  return temp;
}
void Error::set_allocated_new_leader(::mspb::LeaderHint* new_leader) {
  delete new_leader_;
  new_leader_ = new_leader;
  if (new_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.Error.new_leader)
}

// .mspb.NoLeader no_leader = 3;
bool Error::has_no_leader() const {
  return this != internal_default_instance() && no_leader_ != NULL;
}
void Error::clear_no_leader() {
  if (GetArenaNoVirtual() == NULL && no_leader_ != NULL) delete no_leader_;
  no_leader_ = NULL;
}
const ::mspb::NoLeader& Error::no_leader() const {
  const ::mspb::NoLeader* p = no_leader_;
  // @@protoc_insertion_point(field_get:mspb.Error.no_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::NoLeader*>(
      &::mspb::_NoLeader_default_instance_);
}
::mspb::NoLeader* Error::mutable_no_leader() {
  
  if (no_leader_ == NULL) {
    no_leader_ = new ::mspb::NoLeader;
  }
  // @@protoc_insertion_point(field_mutable:mspb.Error.no_leader)
  return no_leader_;
}
::mspb::NoLeader* Error::release_no_leader() {
  // @@protoc_insertion_point(field_release:mspb.Error.no_leader)
  
  ::mspb::NoLeader* temp = no_leader_;
  no_leader_ = NULL;
  return temp;
}
void Error::set_allocated_no_leader(::mspb::NoLeader* no_leader) {
  delete no_leader_;
  no_leader_ = no_leader;
  if (no_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mspb.Error.no_leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mspb

// @@protoc_insertion_point(global_scope)
