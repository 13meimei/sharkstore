// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eventpb.proto

#ifndef PROTOBUF_eventpb_2eproto__INCLUDED
#define PROTOBUF_eventpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)
namespace eventpb {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventEventStatistics;
class EventEventStatisticsDefaultTypeInternal;
extern EventEventStatisticsDefaultTypeInternal _EventEventStatistics_default_instance_;
class EventNodeBuildAck;
class EventNodeBuildAckDefaultTypeInternal;
extern EventNodeBuildAckDefaultTypeInternal _EventNodeBuildAck_default_instance_;
class EventRaftErr;
class EventRaftErrDefaultTypeInternal;
extern EventRaftErrDefaultTypeInternal _EventRaftErr_default_instance_;
class EventRangeDeleteAck;
class EventRangeDeleteAckDefaultTypeInternal;
extern EventRangeDeleteAckDefaultTypeInternal _EventRangeDeleteAck_default_instance_;
class EventRangeSplitAck;
class EventRangeSplitAckDefaultTypeInternal;
extern EventRangeSplitAckDefaultTypeInternal _EventRangeSplitAck_default_instance_;
class EventRangeSplitKey;
class EventRangeSplitKeyDefaultTypeInternal;
extern EventRangeSplitKeyDefaultTypeInternal _EventRangeSplitKey_default_instance_;
class EventStoreErr;
class EventStoreErrDefaultTypeInternal;
extern EventStoreErrDefaultTypeInternal _EventStoreErr_default_instance_;
}  // namespace eventpb

namespace eventpb {

namespace protobuf_eventpb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_eventpb_2eproto

enum EventType {
  RangeSplitAck = 0,
  RaftErr = 1,
  NodeBuildAck = 2,
  RangeDeleteAck = 3,
  EventStatistics = 4,
  RangeSplitKey = 5,
  StoreErr = 6,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = RangeSplitAck;
const EventType EventType_MAX = StoreErr;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum StatisticsType {
  RaftSplit = 0,
  ApplySnapshot = 1,
  LeaderLose = 2,
  PeerAdd = 3,
  PeerRemove = 4,
  LeaderReign = 5,
  StatisticsType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatisticsType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatisticsType_IsValid(int value);
const StatisticsType StatisticsType_MIN = RaftSplit;
const StatisticsType StatisticsType_MAX = LeaderReign;
const int StatisticsType_ARRAYSIZE = StatisticsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatisticsType_descriptor();
inline const ::std::string& StatisticsType_Name(StatisticsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatisticsType_descriptor(), value);
}
inline bool StatisticsType_Parse(
    const ::std::string& name, StatisticsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatisticsType>(
    StatisticsType_descriptor(), name, value);
}
// ===================================================================

class EventRangeSplitAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventRangeSplitAck) */ {
 public:
  EventRangeSplitAck();
  virtual ~EventRangeSplitAck();

  EventRangeSplitAck(const EventRangeSplitAck& from);

  inline EventRangeSplitAck& operator=(const EventRangeSplitAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRangeSplitAck(EventRangeSplitAck&& from) noexcept
    : EventRangeSplitAck() {
    *this = ::std::move(from);
  }

  inline EventRangeSplitAck& operator=(EventRangeSplitAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRangeSplitAck& default_instance();

  static inline const EventRangeSplitAck* internal_default_instance() {
    return reinterpret_cast<const EventRangeSplitAck*>(
               &_EventRangeSplitAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventRangeSplitAck* other);
  friend void swap(EventRangeSplitAck& a, EventRangeSplitAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRangeSplitAck* New() const PROTOBUF_FINAL { return New(NULL); }

  EventRangeSplitAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventRangeSplitAck& from);
  void MergeFrom(const EventRangeSplitAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventRangeSplitAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Range range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::metapb::Range& range() const;
  ::metapb::Range* mutable_range();
  ::metapb::Range* release_range();
  void set_allocated_range(::metapb::Range* range);

  // .metapb.Range left_range = 3;
  bool has_left_range() const;
  void clear_left_range();
  static const int kLeftRangeFieldNumber = 3;
  const ::metapb::Range& left_range() const;
  ::metapb::Range* mutable_left_range();
  ::metapb::Range* release_left_range();
  void set_allocated_left_range(::metapb::Range* left_range);

  // .metapb.Range right_range = 4;
  bool has_right_range() const;
  void clear_right_range();
  static const int kRightRangeFieldNumber = 4;
  const ::metapb::Range& right_range() const;
  ::metapb::Range* mutable_right_range();
  ::metapb::Range* release_right_range();
  void set_allocated_right_range(::metapb::Range* right_range);

  // uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eventpb.EventRangeSplitAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Range* range_;
  ::metapb::Range* left_range_;
  ::metapb::Range* right_range_;
  ::google::protobuf::uint64 task_id_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventRangeSplitKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventRangeSplitKey) */ {
 public:
  EventRangeSplitKey();
  virtual ~EventRangeSplitKey();

  EventRangeSplitKey(const EventRangeSplitKey& from);

  inline EventRangeSplitKey& operator=(const EventRangeSplitKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRangeSplitKey(EventRangeSplitKey&& from) noexcept
    : EventRangeSplitKey() {
    *this = ::std::move(from);
  }

  inline EventRangeSplitKey& operator=(EventRangeSplitKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRangeSplitKey& default_instance();

  static inline const EventRangeSplitKey* internal_default_instance() {
    return reinterpret_cast<const EventRangeSplitKey*>(
               &_EventRangeSplitKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EventRangeSplitKey* other);
  friend void swap(EventRangeSplitKey& a, EventRangeSplitKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRangeSplitKey* New() const PROTOBUF_FINAL { return New(NULL); }

  EventRangeSplitKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventRangeSplitKey& from);
  void MergeFrom(const EventRangeSplitKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventRangeSplitKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes split_key = 3;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 3;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // .metapb.Range range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::metapb::Range& range() const;
  ::metapb::Range* mutable_range();
  ::metapb::Range* release_range();
  void set_allocated_range(::metapb::Range* range);

  // uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eventpb.EventRangeSplitKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::metapb::Range* range_;
  ::google::protobuf::uint64 task_id_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventRangeDeleteAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventRangeDeleteAck) */ {
 public:
  EventRangeDeleteAck();
  virtual ~EventRangeDeleteAck();

  EventRangeDeleteAck(const EventRangeDeleteAck& from);

  inline EventRangeDeleteAck& operator=(const EventRangeDeleteAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRangeDeleteAck(EventRangeDeleteAck&& from) noexcept
    : EventRangeDeleteAck() {
    *this = ::std::move(from);
  }

  inline EventRangeDeleteAck& operator=(EventRangeDeleteAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRangeDeleteAck& default_instance();

  static inline const EventRangeDeleteAck* internal_default_instance() {
    return reinterpret_cast<const EventRangeDeleteAck*>(
               &_EventRangeDeleteAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EventRangeDeleteAck* other);
  friend void swap(EventRangeDeleteAck& a, EventRangeDeleteAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRangeDeleteAck* New() const PROTOBUF_FINAL { return New(NULL); }

  EventRangeDeleteAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventRangeDeleteAck& from);
  void MergeFrom(const EventRangeDeleteAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventRangeDeleteAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Range range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::metapb::Range& range() const;
  ::metapb::Range* mutable_range();
  ::metapb::Range* release_range();
  void set_allocated_range(::metapb::Range* range);

  // uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eventpb.EventRangeDeleteAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Range* range_;
  ::google::protobuf::uint64 task_id_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventRaftErr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventRaftErr) */ {
 public:
  EventRaftErr();
  virtual ~EventRaftErr();

  EventRaftErr(const EventRaftErr& from);

  inline EventRaftErr& operator=(const EventRaftErr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRaftErr(EventRaftErr&& from) noexcept
    : EventRaftErr() {
    *this = ::std::move(from);
  }

  inline EventRaftErr& operator=(EventRaftErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRaftErr& default_instance();

  static inline const EventRaftErr* internal_default_instance() {
    return reinterpret_cast<const EventRaftErr*>(
               &_EventRaftErr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EventRaftErr* other);
  friend void swap(EventRaftErr& a, EventRaftErr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRaftErr* New() const PROTOBUF_FINAL { return New(NULL); }

  EventRaftErr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventRaftErr& from);
  void MergeFrom(const EventRaftErr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventRaftErr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 range_id = 2;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 2;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eventpb.EventRaftErr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventStoreErr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventStoreErr) */ {
 public:
  EventStoreErr();
  virtual ~EventStoreErr();

  EventStoreErr(const EventStoreErr& from);

  inline EventStoreErr& operator=(const EventStoreErr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventStoreErr(EventStoreErr&& from) noexcept
    : EventStoreErr() {
    *this = ::std::move(from);
  }

  inline EventStoreErr& operator=(EventStoreErr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventStoreErr& default_instance();

  static inline const EventStoreErr* internal_default_instance() {
    return reinterpret_cast<const EventStoreErr*>(
               &_EventStoreErr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EventStoreErr* other);
  friend void swap(EventStoreErr& a, EventStoreErr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventStoreErr* New() const PROTOBUF_FINAL { return New(NULL); }

  EventStoreErr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventStoreErr& from);
  void MergeFrom(const EventStoreErr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventStoreErr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 range_id = 2;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 2;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:eventpb.EventStoreErr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventNodeBuildAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventNodeBuildAck) */ {
 public:
  EventNodeBuildAck();
  virtual ~EventNodeBuildAck();

  EventNodeBuildAck(const EventNodeBuildAck& from);

  inline EventNodeBuildAck& operator=(const EventNodeBuildAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventNodeBuildAck(EventNodeBuildAck&& from) noexcept
    : EventNodeBuildAck() {
    *this = ::std::move(from);
  }

  inline EventNodeBuildAck& operator=(EventNodeBuildAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventNodeBuildAck& default_instance();

  static inline const EventNodeBuildAck* internal_default_instance() {
    return reinterpret_cast<const EventNodeBuildAck*>(
               &_EventNodeBuildAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EventNodeBuildAck* other);
  friend void swap(EventNodeBuildAck& a, EventNodeBuildAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventNodeBuildAck* New() const PROTOBUF_FINAL { return New(NULL); }

  EventNodeBuildAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventNodeBuildAck& from);
  void MergeFrom(const EventNodeBuildAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventNodeBuildAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string err = 3;
  void clear_err();
  static const int kErrFieldNumber = 3;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:eventpb.EventNodeBuildAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventEventStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.EventEventStatistics) */ {
 public:
  EventEventStatistics();
  virtual ~EventEventStatistics();

  EventEventStatistics(const EventEventStatistics& from);

  inline EventEventStatistics& operator=(const EventEventStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventEventStatistics(EventEventStatistics&& from) noexcept
    : EventEventStatistics() {
    *this = ::std::move(from);
  }

  inline EventEventStatistics& operator=(EventEventStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventEventStatistics& default_instance();

  static inline const EventEventStatistics* internal_default_instance() {
    return reinterpret_cast<const EventEventStatistics*>(
               &_EventEventStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EventEventStatistics* other);
  friend void swap(EventEventStatistics& a, EventEventStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventEventStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  EventEventStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventEventStatistics& from);
  void MergeFrom(const EventEventStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventEventStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string db_name = 1;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // string table_name = 2;
  void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // uint64 range_id = 3;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 3;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 node_id = 4;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 4;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // int64 startTime = 5;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // int64 endTime = 6;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // .eventpb.StatisticsType statisticsType = 7;
  void clear_statisticstype();
  static const int kStatisticsTypeFieldNumber = 7;
  ::eventpb::StatisticsType statisticstype() const;
  void set_statisticstype(::eventpb::StatisticsType value);

  // @@protoc_insertion_point(class_scope:eventpb.EventEventStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  int statisticstype_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eventpb.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eventpb.EventRangeSplitAck event_range_split_ack = 2;
  bool has_event_range_split_ack() const;
  void clear_event_range_split_ack();
  static const int kEventRangeSplitAckFieldNumber = 2;
  const ::eventpb::EventRangeSplitAck& event_range_split_ack() const;
  ::eventpb::EventRangeSplitAck* mutable_event_range_split_ack();
  ::eventpb::EventRangeSplitAck* release_event_range_split_ack();
  void set_allocated_event_range_split_ack(::eventpb::EventRangeSplitAck* event_range_split_ack);

  // .eventpb.EventRaftErr event_raft_err = 3;
  bool has_event_raft_err() const;
  void clear_event_raft_err();
  static const int kEventRaftErrFieldNumber = 3;
  const ::eventpb::EventRaftErr& event_raft_err() const;
  ::eventpb::EventRaftErr* mutable_event_raft_err();
  ::eventpb::EventRaftErr* release_event_raft_err();
  void set_allocated_event_raft_err(::eventpb::EventRaftErr* event_raft_err);

  // .eventpb.EventNodeBuildAck event_node_build_ack = 4;
  bool has_event_node_build_ack() const;
  void clear_event_node_build_ack();
  static const int kEventNodeBuildAckFieldNumber = 4;
  const ::eventpb::EventNodeBuildAck& event_node_build_ack() const;
  ::eventpb::EventNodeBuildAck* mutable_event_node_build_ack();
  ::eventpb::EventNodeBuildAck* release_event_node_build_ack();
  void set_allocated_event_node_build_ack(::eventpb::EventNodeBuildAck* event_node_build_ack);

  // .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
  bool has_event_range_delete_ack() const;
  void clear_event_range_delete_ack();
  static const int kEventRangeDeleteAckFieldNumber = 5;
  const ::eventpb::EventRangeDeleteAck& event_range_delete_ack() const;
  ::eventpb::EventRangeDeleteAck* mutable_event_range_delete_ack();
  ::eventpb::EventRangeDeleteAck* release_event_range_delete_ack();
  void set_allocated_event_range_delete_ack(::eventpb::EventRangeDeleteAck* event_range_delete_ack);

  // .eventpb.EventEventStatistics event_event_statistics = 6;
  bool has_event_event_statistics() const;
  void clear_event_event_statistics();
  static const int kEventEventStatisticsFieldNumber = 6;
  const ::eventpb::EventEventStatistics& event_event_statistics() const;
  ::eventpb::EventEventStatistics* mutable_event_event_statistics();
  ::eventpb::EventEventStatistics* release_event_event_statistics();
  void set_allocated_event_event_statistics(::eventpb::EventEventStatistics* event_event_statistics);

  // .eventpb.EventRangeSplitKey event_range_split_key = 7;
  bool has_event_range_split_key() const;
  void clear_event_range_split_key();
  static const int kEventRangeSplitKeyFieldNumber = 7;
  const ::eventpb::EventRangeSplitKey& event_range_split_key() const;
  ::eventpb::EventRangeSplitKey* mutable_event_range_split_key();
  ::eventpb::EventRangeSplitKey* release_event_range_split_key();
  void set_allocated_event_range_split_key(::eventpb::EventRangeSplitKey* event_range_split_key);

  // .eventpb.EventStoreErr event_store_err = 8;
  bool has_event_store_err() const;
  void clear_event_store_err();
  static const int kEventStoreErrFieldNumber = 8;
  const ::eventpb::EventStoreErr& event_store_err() const;
  ::eventpb::EventStoreErr* mutable_event_store_err();
  ::eventpb::EventStoreErr* release_event_store_err();
  void set_allocated_event_store_err(::eventpb::EventStoreErr* event_store_err);

  // .eventpb.EventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::eventpb::EventType type() const;
  void set_type(::eventpb::EventType value);

  // @@protoc_insertion_point(class_scope:eventpb.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eventpb::EventRangeSplitAck* event_range_split_ack_;
  ::eventpb::EventRaftErr* event_raft_err_;
  ::eventpb::EventNodeBuildAck* event_node_build_ack_;
  ::eventpb::EventRangeDeleteAck* event_range_delete_ack_;
  ::eventpb::EventEventStatistics* event_event_statistics_;
  ::eventpb::EventRangeSplitKey* event_range_split_key_;
  ::eventpb::EventStoreErr* event_store_err_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_eventpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventRangeSplitAck

// uint64 task_id = 1;
inline void EventRangeSplitAck::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventRangeSplitAck::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.task_id)
  return task_id_;
}
inline void EventRangeSplitAck::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitAck.task_id)
}

// .metapb.Range range = 2;
inline bool EventRangeSplitAck::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void EventRangeSplitAck::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::metapb::Range& EventRangeSplitAck::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* EventRangeSplitAck::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.range)
  return range_;
}
inline ::metapb::Range* EventRangeSplitAck::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void EventRangeSplitAck::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.range)
}

// .metapb.Range left_range = 3;
inline bool EventRangeSplitAck::has_left_range() const {
  return this != internal_default_instance() && left_range_ != NULL;
}
inline void EventRangeSplitAck::clear_left_range() {
  if (GetArenaNoVirtual() == NULL && left_range_ != NULL) delete left_range_;
  left_range_ = NULL;
}
inline const ::metapb::Range& EventRangeSplitAck::left_range() const {
  const ::metapb::Range* p = left_range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.left_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* EventRangeSplitAck::mutable_left_range() {
  
  if (left_range_ == NULL) {
    left_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.left_range)
  return left_range_;
}
inline ::metapb::Range* EventRangeSplitAck::release_left_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.left_range)
  
  ::metapb::Range* temp = left_range_;
  left_range_ = NULL;
  return temp;
}
inline void EventRangeSplitAck::set_allocated_left_range(::metapb::Range* left_range) {
  delete left_range_;
  left_range_ = left_range;
  if (left_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.left_range)
}

// .metapb.Range right_range = 4;
inline bool EventRangeSplitAck::has_right_range() const {
  return this != internal_default_instance() && right_range_ != NULL;
}
inline void EventRangeSplitAck::clear_right_range() {
  if (GetArenaNoVirtual() == NULL && right_range_ != NULL) delete right_range_;
  right_range_ = NULL;
}
inline const ::metapb::Range& EventRangeSplitAck::right_range() const {
  const ::metapb::Range* p = right_range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.right_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* EventRangeSplitAck::mutable_right_range() {
  
  if (right_range_ == NULL) {
    right_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.right_range)
  return right_range_;
}
inline ::metapb::Range* EventRangeSplitAck::release_right_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.right_range)
  
  ::metapb::Range* temp = right_range_;
  right_range_ = NULL;
  return temp;
}
inline void EventRangeSplitAck::set_allocated_right_range(::metapb::Range* right_range) {
  delete right_range_;
  right_range_ = right_range;
  if (right_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.right_range)
}

// -------------------------------------------------------------------

// EventRangeSplitKey

// uint64 task_id = 1;
inline void EventRangeSplitKey::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventRangeSplitKey::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.task_id)
  return task_id_;
}
inline void EventRangeSplitKey::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitKey.task_id)
}

// .metapb.Range range = 2;
inline bool EventRangeSplitKey::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void EventRangeSplitKey::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::metapb::Range& EventRangeSplitKey::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* EventRangeSplitKey::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitKey.range)
  return range_;
}
inline ::metapb::Range* EventRangeSplitKey::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitKey.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void EventRangeSplitKey::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitKey.range)
}

// bytes split_key = 3;
inline void EventRangeSplitKey::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventRangeSplitKey::split_key() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.split_key)
  return split_key_.GetNoArena();
}
inline void EventRangeSplitKey::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitKey.split_key)
}
#if LANG_CXX11
inline void EventRangeSplitKey::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventRangeSplitKey.split_key)
}
#endif
inline void EventRangeSplitKey::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventRangeSplitKey.split_key)
}
inline void EventRangeSplitKey::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventRangeSplitKey.split_key)
}
inline ::std::string* EventRangeSplitKey::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitKey.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventRangeSplitKey::release_split_key() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitKey.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventRangeSplitKey::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitKey.split_key)
}

// -------------------------------------------------------------------

// EventRangeDeleteAck

// uint64 task_id = 1;
inline void EventRangeDeleteAck::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventRangeDeleteAck::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeDeleteAck.task_id)
  return task_id_;
}
inline void EventRangeDeleteAck::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeDeleteAck.task_id)
}

// .metapb.Range range = 2;
inline bool EventRangeDeleteAck::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void EventRangeDeleteAck::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::metapb::Range& EventRangeDeleteAck::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeDeleteAck.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* EventRangeDeleteAck::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeDeleteAck.range)
  return range_;
}
inline ::metapb::Range* EventRangeDeleteAck::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeDeleteAck.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void EventRangeDeleteAck::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeDeleteAck.range)
}

// -------------------------------------------------------------------

// EventRaftErr

// uint64 node_id = 1;
inline void EventRaftErr::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventRaftErr::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.node_id)
  return node_id_;
}
inline void EventRaftErr::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.node_id)
}

// uint64 range_id = 2;
inline void EventRaftErr::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventRaftErr::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.range_id)
  return range_id_;
}
inline void EventRaftErr::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.range_id)
}

// string error = 3;
inline void EventRaftErr::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventRaftErr::error() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.error)
  return error_.GetNoArena();
}
inline void EventRaftErr::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.error)
}
#if LANG_CXX11
inline void EventRaftErr::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventRaftErr.error)
}
#endif
inline void EventRaftErr::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventRaftErr.error)
}
inline void EventRaftErr::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventRaftErr.error)
}
inline ::std::string* EventRaftErr::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventRaftErr.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventRaftErr::release_error() {
  // @@protoc_insertion_point(field_release:eventpb.EventRaftErr.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventRaftErr::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRaftErr.error)
}

// -------------------------------------------------------------------

// EventStoreErr

// uint64 node_id = 1;
inline void EventStoreErr::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventStoreErr::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.node_id)
  return node_id_;
}
inline void EventStoreErr::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.node_id)
}

// uint64 range_id = 2;
inline void EventStoreErr::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventStoreErr::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.range_id)
  return range_id_;
}
inline void EventStoreErr::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.range_id)
}

// string error = 3;
inline void EventStoreErr::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventStoreErr::error() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.error)
  return error_.GetNoArena();
}
inline void EventStoreErr::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.error)
}
#if LANG_CXX11
inline void EventStoreErr::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventStoreErr.error)
}
#endif
inline void EventStoreErr::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventStoreErr.error)
}
inline void EventStoreErr::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventStoreErr.error)
}
inline ::std::string* EventStoreErr::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventStoreErr.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventStoreErr::release_error() {
  // @@protoc_insertion_point(field_release:eventpb.EventStoreErr.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventStoreErr::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventStoreErr.error)
}

// -------------------------------------------------------------------

// EventNodeBuildAck

// string ip = 1;
inline void EventNodeBuildAck::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventNodeBuildAck::ip() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.ip)
  return ip_.GetNoArena();
}
inline void EventNodeBuildAck::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.ip)
}
#if LANG_CXX11
inline void EventNodeBuildAck::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.ip)
}
#endif
inline void EventNodeBuildAck::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.ip)
}
inline void EventNodeBuildAck::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.ip)
}
inline ::std::string* EventNodeBuildAck::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventNodeBuildAck::release_ip() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventNodeBuildAck::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.ip)
}

// string key = 2;
inline void EventNodeBuildAck::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventNodeBuildAck::key() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.key)
  return key_.GetNoArena();
}
inline void EventNodeBuildAck::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.key)
}
#if LANG_CXX11
inline void EventNodeBuildAck::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.key)
}
#endif
inline void EventNodeBuildAck::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.key)
}
inline void EventNodeBuildAck::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.key)
}
inline ::std::string* EventNodeBuildAck::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventNodeBuildAck::release_key() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventNodeBuildAck::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.key)
}

// string err = 3;
inline void EventNodeBuildAck::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventNodeBuildAck::err() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.err)
  return err_.GetNoArena();
}
inline void EventNodeBuildAck::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.err)
}
#if LANG_CXX11
inline void EventNodeBuildAck::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.err)
}
#endif
inline void EventNodeBuildAck::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.err)
}
inline void EventNodeBuildAck::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.err)
}
inline ::std::string* EventNodeBuildAck::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventNodeBuildAck::release_err() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventNodeBuildAck::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.err)
}

// -------------------------------------------------------------------

// EventEventStatistics

// string db_name = 1;
inline void EventEventStatistics::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventEventStatistics::db_name() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.db_name)
  return db_name_.GetNoArena();
}
inline void EventEventStatistics::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.db_name)
}
#if LANG_CXX11
inline void EventEventStatistics::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventEventStatistics.db_name)
}
#endif
inline void EventEventStatistics::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventEventStatistics.db_name)
}
inline void EventEventStatistics::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventEventStatistics.db_name)
}
inline ::std::string* EventEventStatistics::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventEventStatistics.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventEventStatistics::release_db_name() {
  // @@protoc_insertion_point(field_release:eventpb.EventEventStatistics.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventEventStatistics::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventEventStatistics.db_name)
}

// string table_name = 2;
inline void EventEventStatistics::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventEventStatistics::table_name() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.table_name)
  return table_name_.GetNoArena();
}
inline void EventEventStatistics::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.table_name)
}
#if LANG_CXX11
inline void EventEventStatistics::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventEventStatistics.table_name)
}
#endif
inline void EventEventStatistics::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventEventStatistics.table_name)
}
inline void EventEventStatistics::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventEventStatistics.table_name)
}
inline ::std::string* EventEventStatistics::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventEventStatistics.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventEventStatistics::release_table_name() {
  // @@protoc_insertion_point(field_release:eventpb.EventEventStatistics.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventEventStatistics::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventEventStatistics.table_name)
}

// uint64 range_id = 3;
inline void EventEventStatistics::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventEventStatistics::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.range_id)
  return range_id_;
}
inline void EventEventStatistics::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.range_id)
}

// uint64 node_id = 4;
inline void EventEventStatistics::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventEventStatistics::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.node_id)
  return node_id_;
}
inline void EventEventStatistics::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.node_id)
}

// int64 startTime = 5;
inline void EventEventStatistics::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EventEventStatistics::starttime() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.startTime)
  return starttime_;
}
inline void EventEventStatistics::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.startTime)
}

// int64 endTime = 6;
inline void EventEventStatistics::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EventEventStatistics::endtime() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.endTime)
  return endtime_;
}
inline void EventEventStatistics::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.endTime)
}

// .eventpb.StatisticsType statisticsType = 7;
inline void EventEventStatistics::clear_statisticstype() {
  statisticstype_ = 0;
}
inline ::eventpb::StatisticsType EventEventStatistics::statisticstype() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.statisticsType)
  return static_cast< ::eventpb::StatisticsType >(statisticstype_);
}
inline void EventEventStatistics::set_statisticstype(::eventpb::StatisticsType value) {
  
  statisticstype_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.statisticsType)
}

// -------------------------------------------------------------------

// Event

// .eventpb.EventType type = 1;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::eventpb::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:eventpb.Event.type)
  return static_cast< ::eventpb::EventType >(type_);
}
inline void Event::set_type(::eventpb::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eventpb.Event.type)
}

// .eventpb.EventRangeSplitAck event_range_split_ack = 2;
inline bool Event::has_event_range_split_ack() const {
  return this != internal_default_instance() && event_range_split_ack_ != NULL;
}
inline void Event::clear_event_range_split_ack() {
  if (GetArenaNoVirtual() == NULL && event_range_split_ack_ != NULL) delete event_range_split_ack_;
  event_range_split_ack_ = NULL;
}
inline const ::eventpb::EventRangeSplitAck& Event::event_range_split_ack() const {
  const ::eventpb::EventRangeSplitAck* p = event_range_split_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_split_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeSplitAck*>(
      &::eventpb::_EventRangeSplitAck_default_instance_);
}
inline ::eventpb::EventRangeSplitAck* Event::mutable_event_range_split_ack() {
  
  if (event_range_split_ack_ == NULL) {
    event_range_split_ack_ = new ::eventpb::EventRangeSplitAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_split_ack)
  return event_range_split_ack_;
}
inline ::eventpb::EventRangeSplitAck* Event::release_event_range_split_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_split_ack)
  
  ::eventpb::EventRangeSplitAck* temp = event_range_split_ack_;
  event_range_split_ack_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_range_split_ack(::eventpb::EventRangeSplitAck* event_range_split_ack) {
  delete event_range_split_ack_;
  event_range_split_ack_ = event_range_split_ack;
  if (event_range_split_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_split_ack)
}

// .eventpb.EventRaftErr event_raft_err = 3;
inline bool Event::has_event_raft_err() const {
  return this != internal_default_instance() && event_raft_err_ != NULL;
}
inline void Event::clear_event_raft_err() {
  if (GetArenaNoVirtual() == NULL && event_raft_err_ != NULL) delete event_raft_err_;
  event_raft_err_ = NULL;
}
inline const ::eventpb::EventRaftErr& Event::event_raft_err() const {
  const ::eventpb::EventRaftErr* p = event_raft_err_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_raft_err)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRaftErr*>(
      &::eventpb::_EventRaftErr_default_instance_);
}
inline ::eventpb::EventRaftErr* Event::mutable_event_raft_err() {
  
  if (event_raft_err_ == NULL) {
    event_raft_err_ = new ::eventpb::EventRaftErr;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_raft_err)
  return event_raft_err_;
}
inline ::eventpb::EventRaftErr* Event::release_event_raft_err() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_raft_err)
  
  ::eventpb::EventRaftErr* temp = event_raft_err_;
  event_raft_err_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_raft_err(::eventpb::EventRaftErr* event_raft_err) {
  delete event_raft_err_;
  event_raft_err_ = event_raft_err;
  if (event_raft_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_raft_err)
}

// .eventpb.EventNodeBuildAck event_node_build_ack = 4;
inline bool Event::has_event_node_build_ack() const {
  return this != internal_default_instance() && event_node_build_ack_ != NULL;
}
inline void Event::clear_event_node_build_ack() {
  if (GetArenaNoVirtual() == NULL && event_node_build_ack_ != NULL) delete event_node_build_ack_;
  event_node_build_ack_ = NULL;
}
inline const ::eventpb::EventNodeBuildAck& Event::event_node_build_ack() const {
  const ::eventpb::EventNodeBuildAck* p = event_node_build_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_node_build_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventNodeBuildAck*>(
      &::eventpb::_EventNodeBuildAck_default_instance_);
}
inline ::eventpb::EventNodeBuildAck* Event::mutable_event_node_build_ack() {
  
  if (event_node_build_ack_ == NULL) {
    event_node_build_ack_ = new ::eventpb::EventNodeBuildAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_node_build_ack)
  return event_node_build_ack_;
}
inline ::eventpb::EventNodeBuildAck* Event::release_event_node_build_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_node_build_ack)
  
  ::eventpb::EventNodeBuildAck* temp = event_node_build_ack_;
  event_node_build_ack_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_node_build_ack(::eventpb::EventNodeBuildAck* event_node_build_ack) {
  delete event_node_build_ack_;
  event_node_build_ack_ = event_node_build_ack;
  if (event_node_build_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_node_build_ack)
}

// .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
inline bool Event::has_event_range_delete_ack() const {
  return this != internal_default_instance() && event_range_delete_ack_ != NULL;
}
inline void Event::clear_event_range_delete_ack() {
  if (GetArenaNoVirtual() == NULL && event_range_delete_ack_ != NULL) delete event_range_delete_ack_;
  event_range_delete_ack_ = NULL;
}
inline const ::eventpb::EventRangeDeleteAck& Event::event_range_delete_ack() const {
  const ::eventpb::EventRangeDeleteAck* p = event_range_delete_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_delete_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeDeleteAck*>(
      &::eventpb::_EventRangeDeleteAck_default_instance_);
}
inline ::eventpb::EventRangeDeleteAck* Event::mutable_event_range_delete_ack() {
  
  if (event_range_delete_ack_ == NULL) {
    event_range_delete_ack_ = new ::eventpb::EventRangeDeleteAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_delete_ack)
  return event_range_delete_ack_;
}
inline ::eventpb::EventRangeDeleteAck* Event::release_event_range_delete_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_delete_ack)
  
  ::eventpb::EventRangeDeleteAck* temp = event_range_delete_ack_;
  event_range_delete_ack_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_range_delete_ack(::eventpb::EventRangeDeleteAck* event_range_delete_ack) {
  delete event_range_delete_ack_;
  event_range_delete_ack_ = event_range_delete_ack;
  if (event_range_delete_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_delete_ack)
}

// .eventpb.EventEventStatistics event_event_statistics = 6;
inline bool Event::has_event_event_statistics() const {
  return this != internal_default_instance() && event_event_statistics_ != NULL;
}
inline void Event::clear_event_event_statistics() {
  if (GetArenaNoVirtual() == NULL && event_event_statistics_ != NULL) delete event_event_statistics_;
  event_event_statistics_ = NULL;
}
inline const ::eventpb::EventEventStatistics& Event::event_event_statistics() const {
  const ::eventpb::EventEventStatistics* p = event_event_statistics_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_event_statistics)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventEventStatistics*>(
      &::eventpb::_EventEventStatistics_default_instance_);
}
inline ::eventpb::EventEventStatistics* Event::mutable_event_event_statistics() {
  
  if (event_event_statistics_ == NULL) {
    event_event_statistics_ = new ::eventpb::EventEventStatistics;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_event_statistics)
  return event_event_statistics_;
}
inline ::eventpb::EventEventStatistics* Event::release_event_event_statistics() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_event_statistics)
  
  ::eventpb::EventEventStatistics* temp = event_event_statistics_;
  event_event_statistics_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_event_statistics(::eventpb::EventEventStatistics* event_event_statistics) {
  delete event_event_statistics_;
  event_event_statistics_ = event_event_statistics;
  if (event_event_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_event_statistics)
}

// .eventpb.EventRangeSplitKey event_range_split_key = 7;
inline bool Event::has_event_range_split_key() const {
  return this != internal_default_instance() && event_range_split_key_ != NULL;
}
inline void Event::clear_event_range_split_key() {
  if (GetArenaNoVirtual() == NULL && event_range_split_key_ != NULL) delete event_range_split_key_;
  event_range_split_key_ = NULL;
}
inline const ::eventpb::EventRangeSplitKey& Event::event_range_split_key() const {
  const ::eventpb::EventRangeSplitKey* p = event_range_split_key_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_split_key)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeSplitKey*>(
      &::eventpb::_EventRangeSplitKey_default_instance_);
}
inline ::eventpb::EventRangeSplitKey* Event::mutable_event_range_split_key() {
  
  if (event_range_split_key_ == NULL) {
    event_range_split_key_ = new ::eventpb::EventRangeSplitKey;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_split_key)
  return event_range_split_key_;
}
inline ::eventpb::EventRangeSplitKey* Event::release_event_range_split_key() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_split_key)
  
  ::eventpb::EventRangeSplitKey* temp = event_range_split_key_;
  event_range_split_key_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_range_split_key(::eventpb::EventRangeSplitKey* event_range_split_key) {
  delete event_range_split_key_;
  event_range_split_key_ = event_range_split_key;
  if (event_range_split_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_split_key)
}

// .eventpb.EventStoreErr event_store_err = 8;
inline bool Event::has_event_store_err() const {
  return this != internal_default_instance() && event_store_err_ != NULL;
}
inline void Event::clear_event_store_err() {
  if (GetArenaNoVirtual() == NULL && event_store_err_ != NULL) delete event_store_err_;
  event_store_err_ = NULL;
}
inline const ::eventpb::EventStoreErr& Event::event_store_err() const {
  const ::eventpb::EventStoreErr* p = event_store_err_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_store_err)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventStoreErr*>(
      &::eventpb::_EventStoreErr_default_instance_);
}
inline ::eventpb::EventStoreErr* Event::mutable_event_store_err() {
  
  if (event_store_err_ == NULL) {
    event_store_err_ = new ::eventpb::EventStoreErr;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_store_err)
  return event_store_err_;
}
inline ::eventpb::EventStoreErr* Event::release_event_store_err() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_store_err)
  
  ::eventpb::EventStoreErr* temp = event_store_err_;
  event_store_err_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_store_err(::eventpb::EventStoreErr* event_store_err) {
  delete event_store_err_;
  event_store_err_ = event_store_err;
  if (event_store_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_store_err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace eventpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eventpb::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eventpb::EventType>() {
  return ::eventpb::EventType_descriptor();
}
template <> struct is_proto_enum< ::eventpb::StatisticsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eventpb::StatisticsType>() {
  return ::eventpb::StatisticsType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eventpb_2eproto__INCLUDED
