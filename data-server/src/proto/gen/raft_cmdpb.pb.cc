// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_cmdpb {
class SplitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SplitRequest>
     _instance;
} _SplitRequest_default_instance_;
class SplitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SplitResponse>
     _instance;
} _SplitResponse_default_instance_;
class MergeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MergeRequest>
     _instance;
} _MergeRequest_default_instance_;
class MergeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MergeResponse>
     _instance;
} _MergeResponse_default_instance_;
class LeaderChangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeaderChangeRequest>
     _instance;
} _LeaderChangeRequest_default_instance_;
class LeaderChangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeaderChangeResponse>
     _instance;
} _LeaderChangeResponse_default_instance_;
class CmdIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CmdID>
     _instance;
} _CmdID_default_instance_;
class CommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Command>
     _instance;
} _Command_default_instance_;
class PeerTaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PeerTask>
     _instance;
} _PeerTask_default_instance_;
class SnapshotKVPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnapshotKVPair>
     _instance;
} _SnapshotKVPair_default_instance_;
class SnapshotContextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SnapshotContext>
     _instance;
} _SnapshotContext_default_instance_;

namespace protobuf_raft_5fcmdpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderChangeRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderChangeRequest, epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdID, seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, verify_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_raw_get_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_raw_put_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_raw_delete_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_raw_execute_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, select_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, insert_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, delete_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, batch_insert_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_watch_put_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, kv_watch_del_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, admin_split_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, admin_merge_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, admin_leader_change_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, lock_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, lock_update_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, unlock_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, unlock_force_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, update_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_prepare_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_decide_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, txn_clearup_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, verify_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerTask, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotKVPair, cf_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotContext, meta_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SplitRequest)},
  { 9, -1, sizeof(SplitResponse)},
  { 14, -1, sizeof(MergeRequest)},
  { 19, -1, sizeof(MergeResponse)},
  { 24, -1, sizeof(LeaderChangeRequest)},
  { 31, -1, sizeof(LeaderChangeResponse)},
  { 36, -1, sizeof(CmdID)},
  { 43, -1, sizeof(Command)},
  { 72, -1, sizeof(PeerTask)},
  { 79, -1, sizeof(SnapshotKVPair)},
  { 87, -1, sizeof(SnapshotContext)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MergeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaderChangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaderChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CmdID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotKVPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotContext_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raft_cmdpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::InitDefaults();
  ::watchpb::protobuf_watchpb_2eproto::InitDefaults();
  ::txnpb::protobuf_txn_2eproto::InitDefaults();
  _SplitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SplitRequest_default_instance_);_SplitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SplitResponse_default_instance_);_MergeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MergeRequest_default_instance_);_MergeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MergeResponse_default_instance_);_LeaderChangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeaderChangeRequest_default_instance_);_LeaderChangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeaderChangeResponse_default_instance_);_CmdID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CmdID_default_instance_);_Command_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Command_default_instance_);_PeerTask_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PeerTask_default_instance_);_SnapshotKVPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnapshotKVPair_default_instance_);_SnapshotContext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SnapshotContext_default_instance_);_SplitRequest_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _SplitRequest_default_instance_._instance.get_mutable()->new_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _LeaderChangeRequest_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->cmd_id_ = const_cast< ::raft_cmdpb::CmdID*>(
      ::raft_cmdpb::CmdID::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->verify_epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_raw_get_req_ = const_cast< ::kvrpcpb::KvRawGetRequest*>(
      ::kvrpcpb::KvRawGetRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_raw_put_req_ = const_cast< ::kvrpcpb::KvRawPutRequest*>(
      ::kvrpcpb::KvRawPutRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_raw_delete_req_ = const_cast< ::kvrpcpb::KvRawDeleteRequest*>(
      ::kvrpcpb::KvRawDeleteRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_raw_execute_req_ = const_cast< ::kvrpcpb::KvRawExecuteRequest*>(
      ::kvrpcpb::KvRawExecuteRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->select_req_ = const_cast< ::kvrpcpb::SelectRequest*>(
      ::kvrpcpb::SelectRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->insert_req_ = const_cast< ::kvrpcpb::InsertRequest*>(
      ::kvrpcpb::InsertRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->delete_req_ = const_cast< ::kvrpcpb::DeleteRequest*>(
      ::kvrpcpb::DeleteRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->batch_insert_req_ = const_cast< ::kvrpcpb::BatchInsertRequest*>(
      ::kvrpcpb::BatchInsertRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_watch_put_req_ = const_cast< ::watchpb::KvWatchPutRequest*>(
      ::watchpb::KvWatchPutRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->kv_watch_del_req_ = const_cast< ::watchpb::KvWatchDeleteRequest*>(
      ::watchpb::KvWatchDeleteRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->admin_split_req_ = const_cast< ::raft_cmdpb::SplitRequest*>(
      ::raft_cmdpb::SplitRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->admin_merge_req_ = const_cast< ::raft_cmdpb::MergeRequest*>(
      ::raft_cmdpb::MergeRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->admin_leader_change_req_ = const_cast< ::raft_cmdpb::LeaderChangeRequest*>(
      ::raft_cmdpb::LeaderChangeRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->lock_req_ = const_cast< ::kvrpcpb::LockRequest*>(
      ::kvrpcpb::LockRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->lock_update_req_ = const_cast< ::kvrpcpb::LockUpdateRequest*>(
      ::kvrpcpb::LockUpdateRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->unlock_req_ = const_cast< ::kvrpcpb::UnlockRequest*>(
      ::kvrpcpb::UnlockRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->unlock_force_req_ = const_cast< ::kvrpcpb::UnlockForceRequest*>(
      ::kvrpcpb::UnlockForceRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->update_req_ = const_cast< ::kvrpcpb::UpdateRequest*>(
      ::kvrpcpb::UpdateRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_prepare_req_ = const_cast< ::txnpb::PrepareRequest*>(
      ::txnpb::PrepareRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_decide_req_ = const_cast< ::txnpb::DecideRequest*>(
      ::txnpb::DecideRequest::internal_default_instance());
  _Command_default_instance_._instance.get_mutable()->txn_clearup_req_ = const_cast< ::txnpb::ClearupRequest*>(
      ::txnpb::ClearupRequest::internal_default_instance());
  _PeerTask_default_instance_._instance.get_mutable()->verify_epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _PeerTask_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _SnapshotContext_default_instance_._instance.get_mutable()->meta_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
      "roto\032\rkvrpcpb.proto\032\rwatchpb.proto\032\ttxn."
      "proto\"v\n\014SplitRequest\022\016\n\006leader\030\001 \001(\004\022\021\n"
      "\tsplit_key\030\002 \001(\014\022!\n\005epoch\030\003 \001(\0132\022.metapb"
      ".RangeEpoch\022 \n\tnew_range\030\004 \001(\0132\r.metapb."
      "Range\"\017\n\rSplitResponse\"\016\n\014MergeRequest\"\017"
      "\n\rMergeResponse\"J\n\023LeaderChangeRequest\022\020"
      "\n\010range_id\030\001 \001(\004\022!\n\005epoch\030\002 \001(\0132\022.metapb"
      ".RangeEpoch\"\026\n\024LeaderChangeResponse\"%\n\005C"
      "mdID\022\017\n\007node_id\030\001 \001(\004\022\013\n\003seq\030\002 \001(\004\"\237\t\n\007C"
      "ommand\022!\n\006cmd_id\030\001 \001(\0132\021.raft_cmdpb.CmdI"
      "D\022%\n\010cmd_type\030\002 \001(\0162\023.raft_cmdpb.CmdType"
      "\022(\n\014verify_epoch\030\003 \001(\0132\022.metapb.RangeEpo"
      "ch\0220\n\016kv_raw_get_req\030\004 \001(\0132\030.kvrpcpb.KvR"
      "awGetRequest\0220\n\016kv_raw_put_req\030\005 \001(\0132\030.k"
      "vrpcpb.KvRawPutRequest\0226\n\021kv_raw_delete_"
      "req\030\006 \001(\0132\033.kvrpcpb.KvRawDeleteRequest\0228"
      "\n\022kv_raw_execute_req\030\007 \001(\0132\034.kvrpcpb.KvR"
      "awExecuteRequest\022*\n\nselect_req\030\010 \001(\0132\026.k"
      "vrpcpb.SelectRequest\022*\n\ninsert_req\030\t \001(\013"
      "2\026.kvrpcpb.InsertRequest\022*\n\ndelete_req\030\n"
      " \001(\0132\026.kvrpcpb.DeleteRequest\0225\n\020batch_in"
      "sert_req\030\013 \001(\0132\033.kvrpcpb.BatchInsertRequ"
      "est\0224\n\020kv_watch_put_req\030\024 \001(\0132\032.watchpb."
      "KvWatchPutRequest\0227\n\020kv_watch_del_req\030\025 "
      "\001(\0132\035.watchpb.KvWatchDeleteRequest\0221\n\017ad"
      "min_split_req\030\036 \001(\0132\030.raft_cmdpb.SplitRe"
      "quest\0221\n\017admin_merge_req\030\037 \001(\0132\030.raft_cm"
      "dpb.MergeRequest\022@\n\027admin_leader_change_"
      "req\030  \001(\0132\037.raft_cmdpb.LeaderChangeReque"
      "st\022&\n\010lock_req\030( \001(\0132\024.kvrpcpb.LockReque"
      "st\0223\n\017lock_update_req\030) \001(\0132\032.kvrpcpb.Lo"
      "ckUpdateRequest\022*\n\nunlock_req\030* \001(\0132\026.kv"
      "rpcpb.UnlockRequest\0225\n\020unlock_force_req\030"
      "+ \001(\0132\033.kvrpcpb.UnlockForceRequest\022*\n\nup"
      "date_req\0302 \001(\0132\026.kvrpcpb.UpdateRequest\022."
      "\n\017txn_prepare_req\030< \001(\0132\025.txnpb.PrepareR"
      "equest\022,\n\016txn_decide_req\030= \001(\0132\024.txnpb.D"
      "ecideRequest\022.\n\017txn_clearup_req\030> \001(\0132\025."
      "txnpb.ClearupRequest\"P\n\010PeerTask\022(\n\014veri"
      "fy_epoch\030\001 \001(\0132\022.metapb.RangeEpoch\022\032\n\004pe"
      "er\030\002 \001(\0132\014.metapb.Peer\"Q\n\016SnapshotKVPair"
      "\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022#\n\007cf_type\030"
      "\003 \001(\0162\022.raft_cmdpb.CFType\".\n\017SnapshotCon"
      "text\022\033\n\004meta\030\001 \001(\0132\r.metapb.Range*\310\003\n\007Cm"
      "dType\022\013\n\007Invalid\020\000\022\n\n\006RawGet\020\001\022\n\n\006RawPut"
      "\020\002\022\r\n\tRawDelete\020\003\022\016\n\nRawExecute\020\004\022\n\n\006Sel"
      "ect\020\007\022\n\n\006Insert\020\010\022\n\n\006Delete\020\t\022\n\n\006Update\020"
      "\n\022\013\n\007Replace\020\013\022\017\n\013BatchInsert\020\014\022\t\n\005KvSet"
      "\020\r\022\t\n\005KvGet\020\016\022\016\n\nKvBatchSet\020\017\022\016\n\nKvBatch"
      "Get\020\020\022\n\n\006KvScan\020\021\022\014\n\010KvDelete\020\022\022\016\n\nKvBat"
      "chDel\020\023\022\016\n\nKvRangeDel\020\024\022\016\n\nKvWatchPut\020\025\022"
      "\016\n\nKvWatchDel\020\026\022\016\n\nAdminSplit\020\036\022\016\n\nAdmin"
      "Merge\020\037\022\025\n\021AdminLeaderChange\020 \022\010\n\004Lock\020("
      "\022\016\n\nLockUpdate\020)\022\n\n\006Unlock\020*\022\017\n\013UnlockFo"
      "rce\020+\022\016\n\nTxnPrepare\0202\022\r\n\tTxnDecide\0203\022\016\n\n"
      "TxnClearup\0204*$\n\006CFType\022\016\n\nCF_DEFAULT\020\000\022\n"
      "\n\006CF_TXN\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_cmdpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::AddDescriptors();
  ::watchpb::protobuf_watchpb_2eproto::AddDescriptors();
  ::txnpb::protobuf_txn_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_raft_5fcmdpb_2eproto

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_enum_descriptors[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CFType_descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_enum_descriptors[1];
}
bool CFType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kLeaderFieldNumber;
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kEpochFieldNumber;
const int SplitRequest::kNewRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}
SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_epoch()) {
    epoch_ = new ::metapb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  if (from.has_new_range()) {
    new_range_ = new ::metapb::Range(*from.new_range_);
  } else {
    new_range_ = NULL;
  }
  leader_ = from.leader_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(leader_));
  _cached_size_ = 0;
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete new_range_;
}

void SplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRequest::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitRequest& SplitRequest::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SplitRequest* SplitRequest::New(::google::protobuf::Arena* arena) const {
  SplitRequest* n = new SplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) {
    delete new_range_;
  }
  new_range_ = NULL;
  leader_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range new_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->leader(), output);
  }

  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->split_key(), output);
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->epoch_, output);
  }

  // .metapb.Range new_range = 4;
  if (this->has_new_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->new_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->leader(), target);
  }

  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->split_key(), target);
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->epoch_, deterministic, target);
  }

  // .metapb.Range new_range = 4;
  if (this->has_new_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->new_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

size_t SplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 2;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .metapb.RangeEpoch epoch = 3;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // .metapb.Range new_range = 4;
  if (this->has_new_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_range_);
  }

  // uint64 leader = 1;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitRequest)
    MergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_epoch()) {
    mutable_epoch()->::metapb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.has_new_range()) {
    mutable_new_range()->::metapb::Range::MergeFrom(from.new_range());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRequest::IsInitialized() const {
  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  swap(epoch_, other->epoch_);
  swap(new_range_, other->new_range_);
  swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRequest

// uint64 leader = 1;
void SplitRequest::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SplitRequest::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.leader)
  return leader_;
}
void SplitRequest::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.leader)
}

// bytes split_key = 2;
void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena();
}
void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
#if LANG_CXX11
void SplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SplitRequest.split_key)
}
#endif
void SplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// .metapb.RangeEpoch epoch = 3;
bool SplitRequest::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void SplitRequest::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::metapb::RangeEpoch& SplitRequest::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* SplitRequest::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.epoch)
  return epoch_;
}
::metapb::RangeEpoch* SplitRequest::release_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void SplitRequest::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.epoch)
}

// .metapb.Range new_range = 4;
bool SplitRequest::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
void SplitRequest::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
const ::metapb::Range& SplitRequest::new_range() const {
  const ::metapb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* SplitRequest::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.new_range)
  return new_range_;
}
::metapb::Range* SplitRequest::release_new_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.new_range)
  
  ::metapb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
void SplitRequest::set_allocated_new_range(::metapb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.new_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}
SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  _cached_size_ = 0;
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
}

void SplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitResponse::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitResponse& SplitResponse::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SplitResponse* SplitResponse::New(::google::protobuf::Arena* arena) const {
  SplitResponse* n = new SplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

size_t SplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitResponse)
    MergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitResponse::IsInitialized() const {
  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeRequest::MergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.MergeRequest)
}
MergeRequest::MergeRequest(const MergeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.MergeRequest)
}

void MergeRequest::SharedCtor() {
  _cached_size_ = 0;
}

MergeRequest::~MergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.MergeRequest)
  SharedDtor();
}

void MergeRequest::SharedDtor() {
}

void MergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeRequest::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MergeRequest& MergeRequest::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

MergeRequest* MergeRequest::New(::google::protobuf::Arena* arena) const {
  MergeRequest* n = new MergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.MergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool MergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.MergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.MergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.MergeRequest)
  return false;
#undef DO_
}

void MergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.MergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.MergeRequest)
}

::google::protobuf::uint8* MergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.MergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.MergeRequest)
  return target;
}

size_t MergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.MergeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.MergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.MergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.MergeRequest)
    MergeFrom(*source);
  }
}

void MergeRequest::MergeFrom(const MergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.MergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.MergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRequest::CopyFrom(const MergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.MergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRequest::IsInitialized() const {
  return true;
}

void MergeRequest::Swap(MergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeRequest::InternalSwap(MergeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeRequest::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeResponse::MergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.MergeResponse)
}
MergeResponse::MergeResponse(const MergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.MergeResponse)
}

void MergeResponse::SharedCtor() {
  _cached_size_ = 0;
}

MergeResponse::~MergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.MergeResponse)
  SharedDtor();
}

void MergeResponse::SharedDtor() {
}

void MergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeResponse::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MergeResponse& MergeResponse::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

MergeResponse* MergeResponse::New(::google::protobuf::Arena* arena) const {
  MergeResponse* n = new MergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.MergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool MergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.MergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.MergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.MergeResponse)
  return false;
#undef DO_
}

void MergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.MergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.MergeResponse)
}

::google::protobuf::uint8* MergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.MergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.MergeResponse)
  return target;
}

size_t MergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.MergeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.MergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.MergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.MergeResponse)
    MergeFrom(*source);
  }
}

void MergeResponse::MergeFrom(const MergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.MergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.MergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeResponse::CopyFrom(const MergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.MergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeResponse::IsInitialized() const {
  return true;
}

void MergeResponse::Swap(MergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeResponse::InternalSwap(MergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeResponse::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaderChangeRequest::kRangeIdFieldNumber;
const int LeaderChangeRequest::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderChangeRequest::LeaderChangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.LeaderChangeRequest)
}
LeaderChangeRequest::LeaderChangeRequest(const LeaderChangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_epoch()) {
    epoch_ = new ::metapb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.LeaderChangeRequest)
}

void LeaderChangeRequest::SharedCtor() {
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

LeaderChangeRequest::~LeaderChangeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.LeaderChangeRequest)
  SharedDtor();
}

void LeaderChangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete epoch_;
}

void LeaderChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderChangeRequest::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderChangeRequest& LeaderChangeRequest::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaderChangeRequest* LeaderChangeRequest::New(::google::protobuf::Arena* arena) const {
  LeaderChangeRequest* n = new LeaderChangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.LeaderChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LeaderChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.LeaderChangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.LeaderChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.LeaderChangeRequest)
  return false;
#undef DO_
}

void LeaderChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.LeaderChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->epoch_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.LeaderChangeRequest)
}

::google::protobuf::uint8* LeaderChangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.LeaderChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->epoch_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.LeaderChangeRequest)
  return target;
}

size_t LeaderChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.LeaderChangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.LeaderChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderChangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderChangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.LeaderChangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.LeaderChangeRequest)
    MergeFrom(*source);
  }
}

void LeaderChangeRequest::MergeFrom(const LeaderChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.LeaderChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_epoch()) {
    mutable_epoch()->::metapb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void LeaderChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.LeaderChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderChangeRequest::CopyFrom(const LeaderChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.LeaderChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderChangeRequest::IsInitialized() const {
  return true;
}

void LeaderChangeRequest::Swap(LeaderChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderChangeRequest::InternalSwap(LeaderChangeRequest* other) {
  using std::swap;
  swap(epoch_, other->epoch_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderChangeRequest::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderChangeRequest

// uint64 range_id = 1;
void LeaderChangeRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LeaderChangeRequest::range_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.LeaderChangeRequest.range_id)
  return range_id_;
}
void LeaderChangeRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.LeaderChangeRequest.range_id)
}

// .metapb.RangeEpoch epoch = 2;
bool LeaderChangeRequest::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void LeaderChangeRequest::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::metapb::RangeEpoch& LeaderChangeRequest::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.LeaderChangeRequest.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* LeaderChangeRequest::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.LeaderChangeRequest.epoch)
  return epoch_;
}
::metapb::RangeEpoch* LeaderChangeRequest::release_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.LeaderChangeRequest.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void LeaderChangeRequest::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.LeaderChangeRequest.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaderChangeResponse::LeaderChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.LeaderChangeResponse)
}
LeaderChangeResponse::LeaderChangeResponse(const LeaderChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.LeaderChangeResponse)
}

void LeaderChangeResponse::SharedCtor() {
  _cached_size_ = 0;
}

LeaderChangeResponse::~LeaderChangeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.LeaderChangeResponse)
  SharedDtor();
}

void LeaderChangeResponse::SharedDtor() {
}

void LeaderChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderChangeResponse::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaderChangeResponse& LeaderChangeResponse::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaderChangeResponse* LeaderChangeResponse::New(::google::protobuf::Arena* arena) const {
  LeaderChangeResponse* n = new LeaderChangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaderChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.LeaderChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LeaderChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.LeaderChangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.LeaderChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.LeaderChangeResponse)
  return false;
#undef DO_
}

void LeaderChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.LeaderChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.LeaderChangeResponse)
}

::google::protobuf::uint8* LeaderChangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.LeaderChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.LeaderChangeResponse)
  return target;
}

size_t LeaderChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.LeaderChangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.LeaderChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderChangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaderChangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.LeaderChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.LeaderChangeResponse)
    MergeFrom(*source);
  }
}

void LeaderChangeResponse::MergeFrom(const LeaderChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.LeaderChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LeaderChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.LeaderChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderChangeResponse::CopyFrom(const LeaderChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.LeaderChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderChangeResponse::IsInitialized() const {
  return true;
}

void LeaderChangeResponse::Swap(LeaderChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaderChangeResponse::InternalSwap(LeaderChangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaderChangeResponse::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaderChangeResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdID::kNodeIdFieldNumber;
const int CmdID::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdID::CmdID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CmdID)
}
CmdID::CmdID(const CmdID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CmdID)
}

void CmdID::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  _cached_size_ = 0;
}

CmdID::~CmdID() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CmdID)
  SharedDtor();
}

void CmdID::SharedDtor() {
}

void CmdID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdID::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdID& CmdID::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CmdID* CmdID::New(::google::protobuf::Arena* arena) const {
  CmdID* n = new CmdID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdID::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(seq_));
  _internal_metadata_.Clear();
}

bool CmdID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CmdID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CmdID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CmdID)
  return false;
#undef DO_
}

void CmdID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CmdID)
}

::google::protobuf::uint8* CmdID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CmdID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CmdID)
  return target;
}

size_t CmdID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CmdID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CmdID)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CmdID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CmdID)
    MergeFrom(*source);
  }
}

void CmdID::MergeFrom(const CmdID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CmdID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void CmdID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CmdID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdID::CopyFrom(const CmdID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CmdID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdID::IsInitialized() const {
  return true;
}

void CmdID::Swap(CmdID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdID::InternalSwap(CmdID* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(seq_, other->seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdID::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdID

// uint64 node_id = 1;
void CmdID::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CmdID::node_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CmdID.node_id)
  return node_id_;
}
void CmdID::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CmdID.node_id)
}

// uint64 seq = 2;
void CmdID::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CmdID::seq() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CmdID.seq)
  return seq_;
}
void CmdID::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CmdID.seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCmdIdFieldNumber;
const int Command::kCmdTypeFieldNumber;
const int Command::kVerifyEpochFieldNumber;
const int Command::kKvRawGetReqFieldNumber;
const int Command::kKvRawPutReqFieldNumber;
const int Command::kKvRawDeleteReqFieldNumber;
const int Command::kKvRawExecuteReqFieldNumber;
const int Command::kSelectReqFieldNumber;
const int Command::kInsertReqFieldNumber;
const int Command::kDeleteReqFieldNumber;
const int Command::kBatchInsertReqFieldNumber;
const int Command::kKvWatchPutReqFieldNumber;
const int Command::kKvWatchDelReqFieldNumber;
const int Command::kAdminSplitReqFieldNumber;
const int Command::kAdminMergeReqFieldNumber;
const int Command::kAdminLeaderChangeReqFieldNumber;
const int Command::kLockReqFieldNumber;
const int Command::kLockUpdateReqFieldNumber;
const int Command::kUnlockReqFieldNumber;
const int Command::kUnlockForceReqFieldNumber;
const int Command::kUpdateReqFieldNumber;
const int Command::kTxnPrepareReqFieldNumber;
const int Command::kTxnDecideReqFieldNumber;
const int Command::kTxnClearupReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd_id()) {
    cmd_id_ = new ::raft_cmdpb::CmdID(*from.cmd_id_);
  } else {
    cmd_id_ = NULL;
  }
  if (from.has_verify_epoch()) {
    verify_epoch_ = new ::metapb::RangeEpoch(*from.verify_epoch_);
  } else {
    verify_epoch_ = NULL;
  }
  if (from.has_kv_raw_get_req()) {
    kv_raw_get_req_ = new ::kvrpcpb::KvRawGetRequest(*from.kv_raw_get_req_);
  } else {
    kv_raw_get_req_ = NULL;
  }
  if (from.has_kv_raw_put_req()) {
    kv_raw_put_req_ = new ::kvrpcpb::KvRawPutRequest(*from.kv_raw_put_req_);
  } else {
    kv_raw_put_req_ = NULL;
  }
  if (from.has_kv_raw_delete_req()) {
    kv_raw_delete_req_ = new ::kvrpcpb::KvRawDeleteRequest(*from.kv_raw_delete_req_);
  } else {
    kv_raw_delete_req_ = NULL;
  }
  if (from.has_kv_raw_execute_req()) {
    kv_raw_execute_req_ = new ::kvrpcpb::KvRawExecuteRequest(*from.kv_raw_execute_req_);
  } else {
    kv_raw_execute_req_ = NULL;
  }
  if (from.has_select_req()) {
    select_req_ = new ::kvrpcpb::SelectRequest(*from.select_req_);
  } else {
    select_req_ = NULL;
  }
  if (from.has_insert_req()) {
    insert_req_ = new ::kvrpcpb::InsertRequest(*from.insert_req_);
  } else {
    insert_req_ = NULL;
  }
  if (from.has_delete_req()) {
    delete_req_ = new ::kvrpcpb::DeleteRequest(*from.delete_req_);
  } else {
    delete_req_ = NULL;
  }
  if (from.has_batch_insert_req()) {
    batch_insert_req_ = new ::kvrpcpb::BatchInsertRequest(*from.batch_insert_req_);
  } else {
    batch_insert_req_ = NULL;
  }
  if (from.has_kv_watch_put_req()) {
    kv_watch_put_req_ = new ::watchpb::KvWatchPutRequest(*from.kv_watch_put_req_);
  } else {
    kv_watch_put_req_ = NULL;
  }
  if (from.has_kv_watch_del_req()) {
    kv_watch_del_req_ = new ::watchpb::KvWatchDeleteRequest(*from.kv_watch_del_req_);
  } else {
    kv_watch_del_req_ = NULL;
  }
  if (from.has_admin_split_req()) {
    admin_split_req_ = new ::raft_cmdpb::SplitRequest(*from.admin_split_req_);
  } else {
    admin_split_req_ = NULL;
  }
  if (from.has_admin_merge_req()) {
    admin_merge_req_ = new ::raft_cmdpb::MergeRequest(*from.admin_merge_req_);
  } else {
    admin_merge_req_ = NULL;
  }
  if (from.has_admin_leader_change_req()) {
    admin_leader_change_req_ = new ::raft_cmdpb::LeaderChangeRequest(*from.admin_leader_change_req_);
  } else {
    admin_leader_change_req_ = NULL;
  }
  if (from.has_lock_req()) {
    lock_req_ = new ::kvrpcpb::LockRequest(*from.lock_req_);
  } else {
    lock_req_ = NULL;
  }
  if (from.has_lock_update_req()) {
    lock_update_req_ = new ::kvrpcpb::LockUpdateRequest(*from.lock_update_req_);
  } else {
    lock_update_req_ = NULL;
  }
  if (from.has_unlock_req()) {
    unlock_req_ = new ::kvrpcpb::UnlockRequest(*from.unlock_req_);
  } else {
    unlock_req_ = NULL;
  }
  if (from.has_unlock_force_req()) {
    unlock_force_req_ = new ::kvrpcpb::UnlockForceRequest(*from.unlock_force_req_);
  } else {
    unlock_force_req_ = NULL;
  }
  if (from.has_update_req()) {
    update_req_ = new ::kvrpcpb::UpdateRequest(*from.update_req_);
  } else {
    update_req_ = NULL;
  }
  if (from.has_txn_prepare_req()) {
    txn_prepare_req_ = new ::txnpb::PrepareRequest(*from.txn_prepare_req_);
  } else {
    txn_prepare_req_ = NULL;
  }
  if (from.has_txn_decide_req()) {
    txn_decide_req_ = new ::txnpb::DecideRequest(*from.txn_decide_req_);
  } else {
    txn_decide_req_ = NULL;
  }
  if (from.has_txn_clearup_req()) {
    txn_clearup_req_ = new ::txnpb::ClearupRequest(*from.txn_clearup_req_);
  } else {
    txn_clearup_req_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Command)
}

void Command::SharedCtor() {
  ::memset(&cmd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&cmd_id_)) + sizeof(cmd_type_));
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != internal_default_instance()) delete cmd_id_;
  if (this != internal_default_instance()) delete verify_epoch_;
  if (this != internal_default_instance()) delete kv_raw_get_req_;
  if (this != internal_default_instance()) delete kv_raw_put_req_;
  if (this != internal_default_instance()) delete kv_raw_delete_req_;
  if (this != internal_default_instance()) delete kv_raw_execute_req_;
  if (this != internal_default_instance()) delete select_req_;
  if (this != internal_default_instance()) delete insert_req_;
  if (this != internal_default_instance()) delete delete_req_;
  if (this != internal_default_instance()) delete batch_insert_req_;
  if (this != internal_default_instance()) delete kv_watch_put_req_;
  if (this != internal_default_instance()) delete kv_watch_del_req_;
  if (this != internal_default_instance()) delete admin_split_req_;
  if (this != internal_default_instance()) delete admin_merge_req_;
  if (this != internal_default_instance()) delete admin_leader_change_req_;
  if (this != internal_default_instance()) delete lock_req_;
  if (this != internal_default_instance()) delete lock_update_req_;
  if (this != internal_default_instance()) delete unlock_req_;
  if (this != internal_default_instance()) delete unlock_force_req_;
  if (this != internal_default_instance()) delete update_req_;
  if (this != internal_default_instance()) delete txn_prepare_req_;
  if (this != internal_default_instance()) delete txn_decide_req_;
  if (this != internal_default_instance()) delete txn_clearup_req_;
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) {
    delete cmd_id_;
  }
  cmd_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) {
    delete verify_epoch_;
  }
  verify_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_raw_get_req_ != NULL) {
    delete kv_raw_get_req_;
  }
  kv_raw_get_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_raw_put_req_ != NULL) {
    delete kv_raw_put_req_;
  }
  kv_raw_put_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_raw_delete_req_ != NULL) {
    delete kv_raw_delete_req_;
  }
  kv_raw_delete_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_raw_execute_req_ != NULL) {
    delete kv_raw_execute_req_;
  }
  kv_raw_execute_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && select_req_ != NULL) {
    delete select_req_;
  }
  select_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && insert_req_ != NULL) {
    delete insert_req_;
  }
  insert_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete_req_ != NULL) {
    delete delete_req_;
  }
  delete_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && batch_insert_req_ != NULL) {
    delete batch_insert_req_;
  }
  batch_insert_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_watch_put_req_ != NULL) {
    delete kv_watch_put_req_;
  }
  kv_watch_put_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_watch_del_req_ != NULL) {
    delete kv_watch_del_req_;
  }
  kv_watch_del_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_split_req_ != NULL) {
    delete admin_split_req_;
  }
  admin_split_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_merge_req_ != NULL) {
    delete admin_merge_req_;
  }
  admin_merge_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_leader_change_req_ != NULL) {
    delete admin_leader_change_req_;
  }
  admin_leader_change_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && lock_req_ != NULL) {
    delete lock_req_;
  }
  lock_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && lock_update_req_ != NULL) {
    delete lock_update_req_;
  }
  lock_update_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && unlock_req_ != NULL) {
    delete unlock_req_;
  }
  unlock_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && unlock_force_req_ != NULL) {
    delete unlock_force_req_;
  }
  unlock_force_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_req_ != NULL) {
    delete update_req_;
  }
  update_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_prepare_req_ != NULL) {
    delete txn_prepare_req_;
  }
  txn_prepare_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_decide_req_ != NULL) {
    delete txn_decide_req_;
  }
  txn_decide_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && txn_clearup_req_ != NULL) {
    delete txn_clearup_req_;
  }
  txn_clearup_req_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.CmdID cmd_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CmdType cmd_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch verify_epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_raw_get_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_raw_put_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_raw_delete_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_raw_execute_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.SelectRequest select_req = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.InsertRequest insert_req = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.DeleteRequest delete_req = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_insert_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_watch_put_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_watch_del_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SplitRequest admin_split_req = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_split_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.MergeRequest admin_merge_req = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_merge_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_leader_change_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockRequest lock_req = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockUpdateRequest lock_update_req = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock_update_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.UnlockRequest unlock_req = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlock_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlock_force_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.UpdateRequest update_req = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txnpb.PrepareRequest txn_prepare_req = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_prepare_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txnpb.DecideRequest txn_decide_req = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_decide_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txnpb.ClearupRequest txn_clearup_req = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn_clearup_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cmd_id_, output);
  }

  // .raft_cmdpb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd_type(), output);
  }

  // .metapb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->verify_epoch_, output);
  }

  // .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
  if (this->has_kv_raw_get_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->kv_raw_get_req_, output);
  }

  // .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
  if (this->has_kv_raw_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->kv_raw_put_req_, output);
  }

  // .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
  if (this->has_kv_raw_delete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kv_raw_delete_req_, output);
  }

  // .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
  if (this->has_kv_raw_execute_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->kv_raw_execute_req_, output);
  }

  // .kvrpcpb.SelectRequest select_req = 8;
  if (this->has_select_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->select_req_, output);
  }

  // .kvrpcpb.InsertRequest insert_req = 9;
  if (this->has_insert_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->insert_req_, output);
  }

  // .kvrpcpb.DeleteRequest delete_req = 10;
  if (this->has_delete_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->delete_req_, output);
  }

  // .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
  if (this->has_batch_insert_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->batch_insert_req_, output);
  }

  // .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
  if (this->has_kv_watch_put_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->kv_watch_put_req_, output);
  }

  // .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
  if (this->has_kv_watch_del_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->kv_watch_del_req_, output);
  }

  // .raft_cmdpb.SplitRequest admin_split_req = 30;
  if (this->has_admin_split_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->admin_split_req_, output);
  }

  // .raft_cmdpb.MergeRequest admin_merge_req = 31;
  if (this->has_admin_merge_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->admin_merge_req_, output);
  }

  // .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
  if (this->has_admin_leader_change_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->admin_leader_change_req_, output);
  }

  // .kvrpcpb.LockRequest lock_req = 40;
  if (this->has_lock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->lock_req_, output);
  }

  // .kvrpcpb.LockUpdateRequest lock_update_req = 41;
  if (this->has_lock_update_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->lock_update_req_, output);
  }

  // .kvrpcpb.UnlockRequest unlock_req = 42;
  if (this->has_unlock_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->unlock_req_, output);
  }

  // .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
  if (this->has_unlock_force_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->unlock_force_req_, output);
  }

  // .kvrpcpb.UpdateRequest update_req = 50;
  if (this->has_update_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->update_req_, output);
  }

  // .txnpb.PrepareRequest txn_prepare_req = 60;
  if (this->has_txn_prepare_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->txn_prepare_req_, output);
  }

  // .txnpb.DecideRequest txn_decide_req = 61;
  if (this->has_txn_decide_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->txn_decide_req_, output);
  }

  // .txnpb.ClearupRequest txn_clearup_req = 62;
  if (this->has_txn_clearup_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->txn_clearup_req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cmd_id_, deterministic, target);
  }

  // .raft_cmdpb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd_type(), target);
  }

  // .metapb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->verify_epoch_, deterministic, target);
  }

  // .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
  if (this->has_kv_raw_get_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->kv_raw_get_req_, deterministic, target);
  }

  // .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
  if (this->has_kv_raw_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->kv_raw_put_req_, deterministic, target);
  }

  // .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
  if (this->has_kv_raw_delete_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kv_raw_delete_req_, deterministic, target);
  }

  // .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
  if (this->has_kv_raw_execute_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->kv_raw_execute_req_, deterministic, target);
  }

  // .kvrpcpb.SelectRequest select_req = 8;
  if (this->has_select_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->select_req_, deterministic, target);
  }

  // .kvrpcpb.InsertRequest insert_req = 9;
  if (this->has_insert_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->insert_req_, deterministic, target);
  }

  // .kvrpcpb.DeleteRequest delete_req = 10;
  if (this->has_delete_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->delete_req_, deterministic, target);
  }

  // .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
  if (this->has_batch_insert_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->batch_insert_req_, deterministic, target);
  }

  // .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
  if (this->has_kv_watch_put_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->kv_watch_put_req_, deterministic, target);
  }

  // .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
  if (this->has_kv_watch_del_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->kv_watch_del_req_, deterministic, target);
  }

  // .raft_cmdpb.SplitRequest admin_split_req = 30;
  if (this->has_admin_split_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->admin_split_req_, deterministic, target);
  }

  // .raft_cmdpb.MergeRequest admin_merge_req = 31;
  if (this->has_admin_merge_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->admin_merge_req_, deterministic, target);
  }

  // .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
  if (this->has_admin_leader_change_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->admin_leader_change_req_, deterministic, target);
  }

  // .kvrpcpb.LockRequest lock_req = 40;
  if (this->has_lock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->lock_req_, deterministic, target);
  }

  // .kvrpcpb.LockUpdateRequest lock_update_req = 41;
  if (this->has_lock_update_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->lock_update_req_, deterministic, target);
  }

  // .kvrpcpb.UnlockRequest unlock_req = 42;
  if (this->has_unlock_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->unlock_req_, deterministic, target);
  }

  // .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
  if (this->has_unlock_force_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->unlock_force_req_, deterministic, target);
  }

  // .kvrpcpb.UpdateRequest update_req = 50;
  if (this->has_update_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->update_req_, deterministic, target);
  }

  // .txnpb.PrepareRequest txn_prepare_req = 60;
  if (this->has_txn_prepare_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *this->txn_prepare_req_, deterministic, target);
  }

  // .txnpb.DecideRequest txn_decide_req = 61;
  if (this->has_txn_decide_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, *this->txn_decide_req_, deterministic, target);
  }

  // .txnpb.ClearupRequest txn_clearup_req = 62;
  if (this->has_txn_clearup_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *this->txn_clearup_req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raft_cmdpb.CmdID cmd_id = 1;
  if (this->has_cmd_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_id_);
  }

  // .metapb.RangeEpoch verify_epoch = 3;
  if (this->has_verify_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_epoch_);
  }

  // .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
  if (this->has_kv_raw_get_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_raw_get_req_);
  }

  // .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
  if (this->has_kv_raw_put_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_raw_put_req_);
  }

  // .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
  if (this->has_kv_raw_delete_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_raw_delete_req_);
  }

  // .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
  if (this->has_kv_raw_execute_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_raw_execute_req_);
  }

  // .kvrpcpb.SelectRequest select_req = 8;
  if (this->has_select_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->select_req_);
  }

  // .kvrpcpb.InsertRequest insert_req = 9;
  if (this->has_insert_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->insert_req_);
  }

  // .kvrpcpb.DeleteRequest delete_req = 10;
  if (this->has_delete_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete_req_);
  }

  // .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
  if (this->has_batch_insert_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->batch_insert_req_);
  }

  // .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
  if (this->has_kv_watch_put_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_watch_put_req_);
  }

  // .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
  if (this->has_kv_watch_del_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_watch_del_req_);
  }

  // .raft_cmdpb.SplitRequest admin_split_req = 30;
  if (this->has_admin_split_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->admin_split_req_);
  }

  // .raft_cmdpb.MergeRequest admin_merge_req = 31;
  if (this->has_admin_merge_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->admin_merge_req_);
  }

  // .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
  if (this->has_admin_leader_change_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->admin_leader_change_req_);
  }

  // .kvrpcpb.LockRequest lock_req = 40;
  if (this->has_lock_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_req_);
  }

  // .kvrpcpb.LockUpdateRequest lock_update_req = 41;
  if (this->has_lock_update_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_update_req_);
  }

  // .kvrpcpb.UnlockRequest unlock_req = 42;
  if (this->has_unlock_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unlock_req_);
  }

  // .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
  if (this->has_unlock_force_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unlock_force_req_);
  }

  // .kvrpcpb.UpdateRequest update_req = 50;
  if (this->has_update_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_req_);
  }

  // .txnpb.PrepareRequest txn_prepare_req = 60;
  if (this->has_txn_prepare_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_prepare_req_);
  }

  // .txnpb.DecideRequest txn_decide_req = 61;
  if (this->has_txn_decide_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_decide_req_);
  }

  // .txnpb.ClearupRequest txn_clearup_req = 62;
  if (this->has_txn_clearup_req()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->txn_clearup_req_);
  }

  // .raft_cmdpb.CmdType cmd_type = 2;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd_id()) {
    mutable_cmd_id()->::raft_cmdpb::CmdID::MergeFrom(from.cmd_id());
  }
  if (from.has_verify_epoch()) {
    mutable_verify_epoch()->::metapb::RangeEpoch::MergeFrom(from.verify_epoch());
  }
  if (from.has_kv_raw_get_req()) {
    mutable_kv_raw_get_req()->::kvrpcpb::KvRawGetRequest::MergeFrom(from.kv_raw_get_req());
  }
  if (from.has_kv_raw_put_req()) {
    mutable_kv_raw_put_req()->::kvrpcpb::KvRawPutRequest::MergeFrom(from.kv_raw_put_req());
  }
  if (from.has_kv_raw_delete_req()) {
    mutable_kv_raw_delete_req()->::kvrpcpb::KvRawDeleteRequest::MergeFrom(from.kv_raw_delete_req());
  }
  if (from.has_kv_raw_execute_req()) {
    mutable_kv_raw_execute_req()->::kvrpcpb::KvRawExecuteRequest::MergeFrom(from.kv_raw_execute_req());
  }
  if (from.has_select_req()) {
    mutable_select_req()->::kvrpcpb::SelectRequest::MergeFrom(from.select_req());
  }
  if (from.has_insert_req()) {
    mutable_insert_req()->::kvrpcpb::InsertRequest::MergeFrom(from.insert_req());
  }
  if (from.has_delete_req()) {
    mutable_delete_req()->::kvrpcpb::DeleteRequest::MergeFrom(from.delete_req());
  }
  if (from.has_batch_insert_req()) {
    mutable_batch_insert_req()->::kvrpcpb::BatchInsertRequest::MergeFrom(from.batch_insert_req());
  }
  if (from.has_kv_watch_put_req()) {
    mutable_kv_watch_put_req()->::watchpb::KvWatchPutRequest::MergeFrom(from.kv_watch_put_req());
  }
  if (from.has_kv_watch_del_req()) {
    mutable_kv_watch_del_req()->::watchpb::KvWatchDeleteRequest::MergeFrom(from.kv_watch_del_req());
  }
  if (from.has_admin_split_req()) {
    mutable_admin_split_req()->::raft_cmdpb::SplitRequest::MergeFrom(from.admin_split_req());
  }
  if (from.has_admin_merge_req()) {
    mutable_admin_merge_req()->::raft_cmdpb::MergeRequest::MergeFrom(from.admin_merge_req());
  }
  if (from.has_admin_leader_change_req()) {
    mutable_admin_leader_change_req()->::raft_cmdpb::LeaderChangeRequest::MergeFrom(from.admin_leader_change_req());
  }
  if (from.has_lock_req()) {
    mutable_lock_req()->::kvrpcpb::LockRequest::MergeFrom(from.lock_req());
  }
  if (from.has_lock_update_req()) {
    mutable_lock_update_req()->::kvrpcpb::LockUpdateRequest::MergeFrom(from.lock_update_req());
  }
  if (from.has_unlock_req()) {
    mutable_unlock_req()->::kvrpcpb::UnlockRequest::MergeFrom(from.unlock_req());
  }
  if (from.has_unlock_force_req()) {
    mutable_unlock_force_req()->::kvrpcpb::UnlockForceRequest::MergeFrom(from.unlock_force_req());
  }
  if (from.has_update_req()) {
    mutable_update_req()->::kvrpcpb::UpdateRequest::MergeFrom(from.update_req());
  }
  if (from.has_txn_prepare_req()) {
    mutable_txn_prepare_req()->::txnpb::PrepareRequest::MergeFrom(from.txn_prepare_req());
  }
  if (from.has_txn_decide_req()) {
    mutable_txn_decide_req()->::txnpb::DecideRequest::MergeFrom(from.txn_decide_req());
  }
  if (from.has_txn_clearup_req()) {
    mutable_txn_clearup_req()->::txnpb::ClearupRequest::MergeFrom(from.txn_clearup_req());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(cmd_id_, other->cmd_id_);
  swap(verify_epoch_, other->verify_epoch_);
  swap(kv_raw_get_req_, other->kv_raw_get_req_);
  swap(kv_raw_put_req_, other->kv_raw_put_req_);
  swap(kv_raw_delete_req_, other->kv_raw_delete_req_);
  swap(kv_raw_execute_req_, other->kv_raw_execute_req_);
  swap(select_req_, other->select_req_);
  swap(insert_req_, other->insert_req_);
  swap(delete_req_, other->delete_req_);
  swap(batch_insert_req_, other->batch_insert_req_);
  swap(kv_watch_put_req_, other->kv_watch_put_req_);
  swap(kv_watch_del_req_, other->kv_watch_del_req_);
  swap(admin_split_req_, other->admin_split_req_);
  swap(admin_merge_req_, other->admin_merge_req_);
  swap(admin_leader_change_req_, other->admin_leader_change_req_);
  swap(lock_req_, other->lock_req_);
  swap(lock_update_req_, other->lock_update_req_);
  swap(unlock_req_, other->unlock_req_);
  swap(unlock_force_req_, other->unlock_force_req_);
  swap(update_req_, other->update_req_);
  swap(txn_prepare_req_, other->txn_prepare_req_);
  swap(txn_decide_req_, other->txn_decide_req_);
  swap(txn_clearup_req_, other->txn_clearup_req_);
  swap(cmd_type_, other->cmd_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// .raft_cmdpb.CmdID cmd_id = 1;
bool Command::has_cmd_id() const {
  return this != internal_default_instance() && cmd_id_ != NULL;
}
void Command::clear_cmd_id() {
  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) delete cmd_id_;
  cmd_id_ = NULL;
}
const ::raft_cmdpb::CmdID& Command::cmd_id() const {
  const ::raft_cmdpb::CmdID* p = cmd_id_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.cmd_id)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CmdID*>(
      &::raft_cmdpb::_CmdID_default_instance_);
}
::raft_cmdpb::CmdID* Command::mutable_cmd_id() {
  
  if (cmd_id_ == NULL) {
    cmd_id_ = new ::raft_cmdpb::CmdID;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.cmd_id)
  return cmd_id_;
}
::raft_cmdpb::CmdID* Command::release_cmd_id() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.cmd_id)
  
  ::raft_cmdpb::CmdID* temp = cmd_id_;
  cmd_id_ = NULL;
  return temp;
}
void Command::set_allocated_cmd_id(::raft_cmdpb::CmdID* cmd_id) {
  delete cmd_id_;
  cmd_id_ = cmd_id;
  if (cmd_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.cmd_id)
}

// .raft_cmdpb.CmdType cmd_type = 2;
void Command::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::CmdType Command::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
void Command::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Command.cmd_type)
}

// .metapb.RangeEpoch verify_epoch = 3;
bool Command::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
void Command::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
const ::metapb::RangeEpoch& Command::verify_epoch() const {
  const ::metapb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* Command::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.verify_epoch)
  return verify_epoch_;
}
::metapb::RangeEpoch* Command::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.verify_epoch)
  
  ::metapb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
void Command::set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.verify_epoch)
}

// .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
bool Command::has_kv_raw_get_req() const {
  return this != internal_default_instance() && kv_raw_get_req_ != NULL;
}
void Command::clear_kv_raw_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_get_req_ != NULL) delete kv_raw_get_req_;
  kv_raw_get_req_ = NULL;
}
const ::kvrpcpb::KvRawGetRequest& Command::kv_raw_get_req() const {
  const ::kvrpcpb::KvRawGetRequest* p = kv_raw_get_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawGetRequest*>(
      &::kvrpcpb::_KvRawGetRequest_default_instance_);
}
::kvrpcpb::KvRawGetRequest* Command::mutable_kv_raw_get_req() {
  
  if (kv_raw_get_req_ == NULL) {
    kv_raw_get_req_ = new ::kvrpcpb::KvRawGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_get_req)
  return kv_raw_get_req_;
}
::kvrpcpb::KvRawGetRequest* Command::release_kv_raw_get_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_get_req)
  
  ::kvrpcpb::KvRawGetRequest* temp = kv_raw_get_req_;
  kv_raw_get_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_raw_get_req(::kvrpcpb::KvRawGetRequest* kv_raw_get_req) {
  delete kv_raw_get_req_;
  kv_raw_get_req_ = kv_raw_get_req;
  if (kv_raw_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_get_req)
}

// .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
bool Command::has_kv_raw_put_req() const {
  return this != internal_default_instance() && kv_raw_put_req_ != NULL;
}
void Command::clear_kv_raw_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_put_req_ != NULL) delete kv_raw_put_req_;
  kv_raw_put_req_ = NULL;
}
const ::kvrpcpb::KvRawPutRequest& Command::kv_raw_put_req() const {
  const ::kvrpcpb::KvRawPutRequest* p = kv_raw_put_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawPutRequest*>(
      &::kvrpcpb::_KvRawPutRequest_default_instance_);
}
::kvrpcpb::KvRawPutRequest* Command::mutable_kv_raw_put_req() {
  
  if (kv_raw_put_req_ == NULL) {
    kv_raw_put_req_ = new ::kvrpcpb::KvRawPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_put_req)
  return kv_raw_put_req_;
}
::kvrpcpb::KvRawPutRequest* Command::release_kv_raw_put_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_put_req)
  
  ::kvrpcpb::KvRawPutRequest* temp = kv_raw_put_req_;
  kv_raw_put_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_raw_put_req(::kvrpcpb::KvRawPutRequest* kv_raw_put_req) {
  delete kv_raw_put_req_;
  kv_raw_put_req_ = kv_raw_put_req;
  if (kv_raw_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_put_req)
}

// .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
bool Command::has_kv_raw_delete_req() const {
  return this != internal_default_instance() && kv_raw_delete_req_ != NULL;
}
void Command::clear_kv_raw_delete_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_delete_req_ != NULL) delete kv_raw_delete_req_;
  kv_raw_delete_req_ = NULL;
}
const ::kvrpcpb::KvRawDeleteRequest& Command::kv_raw_delete_req() const {
  const ::kvrpcpb::KvRawDeleteRequest* p = kv_raw_delete_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawDeleteRequest*>(
      &::kvrpcpb::_KvRawDeleteRequest_default_instance_);
}
::kvrpcpb::KvRawDeleteRequest* Command::mutable_kv_raw_delete_req() {
  
  if (kv_raw_delete_req_ == NULL) {
    kv_raw_delete_req_ = new ::kvrpcpb::KvRawDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_delete_req)
  return kv_raw_delete_req_;
}
::kvrpcpb::KvRawDeleteRequest* Command::release_kv_raw_delete_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_delete_req)
  
  ::kvrpcpb::KvRawDeleteRequest* temp = kv_raw_delete_req_;
  kv_raw_delete_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_raw_delete_req(::kvrpcpb::KvRawDeleteRequest* kv_raw_delete_req) {
  delete kv_raw_delete_req_;
  kv_raw_delete_req_ = kv_raw_delete_req;
  if (kv_raw_delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_delete_req)
}

// .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
bool Command::has_kv_raw_execute_req() const {
  return this != internal_default_instance() && kv_raw_execute_req_ != NULL;
}
void Command::clear_kv_raw_execute_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_execute_req_ != NULL) delete kv_raw_execute_req_;
  kv_raw_execute_req_ = NULL;
}
const ::kvrpcpb::KvRawExecuteRequest& Command::kv_raw_execute_req() const {
  const ::kvrpcpb::KvRawExecuteRequest* p = kv_raw_execute_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_execute_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawExecuteRequest*>(
      &::kvrpcpb::_KvRawExecuteRequest_default_instance_);
}
::kvrpcpb::KvRawExecuteRequest* Command::mutable_kv_raw_execute_req() {
  
  if (kv_raw_execute_req_ == NULL) {
    kv_raw_execute_req_ = new ::kvrpcpb::KvRawExecuteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_execute_req)
  return kv_raw_execute_req_;
}
::kvrpcpb::KvRawExecuteRequest* Command::release_kv_raw_execute_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_execute_req)
  
  ::kvrpcpb::KvRawExecuteRequest* temp = kv_raw_execute_req_;
  kv_raw_execute_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_raw_execute_req(::kvrpcpb::KvRawExecuteRequest* kv_raw_execute_req) {
  delete kv_raw_execute_req_;
  kv_raw_execute_req_ = kv_raw_execute_req;
  if (kv_raw_execute_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_execute_req)
}

// .kvrpcpb.SelectRequest select_req = 8;
bool Command::has_select_req() const {
  return this != internal_default_instance() && select_req_ != NULL;
}
void Command::clear_select_req() {
  if (GetArenaNoVirtual() == NULL && select_req_ != NULL) delete select_req_;
  select_req_ = NULL;
}
const ::kvrpcpb::SelectRequest& Command::select_req() const {
  const ::kvrpcpb::SelectRequest* p = select_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.select_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::SelectRequest*>(
      &::kvrpcpb::_SelectRequest_default_instance_);
}
::kvrpcpb::SelectRequest* Command::mutable_select_req() {
  
  if (select_req_ == NULL) {
    select_req_ = new ::kvrpcpb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.select_req)
  return select_req_;
}
::kvrpcpb::SelectRequest* Command::release_select_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.select_req)
  
  ::kvrpcpb::SelectRequest* temp = select_req_;
  select_req_ = NULL;
  return temp;
}
void Command::set_allocated_select_req(::kvrpcpb::SelectRequest* select_req) {
  delete select_req_;
  select_req_ = select_req;
  if (select_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.select_req)
}

// .kvrpcpb.InsertRequest insert_req = 9;
bool Command::has_insert_req() const {
  return this != internal_default_instance() && insert_req_ != NULL;
}
void Command::clear_insert_req() {
  if (GetArenaNoVirtual() == NULL && insert_req_ != NULL) delete insert_req_;
  insert_req_ = NULL;
}
const ::kvrpcpb::InsertRequest& Command::insert_req() const {
  const ::kvrpcpb::InsertRequest* p = insert_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.insert_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::InsertRequest*>(
      &::kvrpcpb::_InsertRequest_default_instance_);
}
::kvrpcpb::InsertRequest* Command::mutable_insert_req() {
  
  if (insert_req_ == NULL) {
    insert_req_ = new ::kvrpcpb::InsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.insert_req)
  return insert_req_;
}
::kvrpcpb::InsertRequest* Command::release_insert_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.insert_req)
  
  ::kvrpcpb::InsertRequest* temp = insert_req_;
  insert_req_ = NULL;
  return temp;
}
void Command::set_allocated_insert_req(::kvrpcpb::InsertRequest* insert_req) {
  delete insert_req_;
  insert_req_ = insert_req;
  if (insert_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.insert_req)
}

// .kvrpcpb.DeleteRequest delete_req = 10;
bool Command::has_delete_req() const {
  return this != internal_default_instance() && delete_req_ != NULL;
}
void Command::clear_delete_req() {
  if (GetArenaNoVirtual() == NULL && delete_req_ != NULL) delete delete_req_;
  delete_req_ = NULL;
}
const ::kvrpcpb::DeleteRequest& Command::delete_req() const {
  const ::kvrpcpb::DeleteRequest* p = delete_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::DeleteRequest*>(
      &::kvrpcpb::_DeleteRequest_default_instance_);
}
::kvrpcpb::DeleteRequest* Command::mutable_delete_req() {
  
  if (delete_req_ == NULL) {
    delete_req_ = new ::kvrpcpb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.delete_req)
  return delete_req_;
}
::kvrpcpb::DeleteRequest* Command::release_delete_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.delete_req)
  
  ::kvrpcpb::DeleteRequest* temp = delete_req_;
  delete_req_ = NULL;
  return temp;
}
void Command::set_allocated_delete_req(::kvrpcpb::DeleteRequest* delete_req) {
  delete delete_req_;
  delete_req_ = delete_req;
  if (delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.delete_req)
}

// .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
bool Command::has_batch_insert_req() const {
  return this != internal_default_instance() && batch_insert_req_ != NULL;
}
void Command::clear_batch_insert_req() {
  if (GetArenaNoVirtual() == NULL && batch_insert_req_ != NULL) delete batch_insert_req_;
  batch_insert_req_ = NULL;
}
const ::kvrpcpb::BatchInsertRequest& Command::batch_insert_req() const {
  const ::kvrpcpb::BatchInsertRequest* p = batch_insert_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.batch_insert_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::BatchInsertRequest*>(
      &::kvrpcpb::_BatchInsertRequest_default_instance_);
}
::kvrpcpb::BatchInsertRequest* Command::mutable_batch_insert_req() {
  
  if (batch_insert_req_ == NULL) {
    batch_insert_req_ = new ::kvrpcpb::BatchInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.batch_insert_req)
  return batch_insert_req_;
}
::kvrpcpb::BatchInsertRequest* Command::release_batch_insert_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.batch_insert_req)
  
  ::kvrpcpb::BatchInsertRequest* temp = batch_insert_req_;
  batch_insert_req_ = NULL;
  return temp;
}
void Command::set_allocated_batch_insert_req(::kvrpcpb::BatchInsertRequest* batch_insert_req) {
  delete batch_insert_req_;
  batch_insert_req_ = batch_insert_req;
  if (batch_insert_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.batch_insert_req)
}

// .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
bool Command::has_kv_watch_put_req() const {
  return this != internal_default_instance() && kv_watch_put_req_ != NULL;
}
void Command::clear_kv_watch_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_watch_put_req_ != NULL) delete kv_watch_put_req_;
  kv_watch_put_req_ = NULL;
}
const ::watchpb::KvWatchPutRequest& Command::kv_watch_put_req() const {
  const ::watchpb::KvWatchPutRequest* p = kv_watch_put_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_watch_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchPutRequest*>(
      &::watchpb::_KvWatchPutRequest_default_instance_);
}
::watchpb::KvWatchPutRequest* Command::mutable_kv_watch_put_req() {
  
  if (kv_watch_put_req_ == NULL) {
    kv_watch_put_req_ = new ::watchpb::KvWatchPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_watch_put_req)
  return kv_watch_put_req_;
}
::watchpb::KvWatchPutRequest* Command::release_kv_watch_put_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_watch_put_req)
  
  ::watchpb::KvWatchPutRequest* temp = kv_watch_put_req_;
  kv_watch_put_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_watch_put_req(::watchpb::KvWatchPutRequest* kv_watch_put_req) {
  delete kv_watch_put_req_;
  kv_watch_put_req_ = kv_watch_put_req;
  if (kv_watch_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_watch_put_req)
}

// .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
bool Command::has_kv_watch_del_req() const {
  return this != internal_default_instance() && kv_watch_del_req_ != NULL;
}
void Command::clear_kv_watch_del_req() {
  if (GetArenaNoVirtual() == NULL && kv_watch_del_req_ != NULL) delete kv_watch_del_req_;
  kv_watch_del_req_ = NULL;
}
const ::watchpb::KvWatchDeleteRequest& Command::kv_watch_del_req() const {
  const ::watchpb::KvWatchDeleteRequest* p = kv_watch_del_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_watch_del_req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchDeleteRequest*>(
      &::watchpb::_KvWatchDeleteRequest_default_instance_);
}
::watchpb::KvWatchDeleteRequest* Command::mutable_kv_watch_del_req() {
  
  if (kv_watch_del_req_ == NULL) {
    kv_watch_del_req_ = new ::watchpb::KvWatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_watch_del_req)
  return kv_watch_del_req_;
}
::watchpb::KvWatchDeleteRequest* Command::release_kv_watch_del_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_watch_del_req)
  
  ::watchpb::KvWatchDeleteRequest* temp = kv_watch_del_req_;
  kv_watch_del_req_ = NULL;
  return temp;
}
void Command::set_allocated_kv_watch_del_req(::watchpb::KvWatchDeleteRequest* kv_watch_del_req) {
  delete kv_watch_del_req_;
  kv_watch_del_req_ = kv_watch_del_req;
  if (kv_watch_del_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_watch_del_req)
}

// .raft_cmdpb.SplitRequest admin_split_req = 30;
bool Command::has_admin_split_req() const {
  return this != internal_default_instance() && admin_split_req_ != NULL;
}
void Command::clear_admin_split_req() {
  if (GetArenaNoVirtual() == NULL && admin_split_req_ != NULL) delete admin_split_req_;
  admin_split_req_ = NULL;
}
const ::raft_cmdpb::SplitRequest& Command::admin_split_req() const {
  const ::raft_cmdpb::SplitRequest* p = admin_split_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_split_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitRequest*>(
      &::raft_cmdpb::_SplitRequest_default_instance_);
}
::raft_cmdpb::SplitRequest* Command::mutable_admin_split_req() {
  
  if (admin_split_req_ == NULL) {
    admin_split_req_ = new ::raft_cmdpb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_split_req)
  return admin_split_req_;
}
::raft_cmdpb::SplitRequest* Command::release_admin_split_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_split_req)
  
  ::raft_cmdpb::SplitRequest* temp = admin_split_req_;
  admin_split_req_ = NULL;
  return temp;
}
void Command::set_allocated_admin_split_req(::raft_cmdpb::SplitRequest* admin_split_req) {
  delete admin_split_req_;
  admin_split_req_ = admin_split_req;
  if (admin_split_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_split_req)
}

// .raft_cmdpb.MergeRequest admin_merge_req = 31;
bool Command::has_admin_merge_req() const {
  return this != internal_default_instance() && admin_merge_req_ != NULL;
}
void Command::clear_admin_merge_req() {
  if (GetArenaNoVirtual() == NULL && admin_merge_req_ != NULL) delete admin_merge_req_;
  admin_merge_req_ = NULL;
}
const ::raft_cmdpb::MergeRequest& Command::admin_merge_req() const {
  const ::raft_cmdpb::MergeRequest* p = admin_merge_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_merge_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::MergeRequest*>(
      &::raft_cmdpb::_MergeRequest_default_instance_);
}
::raft_cmdpb::MergeRequest* Command::mutable_admin_merge_req() {
  
  if (admin_merge_req_ == NULL) {
    admin_merge_req_ = new ::raft_cmdpb::MergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_merge_req)
  return admin_merge_req_;
}
::raft_cmdpb::MergeRequest* Command::release_admin_merge_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_merge_req)
  
  ::raft_cmdpb::MergeRequest* temp = admin_merge_req_;
  admin_merge_req_ = NULL;
  return temp;
}
void Command::set_allocated_admin_merge_req(::raft_cmdpb::MergeRequest* admin_merge_req) {
  delete admin_merge_req_;
  admin_merge_req_ = admin_merge_req;
  if (admin_merge_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_merge_req)
}

// .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
bool Command::has_admin_leader_change_req() const {
  return this != internal_default_instance() && admin_leader_change_req_ != NULL;
}
void Command::clear_admin_leader_change_req() {
  if (GetArenaNoVirtual() == NULL && admin_leader_change_req_ != NULL) delete admin_leader_change_req_;
  admin_leader_change_req_ = NULL;
}
const ::raft_cmdpb::LeaderChangeRequest& Command::admin_leader_change_req() const {
  const ::raft_cmdpb::LeaderChangeRequest* p = admin_leader_change_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_leader_change_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::LeaderChangeRequest*>(
      &::raft_cmdpb::_LeaderChangeRequest_default_instance_);
}
::raft_cmdpb::LeaderChangeRequest* Command::mutable_admin_leader_change_req() {
  
  if (admin_leader_change_req_ == NULL) {
    admin_leader_change_req_ = new ::raft_cmdpb::LeaderChangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_leader_change_req)
  return admin_leader_change_req_;
}
::raft_cmdpb::LeaderChangeRequest* Command::release_admin_leader_change_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_leader_change_req)
  
  ::raft_cmdpb::LeaderChangeRequest* temp = admin_leader_change_req_;
  admin_leader_change_req_ = NULL;
  return temp;
}
void Command::set_allocated_admin_leader_change_req(::raft_cmdpb::LeaderChangeRequest* admin_leader_change_req) {
  delete admin_leader_change_req_;
  admin_leader_change_req_ = admin_leader_change_req;
  if (admin_leader_change_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_leader_change_req)
}

// .kvrpcpb.LockRequest lock_req = 40;
bool Command::has_lock_req() const {
  return this != internal_default_instance() && lock_req_ != NULL;
}
void Command::clear_lock_req() {
  if (GetArenaNoVirtual() == NULL && lock_req_ != NULL) delete lock_req_;
  lock_req_ = NULL;
}
const ::kvrpcpb::LockRequest& Command::lock_req() const {
  const ::kvrpcpb::LockRequest* p = lock_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.lock_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockRequest*>(
      &::kvrpcpb::_LockRequest_default_instance_);
}
::kvrpcpb::LockRequest* Command::mutable_lock_req() {
  
  if (lock_req_ == NULL) {
    lock_req_ = new ::kvrpcpb::LockRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.lock_req)
  return lock_req_;
}
::kvrpcpb::LockRequest* Command::release_lock_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.lock_req)
  
  ::kvrpcpb::LockRequest* temp = lock_req_;
  lock_req_ = NULL;
  return temp;
}
void Command::set_allocated_lock_req(::kvrpcpb::LockRequest* lock_req) {
  delete lock_req_;
  lock_req_ = lock_req;
  if (lock_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.lock_req)
}

// .kvrpcpb.LockUpdateRequest lock_update_req = 41;
bool Command::has_lock_update_req() const {
  return this != internal_default_instance() && lock_update_req_ != NULL;
}
void Command::clear_lock_update_req() {
  if (GetArenaNoVirtual() == NULL && lock_update_req_ != NULL) delete lock_update_req_;
  lock_update_req_ = NULL;
}
const ::kvrpcpb::LockUpdateRequest& Command::lock_update_req() const {
  const ::kvrpcpb::LockUpdateRequest* p = lock_update_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.lock_update_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockUpdateRequest*>(
      &::kvrpcpb::_LockUpdateRequest_default_instance_);
}
::kvrpcpb::LockUpdateRequest* Command::mutable_lock_update_req() {
  
  if (lock_update_req_ == NULL) {
    lock_update_req_ = new ::kvrpcpb::LockUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.lock_update_req)
  return lock_update_req_;
}
::kvrpcpb::LockUpdateRequest* Command::release_lock_update_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.lock_update_req)
  
  ::kvrpcpb::LockUpdateRequest* temp = lock_update_req_;
  lock_update_req_ = NULL;
  return temp;
}
void Command::set_allocated_lock_update_req(::kvrpcpb::LockUpdateRequest* lock_update_req) {
  delete lock_update_req_;
  lock_update_req_ = lock_update_req;
  if (lock_update_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.lock_update_req)
}

// .kvrpcpb.UnlockRequest unlock_req = 42;
bool Command::has_unlock_req() const {
  return this != internal_default_instance() && unlock_req_ != NULL;
}
void Command::clear_unlock_req() {
  if (GetArenaNoVirtual() == NULL && unlock_req_ != NULL) delete unlock_req_;
  unlock_req_ = NULL;
}
const ::kvrpcpb::UnlockRequest& Command::unlock_req() const {
  const ::kvrpcpb::UnlockRequest* p = unlock_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.unlock_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockRequest*>(
      &::kvrpcpb::_UnlockRequest_default_instance_);
}
::kvrpcpb::UnlockRequest* Command::mutable_unlock_req() {
  
  if (unlock_req_ == NULL) {
    unlock_req_ = new ::kvrpcpb::UnlockRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.unlock_req)
  return unlock_req_;
}
::kvrpcpb::UnlockRequest* Command::release_unlock_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.unlock_req)
  
  ::kvrpcpb::UnlockRequest* temp = unlock_req_;
  unlock_req_ = NULL;
  return temp;
}
void Command::set_allocated_unlock_req(::kvrpcpb::UnlockRequest* unlock_req) {
  delete unlock_req_;
  unlock_req_ = unlock_req;
  if (unlock_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.unlock_req)
}

// .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
bool Command::has_unlock_force_req() const {
  return this != internal_default_instance() && unlock_force_req_ != NULL;
}
void Command::clear_unlock_force_req() {
  if (GetArenaNoVirtual() == NULL && unlock_force_req_ != NULL) delete unlock_force_req_;
  unlock_force_req_ = NULL;
}
const ::kvrpcpb::UnlockForceRequest& Command::unlock_force_req() const {
  const ::kvrpcpb::UnlockForceRequest* p = unlock_force_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.unlock_force_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockForceRequest*>(
      &::kvrpcpb::_UnlockForceRequest_default_instance_);
}
::kvrpcpb::UnlockForceRequest* Command::mutable_unlock_force_req() {
  
  if (unlock_force_req_ == NULL) {
    unlock_force_req_ = new ::kvrpcpb::UnlockForceRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.unlock_force_req)
  return unlock_force_req_;
}
::kvrpcpb::UnlockForceRequest* Command::release_unlock_force_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.unlock_force_req)
  
  ::kvrpcpb::UnlockForceRequest* temp = unlock_force_req_;
  unlock_force_req_ = NULL;
  return temp;
}
void Command::set_allocated_unlock_force_req(::kvrpcpb::UnlockForceRequest* unlock_force_req) {
  delete unlock_force_req_;
  unlock_force_req_ = unlock_force_req;
  if (unlock_force_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.unlock_force_req)
}

// .kvrpcpb.UpdateRequest update_req = 50;
bool Command::has_update_req() const {
  return this != internal_default_instance() && update_req_ != NULL;
}
void Command::clear_update_req() {
  if (GetArenaNoVirtual() == NULL && update_req_ != NULL) delete update_req_;
  update_req_ = NULL;
}
const ::kvrpcpb::UpdateRequest& Command::update_req() const {
  const ::kvrpcpb::UpdateRequest* p = update_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.update_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UpdateRequest*>(
      &::kvrpcpb::_UpdateRequest_default_instance_);
}
::kvrpcpb::UpdateRequest* Command::mutable_update_req() {
  
  if (update_req_ == NULL) {
    update_req_ = new ::kvrpcpb::UpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.update_req)
  return update_req_;
}
::kvrpcpb::UpdateRequest* Command::release_update_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.update_req)
  
  ::kvrpcpb::UpdateRequest* temp = update_req_;
  update_req_ = NULL;
  return temp;
}
void Command::set_allocated_update_req(::kvrpcpb::UpdateRequest* update_req) {
  delete update_req_;
  update_req_ = update_req;
  if (update_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.update_req)
}

// .txnpb.PrepareRequest txn_prepare_req = 60;
bool Command::has_txn_prepare_req() const {
  return this != internal_default_instance() && txn_prepare_req_ != NULL;
}
void Command::clear_txn_prepare_req() {
  if (GetArenaNoVirtual() == NULL && txn_prepare_req_ != NULL) delete txn_prepare_req_;
  txn_prepare_req_ = NULL;
}
const ::txnpb::PrepareRequest& Command::txn_prepare_req() const {
  const ::txnpb::PrepareRequest* p = txn_prepare_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.txn_prepare_req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::PrepareRequest*>(
      &::txnpb::_PrepareRequest_default_instance_);
}
::txnpb::PrepareRequest* Command::mutable_txn_prepare_req() {
  
  if (txn_prepare_req_ == NULL) {
    txn_prepare_req_ = new ::txnpb::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.txn_prepare_req)
  return txn_prepare_req_;
}
::txnpb::PrepareRequest* Command::release_txn_prepare_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.txn_prepare_req)
  
  ::txnpb::PrepareRequest* temp = txn_prepare_req_;
  txn_prepare_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_prepare_req(::txnpb::PrepareRequest* txn_prepare_req) {
  delete txn_prepare_req_;
  txn_prepare_req_ = txn_prepare_req;
  if (txn_prepare_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.txn_prepare_req)
}

// .txnpb.DecideRequest txn_decide_req = 61;
bool Command::has_txn_decide_req() const {
  return this != internal_default_instance() && txn_decide_req_ != NULL;
}
void Command::clear_txn_decide_req() {
  if (GetArenaNoVirtual() == NULL && txn_decide_req_ != NULL) delete txn_decide_req_;
  txn_decide_req_ = NULL;
}
const ::txnpb::DecideRequest& Command::txn_decide_req() const {
  const ::txnpb::DecideRequest* p = txn_decide_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.txn_decide_req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::DecideRequest*>(
      &::txnpb::_DecideRequest_default_instance_);
}
::txnpb::DecideRequest* Command::mutable_txn_decide_req() {
  
  if (txn_decide_req_ == NULL) {
    txn_decide_req_ = new ::txnpb::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.txn_decide_req)
  return txn_decide_req_;
}
::txnpb::DecideRequest* Command::release_txn_decide_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.txn_decide_req)
  
  ::txnpb::DecideRequest* temp = txn_decide_req_;
  txn_decide_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_decide_req(::txnpb::DecideRequest* txn_decide_req) {
  delete txn_decide_req_;
  txn_decide_req_ = txn_decide_req;
  if (txn_decide_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.txn_decide_req)
}

// .txnpb.ClearupRequest txn_clearup_req = 62;
bool Command::has_txn_clearup_req() const {
  return this != internal_default_instance() && txn_clearup_req_ != NULL;
}
void Command::clear_txn_clearup_req() {
  if (GetArenaNoVirtual() == NULL && txn_clearup_req_ != NULL) delete txn_clearup_req_;
  txn_clearup_req_ = NULL;
}
const ::txnpb::ClearupRequest& Command::txn_clearup_req() const {
  const ::txnpb::ClearupRequest* p = txn_clearup_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.txn_clearup_req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::ClearupRequest*>(
      &::txnpb::_ClearupRequest_default_instance_);
}
::txnpb::ClearupRequest* Command::mutable_txn_clearup_req() {
  
  if (txn_clearup_req_ == NULL) {
    txn_clearup_req_ = new ::txnpb::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.txn_clearup_req)
  return txn_clearup_req_;
}
::txnpb::ClearupRequest* Command::release_txn_clearup_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.txn_clearup_req)
  
  ::txnpb::ClearupRequest* temp = txn_clearup_req_;
  txn_clearup_req_ = NULL;
  return temp;
}
void Command::set_allocated_txn_clearup_req(::txnpb::ClearupRequest* txn_clearup_req) {
  delete txn_clearup_req_;
  txn_clearup_req_ = txn_clearup_req;
  if (txn_clearup_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.txn_clearup_req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerTask::kVerifyEpochFieldNumber;
const int PeerTask::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerTask::PeerTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PeerTask)
}
PeerTask::PeerTask(const PeerTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_verify_epoch()) {
    verify_epoch_ = new ::metapb::RangeEpoch(*from.verify_epoch_);
  } else {
    verify_epoch_ = NULL;
  }
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PeerTask)
}

void PeerTask::SharedCtor() {
  ::memset(&verify_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_) -
      reinterpret_cast<char*>(&verify_epoch_)) + sizeof(peer_));
  _cached_size_ = 0;
}

PeerTask::~PeerTask() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PeerTask)
  SharedDtor();
}

void PeerTask::SharedDtor() {
  if (this != internal_default_instance()) delete verify_epoch_;
  if (this != internal_default_instance()) delete peer_;
}

void PeerTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerTask::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerTask& PeerTask::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerTask* PeerTask::New(::google::protobuf::Arena* arena) const {
  PeerTask* n = new PeerTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerTask::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) {
    delete verify_epoch_;
  }
  verify_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool PeerTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PeerTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.RangeEpoch verify_epoch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PeerTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PeerTask)
  return false;
#undef DO_
}

void PeerTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->verify_epoch_, output);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PeerTask)
}

::google::protobuf::uint8* PeerTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PeerTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->verify_epoch_, deterministic, target);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PeerTask)
  return target;
}

size_t PeerTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PeerTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.RangeEpoch verify_epoch = 1;
  if (this->has_verify_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_epoch_);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PeerTask)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PeerTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PeerTask)
    MergeFrom(*source);
  }
}

void PeerTask::MergeFrom(const PeerTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PeerTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_verify_epoch()) {
    mutable_verify_epoch()->::metapb::RangeEpoch::MergeFrom(from.verify_epoch());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void PeerTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PeerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerTask::CopyFrom(const PeerTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PeerTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerTask::IsInitialized() const {
  return true;
}

void PeerTask::Swap(PeerTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerTask::InternalSwap(PeerTask* other) {
  using std::swap;
  swap(verify_epoch_, other->verify_epoch_);
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerTask::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerTask

// .metapb.RangeEpoch verify_epoch = 1;
bool PeerTask::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
void PeerTask::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
const ::metapb::RangeEpoch& PeerTask::verify_epoch() const {
  const ::metapb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.PeerTask.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* PeerTask::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PeerTask.verify_epoch)
  return verify_epoch_;
}
::metapb::RangeEpoch* PeerTask::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PeerTask.verify_epoch)
  
  ::metapb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
void PeerTask::set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PeerTask.verify_epoch)
}

// .metapb.Peer peer = 2;
bool PeerTask::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void PeerTask::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& PeerTask::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.PeerTask.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* PeerTask::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PeerTask.peer)
  return peer_;
}
::metapb::Peer* PeerTask::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PeerTask.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void PeerTask::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PeerTask.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotKVPair::kKeyFieldNumber;
const int SnapshotKVPair::kValueFieldNumber;
const int SnapshotKVPair::kCfTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotKVPair::SnapshotKVPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapshotKVPair)
}
SnapshotKVPair::SnapshotKVPair(const SnapshotKVPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  cf_type_ = from.cf_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapshotKVPair)
}

void SnapshotKVPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_type_ = 0;
  _cached_size_ = 0;
}

SnapshotKVPair::~SnapshotKVPair() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapshotKVPair)
  SharedDtor();
}

void SnapshotKVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotKVPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotKVPair::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotKVPair& SnapshotKVPair::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotKVPair* SnapshotKVPair::New(::google::protobuf::Arena* arena) const {
  SnapshotKVPair* n = new SnapshotKVPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotKVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_type_ = 0;
  _internal_metadata_.Clear();
}

bool SnapshotKVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapshotKVPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CFType cf_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cf_type(static_cast< ::raft_cmdpb::CFType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapshotKVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapshotKVPair)
  return false;
#undef DO_
}

void SnapshotKVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // .raft_cmdpb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cf_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapshotKVPair)
}

::google::protobuf::uint8* SnapshotKVPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapshotKVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // .raft_cmdpb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cf_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapshotKVPair)
  return target;
}

size_t SnapshotKVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapshotKVPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .raft_cmdpb.CFType cf_type = 3;
  if (this->cf_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cf_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotKVPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapshotKVPair)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotKVPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotKVPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapshotKVPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapshotKVPair)
    MergeFrom(*source);
  }
}

void SnapshotKVPair::MergeFrom(const SnapshotKVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapshotKVPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.cf_type() != 0) {
    set_cf_type(from.cf_type());
  }
}

void SnapshotKVPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapshotKVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotKVPair::CopyFrom(const SnapshotKVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapshotKVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotKVPair::IsInitialized() const {
  return true;
}

void SnapshotKVPair::Swap(SnapshotKVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotKVPair::InternalSwap(SnapshotKVPair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(cf_type_, other->cf_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotKVPair::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotKVPair

// bytes key = 1;
void SnapshotKVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotKVPair::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotKVPair.key)
  return key_.GetNoArena();
}
void SnapshotKVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SnapshotKVPair.key)
}
#if LANG_CXX11
void SnapshotKVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SnapshotKVPair.key)
}
#endif
void SnapshotKVPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SnapshotKVPair.key)
}
void SnapshotKVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SnapshotKVPair.key)
}
::std::string* SnapshotKVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotKVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotKVPair::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotKVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotKVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotKVPair.key)
}

// bytes value = 2;
void SnapshotKVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotKVPair::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotKVPair.value)
  return value_.GetNoArena();
}
void SnapshotKVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SnapshotKVPair.value)
}
#if LANG_CXX11
void SnapshotKVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SnapshotKVPair.value)
}
#endif
void SnapshotKVPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SnapshotKVPair.value)
}
void SnapshotKVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SnapshotKVPair.value)
}
::std::string* SnapshotKVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotKVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotKVPair::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotKVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotKVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotKVPair.value)
}

// .raft_cmdpb.CFType cf_type = 3;
void SnapshotKVPair::clear_cf_type() {
  cf_type_ = 0;
}
::raft_cmdpb::CFType SnapshotKVPair::cf_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotKVPair.cf_type)
  return static_cast< ::raft_cmdpb::CFType >(cf_type_);
}
void SnapshotKVPair::set_cf_type(::raft_cmdpb::CFType value) {
  
  cf_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SnapshotKVPair.cf_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotContext::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotContext::SnapshotContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapshotContext)
}
SnapshotContext::SnapshotContext(const SnapshotContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::metapb::Range(*from.meta_);
  } else {
    meta_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapshotContext)
}

void SnapshotContext::SharedCtor() {
  meta_ = NULL;
  _cached_size_ = 0;
}

SnapshotContext::~SnapshotContext() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapshotContext)
  SharedDtor();
}

void SnapshotContext::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void SnapshotContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotContext::descriptor() {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotContext& SnapshotContext::default_instance() {
  protobuf_raft_5fcmdpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotContext* SnapshotContext::New(::google::protobuf::Arena* arena) const {
  SnapshotContext* n = new SnapshotContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotContext::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  _internal_metadata_.Clear();
}

bool SnapshotContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapshotContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Range meta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapshotContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapshotContext)
  return false;
#undef DO_
}

void SnapshotContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range meta = 1;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapshotContext)
}

::google::protobuf::uint8* SnapshotContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapshotContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range meta = 1;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapshotContext)
  return target;
}

size_t SnapshotContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapshotContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Range meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapshotContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapshotContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapshotContext)
    MergeFrom(*source);
  }
}

void SnapshotContext::MergeFrom(const SnapshotContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapshotContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::metapb::Range::MergeFrom(from.meta());
  }
}

void SnapshotContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapshotContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotContext::CopyFrom(const SnapshotContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapshotContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotContext::IsInitialized() const {
  return true;
}

void SnapshotContext::Swap(SnapshotContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotContext::InternalSwap(SnapshotContext* other) {
  using std::swap;
  swap(meta_, other->meta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotContext::GetMetadata() const {
  protobuf_raft_5fcmdpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_5fcmdpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotContext

// .metapb.Range meta = 1;
bool SnapshotContext::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void SnapshotContext::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::metapb::Range& SnapshotContext::meta() const {
  const ::metapb::Range* p = meta_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotContext.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* SnapshotContext::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotContext.meta)
  return meta_;
}
::metapb::Range* SnapshotContext::release_meta() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotContext.meta)
  
  ::metapb::Range* temp = meta_;
  meta_ = NULL;
  return temp;
}
void SnapshotContext::set_allocated_meta(::metapb::Range* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotContext.meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

// @@protoc_insertion_point(global_scope)
