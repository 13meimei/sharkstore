// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskpb.proto

#ifndef PROTOBUF_taskpb_2eproto__INCLUDED
#define PROTOBUF_taskpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)
namespace taskpb {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskRangeAddPeer;
class TaskRangeAddPeerDefaultTypeInternal;
extern TaskRangeAddPeerDefaultTypeInternal _TaskRangeAddPeer_default_instance_;
class TaskRangeDelPeer;
class TaskRangeDelPeerDefaultTypeInternal;
extern TaskRangeDelPeerDefaultTypeInternal _TaskRangeDelPeer_default_instance_;
class TaskRangeDelete;
class TaskRangeDeleteDefaultTypeInternal;
extern TaskRangeDeleteDefaultTypeInternal _TaskRangeDelete_default_instance_;
class TaskRangeLeaderTransfer;
class TaskRangeLeaderTransferDefaultTypeInternal;
extern TaskRangeLeaderTransferDefaultTypeInternal _TaskRangeLeaderTransfer_default_instance_;
class TaskRangeMerge;
class TaskRangeMergeDefaultTypeInternal;
extern TaskRangeMergeDefaultTypeInternal _TaskRangeMerge_default_instance_;
}  // namespace taskpb

namespace taskpb {

namespace protobuf_taskpb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_taskpb_2eproto

enum TaskType {
  EmptyTask = 0,
  RangeMerge = 1,
  RangeDelete = 2,
  RangeLeaderTransfer = 3,
  RangeAddPeer = 4,
  RangeDelPeer = 5,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = EmptyTask;
const TaskType TaskType_MAX = RangeDelPeer;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class TaskRangeMerge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.TaskRangeMerge) */ {
 public:
  TaskRangeMerge();
  virtual ~TaskRangeMerge();

  TaskRangeMerge(const TaskRangeMerge& from);

  inline TaskRangeMerge& operator=(const TaskRangeMerge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRangeMerge(TaskRangeMerge&& from) noexcept
    : TaskRangeMerge() {
    *this = ::std::move(from);
  }

  inline TaskRangeMerge& operator=(TaskRangeMerge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRangeMerge& default_instance();

  static inline const TaskRangeMerge* internal_default_instance() {
    return reinterpret_cast<const TaskRangeMerge*>(
               &_TaskRangeMerge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TaskRangeMerge* other);
  friend void swap(TaskRangeMerge& a, TaskRangeMerge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRangeMerge* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRangeMerge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRangeMerge& from);
  void MergeFrom(const TaskRangeMerge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRangeMerge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:taskpb.TaskRangeMerge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskRangeDelete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.TaskRangeDelete) */ {
 public:
  TaskRangeDelete();
  virtual ~TaskRangeDelete();

  TaskRangeDelete(const TaskRangeDelete& from);

  inline TaskRangeDelete& operator=(const TaskRangeDelete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRangeDelete(TaskRangeDelete&& from) noexcept
    : TaskRangeDelete() {
    *this = ::std::move(from);
  }

  inline TaskRangeDelete& operator=(TaskRangeDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRangeDelete& default_instance();

  static inline const TaskRangeDelete* internal_default_instance() {
    return reinterpret_cast<const TaskRangeDelete*>(
               &_TaskRangeDelete_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TaskRangeDelete* other);
  friend void swap(TaskRangeDelete& a, TaskRangeDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRangeDelete* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRangeDelete* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRangeDelete& from);
  void MergeFrom(const TaskRangeDelete& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRangeDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:taskpb.TaskRangeDelete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskRangeLeaderTransfer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.TaskRangeLeaderTransfer) */ {
 public:
  TaskRangeLeaderTransfer();
  virtual ~TaskRangeLeaderTransfer();

  TaskRangeLeaderTransfer(const TaskRangeLeaderTransfer& from);

  inline TaskRangeLeaderTransfer& operator=(const TaskRangeLeaderTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRangeLeaderTransfer(TaskRangeLeaderTransfer&& from) noexcept
    : TaskRangeLeaderTransfer() {
    *this = ::std::move(from);
  }

  inline TaskRangeLeaderTransfer& operator=(TaskRangeLeaderTransfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRangeLeaderTransfer& default_instance();

  static inline const TaskRangeLeaderTransfer* internal_default_instance() {
    return reinterpret_cast<const TaskRangeLeaderTransfer*>(
               &_TaskRangeLeaderTransfer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TaskRangeLeaderTransfer* other);
  friend void swap(TaskRangeLeaderTransfer& a, TaskRangeLeaderTransfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRangeLeaderTransfer* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRangeLeaderTransfer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRangeLeaderTransfer& from);
  void MergeFrom(const TaskRangeLeaderTransfer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRangeLeaderTransfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer exp_leader = 1;
  bool has_exp_leader() const;
  void clear_exp_leader();
  static const int kExpLeaderFieldNumber = 1;
  const ::metapb::Peer& exp_leader() const;
  ::metapb::Peer* mutable_exp_leader();
  ::metapb::Peer* release_exp_leader();
  void set_allocated_exp_leader(::metapb::Peer* exp_leader);

  // @@protoc_insertion_point(class_scope:taskpb.TaskRangeLeaderTransfer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* exp_leader_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskRangeAddPeer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.TaskRangeAddPeer) */ {
 public:
  TaskRangeAddPeer();
  virtual ~TaskRangeAddPeer();

  TaskRangeAddPeer(const TaskRangeAddPeer& from);

  inline TaskRangeAddPeer& operator=(const TaskRangeAddPeer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRangeAddPeer(TaskRangeAddPeer&& from) noexcept
    : TaskRangeAddPeer() {
    *this = ::std::move(from);
  }

  inline TaskRangeAddPeer& operator=(TaskRangeAddPeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRangeAddPeer& default_instance();

  static inline const TaskRangeAddPeer* internal_default_instance() {
    return reinterpret_cast<const TaskRangeAddPeer*>(
               &_TaskRangeAddPeer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TaskRangeAddPeer* other);
  friend void swap(TaskRangeAddPeer& a, TaskRangeAddPeer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRangeAddPeer* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRangeAddPeer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRangeAddPeer& from);
  void MergeFrom(const TaskRangeAddPeer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRangeAddPeer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:taskpb.TaskRangeAddPeer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskRangeDelPeer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.TaskRangeDelPeer) */ {
 public:
  TaskRangeDelPeer();
  virtual ~TaskRangeDelPeer();

  TaskRangeDelPeer(const TaskRangeDelPeer& from);

  inline TaskRangeDelPeer& operator=(const TaskRangeDelPeer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRangeDelPeer(TaskRangeDelPeer&& from) noexcept
    : TaskRangeDelPeer() {
    *this = ::std::move(from);
  }

  inline TaskRangeDelPeer& operator=(TaskRangeDelPeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRangeDelPeer& default_instance();

  static inline const TaskRangeDelPeer* internal_default_instance() {
    return reinterpret_cast<const TaskRangeDelPeer*>(
               &_TaskRangeDelPeer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TaskRangeDelPeer* other);
  friend void swap(TaskRangeDelPeer& a, TaskRangeDelPeer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRangeDelPeer* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskRangeDelPeer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskRangeDelPeer& from);
  void MergeFrom(const TaskRangeDelPeer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskRangeDelPeer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:taskpb.TaskRangeDelPeer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:taskpb.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const PROTOBUF_FINAL { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .taskpb.TaskRangeMerge range_merge = 2;
  bool has_range_merge() const;
  void clear_range_merge();
  static const int kRangeMergeFieldNumber = 2;
  const ::taskpb::TaskRangeMerge& range_merge() const;
  ::taskpb::TaskRangeMerge* mutable_range_merge();
  ::taskpb::TaskRangeMerge* release_range_merge();
  void set_allocated_range_merge(::taskpb::TaskRangeMerge* range_merge);

  // .taskpb.TaskRangeDelete range_delete = 3;
  bool has_range_delete() const;
  void clear_range_delete();
  static const int kRangeDeleteFieldNumber = 3;
  const ::taskpb::TaskRangeDelete& range_delete() const;
  ::taskpb::TaskRangeDelete* mutable_range_delete();
  ::taskpb::TaskRangeDelete* release_range_delete();
  void set_allocated_range_delete(::taskpb::TaskRangeDelete* range_delete);

  // .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
  bool has_range_leader_transfer() const;
  void clear_range_leader_transfer();
  static const int kRangeLeaderTransferFieldNumber = 4;
  const ::taskpb::TaskRangeLeaderTransfer& range_leader_transfer() const;
  ::taskpb::TaskRangeLeaderTransfer* mutable_range_leader_transfer();
  ::taskpb::TaskRangeLeaderTransfer* release_range_leader_transfer();
  void set_allocated_range_leader_transfer(::taskpb::TaskRangeLeaderTransfer* range_leader_transfer);

  // .taskpb.TaskRangeAddPeer range_add_peer = 5;
  bool has_range_add_peer() const;
  void clear_range_add_peer();
  static const int kRangeAddPeerFieldNumber = 5;
  const ::taskpb::TaskRangeAddPeer& range_add_peer() const;
  ::taskpb::TaskRangeAddPeer* mutable_range_add_peer();
  ::taskpb::TaskRangeAddPeer* release_range_add_peer();
  void set_allocated_range_add_peer(::taskpb::TaskRangeAddPeer* range_add_peer);

  // .taskpb.TaskRangeDelPeer range_del_peer = 6;
  bool has_range_del_peer() const;
  void clear_range_del_peer();
  static const int kRangeDelPeerFieldNumber = 6;
  const ::taskpb::TaskRangeDelPeer& range_del_peer() const;
  ::taskpb::TaskRangeDelPeer* mutable_range_del_peer();
  ::taskpb::TaskRangeDelPeer* release_range_del_peer();
  void set_allocated_range_del_peer(::taskpb::TaskRangeDelPeer* range_del_peer);

  // .taskpb.TaskType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::taskpb::TaskType type() const;
  void set_type(::taskpb::TaskType value);

  // @@protoc_insertion_point(class_scope:taskpb.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::taskpb::TaskRangeMerge* range_merge_;
  ::taskpb::TaskRangeDelete* range_delete_;
  ::taskpb::TaskRangeLeaderTransfer* range_leader_transfer_;
  ::taskpb::TaskRangeAddPeer* range_add_peer_;
  ::taskpb::TaskRangeDelPeer* range_del_peer_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_taskpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskRangeMerge

// -------------------------------------------------------------------

// TaskRangeDelete

// uint64 range_id = 1;
inline void TaskRangeDelete::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskRangeDelete::range_id() const {
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeDelete.range_id)
  return range_id_;
}
inline void TaskRangeDelete::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:taskpb.TaskRangeDelete.range_id)
}

// -------------------------------------------------------------------

// TaskRangeLeaderTransfer

// .metapb.Peer exp_leader = 1;
inline bool TaskRangeLeaderTransfer::has_exp_leader() const {
  return this != internal_default_instance() && exp_leader_ != NULL;
}
inline void TaskRangeLeaderTransfer::clear_exp_leader() {
  if (GetArenaNoVirtual() == NULL && exp_leader_ != NULL) delete exp_leader_;
  exp_leader_ = NULL;
}
inline const ::metapb::Peer& TaskRangeLeaderTransfer::exp_leader() const {
  const ::metapb::Peer* p = exp_leader_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeLeaderTransfer.exp_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* TaskRangeLeaderTransfer::mutable_exp_leader() {
  
  if (exp_leader_ == NULL) {
    exp_leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeLeaderTransfer.exp_leader)
  return exp_leader_;
}
inline ::metapb::Peer* TaskRangeLeaderTransfer::release_exp_leader() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeLeaderTransfer.exp_leader)
  
  ::metapb::Peer* temp = exp_leader_;
  exp_leader_ = NULL;
  return temp;
}
inline void TaskRangeLeaderTransfer::set_allocated_exp_leader(::metapb::Peer* exp_leader) {
  delete exp_leader_;
  exp_leader_ = exp_leader;
  if (exp_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeLeaderTransfer.exp_leader)
}

// -------------------------------------------------------------------

// TaskRangeAddPeer

// .metapb.Peer peer = 1;
inline bool TaskRangeAddPeer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void TaskRangeAddPeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& TaskRangeAddPeer::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeAddPeer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* TaskRangeAddPeer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeAddPeer.peer)
  return peer_;
}
inline ::metapb::Peer* TaskRangeAddPeer::release_peer() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeAddPeer.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void TaskRangeAddPeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeAddPeer.peer)
}

// -------------------------------------------------------------------

// TaskRangeDelPeer

// .metapb.Peer peer = 1;
inline bool TaskRangeDelPeer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void TaskRangeDelPeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& TaskRangeDelPeer::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeDelPeer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* TaskRangeDelPeer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeDelPeer.peer)
  return peer_;
}
inline ::metapb::Peer* TaskRangeDelPeer::release_peer() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeDelPeer.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void TaskRangeDelPeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeDelPeer.peer)
}

// -------------------------------------------------------------------

// Task

// .taskpb.TaskType type = 1;
inline void Task::clear_type() {
  type_ = 0;
}
inline ::taskpb::TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:taskpb.Task.type)
  return static_cast< ::taskpb::TaskType >(type_);
}
inline void Task::set_type(::taskpb::TaskType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:taskpb.Task.type)
}

// .taskpb.TaskRangeMerge range_merge = 2;
inline bool Task::has_range_merge() const {
  return this != internal_default_instance() && range_merge_ != NULL;
}
inline void Task::clear_range_merge() {
  if (GetArenaNoVirtual() == NULL && range_merge_ != NULL) delete range_merge_;
  range_merge_ = NULL;
}
inline const ::taskpb::TaskRangeMerge& Task::range_merge() const {
  const ::taskpb::TaskRangeMerge* p = range_merge_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeMerge*>(
      &::taskpb::_TaskRangeMerge_default_instance_);
}
inline ::taskpb::TaskRangeMerge* Task::mutable_range_merge() {
  
  if (range_merge_ == NULL) {
    range_merge_ = new ::taskpb::TaskRangeMerge;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_merge)
  return range_merge_;
}
inline ::taskpb::TaskRangeMerge* Task::release_range_merge() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_merge)
  
  ::taskpb::TaskRangeMerge* temp = range_merge_;
  range_merge_ = NULL;
  return temp;
}
inline void Task::set_allocated_range_merge(::taskpb::TaskRangeMerge* range_merge) {
  delete range_merge_;
  range_merge_ = range_merge;
  if (range_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_merge)
}

// .taskpb.TaskRangeDelete range_delete = 3;
inline bool Task::has_range_delete() const {
  return this != internal_default_instance() && range_delete_ != NULL;
}
inline void Task::clear_range_delete() {
  if (GetArenaNoVirtual() == NULL && range_delete_ != NULL) delete range_delete_;
  range_delete_ = NULL;
}
inline const ::taskpb::TaskRangeDelete& Task::range_delete() const {
  const ::taskpb::TaskRangeDelete* p = range_delete_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_delete)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeDelete*>(
      &::taskpb::_TaskRangeDelete_default_instance_);
}
inline ::taskpb::TaskRangeDelete* Task::mutable_range_delete() {
  
  if (range_delete_ == NULL) {
    range_delete_ = new ::taskpb::TaskRangeDelete;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_delete)
  return range_delete_;
}
inline ::taskpb::TaskRangeDelete* Task::release_range_delete() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_delete)
  
  ::taskpb::TaskRangeDelete* temp = range_delete_;
  range_delete_ = NULL;
  return temp;
}
inline void Task::set_allocated_range_delete(::taskpb::TaskRangeDelete* range_delete) {
  delete range_delete_;
  range_delete_ = range_delete;
  if (range_delete) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_delete)
}

// .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
inline bool Task::has_range_leader_transfer() const {
  return this != internal_default_instance() && range_leader_transfer_ != NULL;
}
inline void Task::clear_range_leader_transfer() {
  if (GetArenaNoVirtual() == NULL && range_leader_transfer_ != NULL) delete range_leader_transfer_;
  range_leader_transfer_ = NULL;
}
inline const ::taskpb::TaskRangeLeaderTransfer& Task::range_leader_transfer() const {
  const ::taskpb::TaskRangeLeaderTransfer* p = range_leader_transfer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_leader_transfer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeLeaderTransfer*>(
      &::taskpb::_TaskRangeLeaderTransfer_default_instance_);
}
inline ::taskpb::TaskRangeLeaderTransfer* Task::mutable_range_leader_transfer() {
  
  if (range_leader_transfer_ == NULL) {
    range_leader_transfer_ = new ::taskpb::TaskRangeLeaderTransfer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_leader_transfer)
  return range_leader_transfer_;
}
inline ::taskpb::TaskRangeLeaderTransfer* Task::release_range_leader_transfer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_leader_transfer)
  
  ::taskpb::TaskRangeLeaderTransfer* temp = range_leader_transfer_;
  range_leader_transfer_ = NULL;
  return temp;
}
inline void Task::set_allocated_range_leader_transfer(::taskpb::TaskRangeLeaderTransfer* range_leader_transfer) {
  delete range_leader_transfer_;
  range_leader_transfer_ = range_leader_transfer;
  if (range_leader_transfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_leader_transfer)
}

// .taskpb.TaskRangeAddPeer range_add_peer = 5;
inline bool Task::has_range_add_peer() const {
  return this != internal_default_instance() && range_add_peer_ != NULL;
}
inline void Task::clear_range_add_peer() {
  if (GetArenaNoVirtual() == NULL && range_add_peer_ != NULL) delete range_add_peer_;
  range_add_peer_ = NULL;
}
inline const ::taskpb::TaskRangeAddPeer& Task::range_add_peer() const {
  const ::taskpb::TaskRangeAddPeer* p = range_add_peer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_add_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeAddPeer*>(
      &::taskpb::_TaskRangeAddPeer_default_instance_);
}
inline ::taskpb::TaskRangeAddPeer* Task::mutable_range_add_peer() {
  
  if (range_add_peer_ == NULL) {
    range_add_peer_ = new ::taskpb::TaskRangeAddPeer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_add_peer)
  return range_add_peer_;
}
inline ::taskpb::TaskRangeAddPeer* Task::release_range_add_peer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_add_peer)
  
  ::taskpb::TaskRangeAddPeer* temp = range_add_peer_;
  range_add_peer_ = NULL;
  return temp;
}
inline void Task::set_allocated_range_add_peer(::taskpb::TaskRangeAddPeer* range_add_peer) {
  delete range_add_peer_;
  range_add_peer_ = range_add_peer;
  if (range_add_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_add_peer)
}

// .taskpb.TaskRangeDelPeer range_del_peer = 6;
inline bool Task::has_range_del_peer() const {
  return this != internal_default_instance() && range_del_peer_ != NULL;
}
inline void Task::clear_range_del_peer() {
  if (GetArenaNoVirtual() == NULL && range_del_peer_ != NULL) delete range_del_peer_;
  range_del_peer_ = NULL;
}
inline const ::taskpb::TaskRangeDelPeer& Task::range_del_peer() const {
  const ::taskpb::TaskRangeDelPeer* p = range_del_peer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_del_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeDelPeer*>(
      &::taskpb::_TaskRangeDelPeer_default_instance_);
}
inline ::taskpb::TaskRangeDelPeer* Task::mutable_range_del_peer() {
  
  if (range_del_peer_ == NULL) {
    range_del_peer_ = new ::taskpb::TaskRangeDelPeer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_del_peer)
  return range_del_peer_;
}
inline ::taskpb::TaskRangeDelPeer* Task::release_range_del_peer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_del_peer)
  
  ::taskpb::TaskRangeDelPeer* temp = range_del_peer_;
  range_del_peer_ = NULL;
  return temp;
}
inline void Task::set_allocated_range_del_peer(::taskpb::TaskRangeDelPeer* range_del_peer) {
  delete range_del_peer_;
  range_del_peer_ = range_del_peer;
  if (range_del_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_del_peer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace taskpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::taskpb::TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::taskpb::TaskType>() {
  return ::taskpb::TaskType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_taskpb_2eproto__INCLUDED
