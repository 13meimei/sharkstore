// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "schpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace schpb {
class RequestHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
     _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
     _instance;
} _ResponseHeader_default_instance_;
class CreateRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateRangeRequest>
     _instance;
} _CreateRangeRequest_default_instance_;
class CreateRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateRangeResponse>
     _instance;
} _CreateRangeResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest>
     _instance;
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse>
     _instance;
} _DeleteRangeResponse_default_instance_;
class TransferRangeLeaderRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransferRangeLeaderRequest>
     _instance;
} _TransferRangeLeaderRequest_default_instance_;
class TransferRangeLeaderResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransferRangeLeaderResponse>
     _instance;
} _TransferRangeLeaderResponse_default_instance_;
class GetPeerInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoRequest>
     _instance;
} _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoResponse>
     _instance;
} _GetPeerInfoResponse_default_instance_;
class UpdateRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpdateRangeRequest>
     _instance;
} _UpdateRangeRequest_default_instance_;
class UpdateRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpdateRangeResponse>
     _instance;
} _UpdateRangeResponse_default_instance_;
class ReplaceRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReplaceRangeRequest>
     _instance;
} _ReplaceRangeRequest_default_instance_;
class ReplaceRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReplaceRangeResponse>
     _instance;
} _ReplaceRangeResponse_default_instance_;
class SetNodeLogLevelRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetNodeLogLevelRequest>
     _instance;
} _SetNodeLogLevelRequest_default_instance_;
class SetNodeLogLevelResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetNodeLogLevelResponse>
     _instance;
} _SetNodeLogLevelResponse_default_instance_;
class OfflineRangeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OfflineRangeRequest>
     _instance;
} _OfflineRangeRequest_default_instance_;
class OfflineRangeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OfflineRangeResponse>
     _instance;
} _OfflineRangeResponse_default_instance_;

namespace protobuf_schpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeRequest, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRangeResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, peer_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderRequest, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRangeLeaderResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, commit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRangeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRangeRequest, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRangeResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeRequest, old_range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeRequest, new_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRangeResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodeLogLevelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodeLogLevelRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodeLogLevelRequest, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodeLogLevelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodeLogLevelResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRangeRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRangeRequest, rangeid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineRangeResponse, header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RequestHeader)},
  { 6, -1, sizeof(ResponseHeader)},
  { 13, -1, sizeof(CreateRangeRequest)},
  { 20, -1, sizeof(CreateRangeResponse)},
  { 26, -1, sizeof(DeleteRangeRequest)},
  { 34, -1, sizeof(DeleteRangeResponse)},
  { 40, -1, sizeof(TransferRangeLeaderRequest)},
  { 47, -1, sizeof(TransferRangeLeaderResponse)},
  { 53, -1, sizeof(GetPeerInfoRequest)},
  { 60, -1, sizeof(GetPeerInfoResponse)},
  { 70, -1, sizeof(UpdateRangeRequest)},
  { 77, -1, sizeof(UpdateRangeResponse)},
  { 83, -1, sizeof(ReplaceRangeRequest)},
  { 91, -1, sizeof(ReplaceRangeResponse)},
  { 97, -1, sizeof(SetNodeLogLevelRequest)},
  { 104, -1, sizeof(SetNodeLogLevelResponse)},
  { 110, -1, sizeof(OfflineRangeRequest)},
  { 117, -1, sizeof(OfflineRangeResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferRangeLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferRangeLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplaceRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplaceRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNodeLogLevelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNodeLogLevelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OfflineRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OfflineRangeResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "schpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  ::errorpb::protobuf_errorpb_2eproto::InitDefaults();
  _RequestHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestHeader_default_instance_);_ResponseHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseHeader_default_instance_);_CreateRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateRangeRequest_default_instance_);_CreateRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateRangeResponse_default_instance_);_DeleteRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteRangeRequest_default_instance_);_DeleteRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteRangeResponse_default_instance_);_TransferRangeLeaderRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransferRangeLeaderRequest_default_instance_);_TransferRangeLeaderResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransferRangeLeaderResponse_default_instance_);_GetPeerInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPeerInfoRequest_default_instance_);_GetPeerInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetPeerInfoResponse_default_instance_);_UpdateRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpdateRangeRequest_default_instance_);_UpdateRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpdateRangeResponse_default_instance_);_ReplaceRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReplaceRangeRequest_default_instance_);_ReplaceRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReplaceRangeResponse_default_instance_);_SetNodeLogLevelRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetNodeLogLevelRequest_default_instance_);_SetNodeLogLevelResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetNodeLogLevelResponse_default_instance_);_OfflineRangeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OfflineRangeRequest_default_instance_);_OfflineRangeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OfflineRangeResponse_default_instance_);_ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  _CreateRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _CreateRangeRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _CreateRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _DeleteRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _DeleteRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _TransferRangeLeaderRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _TransferRangeLeaderResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _GetPeerInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _GetPeerInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _GetPeerInfoResponse_default_instance_._instance.get_mutable()->replica_ = const_cast< ::metapb::Replica*>(
      ::metapb::Replica::internal_default_instance());
  _UpdateRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _UpdateRangeRequest_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _UpdateRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _ReplaceRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _ReplaceRangeRequest_default_instance_._instance.get_mutable()->new_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _ReplaceRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _SetNodeLogLevelRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _SetNodeLogLevelResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
  _OfflineRangeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::RequestHeader*>(
      ::schpb::RequestHeader::internal_default_instance());
  _OfflineRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schpb::ResponseHeader*>(
      ::schpb::ResponseHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013schpb.proto\022\005schpb\032\014metapb.proto\032\rerro"
      "rpb.proto\"#\n\rRequestHeader\022\022\n\ncluster_id"
      "\030\001 \001(\004\"C\n\016ResponseHeader\022\022\n\ncluster_id\030\001"
      " \001(\004\022\035\n\005error\030\002 \001(\0132\016.errorpb.Error\"X\n\022C"
      "reateRangeRequest\022$\n\006header\030\001 \001(\0132\024.schp"
      "b.RequestHeader\022\034\n\005range\030\002 \001(\0132\r.metapb."
      "Range\"<\n\023CreateRangeResponse\022%\n\006header\030\001"
      " \001(\0132\025.schpb.ResponseHeader\"]\n\022DeleteRan"
      "geRequest\022$\n\006header\030\001 \001(\0132\024.schpb.Reques"
      "tHeader\022\020\n\010range_id\030\002 \001(\004\022\017\n\007peer_id\030\003 \001"
      "(\004\"<\n\023DeleteRangeResponse\022%\n\006header\030\001 \001("
      "\0132\025.schpb.ResponseHeader\"T\n\032TransferRang"
      "eLeaderRequest\022$\n\006header\030\001 \001(\0132\024.schpb.R"
      "equestHeader\022\020\n\010range_id\030\002 \001(\004\"D\n\033Transf"
      "erRangeLeaderResponse\022%\n\006header\030\001 \001(\0132\025."
      "schpb.ResponseHeader\"L\n\022GetPeerInfoReque"
      "st\022$\n\006header\030\001 \001(\0132\024.schpb.RequestHeader"
      "\022\020\n\010range_id\030\002 \001(\004\"\213\001\n\023GetPeerInfoRespon"
      "se\022%\n\006header\030\001 \001(\0132\025.schpb.ResponseHeade"
      "r\022 \n\007replica\030\002 \001(\0132\017.metapb.Replica\022\r\n\005i"
      "ndex\030\003 \001(\004\022\014\n\004term\030\004 \001(\004\022\016\n\006commit\030\005 \001(\004"
      "\"X\n\022UpdateRangeRequest\022$\n\006header\030\001 \001(\0132\024"
      ".schpb.RequestHeader\022\034\n\005range\030\002 \001(\0132\r.me"
      "tapb.Range\"<\n\023UpdateRangeResponse\022%\n\006hea"
      "der\030\001 \001(\0132\025.schpb.ResponseHeader\"s\n\023Repl"
      "aceRangeRequest\022$\n\006header\030\001 \001(\0132\024.schpb."
      "RequestHeader\022\024\n\014old_range_id\030\002 \001(\004\022 \n\tn"
      "ew_range\030\003 \001(\0132\r.metapb.Range\"=\n\024Replace"
      "RangeResponse\022%\n\006header\030\001 \001(\0132\025.schpb.Re"
      "sponseHeader\"M\n\026SetNodeLogLevelRequest\022$"
      "\n\006header\030\001 \001(\0132\024.schpb.RequestHeader\022\r\n\005"
      "level\030\002 \001(\t\"@\n\027SetNodeLogLevelResponse\022%"
      "\n\006header\030\001 \001(\0132\025.schpb.ResponseHeader\"L\n"
      "\023OfflineRangeRequest\022$\n\006header\030\001 \001(\0132\024.s"
      "chpb.RequestHeader\022\017\n\007rangeId\030\002 \001(\004\"=\n\024O"
      "fflineRangeResponse\022%\n\006header\030\001 \001(\0132\025.sc"
      "hpb.ResponseHeaderb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
  ::errorpb::protobuf_errorpb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_schpb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:schpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:schpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.RequestHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// uint64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:schpb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.RequestHeader.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::errorpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:schpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:schpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .errorpb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .errorpb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.ResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .errorpb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::errorpb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:schpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.ResponseHeader.cluster_id)
}

// .errorpb.Error error = 2;
bool ResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::errorpb::Error& ResponseHeader::error() const {
  const ::errorpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:schpb.ResponseHeader.error)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::Error*>(
      &::errorpb::_Error_default_instance_);
}
::errorpb::Error* ResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:schpb.ResponseHeader.error)
  return error_;
}
::errorpb::Error* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:schpb.ResponseHeader.error)
  
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_error(::errorpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.ResponseHeader.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRangeRequest::kHeaderFieldNumber;
const int CreateRangeRequest::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRangeRequest::CreateRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.CreateRangeRequest)
}
CreateRangeRequest::CreateRangeRequest(const CreateRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.CreateRangeRequest)
}

void CreateRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_));
  _cached_size_ = 0;
}

CreateRangeRequest::~CreateRangeRequest() {
  // @@protoc_insertion_point(destructor:schpb.CreateRangeRequest)
  SharedDtor();
}

void CreateRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void CreateRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRangeRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRangeRequest& CreateRangeRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRangeRequest* CreateRangeRequest::New(::google::protobuf::Arena* arena) const {
  CreateRangeRequest* n = new CreateRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.CreateRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.CreateRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.CreateRangeRequest)
  return false;
#undef DO_
}

void CreateRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.CreateRangeRequest)
}

::google::protobuf::uint8* CreateRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.CreateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.CreateRangeRequest)
  return target;
}

size_t CreateRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.CreateRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.CreateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.CreateRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.CreateRangeRequest)
    MergeFrom(*source);
  }
}

void CreateRangeRequest::MergeFrom(const CreateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.CreateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
}

void CreateRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.CreateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRangeRequest::CopyFrom(const CreateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.CreateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRangeRequest::IsInitialized() const {
  return true;
}

void CreateRangeRequest::Swap(CreateRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRangeRequest::InternalSwap(CreateRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRangeRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRangeRequest

// .schpb.RequestHeader header = 1;
bool CreateRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& CreateRangeRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.CreateRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* CreateRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.CreateRangeRequest.header)
  return header_;
}
::schpb::RequestHeader* CreateRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.CreateRangeRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateRangeRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.CreateRangeRequest.header)
}

// .metapb.Range range = 2;
bool CreateRangeRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void CreateRangeRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& CreateRangeRequest::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:schpb.CreateRangeRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* CreateRangeRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:schpb.CreateRangeRequest.range)
  return range_;
}
::metapb::Range* CreateRangeRequest::release_range() {
  // @@protoc_insertion_point(field_release:schpb.CreateRangeRequest.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void CreateRangeRequest::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.CreateRangeRequest.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRangeResponse::CreateRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.CreateRangeResponse)
}
CreateRangeResponse::CreateRangeResponse(const CreateRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.CreateRangeResponse)
}

void CreateRangeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

CreateRangeResponse::~CreateRangeResponse() {
  // @@protoc_insertion_point(destructor:schpb.CreateRangeResponse)
  SharedDtor();
}

void CreateRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CreateRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRangeResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRangeResponse& CreateRangeResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRangeResponse* CreateRangeResponse::New(::google::protobuf::Arena* arena) const {
  CreateRangeResponse* n = new CreateRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.CreateRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.CreateRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.CreateRangeResponse)
  return false;
#undef DO_
}

void CreateRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.CreateRangeResponse)
}

::google::protobuf::uint8* CreateRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.CreateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.CreateRangeResponse)
  return target;
}

size_t CreateRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.CreateRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.CreateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.CreateRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.CreateRangeResponse)
    MergeFrom(*source);
  }
}

void CreateRangeResponse::MergeFrom(const CreateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.CreateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void CreateRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.CreateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRangeResponse::CopyFrom(const CreateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.CreateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRangeResponse::IsInitialized() const {
  return true;
}

void CreateRangeResponse::Swap(CreateRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRangeResponse::InternalSwap(CreateRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRangeResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRangeResponse

// .schpb.ResponseHeader header = 1;
bool CreateRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void CreateRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& CreateRangeResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.CreateRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* CreateRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.CreateRangeResponse.header)
  return header_;
}
::schpb::ResponseHeader* CreateRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.CreateRangeResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void CreateRangeResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.CreateRangeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kHeaderFieldNumber;
const int DeleteRangeRequest::kRangeIdFieldNumber;
const int DeleteRangeRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(peer_id_));
  // @@protoc_insertion_point(copy_constructor:schpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(peer_id_));
  _cached_size_ = 0;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:schpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeRequest* DeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRangeRequest* n = new DeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(peer_id_));
  _internal_metadata_.Clear();
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &peer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->peer_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->peer_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.DeleteRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 peer_id = 3;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.DeleteRangeRequest)
    MergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.peer_id() != 0) {
    set_peer_id(from.peer_id());
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(range_id_, other->range_id_);
  swap(peer_id_, other->peer_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeRequest

// .schpb.RequestHeader header = 1;
bool DeleteRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DeleteRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& DeleteRangeRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.DeleteRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* DeleteRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.DeleteRangeRequest.header)
  return header_;
}
::schpb::RequestHeader* DeleteRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.DeleteRangeRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DeleteRangeRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.DeleteRangeRequest.header)
}

// uint64 range_id = 2;
void DeleteRangeRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeleteRangeRequest::range_id() const {
  // @@protoc_insertion_point(field_get:schpb.DeleteRangeRequest.range_id)
  return range_id_;
}
void DeleteRangeRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.DeleteRangeRequest.range_id)
}

// uint64 peer_id = 3;
void DeleteRangeRequest::clear_peer_id() {
  peer_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeleteRangeRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:schpb.DeleteRangeRequest.peer_id)
  return peer_id_;
}
void DeleteRangeRequest::set_peer_id(::google::protobuf::uint64 value) {
  
  peer_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.DeleteRangeRequest.peer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:schpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRangeResponse* DeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRangeResponse* n = new DeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.DeleteRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.DeleteRangeResponse)
    MergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeResponse

// .schpb.ResponseHeader header = 1;
bool DeleteRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DeleteRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& DeleteRangeResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.DeleteRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* DeleteRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.DeleteRangeResponse.header)
  return header_;
}
::schpb::ResponseHeader* DeleteRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.DeleteRangeResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DeleteRangeResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.DeleteRangeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferRangeLeaderRequest::kHeaderFieldNumber;
const int TransferRangeLeaderRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRangeLeaderRequest::TransferRangeLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.TransferRangeLeaderRequest)
}
TransferRangeLeaderRequest::TransferRangeLeaderRequest(const TransferRangeLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:schpb.TransferRangeLeaderRequest)
}

void TransferRangeLeaderRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

TransferRangeLeaderRequest::~TransferRangeLeaderRequest() {
  // @@protoc_insertion_point(destructor:schpb.TransferRangeLeaderRequest)
  SharedDtor();
}

void TransferRangeLeaderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TransferRangeLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRangeLeaderRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferRangeLeaderRequest& TransferRangeLeaderRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferRangeLeaderRequest* TransferRangeLeaderRequest::New(::google::protobuf::Arena* arena) const {
  TransferRangeLeaderRequest* n = new TransferRangeLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRangeLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TransferRangeLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.TransferRangeLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.TransferRangeLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.TransferRangeLeaderRequest)
  return false;
#undef DO_
}

void TransferRangeLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.TransferRangeLeaderRequest)
}

::google::protobuf::uint8* TransferRangeLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.TransferRangeLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.TransferRangeLeaderRequest)
  return target;
}

size_t TransferRangeLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.TransferRangeLeaderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRangeLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.TransferRangeLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRangeLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRangeLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.TransferRangeLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.TransferRangeLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferRangeLeaderRequest::MergeFrom(const TransferRangeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.TransferRangeLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void TransferRangeLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.TransferRangeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRangeLeaderRequest::CopyFrom(const TransferRangeLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.TransferRangeLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRangeLeaderRequest::IsInitialized() const {
  return true;
}

void TransferRangeLeaderRequest::Swap(TransferRangeLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRangeLeaderRequest::InternalSwap(TransferRangeLeaderRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRangeLeaderRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRangeLeaderRequest

// .schpb.RequestHeader header = 1;
bool TransferRangeLeaderRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TransferRangeLeaderRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& TransferRangeLeaderRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.TransferRangeLeaderRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* TransferRangeLeaderRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.TransferRangeLeaderRequest.header)
  return header_;
}
::schpb::RequestHeader* TransferRangeLeaderRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.TransferRangeLeaderRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TransferRangeLeaderRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.TransferRangeLeaderRequest.header)
}

// uint64 range_id = 2;
void TransferRangeLeaderRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TransferRangeLeaderRequest::range_id() const {
  // @@protoc_insertion_point(field_get:schpb.TransferRangeLeaderRequest.range_id)
  return range_id_;
}
void TransferRangeLeaderRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.TransferRangeLeaderRequest.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferRangeLeaderResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRangeLeaderResponse::TransferRangeLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.TransferRangeLeaderResponse)
}
TransferRangeLeaderResponse::TransferRangeLeaderResponse(const TransferRangeLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.TransferRangeLeaderResponse)
}

void TransferRangeLeaderResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

TransferRangeLeaderResponse::~TransferRangeLeaderResponse() {
  // @@protoc_insertion_point(destructor:schpb.TransferRangeLeaderResponse)
  SharedDtor();
}

void TransferRangeLeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TransferRangeLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRangeLeaderResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferRangeLeaderResponse& TransferRangeLeaderResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferRangeLeaderResponse* TransferRangeLeaderResponse::New(::google::protobuf::Arena* arena) const {
  TransferRangeLeaderResponse* n = new TransferRangeLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRangeLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool TransferRangeLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.TransferRangeLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.TransferRangeLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.TransferRangeLeaderResponse)
  return false;
#undef DO_
}

void TransferRangeLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.TransferRangeLeaderResponse)
}

::google::protobuf::uint8* TransferRangeLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.TransferRangeLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.TransferRangeLeaderResponse)
  return target;
}

size_t TransferRangeLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.TransferRangeLeaderResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRangeLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.TransferRangeLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRangeLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRangeLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.TransferRangeLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.TransferRangeLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferRangeLeaderResponse::MergeFrom(const TransferRangeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.TransferRangeLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void TransferRangeLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.TransferRangeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRangeLeaderResponse::CopyFrom(const TransferRangeLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.TransferRangeLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRangeLeaderResponse::IsInitialized() const {
  return true;
}

void TransferRangeLeaderResponse::Swap(TransferRangeLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRangeLeaderResponse::InternalSwap(TransferRangeLeaderResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRangeLeaderResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRangeLeaderResponse

// .schpb.ResponseHeader header = 1;
bool TransferRangeLeaderResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TransferRangeLeaderResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& TransferRangeLeaderResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.TransferRangeLeaderResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* TransferRangeLeaderResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.TransferRangeLeaderResponse.header)
  return header_;
}
::schpb::ResponseHeader* TransferRangeLeaderResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.TransferRangeLeaderResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TransferRangeLeaderResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.TransferRangeLeaderResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoRequest::kHeaderFieldNumber;
const int GetPeerInfoRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoRequest::GetPeerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.GetPeerInfoRequest)
}
GetPeerInfoRequest::GetPeerInfoRequest(const GetPeerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:schpb.GetPeerInfoRequest)
}

void GetPeerInfoRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

GetPeerInfoRequest::~GetPeerInfoRequest() {
  // @@protoc_insertion_point(destructor:schpb.GetPeerInfoRequest)
  SharedDtor();
}

void GetPeerInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetPeerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerInfoRequest& GetPeerInfoRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoRequest* GetPeerInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoRequest* n = new GetPeerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetPeerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.GetPeerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.GetPeerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.GetPeerInfoRequest)
  return false;
#undef DO_
}

void GetPeerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.GetPeerInfoRequest)
}

::google::protobuf::uint8* GetPeerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.GetPeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.GetPeerInfoRequest)
  return target;
}

size_t GetPeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.GetPeerInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.GetPeerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.GetPeerInfoRequest)
    MergeFrom(*source);
  }
}

void GetPeerInfoRequest::MergeFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void GetPeerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoRequest::CopyFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoRequest::IsInitialized() const {
  return true;
}

void GetPeerInfoRequest::Swap(GetPeerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoRequest::InternalSwap(GetPeerInfoRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoRequest

// .schpb.RequestHeader header = 1;
bool GetPeerInfoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetPeerInfoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& GetPeerInfoRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* GetPeerInfoRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.GetPeerInfoRequest.header)
  return header_;
}
::schpb::RequestHeader* GetPeerInfoRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.GetPeerInfoRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetPeerInfoRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.GetPeerInfoRequest.header)
}

// uint64 range_id = 2;
void GetPeerInfoRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoRequest::range_id() const {
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoRequest.range_id)
  return range_id_;
}
void GetPeerInfoRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.GetPeerInfoRequest.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoResponse::kHeaderFieldNumber;
const int GetPeerInfoResponse::kReplicaFieldNumber;
const int GetPeerInfoResponse::kIndexFieldNumber;
const int GetPeerInfoResponse::kTermFieldNumber;
const int GetPeerInfoResponse::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoResponse::GetPeerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.GetPeerInfoResponse)
}
GetPeerInfoResponse::GetPeerInfoResponse(const GetPeerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_replica()) {
    replica_ = new ::metapb::Replica(*from.replica_);
  } else {
    replica_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&index_)) + sizeof(commit_));
  // @@protoc_insertion_point(copy_constructor:schpb.GetPeerInfoResponse)
}

void GetPeerInfoResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(commit_));
  _cached_size_ = 0;
}

GetPeerInfoResponse::~GetPeerInfoResponse() {
  // @@protoc_insertion_point(destructor:schpb.GetPeerInfoResponse)
  SharedDtor();
}

void GetPeerInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete replica_;
}

void GetPeerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPeerInfoResponse& GetPeerInfoResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoResponse* GetPeerInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoResponse* n = new GetPeerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) {
    delete replica_;
  }
  replica_ = NULL;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&index_)) + sizeof(commit_));
  _internal_metadata_.Clear();
}

bool GetPeerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.GetPeerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Replica replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.GetPeerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.GetPeerInfoResponse)
  return false;
#undef DO_
}

void GetPeerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Replica replica = 2;
  if (this->has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->replica_, output);
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // uint64 term = 4;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->term(), output);
  }

  // uint64 commit = 5;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->commit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.GetPeerInfoResponse)
}

::google::protobuf::uint8* GetPeerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.GetPeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Replica replica = 2;
  if (this->has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->replica_, deterministic, target);
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // uint64 term = 4;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->term(), target);
  }

  // uint64 commit = 5;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->commit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.GetPeerInfoResponse)
  return target;
}

size_t GetPeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.GetPeerInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Replica replica = 2;
  if (this->has_replica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->replica_);
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 4;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 commit = 5;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.GetPeerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.GetPeerInfoResponse)
    MergeFrom(*source);
  }
}

void GetPeerInfoResponse::MergeFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_replica()) {
    mutable_replica()->::metapb::Replica::MergeFrom(from.replica());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void GetPeerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoResponse::CopyFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoResponse::IsInitialized() const {
  return true;
}

void GetPeerInfoResponse::Swap(GetPeerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoResponse::InternalSwap(GetPeerInfoResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(replica_, other->replica_);
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(commit_, other->commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoResponse

// .schpb.ResponseHeader header = 1;
bool GetPeerInfoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetPeerInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& GetPeerInfoResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* GetPeerInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.GetPeerInfoResponse.header)
  return header_;
}
::schpb::ResponseHeader* GetPeerInfoResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.GetPeerInfoResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetPeerInfoResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.GetPeerInfoResponse.header)
}

// .metapb.Replica replica = 2;
bool GetPeerInfoResponse::has_replica() const {
  return this != internal_default_instance() && replica_ != NULL;
}
void GetPeerInfoResponse::clear_replica() {
  if (GetArenaNoVirtual() == NULL && replica_ != NULL) delete replica_;
  replica_ = NULL;
}
const ::metapb::Replica& GetPeerInfoResponse::replica() const {
  const ::metapb::Replica* p = replica_;
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoResponse.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Replica*>(
      &::metapb::_Replica_default_instance_);
}
::metapb::Replica* GetPeerInfoResponse::mutable_replica() {
  
  if (replica_ == NULL) {
    replica_ = new ::metapb::Replica;
  }
  // @@protoc_insertion_point(field_mutable:schpb.GetPeerInfoResponse.replica)
  return replica_;
}
::metapb::Replica* GetPeerInfoResponse::release_replica() {
  // @@protoc_insertion_point(field_release:schpb.GetPeerInfoResponse.replica)
  
  ::metapb::Replica* temp = replica_;
  replica_ = NULL;
  return temp;
}
void GetPeerInfoResponse::set_allocated_replica(::metapb::Replica* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.GetPeerInfoResponse.replica)
}

// uint64 index = 3;
void GetPeerInfoResponse::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::index() const {
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoResponse.index)
  return index_;
}
void GetPeerInfoResponse::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:schpb.GetPeerInfoResponse.index)
}

// uint64 term = 4;
void GetPeerInfoResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::term() const {
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoResponse.term)
  return term_;
}
void GetPeerInfoResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:schpb.GetPeerInfoResponse.term)
}

// uint64 commit = 5;
void GetPeerInfoResponse::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetPeerInfoResponse::commit() const {
  // @@protoc_insertion_point(field_get:schpb.GetPeerInfoResponse.commit)
  return commit_;
}
void GetPeerInfoResponse::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:schpb.GetPeerInfoResponse.commit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRangeRequest::kHeaderFieldNumber;
const int UpdateRangeRequest::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRangeRequest::UpdateRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.UpdateRangeRequest)
}
UpdateRangeRequest::UpdateRangeRequest(const UpdateRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.UpdateRangeRequest)
}

void UpdateRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_));
  _cached_size_ = 0;
}

UpdateRangeRequest::~UpdateRangeRequest() {
  // @@protoc_insertion_point(destructor:schpb.UpdateRangeRequest)
  SharedDtor();
}

void UpdateRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete range_;
}

void UpdateRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRangeRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRangeRequest& UpdateRangeRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateRangeRequest* UpdateRangeRequest::New(::google::protobuf::Arena* arena) const {
  UpdateRangeRequest* n = new UpdateRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.UpdateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.UpdateRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.UpdateRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.UpdateRangeRequest)
  return false;
#undef DO_
}

void UpdateRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.UpdateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.UpdateRangeRequest)
}

::google::protobuf::uint8* UpdateRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.UpdateRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.UpdateRangeRequest)
  return target;
}

size_t UpdateRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.UpdateRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.UpdateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.UpdateRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.UpdateRangeRequest)
    MergeFrom(*source);
  }
}

void UpdateRangeRequest::MergeFrom(const UpdateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.UpdateRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
}

void UpdateRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.UpdateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRangeRequest::CopyFrom(const UpdateRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.UpdateRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRangeRequest::IsInitialized() const {
  return true;
}

void UpdateRangeRequest::Swap(UpdateRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRangeRequest::InternalSwap(UpdateRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRangeRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRangeRequest

// .schpb.RequestHeader header = 1;
bool UpdateRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& UpdateRangeRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.UpdateRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* UpdateRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.UpdateRangeRequest.header)
  return header_;
}
::schpb::RequestHeader* UpdateRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.UpdateRangeRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateRangeRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.UpdateRangeRequest.header)
}

// .metapb.Range range = 2;
bool UpdateRangeRequest::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void UpdateRangeRequest::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& UpdateRangeRequest::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:schpb.UpdateRangeRequest.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* UpdateRangeRequest::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:schpb.UpdateRangeRequest.range)
  return range_;
}
::metapb::Range* UpdateRangeRequest::release_range() {
  // @@protoc_insertion_point(field_release:schpb.UpdateRangeRequest.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void UpdateRangeRequest::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.UpdateRangeRequest.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRangeResponse::UpdateRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.UpdateRangeResponse)
}
UpdateRangeResponse::UpdateRangeResponse(const UpdateRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.UpdateRangeResponse)
}

void UpdateRangeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

UpdateRangeResponse::~UpdateRangeResponse() {
  // @@protoc_insertion_point(destructor:schpb.UpdateRangeResponse)
  SharedDtor();
}

void UpdateRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UpdateRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRangeResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRangeResponse& UpdateRangeResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateRangeResponse* UpdateRangeResponse::New(::google::protobuf::Arena* arena) const {
  UpdateRangeResponse* n = new UpdateRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.UpdateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.UpdateRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.UpdateRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.UpdateRangeResponse)
  return false;
#undef DO_
}

void UpdateRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.UpdateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.UpdateRangeResponse)
}

::google::protobuf::uint8* UpdateRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.UpdateRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.UpdateRangeResponse)
  return target;
}

size_t UpdateRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.UpdateRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.UpdateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.UpdateRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.UpdateRangeResponse)
    MergeFrom(*source);
  }
}

void UpdateRangeResponse::MergeFrom(const UpdateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.UpdateRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void UpdateRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.UpdateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRangeResponse::CopyFrom(const UpdateRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.UpdateRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRangeResponse::IsInitialized() const {
  return true;
}

void UpdateRangeResponse::Swap(UpdateRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRangeResponse::InternalSwap(UpdateRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRangeResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRangeResponse

// .schpb.ResponseHeader header = 1;
bool UpdateRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& UpdateRangeResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.UpdateRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* UpdateRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.UpdateRangeResponse.header)
  return header_;
}
::schpb::ResponseHeader* UpdateRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.UpdateRangeResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateRangeResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.UpdateRangeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceRangeRequest::kHeaderFieldNumber;
const int ReplaceRangeRequest::kOldRangeIdFieldNumber;
const int ReplaceRangeRequest::kNewRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceRangeRequest::ReplaceRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.ReplaceRangeRequest)
}
ReplaceRangeRequest::ReplaceRangeRequest(const ReplaceRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_new_range()) {
    new_range_ = new ::metapb::Range(*from.new_range_);
  } else {
    new_range_ = NULL;
  }
  old_range_id_ = from.old_range_id_;
  // @@protoc_insertion_point(copy_constructor:schpb.ReplaceRangeRequest)
}

void ReplaceRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_range_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(old_range_id_));
  _cached_size_ = 0;
}

ReplaceRangeRequest::~ReplaceRangeRequest() {
  // @@protoc_insertion_point(destructor:schpb.ReplaceRangeRequest)
  SharedDtor();
}

void ReplaceRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete new_range_;
}

void ReplaceRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceRangeRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceRangeRequest& ReplaceRangeRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplaceRangeRequest* ReplaceRangeRequest::New(::google::protobuf::Arena* arena) const {
  ReplaceRangeRequest* n = new ReplaceRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.ReplaceRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) {
    delete new_range_;
  }
  new_range_ = NULL;
  old_range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReplaceRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.ReplaceRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 old_range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range new_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.ReplaceRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.ReplaceRangeRequest)
  return false;
#undef DO_
}

void ReplaceRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.ReplaceRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 old_range_id = 2;
  if (this->old_range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->old_range_id(), output);
  }

  // .metapb.Range new_range = 3;
  if (this->has_new_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->new_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.ReplaceRangeRequest)
}

::google::protobuf::uint8* ReplaceRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.ReplaceRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 old_range_id = 2;
  if (this->old_range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->old_range_id(), target);
  }

  // .metapb.Range new_range = 3;
  if (this->has_new_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->new_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.ReplaceRangeRequest)
  return target;
}

size_t ReplaceRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.ReplaceRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .metapb.Range new_range = 3;
  if (this->has_new_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_range_);
  }

  // uint64 old_range_id = 2;
  if (this->old_range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->old_range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.ReplaceRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.ReplaceRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.ReplaceRangeRequest)
    MergeFrom(*source);
  }
}

void ReplaceRangeRequest::MergeFrom(const ReplaceRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.ReplaceRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_new_range()) {
    mutable_new_range()->::metapb::Range::MergeFrom(from.new_range());
  }
  if (from.old_range_id() != 0) {
    set_old_range_id(from.old_range_id());
  }
}

void ReplaceRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.ReplaceRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceRangeRequest::CopyFrom(const ReplaceRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.ReplaceRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceRangeRequest::IsInitialized() const {
  return true;
}

void ReplaceRangeRequest::Swap(ReplaceRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceRangeRequest::InternalSwap(ReplaceRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(new_range_, other->new_range_);
  swap(old_range_id_, other->old_range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceRangeRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplaceRangeRequest

// .schpb.RequestHeader header = 1;
bool ReplaceRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReplaceRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& ReplaceRangeRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.ReplaceRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* ReplaceRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.ReplaceRangeRequest.header)
  return header_;
}
::schpb::RequestHeader* ReplaceRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.ReplaceRangeRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReplaceRangeRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.ReplaceRangeRequest.header)
}

// uint64 old_range_id = 2;
void ReplaceRangeRequest::clear_old_range_id() {
  old_range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReplaceRangeRequest::old_range_id() const {
  // @@protoc_insertion_point(field_get:schpb.ReplaceRangeRequest.old_range_id)
  return old_range_id_;
}
void ReplaceRangeRequest::set_old_range_id(::google::protobuf::uint64 value) {
  
  old_range_id_ = value;
  // @@protoc_insertion_point(field_set:schpb.ReplaceRangeRequest.old_range_id)
}

// .metapb.Range new_range = 3;
bool ReplaceRangeRequest::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
void ReplaceRangeRequest::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
const ::metapb::Range& ReplaceRangeRequest::new_range() const {
  const ::metapb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:schpb.ReplaceRangeRequest.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* ReplaceRangeRequest::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:schpb.ReplaceRangeRequest.new_range)
  return new_range_;
}
::metapb::Range* ReplaceRangeRequest::release_new_range() {
  // @@protoc_insertion_point(field_release:schpb.ReplaceRangeRequest.new_range)
  
  ::metapb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
void ReplaceRangeRequest::set_allocated_new_range(::metapb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.ReplaceRangeRequest.new_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceRangeResponse::ReplaceRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.ReplaceRangeResponse)
}
ReplaceRangeResponse::ReplaceRangeResponse(const ReplaceRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.ReplaceRangeResponse)
}

void ReplaceRangeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReplaceRangeResponse::~ReplaceRangeResponse() {
  // @@protoc_insertion_point(destructor:schpb.ReplaceRangeResponse)
  SharedDtor();
}

void ReplaceRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReplaceRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceRangeResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceRangeResponse& ReplaceRangeResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplaceRangeResponse* ReplaceRangeResponse::New(::google::protobuf::Arena* arena) const {
  ReplaceRangeResponse* n = new ReplaceRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.ReplaceRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ReplaceRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.ReplaceRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.ReplaceRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.ReplaceRangeResponse)
  return false;
#undef DO_
}

void ReplaceRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.ReplaceRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.ReplaceRangeResponse)
}

::google::protobuf::uint8* ReplaceRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.ReplaceRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.ReplaceRangeResponse)
  return target;
}

size_t ReplaceRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.ReplaceRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.ReplaceRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.ReplaceRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.ReplaceRangeResponse)
    MergeFrom(*source);
  }
}

void ReplaceRangeResponse::MergeFrom(const ReplaceRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.ReplaceRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReplaceRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.ReplaceRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceRangeResponse::CopyFrom(const ReplaceRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.ReplaceRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceRangeResponse::IsInitialized() const {
  return true;
}

void ReplaceRangeResponse::Swap(ReplaceRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceRangeResponse::InternalSwap(ReplaceRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceRangeResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplaceRangeResponse

// .schpb.ResponseHeader header = 1;
bool ReplaceRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReplaceRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& ReplaceRangeResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.ReplaceRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* ReplaceRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.ReplaceRangeResponse.header)
  return header_;
}
::schpb::ResponseHeader* ReplaceRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.ReplaceRangeResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReplaceRangeResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.ReplaceRangeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNodeLogLevelRequest::kHeaderFieldNumber;
const int SetNodeLogLevelRequest::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNodeLogLevelRequest::SetNodeLogLevelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.SetNodeLogLevelRequest)
}
SetNodeLogLevelRequest::SetNodeLogLevelRequest(const SetNodeLogLevelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.SetNodeLogLevelRequest)
}

void SetNodeLogLevelRequest::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

SetNodeLogLevelRequest::~SetNodeLogLevelRequest() {
  // @@protoc_insertion_point(destructor:schpb.SetNodeLogLevelRequest)
  SharedDtor();
}

void SetNodeLogLevelRequest::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SetNodeLogLevelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNodeLogLevelRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNodeLogLevelRequest& SetNodeLogLevelRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNodeLogLevelRequest* SetNodeLogLevelRequest::New(::google::protobuf::Arena* arena) const {
  SetNodeLogLevelRequest* n = new SetNodeLogLevelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNodeLogLevelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.SetNodeLogLevelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool SetNodeLogLevelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.SetNodeLogLevelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schpb.SetNodeLogLevelRequest.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.SetNodeLogLevelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.SetNodeLogLevelRequest)
  return false;
#undef DO_
}

void SetNodeLogLevelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.SetNodeLogLevelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string level = 2;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schpb.SetNodeLogLevelRequest.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.SetNodeLogLevelRequest)
}

::google::protobuf::uint8* SetNodeLogLevelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.SetNodeLogLevelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string level = 2;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schpb.SetNodeLogLevelRequest.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.SetNodeLogLevelRequest)
  return target;
}

size_t SetNodeLogLevelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.SetNodeLogLevelRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 2;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNodeLogLevelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.SetNodeLogLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodeLogLevelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNodeLogLevelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.SetNodeLogLevelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.SetNodeLogLevelRequest)
    MergeFrom(*source);
  }
}

void SetNodeLogLevelRequest::MergeFrom(const SetNodeLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.SetNodeLogLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
}

void SetNodeLogLevelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.SetNodeLogLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodeLogLevelRequest::CopyFrom(const SetNodeLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.SetNodeLogLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodeLogLevelRequest::IsInitialized() const {
  return true;
}

void SetNodeLogLevelRequest::Swap(SetNodeLogLevelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNodeLogLevelRequest::InternalSwap(SetNodeLogLevelRequest* other) {
  using std::swap;
  level_.Swap(&other->level_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNodeLogLevelRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNodeLogLevelRequest

// .schpb.RequestHeader header = 1;
bool SetNodeLogLevelRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetNodeLogLevelRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& SetNodeLogLevelRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.SetNodeLogLevelRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* SetNodeLogLevelRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.SetNodeLogLevelRequest.header)
  return header_;
}
::schpb::RequestHeader* SetNodeLogLevelRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.SetNodeLogLevelRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetNodeLogLevelRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.SetNodeLogLevelRequest.header)
}

// string level = 2;
void SetNodeLogLevelRequest::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodeLogLevelRequest::level() const {
  // @@protoc_insertion_point(field_get:schpb.SetNodeLogLevelRequest.level)
  return level_.GetNoArena();
}
void SetNodeLogLevelRequest::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:schpb.SetNodeLogLevelRequest.level)
}
#if LANG_CXX11
void SetNodeLogLevelRequest::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:schpb.SetNodeLogLevelRequest.level)
}
#endif
void SetNodeLogLevelRequest::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:schpb.SetNodeLogLevelRequest.level)
}
void SetNodeLogLevelRequest::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:schpb.SetNodeLogLevelRequest.level)
}
::std::string* SetNodeLogLevelRequest::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:schpb.SetNodeLogLevelRequest.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodeLogLevelRequest::release_level() {
  // @@protoc_insertion_point(field_release:schpb.SetNodeLogLevelRequest.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodeLogLevelRequest::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:schpb.SetNodeLogLevelRequest.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNodeLogLevelResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNodeLogLevelResponse::SetNodeLogLevelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.SetNodeLogLevelResponse)
}
SetNodeLogLevelResponse::SetNodeLogLevelResponse(const SetNodeLogLevelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.SetNodeLogLevelResponse)
}

void SetNodeLogLevelResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SetNodeLogLevelResponse::~SetNodeLogLevelResponse() {
  // @@protoc_insertion_point(destructor:schpb.SetNodeLogLevelResponse)
  SharedDtor();
}

void SetNodeLogLevelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void SetNodeLogLevelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNodeLogLevelResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNodeLogLevelResponse& SetNodeLogLevelResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNodeLogLevelResponse* SetNodeLogLevelResponse::New(::google::protobuf::Arena* arena) const {
  SetNodeLogLevelResponse* n = new SetNodeLogLevelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNodeLogLevelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.SetNodeLogLevelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool SetNodeLogLevelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.SetNodeLogLevelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.SetNodeLogLevelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.SetNodeLogLevelResponse)
  return false;
#undef DO_
}

void SetNodeLogLevelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.SetNodeLogLevelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.SetNodeLogLevelResponse)
}

::google::protobuf::uint8* SetNodeLogLevelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.SetNodeLogLevelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.SetNodeLogLevelResponse)
  return target;
}

size_t SetNodeLogLevelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.SetNodeLogLevelResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNodeLogLevelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.SetNodeLogLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodeLogLevelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNodeLogLevelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.SetNodeLogLevelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.SetNodeLogLevelResponse)
    MergeFrom(*source);
  }
}

void SetNodeLogLevelResponse::MergeFrom(const SetNodeLogLevelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.SetNodeLogLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void SetNodeLogLevelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.SetNodeLogLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodeLogLevelResponse::CopyFrom(const SetNodeLogLevelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.SetNodeLogLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodeLogLevelResponse::IsInitialized() const {
  return true;
}

void SetNodeLogLevelResponse::Swap(SetNodeLogLevelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNodeLogLevelResponse::InternalSwap(SetNodeLogLevelResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNodeLogLevelResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNodeLogLevelResponse

// .schpb.ResponseHeader header = 1;
bool SetNodeLogLevelResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SetNodeLogLevelResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& SetNodeLogLevelResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.SetNodeLogLevelResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* SetNodeLogLevelResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.SetNodeLogLevelResponse.header)
  return header_;
}
::schpb::ResponseHeader* SetNodeLogLevelResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.SetNodeLogLevelResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SetNodeLogLevelResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.SetNodeLogLevelResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineRangeRequest::kHeaderFieldNumber;
const int OfflineRangeRequest::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineRangeRequest::OfflineRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.OfflineRangeRequest)
}
OfflineRangeRequest::OfflineRangeRequest(const OfflineRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  rangeid_ = from.rangeid_;
  // @@protoc_insertion_point(copy_constructor:schpb.OfflineRangeRequest)
}

void OfflineRangeRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangeid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(rangeid_));
  _cached_size_ = 0;
}

OfflineRangeRequest::~OfflineRangeRequest() {
  // @@protoc_insertion_point(destructor:schpb.OfflineRangeRequest)
  SharedDtor();
}

void OfflineRangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void OfflineRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRangeRequest::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OfflineRangeRequest& OfflineRangeRequest::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfflineRangeRequest* OfflineRangeRequest::New(::google::protobuf::Arena* arena) const {
  OfflineRangeRequest* n = new OfflineRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.OfflineRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  rangeid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool OfflineRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.OfflineRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 rangeId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rangeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.OfflineRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.OfflineRangeRequest)
  return false;
#undef DO_
}

void OfflineRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.OfflineRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // uint64 rangeId = 2;
  if (this->rangeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rangeid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.OfflineRangeRequest)
}

::google::protobuf::uint8* OfflineRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.OfflineRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // uint64 rangeId = 2;
  if (this->rangeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rangeid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.OfflineRangeRequest)
  return target;
}

size_t OfflineRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.OfflineRangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // uint64 rangeId = 2;
  if (this->rangeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rangeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.OfflineRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OfflineRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.OfflineRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.OfflineRangeRequest)
    MergeFrom(*source);
  }
}

void OfflineRangeRequest::MergeFrom(const OfflineRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.OfflineRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.rangeid() != 0) {
    set_rangeid(from.rangeid());
  }
}

void OfflineRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.OfflineRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRangeRequest::CopyFrom(const OfflineRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.OfflineRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRangeRequest::IsInitialized() const {
  return true;
}

void OfflineRangeRequest::Swap(OfflineRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineRangeRequest::InternalSwap(OfflineRangeRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(rangeid_, other->rangeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfflineRangeRequest::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineRangeRequest

// .schpb.RequestHeader header = 1;
bool OfflineRangeRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void OfflineRangeRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::RequestHeader& OfflineRangeRequest::header() const {
  const ::schpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.OfflineRangeRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::RequestHeader*>(
      &::schpb::_RequestHeader_default_instance_);
}
::schpb::RequestHeader* OfflineRangeRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.OfflineRangeRequest.header)
  return header_;
}
::schpb::RequestHeader* OfflineRangeRequest::release_header() {
  // @@protoc_insertion_point(field_release:schpb.OfflineRangeRequest.header)
  
  ::schpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void OfflineRangeRequest::set_allocated_header(::schpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.OfflineRangeRequest.header)
}

// uint64 rangeId = 2;
void OfflineRangeRequest::clear_rangeid() {
  rangeid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 OfflineRangeRequest::rangeid() const {
  // @@protoc_insertion_point(field_get:schpb.OfflineRangeRequest.rangeId)
  return rangeid_;
}
void OfflineRangeRequest::set_rangeid(::google::protobuf::uint64 value) {
  
  rangeid_ = value;
  // @@protoc_insertion_point(field_set:schpb.OfflineRangeRequest.rangeId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineRangeResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineRangeResponse::OfflineRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_schpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:schpb.OfflineRangeResponse)
}
OfflineRangeResponse::OfflineRangeResponse(const OfflineRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:schpb.OfflineRangeResponse)
}

void OfflineRangeResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

OfflineRangeResponse::~OfflineRangeResponse() {
  // @@protoc_insertion_point(destructor:schpb.OfflineRangeResponse)
  SharedDtor();
}

void OfflineRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void OfflineRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineRangeResponse::descriptor() {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OfflineRangeResponse& OfflineRangeResponse::default_instance() {
  protobuf_schpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfflineRangeResponse* OfflineRangeResponse::New(::google::protobuf::Arena* arena) const {
  OfflineRangeResponse* n = new OfflineRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schpb.OfflineRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool OfflineRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schpb.OfflineRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schpb.OfflineRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schpb.OfflineRangeResponse)
  return false;
#undef DO_
}

void OfflineRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schpb.OfflineRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schpb.OfflineRangeResponse)
}

::google::protobuf::uint8* OfflineRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schpb.OfflineRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schpb.OfflineRangeResponse)
  return target;
}

size_t OfflineRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schpb.OfflineRangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schpb.OfflineRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OfflineRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schpb.OfflineRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schpb.OfflineRangeResponse)
    MergeFrom(*source);
  }
}

void OfflineRangeResponse::MergeFrom(const OfflineRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schpb.OfflineRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schpb::ResponseHeader::MergeFrom(from.header());
  }
}

void OfflineRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schpb.OfflineRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineRangeResponse::CopyFrom(const OfflineRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schpb.OfflineRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineRangeResponse::IsInitialized() const {
  return true;
}

void OfflineRangeResponse::Swap(OfflineRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineRangeResponse::InternalSwap(OfflineRangeResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfflineRangeResponse::GetMetadata() const {
  protobuf_schpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineRangeResponse

// .schpb.ResponseHeader header = 1;
bool OfflineRangeResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void OfflineRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::schpb::ResponseHeader& OfflineRangeResponse::header() const {
  const ::schpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:schpb.OfflineRangeResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::schpb::ResponseHeader*>(
      &::schpb::_ResponseHeader_default_instance_);
}
::schpb::ResponseHeader* OfflineRangeResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::schpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:schpb.OfflineRangeResponse.header)
  return header_;
}
::schpb::ResponseHeader* OfflineRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:schpb.OfflineRangeResponse.header)
  
  ::schpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void OfflineRangeResponse::set_allocated_header(::schpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:schpb.OfflineRangeResponse.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace schpb

// @@protoc_insertion_point(global_scope)
