// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace taskpb {
class TaskRangeMergeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRangeMerge>
     _instance;
} _TaskRangeMerge_default_instance_;
class TaskRangeDeleteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRangeDelete>
     _instance;
} _TaskRangeDelete_default_instance_;
class TaskRangeLeaderTransferDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRangeLeaderTransfer>
     _instance;
} _TaskRangeLeaderTransfer_default_instance_;
class TaskRangeAddPeerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRangeAddPeer>
     _instance;
} _TaskRangeAddPeer_default_instance_;
class TaskRangeDelPeerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRangeDelPeer>
     _instance;
} _TaskRangeDelPeer_default_instance_;
class TaskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Task>
     _instance;
} _Task_default_instance_;

namespace protobuf_taskpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeMerge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeDelete, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeLeaderTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeLeaderTransfer, exp_leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeAddPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeAddPeer, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeDelPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRangeDelPeer, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, range_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, range_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, range_leader_transfer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, range_add_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, range_del_peer_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(TaskRangeMerge)},
  { 5, -1, sizeof(TaskRangeDelete)},
  { 11, -1, sizeof(TaskRangeLeaderTransfer)},
  { 17, -1, sizeof(TaskRangeAddPeer)},
  { 23, -1, sizeof(TaskRangeDelPeer)},
  { 29, -1, sizeof(Task)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRangeMerge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRangeDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRangeLeaderTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRangeAddPeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRangeDelPeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Task_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "taskpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  _TaskRangeMerge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRangeMerge_default_instance_);_TaskRangeDelete_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRangeDelete_default_instance_);_TaskRangeLeaderTransfer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRangeLeaderTransfer_default_instance_);_TaskRangeAddPeer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRangeAddPeer_default_instance_);_TaskRangeDelPeer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRangeDelPeer_default_instance_);_Task_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Task_default_instance_);_TaskRangeLeaderTransfer_default_instance_._instance.get_mutable()->exp_leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _TaskRangeAddPeer_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _TaskRangeDelPeer_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _Task_default_instance_._instance.get_mutable()->range_merge_ = const_cast< ::taskpb::TaskRangeMerge*>(
      ::taskpb::TaskRangeMerge::internal_default_instance());
  _Task_default_instance_._instance.get_mutable()->range_delete_ = const_cast< ::taskpb::TaskRangeDelete*>(
      ::taskpb::TaskRangeDelete::internal_default_instance());
  _Task_default_instance_._instance.get_mutable()->range_leader_transfer_ = const_cast< ::taskpb::TaskRangeLeaderTransfer*>(
      ::taskpb::TaskRangeLeaderTransfer::internal_default_instance());
  _Task_default_instance_._instance.get_mutable()->range_add_peer_ = const_cast< ::taskpb::TaskRangeAddPeer*>(
      ::taskpb::TaskRangeAddPeer::internal_default_instance());
  _Task_default_instance_._instance.get_mutable()->range_del_peer_ = const_cast< ::taskpb::TaskRangeDelPeer*>(
      ::taskpb::TaskRangeDelPeer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014taskpb.proto\022\006taskpb\032\014metapb.proto\"\020\n\016"
      "TaskRangeMerge\"#\n\017TaskRangeDelete\022\020\n\010ran"
      "ge_id\030\001 \001(\004\";\n\027TaskRangeLeaderTransfer\022 "
      "\n\nexp_leader\030\001 \001(\0132\014.metapb.Peer\".\n\020Task"
      "RangeAddPeer\022\032\n\004peer\030\001 \001(\0132\014.metapb.Peer"
      "\".\n\020TaskRangeDelPeer\022\032\n\004peer\030\001 \001(\0132\014.met"
      "apb.Peer\"\246\002\n\004Task\022\036\n\004type\030\001 \001(\0162\020.taskpb"
      ".TaskType\022+\n\013range_merge\030\002 \001(\0132\026.taskpb."
      "TaskRangeMerge\022-\n\014range_delete\030\003 \001(\0132\027.t"
      "askpb.TaskRangeDelete\022>\n\025range_leader_tr"
      "ansfer\030\004 \001(\0132\037.taskpb.TaskRangeLeaderTra"
      "nsfer\0220\n\016range_add_peer\030\005 \001(\0132\030.taskpb.T"
      "askRangeAddPeer\0220\n\016range_del_peer\030\006 \001(\0132"
      "\030.taskpb.TaskRangeDelPeer*w\n\010TaskType\022\r\n"
      "\tEmptyTask\020\000\022\016\n\nRangeMerge\020\001\022\017\n\013RangeDel"
      "ete\020\002\022\027\n\023RangeLeaderTransfer\020\003\022\020\n\014RangeA"
      "ddPeer\020\004\022\020\n\014RangeDelPeer\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 674);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_taskpb_2eproto

const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_enum_descriptors[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRangeMerge::TaskRangeMerge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.TaskRangeMerge)
}
TaskRangeMerge::TaskRangeMerge(const TaskRangeMerge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:taskpb.TaskRangeMerge)
}

void TaskRangeMerge::SharedCtor() {
  _cached_size_ = 0;
}

TaskRangeMerge::~TaskRangeMerge() {
  // @@protoc_insertion_point(destructor:taskpb.TaskRangeMerge)
  SharedDtor();
}

void TaskRangeMerge::SharedDtor() {
}

void TaskRangeMerge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRangeMerge::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRangeMerge& TaskRangeMerge::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRangeMerge* TaskRangeMerge::New(::google::protobuf::Arena* arena) const {
  TaskRangeMerge* n = new TaskRangeMerge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRangeMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.TaskRangeMerge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TaskRangeMerge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.TaskRangeMerge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.TaskRangeMerge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.TaskRangeMerge)
  return false;
#undef DO_
}

void TaskRangeMerge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.TaskRangeMerge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.TaskRangeMerge)
}

::google::protobuf::uint8* TaskRangeMerge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.TaskRangeMerge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.TaskRangeMerge)
  return target;
}

size_t TaskRangeMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.TaskRangeMerge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRangeMerge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.TaskRangeMerge)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRangeMerge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRangeMerge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.TaskRangeMerge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.TaskRangeMerge)
    MergeFrom(*source);
  }
}

void TaskRangeMerge::MergeFrom(const TaskRangeMerge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.TaskRangeMerge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskRangeMerge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.TaskRangeMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRangeMerge::CopyFrom(const TaskRangeMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.TaskRangeMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRangeMerge::IsInitialized() const {
  return true;
}

void TaskRangeMerge::Swap(TaskRangeMerge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRangeMerge::InternalSwap(TaskRangeMerge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRangeMerge::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRangeMerge

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRangeDelete::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRangeDelete::TaskRangeDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.TaskRangeDelete)
}
TaskRangeDelete::TaskRangeDelete(const TaskRangeDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:taskpb.TaskRangeDelete)
}

void TaskRangeDelete::SharedCtor() {
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TaskRangeDelete::~TaskRangeDelete() {
  // @@protoc_insertion_point(destructor:taskpb.TaskRangeDelete)
  SharedDtor();
}

void TaskRangeDelete::SharedDtor() {
}

void TaskRangeDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRangeDelete::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRangeDelete& TaskRangeDelete::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRangeDelete* TaskRangeDelete::New(::google::protobuf::Arena* arena) const {
  TaskRangeDelete* n = new TaskRangeDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRangeDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.TaskRangeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TaskRangeDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.TaskRangeDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.TaskRangeDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.TaskRangeDelete)
  return false;
#undef DO_
}

void TaskRangeDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.TaskRangeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.TaskRangeDelete)
}

::google::protobuf::uint8* TaskRangeDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.TaskRangeDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.TaskRangeDelete)
  return target;
}

size_t TaskRangeDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.TaskRangeDelete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRangeDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.TaskRangeDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRangeDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRangeDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.TaskRangeDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.TaskRangeDelete)
    MergeFrom(*source);
  }
}

void TaskRangeDelete::MergeFrom(const TaskRangeDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.TaskRangeDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void TaskRangeDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.TaskRangeDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRangeDelete::CopyFrom(const TaskRangeDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.TaskRangeDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRangeDelete::IsInitialized() const {
  return true;
}

void TaskRangeDelete::Swap(TaskRangeDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRangeDelete::InternalSwap(TaskRangeDelete* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRangeDelete::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRangeDelete

// uint64 range_id = 1;
void TaskRangeDelete::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskRangeDelete::range_id() const {
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeDelete.range_id)
  return range_id_;
}
void TaskRangeDelete::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:taskpb.TaskRangeDelete.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRangeLeaderTransfer::kExpLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRangeLeaderTransfer::TaskRangeLeaderTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.TaskRangeLeaderTransfer)
}
TaskRangeLeaderTransfer::TaskRangeLeaderTransfer(const TaskRangeLeaderTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exp_leader()) {
    exp_leader_ = new ::metapb::Peer(*from.exp_leader_);
  } else {
    exp_leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:taskpb.TaskRangeLeaderTransfer)
}

void TaskRangeLeaderTransfer::SharedCtor() {
  exp_leader_ = NULL;
  _cached_size_ = 0;
}

TaskRangeLeaderTransfer::~TaskRangeLeaderTransfer() {
  // @@protoc_insertion_point(destructor:taskpb.TaskRangeLeaderTransfer)
  SharedDtor();
}

void TaskRangeLeaderTransfer::SharedDtor() {
  if (this != internal_default_instance()) delete exp_leader_;
}

void TaskRangeLeaderTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRangeLeaderTransfer::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRangeLeaderTransfer& TaskRangeLeaderTransfer::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRangeLeaderTransfer* TaskRangeLeaderTransfer::New(::google::protobuf::Arena* arena) const {
  TaskRangeLeaderTransfer* n = new TaskRangeLeaderTransfer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRangeLeaderTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.TaskRangeLeaderTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && exp_leader_ != NULL) {
    delete exp_leader_;
  }
  exp_leader_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskRangeLeaderTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.TaskRangeLeaderTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer exp_leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.TaskRangeLeaderTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.TaskRangeLeaderTransfer)
  return false;
#undef DO_
}

void TaskRangeLeaderTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.TaskRangeLeaderTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer exp_leader = 1;
  if (this->has_exp_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->exp_leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.TaskRangeLeaderTransfer)
}

::google::protobuf::uint8* TaskRangeLeaderTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.TaskRangeLeaderTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer exp_leader = 1;
  if (this->has_exp_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->exp_leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.TaskRangeLeaderTransfer)
  return target;
}

size_t TaskRangeLeaderTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.TaskRangeLeaderTransfer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Peer exp_leader = 1;
  if (this->has_exp_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exp_leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRangeLeaderTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.TaskRangeLeaderTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRangeLeaderTransfer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRangeLeaderTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.TaskRangeLeaderTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.TaskRangeLeaderTransfer)
    MergeFrom(*source);
  }
}

void TaskRangeLeaderTransfer::MergeFrom(const TaskRangeLeaderTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.TaskRangeLeaderTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exp_leader()) {
    mutable_exp_leader()->::metapb::Peer::MergeFrom(from.exp_leader());
  }
}

void TaskRangeLeaderTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.TaskRangeLeaderTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRangeLeaderTransfer::CopyFrom(const TaskRangeLeaderTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.TaskRangeLeaderTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRangeLeaderTransfer::IsInitialized() const {
  return true;
}

void TaskRangeLeaderTransfer::Swap(TaskRangeLeaderTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRangeLeaderTransfer::InternalSwap(TaskRangeLeaderTransfer* other) {
  using std::swap;
  swap(exp_leader_, other->exp_leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRangeLeaderTransfer::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRangeLeaderTransfer

// .metapb.Peer exp_leader = 1;
bool TaskRangeLeaderTransfer::has_exp_leader() const {
  return this != internal_default_instance() && exp_leader_ != NULL;
}
void TaskRangeLeaderTransfer::clear_exp_leader() {
  if (GetArenaNoVirtual() == NULL && exp_leader_ != NULL) delete exp_leader_;
  exp_leader_ = NULL;
}
const ::metapb::Peer& TaskRangeLeaderTransfer::exp_leader() const {
  const ::metapb::Peer* p = exp_leader_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeLeaderTransfer.exp_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* TaskRangeLeaderTransfer::mutable_exp_leader() {
  
  if (exp_leader_ == NULL) {
    exp_leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeLeaderTransfer.exp_leader)
  return exp_leader_;
}
::metapb::Peer* TaskRangeLeaderTransfer::release_exp_leader() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeLeaderTransfer.exp_leader)
  
  ::metapb::Peer* temp = exp_leader_;
  exp_leader_ = NULL;
  return temp;
}
void TaskRangeLeaderTransfer::set_allocated_exp_leader(::metapb::Peer* exp_leader) {
  delete exp_leader_;
  exp_leader_ = exp_leader;
  if (exp_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeLeaderTransfer.exp_leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRangeAddPeer::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRangeAddPeer::TaskRangeAddPeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.TaskRangeAddPeer)
}
TaskRangeAddPeer::TaskRangeAddPeer(const TaskRangeAddPeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:taskpb.TaskRangeAddPeer)
}

void TaskRangeAddPeer::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

TaskRangeAddPeer::~TaskRangeAddPeer() {
  // @@protoc_insertion_point(destructor:taskpb.TaskRangeAddPeer)
  SharedDtor();
}

void TaskRangeAddPeer::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TaskRangeAddPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRangeAddPeer::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRangeAddPeer& TaskRangeAddPeer::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRangeAddPeer* TaskRangeAddPeer::New(::google::protobuf::Arena* arena) const {
  TaskRangeAddPeer* n = new TaskRangeAddPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRangeAddPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.TaskRangeAddPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskRangeAddPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.TaskRangeAddPeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.TaskRangeAddPeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.TaskRangeAddPeer)
  return false;
#undef DO_
}

void TaskRangeAddPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.TaskRangeAddPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.TaskRangeAddPeer)
}

::google::protobuf::uint8* TaskRangeAddPeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.TaskRangeAddPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.TaskRangeAddPeer)
  return target;
}

size_t TaskRangeAddPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.TaskRangeAddPeer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRangeAddPeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.TaskRangeAddPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRangeAddPeer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRangeAddPeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.TaskRangeAddPeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.TaskRangeAddPeer)
    MergeFrom(*source);
  }
}

void TaskRangeAddPeer::MergeFrom(const TaskRangeAddPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.TaskRangeAddPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TaskRangeAddPeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.TaskRangeAddPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRangeAddPeer::CopyFrom(const TaskRangeAddPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.TaskRangeAddPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRangeAddPeer::IsInitialized() const {
  return true;
}

void TaskRangeAddPeer::Swap(TaskRangeAddPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRangeAddPeer::InternalSwap(TaskRangeAddPeer* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRangeAddPeer::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRangeAddPeer

// .metapb.Peer peer = 1;
bool TaskRangeAddPeer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void TaskRangeAddPeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& TaskRangeAddPeer::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeAddPeer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* TaskRangeAddPeer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeAddPeer.peer)
  return peer_;
}
::metapb::Peer* TaskRangeAddPeer::release_peer() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeAddPeer.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TaskRangeAddPeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeAddPeer.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRangeDelPeer::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRangeDelPeer::TaskRangeDelPeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.TaskRangeDelPeer)
}
TaskRangeDelPeer::TaskRangeDelPeer(const TaskRangeDelPeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:taskpb.TaskRangeDelPeer)
}

void TaskRangeDelPeer::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

TaskRangeDelPeer::~TaskRangeDelPeer() {
  // @@protoc_insertion_point(destructor:taskpb.TaskRangeDelPeer)
  SharedDtor();
}

void TaskRangeDelPeer::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TaskRangeDelPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRangeDelPeer::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRangeDelPeer& TaskRangeDelPeer::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRangeDelPeer* TaskRangeDelPeer::New(::google::protobuf::Arena* arena) const {
  TaskRangeDelPeer* n = new TaskRangeDelPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRangeDelPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.TaskRangeDelPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskRangeDelPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.TaskRangeDelPeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.TaskRangeDelPeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.TaskRangeDelPeer)
  return false;
#undef DO_
}

void TaskRangeDelPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.TaskRangeDelPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.TaskRangeDelPeer)
}

::google::protobuf::uint8* TaskRangeDelPeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.TaskRangeDelPeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.TaskRangeDelPeer)
  return target;
}

size_t TaskRangeDelPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.TaskRangeDelPeer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRangeDelPeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.TaskRangeDelPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRangeDelPeer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRangeDelPeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.TaskRangeDelPeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.TaskRangeDelPeer)
    MergeFrom(*source);
  }
}

void TaskRangeDelPeer::MergeFrom(const TaskRangeDelPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.TaskRangeDelPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TaskRangeDelPeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.TaskRangeDelPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRangeDelPeer::CopyFrom(const TaskRangeDelPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.TaskRangeDelPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRangeDelPeer::IsInitialized() const {
  return true;
}

void TaskRangeDelPeer::Swap(TaskRangeDelPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRangeDelPeer::InternalSwap(TaskRangeDelPeer* other) {
  using std::swap;
  swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRangeDelPeer::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRangeDelPeer

// .metapb.Peer peer = 1;
bool TaskRangeDelPeer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void TaskRangeDelPeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& TaskRangeDelPeer::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:taskpb.TaskRangeDelPeer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* TaskRangeDelPeer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.TaskRangeDelPeer.peer)
  return peer_;
}
::metapb::Peer* TaskRangeDelPeer::release_peer() {
  // @@protoc_insertion_point(field_release:taskpb.TaskRangeDelPeer.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TaskRangeDelPeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.TaskRangeDelPeer.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kTypeFieldNumber;
const int Task::kRangeMergeFieldNumber;
const int Task::kRangeDeleteFieldNumber;
const int Task::kRangeLeaderTransferFieldNumber;
const int Task::kRangeAddPeerFieldNumber;
const int Task::kRangeDelPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:taskpb.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range_merge()) {
    range_merge_ = new ::taskpb::TaskRangeMerge(*from.range_merge_);
  } else {
    range_merge_ = NULL;
  }
  if (from.has_range_delete()) {
    range_delete_ = new ::taskpb::TaskRangeDelete(*from.range_delete_);
  } else {
    range_delete_ = NULL;
  }
  if (from.has_range_leader_transfer()) {
    range_leader_transfer_ = new ::taskpb::TaskRangeLeaderTransfer(*from.range_leader_transfer_);
  } else {
    range_leader_transfer_ = NULL;
  }
  if (from.has_range_add_peer()) {
    range_add_peer_ = new ::taskpb::TaskRangeAddPeer(*from.range_add_peer_);
  } else {
    range_add_peer_ = NULL;
  }
  if (from.has_range_del_peer()) {
    range_del_peer_ = new ::taskpb::TaskRangeDelPeer(*from.range_del_peer_);
  } else {
    range_del_peer_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:taskpb.Task)
}

void Task::SharedCtor() {
  ::memset(&range_merge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&range_merge_)) + sizeof(type_));
  _cached_size_ = 0;
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:taskpb.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != internal_default_instance()) delete range_merge_;
  if (this != internal_default_instance()) delete range_delete_;
  if (this != internal_default_instance()) delete range_leader_transfer_;
  if (this != internal_default_instance()) delete range_add_peer_;
  if (this != internal_default_instance()) delete range_del_peer_;
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Task& Task::default_instance() {
  protobuf_taskpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:taskpb.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_merge_ != NULL) {
    delete range_merge_;
  }
  range_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_delete_ != NULL) {
    delete range_delete_;
  }
  range_delete_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_leader_transfer_ != NULL) {
    delete range_leader_transfer_;
  }
  range_leader_transfer_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_add_peer_ != NULL) {
    delete range_add_peer_;
  }
  range_add_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_del_peer_ != NULL) {
    delete range_del_peer_;
  }
  range_del_peer_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:taskpb.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .taskpb.TaskType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::taskpb::TaskType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.TaskRangeMerge range_merge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.TaskRangeDelete range_delete = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_delete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_leader_transfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.TaskRangeAddPeer range_add_peer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_add_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.TaskRangeDelPeer range_del_peer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_del_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:taskpb.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:taskpb.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:taskpb.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .taskpb.TaskType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .taskpb.TaskRangeMerge range_merge = 2;
  if (this->has_range_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_merge_, output);
  }

  // .taskpb.TaskRangeDelete range_delete = 3;
  if (this->has_range_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_delete_, output);
  }

  // .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
  if (this->has_range_leader_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->range_leader_transfer_, output);
  }

  // .taskpb.TaskRangeAddPeer range_add_peer = 5;
  if (this->has_range_add_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->range_add_peer_, output);
  }

  // .taskpb.TaskRangeDelPeer range_del_peer = 6;
  if (this->has_range_del_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->range_del_peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:taskpb.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:taskpb.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .taskpb.TaskType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .taskpb.TaskRangeMerge range_merge = 2;
  if (this->has_range_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_merge_, deterministic, target);
  }

  // .taskpb.TaskRangeDelete range_delete = 3;
  if (this->has_range_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_delete_, deterministic, target);
  }

  // .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
  if (this->has_range_leader_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->range_leader_transfer_, deterministic, target);
  }

  // .taskpb.TaskRangeAddPeer range_add_peer = 5;
  if (this->has_range_add_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->range_add_peer_, deterministic, target);
  }

  // .taskpb.TaskRangeDelPeer range_del_peer = 6;
  if (this->has_range_del_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->range_del_peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskpb.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskpb.Task)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .taskpb.TaskRangeMerge range_merge = 2;
  if (this->has_range_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_merge_);
  }

  // .taskpb.TaskRangeDelete range_delete = 3;
  if (this->has_range_delete()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_delete_);
  }

  // .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
  if (this->has_range_leader_transfer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_leader_transfer_);
  }

  // .taskpb.TaskRangeAddPeer range_add_peer = 5;
  if (this->has_range_add_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_add_peer_);
  }

  // .taskpb.TaskRangeDelPeer range_del_peer = 6;
  if (this->has_range_del_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_del_peer_);
  }

  // .taskpb.TaskType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:taskpb.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:taskpb.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:taskpb.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taskpb.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range_merge()) {
    mutable_range_merge()->::taskpb::TaskRangeMerge::MergeFrom(from.range_merge());
  }
  if (from.has_range_delete()) {
    mutable_range_delete()->::taskpb::TaskRangeDelete::MergeFrom(from.range_delete());
  }
  if (from.has_range_leader_transfer()) {
    mutable_range_leader_transfer()->::taskpb::TaskRangeLeaderTransfer::MergeFrom(from.range_leader_transfer());
  }
  if (from.has_range_add_peer()) {
    mutable_range_add_peer()->::taskpb::TaskRangeAddPeer::MergeFrom(from.range_add_peer());
  }
  if (from.has_range_del_peer()) {
    mutable_range_del_peer()->::taskpb::TaskRangeDelPeer::MergeFrom(from.range_del_peer());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:taskpb.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskpb.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  swap(range_merge_, other->range_merge_);
  swap(range_delete_, other->range_delete_);
  swap(range_leader_transfer_, other->range_leader_transfer_);
  swap(range_add_peer_, other->range_add_peer_);
  swap(range_del_peer_, other->range_del_peer_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_taskpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_taskpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// .taskpb.TaskType type = 1;
void Task::clear_type() {
  type_ = 0;
}
::taskpb::TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:taskpb.Task.type)
  return static_cast< ::taskpb::TaskType >(type_);
}
void Task::set_type(::taskpb::TaskType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:taskpb.Task.type)
}

// .taskpb.TaskRangeMerge range_merge = 2;
bool Task::has_range_merge() const {
  return this != internal_default_instance() && range_merge_ != NULL;
}
void Task::clear_range_merge() {
  if (GetArenaNoVirtual() == NULL && range_merge_ != NULL) delete range_merge_;
  range_merge_ = NULL;
}
const ::taskpb::TaskRangeMerge& Task::range_merge() const {
  const ::taskpb::TaskRangeMerge* p = range_merge_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeMerge*>(
      &::taskpb::_TaskRangeMerge_default_instance_);
}
::taskpb::TaskRangeMerge* Task::mutable_range_merge() {
  
  if (range_merge_ == NULL) {
    range_merge_ = new ::taskpb::TaskRangeMerge;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_merge)
  return range_merge_;
}
::taskpb::TaskRangeMerge* Task::release_range_merge() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_merge)
  
  ::taskpb::TaskRangeMerge* temp = range_merge_;
  range_merge_ = NULL;
  return temp;
}
void Task::set_allocated_range_merge(::taskpb::TaskRangeMerge* range_merge) {
  delete range_merge_;
  range_merge_ = range_merge;
  if (range_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_merge)
}

// .taskpb.TaskRangeDelete range_delete = 3;
bool Task::has_range_delete() const {
  return this != internal_default_instance() && range_delete_ != NULL;
}
void Task::clear_range_delete() {
  if (GetArenaNoVirtual() == NULL && range_delete_ != NULL) delete range_delete_;
  range_delete_ = NULL;
}
const ::taskpb::TaskRangeDelete& Task::range_delete() const {
  const ::taskpb::TaskRangeDelete* p = range_delete_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_delete)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeDelete*>(
      &::taskpb::_TaskRangeDelete_default_instance_);
}
::taskpb::TaskRangeDelete* Task::mutable_range_delete() {
  
  if (range_delete_ == NULL) {
    range_delete_ = new ::taskpb::TaskRangeDelete;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_delete)
  return range_delete_;
}
::taskpb::TaskRangeDelete* Task::release_range_delete() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_delete)
  
  ::taskpb::TaskRangeDelete* temp = range_delete_;
  range_delete_ = NULL;
  return temp;
}
void Task::set_allocated_range_delete(::taskpb::TaskRangeDelete* range_delete) {
  delete range_delete_;
  range_delete_ = range_delete;
  if (range_delete) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_delete)
}

// .taskpb.TaskRangeLeaderTransfer range_leader_transfer = 4;
bool Task::has_range_leader_transfer() const {
  return this != internal_default_instance() && range_leader_transfer_ != NULL;
}
void Task::clear_range_leader_transfer() {
  if (GetArenaNoVirtual() == NULL && range_leader_transfer_ != NULL) delete range_leader_transfer_;
  range_leader_transfer_ = NULL;
}
const ::taskpb::TaskRangeLeaderTransfer& Task::range_leader_transfer() const {
  const ::taskpb::TaskRangeLeaderTransfer* p = range_leader_transfer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_leader_transfer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeLeaderTransfer*>(
      &::taskpb::_TaskRangeLeaderTransfer_default_instance_);
}
::taskpb::TaskRangeLeaderTransfer* Task::mutable_range_leader_transfer() {
  
  if (range_leader_transfer_ == NULL) {
    range_leader_transfer_ = new ::taskpb::TaskRangeLeaderTransfer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_leader_transfer)
  return range_leader_transfer_;
}
::taskpb::TaskRangeLeaderTransfer* Task::release_range_leader_transfer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_leader_transfer)
  
  ::taskpb::TaskRangeLeaderTransfer* temp = range_leader_transfer_;
  range_leader_transfer_ = NULL;
  return temp;
}
void Task::set_allocated_range_leader_transfer(::taskpb::TaskRangeLeaderTransfer* range_leader_transfer) {
  delete range_leader_transfer_;
  range_leader_transfer_ = range_leader_transfer;
  if (range_leader_transfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_leader_transfer)
}

// .taskpb.TaskRangeAddPeer range_add_peer = 5;
bool Task::has_range_add_peer() const {
  return this != internal_default_instance() && range_add_peer_ != NULL;
}
void Task::clear_range_add_peer() {
  if (GetArenaNoVirtual() == NULL && range_add_peer_ != NULL) delete range_add_peer_;
  range_add_peer_ = NULL;
}
const ::taskpb::TaskRangeAddPeer& Task::range_add_peer() const {
  const ::taskpb::TaskRangeAddPeer* p = range_add_peer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_add_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeAddPeer*>(
      &::taskpb::_TaskRangeAddPeer_default_instance_);
}
::taskpb::TaskRangeAddPeer* Task::mutable_range_add_peer() {
  
  if (range_add_peer_ == NULL) {
    range_add_peer_ = new ::taskpb::TaskRangeAddPeer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_add_peer)
  return range_add_peer_;
}
::taskpb::TaskRangeAddPeer* Task::release_range_add_peer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_add_peer)
  
  ::taskpb::TaskRangeAddPeer* temp = range_add_peer_;
  range_add_peer_ = NULL;
  return temp;
}
void Task::set_allocated_range_add_peer(::taskpb::TaskRangeAddPeer* range_add_peer) {
  delete range_add_peer_;
  range_add_peer_ = range_add_peer;
  if (range_add_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_add_peer)
}

// .taskpb.TaskRangeDelPeer range_del_peer = 6;
bool Task::has_range_del_peer() const {
  return this != internal_default_instance() && range_del_peer_ != NULL;
}
void Task::clear_range_del_peer() {
  if (GetArenaNoVirtual() == NULL && range_del_peer_ != NULL) delete range_del_peer_;
  range_del_peer_ = NULL;
}
const ::taskpb::TaskRangeDelPeer& Task::range_del_peer() const {
  const ::taskpb::TaskRangeDelPeer* p = range_del_peer_;
  // @@protoc_insertion_point(field_get:taskpb.Task.range_del_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::TaskRangeDelPeer*>(
      &::taskpb::_TaskRangeDelPeer_default_instance_);
}
::taskpb::TaskRangeDelPeer* Task::mutable_range_del_peer() {
  
  if (range_del_peer_ == NULL) {
    range_del_peer_ = new ::taskpb::TaskRangeDelPeer;
  }
  // @@protoc_insertion_point(field_mutable:taskpb.Task.range_del_peer)
  return range_del_peer_;
}
::taskpb::TaskRangeDelPeer* Task::release_range_del_peer() {
  // @@protoc_insertion_point(field_release:taskpb.Task.range_del_peer)
  
  ::taskpb::TaskRangeDelPeer* temp = range_del_peer_;
  range_del_peer_ = NULL;
  return temp;
}
void Task::set_allocated_range_del_peer(::taskpb::TaskRangeDelPeer* range_del_peer) {
  delete range_del_peer_;
  range_del_peer_ = range_del_peer;
  if (range_del_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.Task.range_del_peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace taskpb

// @@protoc_insertion_point(global_scope)
