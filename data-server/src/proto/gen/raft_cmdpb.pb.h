// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#ifndef PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED
#define PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "kvrpcpb.pb.h"
#include "watchpb.pb.h"
// @@protoc_insertion_point(includes)
namespace raft_cmdpb {
class CmdID;
class CmdIDDefaultTypeInternal;
extern CmdIDDefaultTypeInternal _CmdID_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class LeaderChangeRequest;
class LeaderChangeRequestDefaultTypeInternal;
extern LeaderChangeRequestDefaultTypeInternal _LeaderChangeRequest_default_instance_;
class LeaderChangeResponse;
class LeaderChangeResponseDefaultTypeInternal;
extern LeaderChangeResponseDefaultTypeInternal _LeaderChangeResponse_default_instance_;
class MergeRequest;
class MergeRequestDefaultTypeInternal;
extern MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;
class MergeResponse;
class MergeResponseDefaultTypeInternal;
extern MergeResponseDefaultTypeInternal _MergeResponse_default_instance_;
class PeerTask;
class PeerTaskDefaultTypeInternal;
extern PeerTaskDefaultTypeInternal _PeerTask_default_instance_;
class SnapshotContext;
class SnapshotContextDefaultTypeInternal;
extern SnapshotContextDefaultTypeInternal _SnapshotContext_default_instance_;
class SnapshotKVPair;
class SnapshotKVPairDefaultTypeInternal;
extern SnapshotKVPairDefaultTypeInternal _SnapshotKVPair_default_instance_;
class SplitRequest;
class SplitRequestDefaultTypeInternal;
extern SplitRequestDefaultTypeInternal _SplitRequest_default_instance_;
class SplitResponse;
class SplitResponseDefaultTypeInternal;
extern SplitResponseDefaultTypeInternal _SplitResponse_default_instance_;
}  // namespace raft_cmdpb

namespace raft_cmdpb {

namespace protobuf_raft_5fcmdpb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_raft_5fcmdpb_2eproto

enum CmdType {
  Invalid = 0,
  RawGet = 1,
  RawPut = 2,
  RawDelete = 3,
  RawExecute = 4,
  Select = 7,
  Insert = 8,
  Delete = 9,
  Update = 10,
  Replace = 11,
  BatchInsert = 12,
  KvSet = 13,
  KvGet = 14,
  KvBatchSet = 15,
  KvBatchGet = 16,
  KvScan = 17,
  KvDelete = 18,
  KvBatchDel = 19,
  KvRangeDel = 20,
  KvWatchPut = 21,
  KvWatchDel = 22,
  AdminSplit = 30,
  AdminMerge = 31,
  AdminLeaderChange = 32,
  Lock = 40,
  LockUpdate = 41,
  Unlock = 42,
  UnlockForce = 43,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid;
const CmdType CmdType_MAX = UnlockForce;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================

class SplitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitRequest) */ {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitRequest(SplitRequest&& from) noexcept
    : SplitRequest() {
    *this = ::std::move(from);
  }

  inline SplitRequest& operator=(SplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRequest& default_instance();

  static inline const SplitRequest* internal_default_instance() {
    return reinterpret_cast<const SplitRequest*>(
               &_SplitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SplitRequest* other);
  friend void swap(SplitRequest& a, SplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SplitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes split_key = 2;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 2;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // .metapb.RangeEpoch epoch = 3;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 3;
  const ::metapb::RangeEpoch& epoch() const;
  ::metapb::RangeEpoch* mutable_epoch();
  ::metapb::RangeEpoch* release_epoch();
  void set_allocated_epoch(::metapb::RangeEpoch* epoch);

  // .metapb.Range new_range = 4;
  bool has_new_range() const;
  void clear_new_range();
  static const int kNewRangeFieldNumber = 4;
  const ::metapb::Range& new_range() const;
  ::metapb::Range* mutable_new_range();
  ::metapb::Range* release_new_range();
  void set_allocated_new_range(::metapb::Range* new_range);

  // uint64 leader = 1;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  ::google::protobuf::uint64 leader() const;
  void set_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::metapb::RangeEpoch* epoch_;
  ::metapb::Range* new_range_;
  ::google::protobuf::uint64 leader_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SplitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitResponse) */ {
 public:
  SplitResponse();
  virtual ~SplitResponse();

  SplitResponse(const SplitResponse& from);

  inline SplitResponse& operator=(const SplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitResponse(SplitResponse&& from) noexcept
    : SplitResponse() {
    *this = ::std::move(from);
  }

  inline SplitResponse& operator=(SplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitResponse& default_instance();

  static inline const SplitResponse* internal_default_instance() {
    return reinterpret_cast<const SplitResponse*>(
               &_SplitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SplitResponse* other);
  friend void swap(SplitResponse& a, SplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SplitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SplitResponse& from);
  void MergeFrom(const SplitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MergeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.MergeRequest) */ {
 public:
  MergeRequest();
  virtual ~MergeRequest();

  MergeRequest(const MergeRequest& from);

  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeRequest(MergeRequest&& from) noexcept
    : MergeRequest() {
    *this = ::std::move(from);
  }

  inline MergeRequest& operator=(MergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeRequest& default_instance();

  static inline const MergeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRequest*>(
               &_MergeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MergeRequest* other);
  friend void swap(MergeRequest& a, MergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MergeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MergeRequest& from);
  void MergeFrom(const MergeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.MergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MergeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.MergeResponse) */ {
 public:
  MergeResponse();
  virtual ~MergeResponse();

  MergeResponse(const MergeResponse& from);

  inline MergeResponse& operator=(const MergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeResponse(MergeResponse&& from) noexcept
    : MergeResponse() {
    *this = ::std::move(from);
  }

  inline MergeResponse& operator=(MergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeResponse& default_instance();

  static inline const MergeResponse* internal_default_instance() {
    return reinterpret_cast<const MergeResponse*>(
               &_MergeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MergeResponse* other);
  friend void swap(MergeResponse& a, MergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MergeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MergeResponse& from);
  void MergeFrom(const MergeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.MergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderChangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.LeaderChangeRequest) */ {
 public:
  LeaderChangeRequest();
  virtual ~LeaderChangeRequest();

  LeaderChangeRequest(const LeaderChangeRequest& from);

  inline LeaderChangeRequest& operator=(const LeaderChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderChangeRequest(LeaderChangeRequest&& from) noexcept
    : LeaderChangeRequest() {
    *this = ::std::move(from);
  }

  inline LeaderChangeRequest& operator=(LeaderChangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderChangeRequest& default_instance();

  static inline const LeaderChangeRequest* internal_default_instance() {
    return reinterpret_cast<const LeaderChangeRequest*>(
               &_LeaderChangeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LeaderChangeRequest* other);
  friend void swap(LeaderChangeRequest& a, LeaderChangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderChangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderChangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderChangeRequest& from);
  void MergeFrom(const LeaderChangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderChangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.RangeEpoch epoch = 2;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 2;
  const ::metapb::RangeEpoch& epoch() const;
  ::metapb::RangeEpoch* mutable_epoch();
  ::metapb::RangeEpoch* release_epoch();
  void set_allocated_epoch(::metapb::RangeEpoch* epoch);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.LeaderChangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::RangeEpoch* epoch_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderChangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.LeaderChangeResponse) */ {
 public:
  LeaderChangeResponse();
  virtual ~LeaderChangeResponse();

  LeaderChangeResponse(const LeaderChangeResponse& from);

  inline LeaderChangeResponse& operator=(const LeaderChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderChangeResponse(LeaderChangeResponse&& from) noexcept
    : LeaderChangeResponse() {
    *this = ::std::move(from);
  }

  inline LeaderChangeResponse& operator=(LeaderChangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderChangeResponse& default_instance();

  static inline const LeaderChangeResponse* internal_default_instance() {
    return reinterpret_cast<const LeaderChangeResponse*>(
               &_LeaderChangeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LeaderChangeResponse* other);
  friend void swap(LeaderChangeResponse& a, LeaderChangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderChangeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderChangeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderChangeResponse& from);
  void MergeFrom(const LeaderChangeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderChangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.LeaderChangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CmdID) */ {
 public:
  CmdID();
  virtual ~CmdID();

  CmdID(const CmdID& from);

  inline CmdID& operator=(const CmdID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CmdID(CmdID&& from) noexcept
    : CmdID() {
    *this = ::std::move(from);
  }

  inline CmdID& operator=(CmdID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdID& default_instance();

  static inline const CmdID* internal_default_instance() {
    return reinterpret_cast<const CmdID*>(
               &_CmdID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CmdID* other);
  friend void swap(CmdID& a, CmdID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CmdID* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdID& from);
  void MergeFrom(const CmdID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // uint64 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CmdID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 seq_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.CmdID cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  const ::raft_cmdpb::CmdID& cmd_id() const;
  ::raft_cmdpb::CmdID* mutable_cmd_id();
  ::raft_cmdpb::CmdID* release_cmd_id();
  void set_allocated_cmd_id(::raft_cmdpb::CmdID* cmd_id);

  // .metapb.RangeEpoch verify_epoch = 3;
  bool has_verify_epoch() const;
  void clear_verify_epoch();
  static const int kVerifyEpochFieldNumber = 3;
  const ::metapb::RangeEpoch& verify_epoch() const;
  ::metapb::RangeEpoch* mutable_verify_epoch();
  ::metapb::RangeEpoch* release_verify_epoch();
  void set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch);

  // .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
  bool has_kv_raw_get_req() const;
  void clear_kv_raw_get_req();
  static const int kKvRawGetReqFieldNumber = 4;
  const ::kvrpcpb::KvRawGetRequest& kv_raw_get_req() const;
  ::kvrpcpb::KvRawGetRequest* mutable_kv_raw_get_req();
  ::kvrpcpb::KvRawGetRequest* release_kv_raw_get_req();
  void set_allocated_kv_raw_get_req(::kvrpcpb::KvRawGetRequest* kv_raw_get_req);

  // .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
  bool has_kv_raw_put_req() const;
  void clear_kv_raw_put_req();
  static const int kKvRawPutReqFieldNumber = 5;
  const ::kvrpcpb::KvRawPutRequest& kv_raw_put_req() const;
  ::kvrpcpb::KvRawPutRequest* mutable_kv_raw_put_req();
  ::kvrpcpb::KvRawPutRequest* release_kv_raw_put_req();
  void set_allocated_kv_raw_put_req(::kvrpcpb::KvRawPutRequest* kv_raw_put_req);

  // .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
  bool has_kv_raw_delete_req() const;
  void clear_kv_raw_delete_req();
  static const int kKvRawDeleteReqFieldNumber = 6;
  const ::kvrpcpb::KvRawDeleteRequest& kv_raw_delete_req() const;
  ::kvrpcpb::KvRawDeleteRequest* mutable_kv_raw_delete_req();
  ::kvrpcpb::KvRawDeleteRequest* release_kv_raw_delete_req();
  void set_allocated_kv_raw_delete_req(::kvrpcpb::KvRawDeleteRequest* kv_raw_delete_req);

  // .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
  bool has_kv_raw_execute_req() const;
  void clear_kv_raw_execute_req();
  static const int kKvRawExecuteReqFieldNumber = 7;
  const ::kvrpcpb::KvRawExecuteRequest& kv_raw_execute_req() const;
  ::kvrpcpb::KvRawExecuteRequest* mutable_kv_raw_execute_req();
  ::kvrpcpb::KvRawExecuteRequest* release_kv_raw_execute_req();
  void set_allocated_kv_raw_execute_req(::kvrpcpb::KvRawExecuteRequest* kv_raw_execute_req);

  // .kvrpcpb.SelectRequest select_req = 8;
  bool has_select_req() const;
  void clear_select_req();
  static const int kSelectReqFieldNumber = 8;
  const ::kvrpcpb::SelectRequest& select_req() const;
  ::kvrpcpb::SelectRequest* mutable_select_req();
  ::kvrpcpb::SelectRequest* release_select_req();
  void set_allocated_select_req(::kvrpcpb::SelectRequest* select_req);

  // .kvrpcpb.InsertRequest insert_req = 9;
  bool has_insert_req() const;
  void clear_insert_req();
  static const int kInsertReqFieldNumber = 9;
  const ::kvrpcpb::InsertRequest& insert_req() const;
  ::kvrpcpb::InsertRequest* mutable_insert_req();
  ::kvrpcpb::InsertRequest* release_insert_req();
  void set_allocated_insert_req(::kvrpcpb::InsertRequest* insert_req);

  // .kvrpcpb.DeleteRequest delete_req = 10;
  bool has_delete_req() const;
  void clear_delete_req();
  static const int kDeleteReqFieldNumber = 10;
  const ::kvrpcpb::DeleteRequest& delete_req() const;
  ::kvrpcpb::DeleteRequest* mutable_delete_req();
  ::kvrpcpb::DeleteRequest* release_delete_req();
  void set_allocated_delete_req(::kvrpcpb::DeleteRequest* delete_req);

  // .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
  bool has_batch_insert_req() const;
  void clear_batch_insert_req();
  static const int kBatchInsertReqFieldNumber = 11;
  const ::kvrpcpb::BatchInsertRequest& batch_insert_req() const;
  ::kvrpcpb::BatchInsertRequest* mutable_batch_insert_req();
  ::kvrpcpb::BatchInsertRequest* release_batch_insert_req();
  void set_allocated_batch_insert_req(::kvrpcpb::BatchInsertRequest* batch_insert_req);

  // .kvrpcpb.KvSetRequest kv_set_req = 12;
  bool has_kv_set_req() const;
  void clear_kv_set_req();
  static const int kKvSetReqFieldNumber = 12;
  const ::kvrpcpb::KvSetRequest& kv_set_req() const;
  ::kvrpcpb::KvSetRequest* mutable_kv_set_req();
  ::kvrpcpb::KvSetRequest* release_kv_set_req();
  void set_allocated_kv_set_req(::kvrpcpb::KvSetRequest* kv_set_req);

  // .kvrpcpb.KvGetRequest kv_get_req = 13;
  bool has_kv_get_req() const;
  void clear_kv_get_req();
  static const int kKvGetReqFieldNumber = 13;
  const ::kvrpcpb::KvGetRequest& kv_get_req() const;
  ::kvrpcpb::KvGetRequest* mutable_kv_get_req();
  ::kvrpcpb::KvGetRequest* release_kv_get_req();
  void set_allocated_kv_get_req(::kvrpcpb::KvGetRequest* kv_get_req);

  // .kvrpcpb.KvBatchSetRequest kv_batch_set_req = 14;
  bool has_kv_batch_set_req() const;
  void clear_kv_batch_set_req();
  static const int kKvBatchSetReqFieldNumber = 14;
  const ::kvrpcpb::KvBatchSetRequest& kv_batch_set_req() const;
  ::kvrpcpb::KvBatchSetRequest* mutable_kv_batch_set_req();
  ::kvrpcpb::KvBatchSetRequest* release_kv_batch_set_req();
  void set_allocated_kv_batch_set_req(::kvrpcpb::KvBatchSetRequest* kv_batch_set_req);

  // .kvrpcpb.KvBatchGetRequest kv_batch_get_req = 15;
  bool has_kv_batch_get_req() const;
  void clear_kv_batch_get_req();
  static const int kKvBatchGetReqFieldNumber = 15;
  const ::kvrpcpb::KvBatchGetRequest& kv_batch_get_req() const;
  ::kvrpcpb::KvBatchGetRequest* mutable_kv_batch_get_req();
  ::kvrpcpb::KvBatchGetRequest* release_kv_batch_get_req();
  void set_allocated_kv_batch_get_req(::kvrpcpb::KvBatchGetRequest* kv_batch_get_req);

  // .kvrpcpb.KvScanRequest kv_scan_req = 16;
  bool has_kv_scan_req() const;
  void clear_kv_scan_req();
  static const int kKvScanReqFieldNumber = 16;
  const ::kvrpcpb::KvScanRequest& kv_scan_req() const;
  ::kvrpcpb::KvScanRequest* mutable_kv_scan_req();
  ::kvrpcpb::KvScanRequest* release_kv_scan_req();
  void set_allocated_kv_scan_req(::kvrpcpb::KvScanRequest* kv_scan_req);

  // .kvrpcpb.KvDeleteRequest kv_delete_req = 17;
  bool has_kv_delete_req() const;
  void clear_kv_delete_req();
  static const int kKvDeleteReqFieldNumber = 17;
  const ::kvrpcpb::KvDeleteRequest& kv_delete_req() const;
  ::kvrpcpb::KvDeleteRequest* mutable_kv_delete_req();
  ::kvrpcpb::KvDeleteRequest* release_kv_delete_req();
  void set_allocated_kv_delete_req(::kvrpcpb::KvDeleteRequest* kv_delete_req);

  // .kvrpcpb.KvBatchDeleteRequest kv_batch_del_req = 18;
  bool has_kv_batch_del_req() const;
  void clear_kv_batch_del_req();
  static const int kKvBatchDelReqFieldNumber = 18;
  const ::kvrpcpb::KvBatchDeleteRequest& kv_batch_del_req() const;
  ::kvrpcpb::KvBatchDeleteRequest* mutable_kv_batch_del_req();
  ::kvrpcpb::KvBatchDeleteRequest* release_kv_batch_del_req();
  void set_allocated_kv_batch_del_req(::kvrpcpb::KvBatchDeleteRequest* kv_batch_del_req);

  // .kvrpcpb.KvRangeDeleteRequest kv_range_del_req = 19;
  bool has_kv_range_del_req() const;
  void clear_kv_range_del_req();
  static const int kKvRangeDelReqFieldNumber = 19;
  const ::kvrpcpb::KvRangeDeleteRequest& kv_range_del_req() const;
  ::kvrpcpb::KvRangeDeleteRequest* mutable_kv_range_del_req();
  ::kvrpcpb::KvRangeDeleteRequest* release_kv_range_del_req();
  void set_allocated_kv_range_del_req(::kvrpcpb::KvRangeDeleteRequest* kv_range_del_req);

  // .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
  bool has_kv_watch_put_req() const;
  void clear_kv_watch_put_req();
  static const int kKvWatchPutReqFieldNumber = 20;
  const ::watchpb::KvWatchPutRequest& kv_watch_put_req() const;
  ::watchpb::KvWatchPutRequest* mutable_kv_watch_put_req();
  ::watchpb::KvWatchPutRequest* release_kv_watch_put_req();
  void set_allocated_kv_watch_put_req(::watchpb::KvWatchPutRequest* kv_watch_put_req);

  // .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
  bool has_kv_watch_del_req() const;
  void clear_kv_watch_del_req();
  static const int kKvWatchDelReqFieldNumber = 21;
  const ::watchpb::KvWatchDeleteRequest& kv_watch_del_req() const;
  ::watchpb::KvWatchDeleteRequest* mutable_kv_watch_del_req();
  ::watchpb::KvWatchDeleteRequest* release_kv_watch_del_req();
  void set_allocated_kv_watch_del_req(::watchpb::KvWatchDeleteRequest* kv_watch_del_req);

  // .raft_cmdpb.SplitRequest admin_split_req = 30;
  bool has_admin_split_req() const;
  void clear_admin_split_req();
  static const int kAdminSplitReqFieldNumber = 30;
  const ::raft_cmdpb::SplitRequest& admin_split_req() const;
  ::raft_cmdpb::SplitRequest* mutable_admin_split_req();
  ::raft_cmdpb::SplitRequest* release_admin_split_req();
  void set_allocated_admin_split_req(::raft_cmdpb::SplitRequest* admin_split_req);

  // .raft_cmdpb.MergeRequest admin_merge_req = 31;
  bool has_admin_merge_req() const;
  void clear_admin_merge_req();
  static const int kAdminMergeReqFieldNumber = 31;
  const ::raft_cmdpb::MergeRequest& admin_merge_req() const;
  ::raft_cmdpb::MergeRequest* mutable_admin_merge_req();
  ::raft_cmdpb::MergeRequest* release_admin_merge_req();
  void set_allocated_admin_merge_req(::raft_cmdpb::MergeRequest* admin_merge_req);

  // .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
  bool has_admin_leader_change_req() const;
  void clear_admin_leader_change_req();
  static const int kAdminLeaderChangeReqFieldNumber = 32;
  const ::raft_cmdpb::LeaderChangeRequest& admin_leader_change_req() const;
  ::raft_cmdpb::LeaderChangeRequest* mutable_admin_leader_change_req();
  ::raft_cmdpb::LeaderChangeRequest* release_admin_leader_change_req();
  void set_allocated_admin_leader_change_req(::raft_cmdpb::LeaderChangeRequest* admin_leader_change_req);

  // .kvrpcpb.LockRequest lock_req = 40;
  bool has_lock_req() const;
  void clear_lock_req();
  static const int kLockReqFieldNumber = 40;
  const ::kvrpcpb::LockRequest& lock_req() const;
  ::kvrpcpb::LockRequest* mutable_lock_req();
  ::kvrpcpb::LockRequest* release_lock_req();
  void set_allocated_lock_req(::kvrpcpb::LockRequest* lock_req);

  // .kvrpcpb.LockUpdateRequest lock_update_req = 41;
  bool has_lock_update_req() const;
  void clear_lock_update_req();
  static const int kLockUpdateReqFieldNumber = 41;
  const ::kvrpcpb::LockUpdateRequest& lock_update_req() const;
  ::kvrpcpb::LockUpdateRequest* mutable_lock_update_req();
  ::kvrpcpb::LockUpdateRequest* release_lock_update_req();
  void set_allocated_lock_update_req(::kvrpcpb::LockUpdateRequest* lock_update_req);

  // .kvrpcpb.UnlockRequest unlock_req = 42;
  bool has_unlock_req() const;
  void clear_unlock_req();
  static const int kUnlockReqFieldNumber = 42;
  const ::kvrpcpb::UnlockRequest& unlock_req() const;
  ::kvrpcpb::UnlockRequest* mutable_unlock_req();
  ::kvrpcpb::UnlockRequest* release_unlock_req();
  void set_allocated_unlock_req(::kvrpcpb::UnlockRequest* unlock_req);

  // .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
  bool has_unlock_force_req() const;
  void clear_unlock_force_req();
  static const int kUnlockForceReqFieldNumber = 43;
  const ::kvrpcpb::UnlockForceRequest& unlock_force_req() const;
  ::kvrpcpb::UnlockForceRequest* mutable_unlock_force_req();
  ::kvrpcpb::UnlockForceRequest* release_unlock_force_req();
  void set_allocated_unlock_force_req(::kvrpcpb::UnlockForceRequest* unlock_force_req);

  // .raft_cmdpb.CmdType cmd_type = 2;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  ::raft_cmdpb::CmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::CmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::CmdID* cmd_id_;
  ::metapb::RangeEpoch* verify_epoch_;
  ::kvrpcpb::KvRawGetRequest* kv_raw_get_req_;
  ::kvrpcpb::KvRawPutRequest* kv_raw_put_req_;
  ::kvrpcpb::KvRawDeleteRequest* kv_raw_delete_req_;
  ::kvrpcpb::KvRawExecuteRequest* kv_raw_execute_req_;
  ::kvrpcpb::SelectRequest* select_req_;
  ::kvrpcpb::InsertRequest* insert_req_;
  ::kvrpcpb::DeleteRequest* delete_req_;
  ::kvrpcpb::BatchInsertRequest* batch_insert_req_;
  ::kvrpcpb::KvSetRequest* kv_set_req_;
  ::kvrpcpb::KvGetRequest* kv_get_req_;
  ::kvrpcpb::KvBatchSetRequest* kv_batch_set_req_;
  ::kvrpcpb::KvBatchGetRequest* kv_batch_get_req_;
  ::kvrpcpb::KvScanRequest* kv_scan_req_;
  ::kvrpcpb::KvDeleteRequest* kv_delete_req_;
  ::kvrpcpb::KvBatchDeleteRequest* kv_batch_del_req_;
  ::kvrpcpb::KvRangeDeleteRequest* kv_range_del_req_;
  ::watchpb::KvWatchPutRequest* kv_watch_put_req_;
  ::watchpb::KvWatchDeleteRequest* kv_watch_del_req_;
  ::raft_cmdpb::SplitRequest* admin_split_req_;
  ::raft_cmdpb::MergeRequest* admin_merge_req_;
  ::raft_cmdpb::LeaderChangeRequest* admin_leader_change_req_;
  ::kvrpcpb::LockRequest* lock_req_;
  ::kvrpcpb::LockUpdateRequest* lock_update_req_;
  ::kvrpcpb::UnlockRequest* unlock_req_;
  ::kvrpcpb::UnlockForceRequest* unlock_force_req_;
  int cmd_type_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PeerTask) */ {
 public:
  PeerTask();
  virtual ~PeerTask();

  PeerTask(const PeerTask& from);

  inline PeerTask& operator=(const PeerTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerTask(PeerTask&& from) noexcept
    : PeerTask() {
    *this = ::std::move(from);
  }

  inline PeerTask& operator=(PeerTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerTask& default_instance();

  static inline const PeerTask* internal_default_instance() {
    return reinterpret_cast<const PeerTask*>(
               &_PeerTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PeerTask* other);
  friend void swap(PeerTask& a, PeerTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerTask* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerTask& from);
  void MergeFrom(const PeerTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.RangeEpoch verify_epoch = 1;
  bool has_verify_epoch() const;
  void clear_verify_epoch();
  static const int kVerifyEpochFieldNumber = 1;
  const ::metapb::RangeEpoch& verify_epoch() const;
  ::metapb::RangeEpoch* mutable_verify_epoch();
  ::metapb::RangeEpoch* release_verify_epoch();
  void set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch);

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PeerTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::RangeEpoch* verify_epoch_;
  ::metapb::Peer* peer_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotKVPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapshotKVPair) */ {
 public:
  SnapshotKVPair();
  virtual ~SnapshotKVPair();

  SnapshotKVPair(const SnapshotKVPair& from);

  inline SnapshotKVPair& operator=(const SnapshotKVPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotKVPair(SnapshotKVPair&& from) noexcept
    : SnapshotKVPair() {
    *this = ::std::move(from);
  }

  inline SnapshotKVPair& operator=(SnapshotKVPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotKVPair& default_instance();

  static inline const SnapshotKVPair* internal_default_instance() {
    return reinterpret_cast<const SnapshotKVPair*>(
               &_SnapshotKVPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SnapshotKVPair* other);
  friend void swap(SnapshotKVPair& a, SnapshotKVPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotKVPair* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotKVPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotKVPair& from);
  void MergeFrom(const SnapshotKVPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotKVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapshotKVPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapshotContext) */ {
 public:
  SnapshotContext();
  virtual ~SnapshotContext();

  SnapshotContext(const SnapshotContext& from);

  inline SnapshotContext& operator=(const SnapshotContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotContext(SnapshotContext&& from) noexcept
    : SnapshotContext() {
    *this = ::std::move(from);
  }

  inline SnapshotContext& operator=(SnapshotContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotContext& default_instance();

  static inline const SnapshotContext* internal_default_instance() {
    return reinterpret_cast<const SnapshotContext*>(
               &_SnapshotContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SnapshotContext* other);
  friend void swap(SnapshotContext& a, SnapshotContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotContext& from);
  void MergeFrom(const SnapshotContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Range meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::metapb::Range& meta() const;
  ::metapb::Range* mutable_meta();
  ::metapb::Range* release_meta();
  void set_allocated_meta(::metapb::Range* meta);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapshotContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Range* meta_;
  mutable int _cached_size_;
  friend struct protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SplitRequest

// uint64 leader = 1;
inline void SplitRequest::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SplitRequest::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.leader)
  return leader_;
}
inline void SplitRequest::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.leader)
}

// bytes split_key = 2;
inline void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena();
}
inline void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
#if LANG_CXX11
inline void SplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SplitRequest.split_key)
}
#endif
inline void SplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
inline ::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// .metapb.RangeEpoch epoch = 3;
inline bool SplitRequest::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
inline void SplitRequest::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
inline const ::metapb::RangeEpoch& SplitRequest::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
inline ::metapb::RangeEpoch* SplitRequest::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.epoch)
  return epoch_;
}
inline ::metapb::RangeEpoch* SplitRequest::release_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
inline void SplitRequest::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.epoch)
}

// .metapb.Range new_range = 4;
inline bool SplitRequest::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
inline void SplitRequest::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
inline const ::metapb::Range& SplitRequest::new_range() const {
  const ::metapb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* SplitRequest::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.new_range)
  return new_range_;
}
inline ::metapb::Range* SplitRequest::release_new_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.new_range)
  
  ::metapb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
inline void SplitRequest::set_allocated_new_range(::metapb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.new_range)
}

// -------------------------------------------------------------------

// SplitResponse

// -------------------------------------------------------------------

// MergeRequest

// -------------------------------------------------------------------

// MergeResponse

// -------------------------------------------------------------------

// LeaderChangeRequest

// uint64 range_id = 1;
inline void LeaderChangeRequest::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LeaderChangeRequest::range_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.LeaderChangeRequest.range_id)
  return range_id_;
}
inline void LeaderChangeRequest::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.LeaderChangeRequest.range_id)
}

// .metapb.RangeEpoch epoch = 2;
inline bool LeaderChangeRequest::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
inline void LeaderChangeRequest::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
inline const ::metapb::RangeEpoch& LeaderChangeRequest::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.LeaderChangeRequest.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
inline ::metapb::RangeEpoch* LeaderChangeRequest::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.LeaderChangeRequest.epoch)
  return epoch_;
}
inline ::metapb::RangeEpoch* LeaderChangeRequest::release_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.LeaderChangeRequest.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
inline void LeaderChangeRequest::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.LeaderChangeRequest.epoch)
}

// -------------------------------------------------------------------

// LeaderChangeResponse

// -------------------------------------------------------------------

// CmdID

// uint64 node_id = 1;
inline void CmdID::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CmdID::node_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CmdID.node_id)
  return node_id_;
}
inline void CmdID::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CmdID.node_id)
}

// uint64 seq = 2;
inline void CmdID::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CmdID::seq() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CmdID.seq)
  return seq_;
}
inline void CmdID::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CmdID.seq)
}

// -------------------------------------------------------------------

// Command

// .raft_cmdpb.CmdID cmd_id = 1;
inline bool Command::has_cmd_id() const {
  return this != internal_default_instance() && cmd_id_ != NULL;
}
inline void Command::clear_cmd_id() {
  if (GetArenaNoVirtual() == NULL && cmd_id_ != NULL) delete cmd_id_;
  cmd_id_ = NULL;
}
inline const ::raft_cmdpb::CmdID& Command::cmd_id() const {
  const ::raft_cmdpb::CmdID* p = cmd_id_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.cmd_id)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CmdID*>(
      &::raft_cmdpb::_CmdID_default_instance_);
}
inline ::raft_cmdpb::CmdID* Command::mutable_cmd_id() {
  
  if (cmd_id_ == NULL) {
    cmd_id_ = new ::raft_cmdpb::CmdID;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.cmd_id)
  return cmd_id_;
}
inline ::raft_cmdpb::CmdID* Command::release_cmd_id() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.cmd_id)
  
  ::raft_cmdpb::CmdID* temp = cmd_id_;
  cmd_id_ = NULL;
  return temp;
}
inline void Command::set_allocated_cmd_id(::raft_cmdpb::CmdID* cmd_id) {
  delete cmd_id_;
  cmd_id_ = cmd_id;
  if (cmd_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.cmd_id)
}

// .raft_cmdpb.CmdType cmd_type = 2;
inline void Command::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::CmdType Command::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Command::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Command.cmd_type)
}

// .metapb.RangeEpoch verify_epoch = 3;
inline bool Command::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
inline void Command::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
inline const ::metapb::RangeEpoch& Command::verify_epoch() const {
  const ::metapb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
inline ::metapb::RangeEpoch* Command::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.verify_epoch)
  return verify_epoch_;
}
inline ::metapb::RangeEpoch* Command::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.verify_epoch)
  
  ::metapb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
inline void Command::set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.verify_epoch)
}

// .kvrpcpb.KvRawGetRequest kv_raw_get_req = 4;
inline bool Command::has_kv_raw_get_req() const {
  return this != internal_default_instance() && kv_raw_get_req_ != NULL;
}
inline void Command::clear_kv_raw_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_get_req_ != NULL) delete kv_raw_get_req_;
  kv_raw_get_req_ = NULL;
}
inline const ::kvrpcpb::KvRawGetRequest& Command::kv_raw_get_req() const {
  const ::kvrpcpb::KvRawGetRequest* p = kv_raw_get_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawGetRequest*>(
      &::kvrpcpb::_KvRawGetRequest_default_instance_);
}
inline ::kvrpcpb::KvRawGetRequest* Command::mutable_kv_raw_get_req() {
  
  if (kv_raw_get_req_ == NULL) {
    kv_raw_get_req_ = new ::kvrpcpb::KvRawGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_get_req)
  return kv_raw_get_req_;
}
inline ::kvrpcpb::KvRawGetRequest* Command::release_kv_raw_get_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_get_req)
  
  ::kvrpcpb::KvRawGetRequest* temp = kv_raw_get_req_;
  kv_raw_get_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_raw_get_req(::kvrpcpb::KvRawGetRequest* kv_raw_get_req) {
  delete kv_raw_get_req_;
  kv_raw_get_req_ = kv_raw_get_req;
  if (kv_raw_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_get_req)
}

// .kvrpcpb.KvRawPutRequest kv_raw_put_req = 5;
inline bool Command::has_kv_raw_put_req() const {
  return this != internal_default_instance() && kv_raw_put_req_ != NULL;
}
inline void Command::clear_kv_raw_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_put_req_ != NULL) delete kv_raw_put_req_;
  kv_raw_put_req_ = NULL;
}
inline const ::kvrpcpb::KvRawPutRequest& Command::kv_raw_put_req() const {
  const ::kvrpcpb::KvRawPutRequest* p = kv_raw_put_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawPutRequest*>(
      &::kvrpcpb::_KvRawPutRequest_default_instance_);
}
inline ::kvrpcpb::KvRawPutRequest* Command::mutable_kv_raw_put_req() {
  
  if (kv_raw_put_req_ == NULL) {
    kv_raw_put_req_ = new ::kvrpcpb::KvRawPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_put_req)
  return kv_raw_put_req_;
}
inline ::kvrpcpb::KvRawPutRequest* Command::release_kv_raw_put_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_put_req)
  
  ::kvrpcpb::KvRawPutRequest* temp = kv_raw_put_req_;
  kv_raw_put_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_raw_put_req(::kvrpcpb::KvRawPutRequest* kv_raw_put_req) {
  delete kv_raw_put_req_;
  kv_raw_put_req_ = kv_raw_put_req;
  if (kv_raw_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_put_req)
}

// .kvrpcpb.KvRawDeleteRequest kv_raw_delete_req = 6;
inline bool Command::has_kv_raw_delete_req() const {
  return this != internal_default_instance() && kv_raw_delete_req_ != NULL;
}
inline void Command::clear_kv_raw_delete_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_delete_req_ != NULL) delete kv_raw_delete_req_;
  kv_raw_delete_req_ = NULL;
}
inline const ::kvrpcpb::KvRawDeleteRequest& Command::kv_raw_delete_req() const {
  const ::kvrpcpb::KvRawDeleteRequest* p = kv_raw_delete_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawDeleteRequest*>(
      &::kvrpcpb::_KvRawDeleteRequest_default_instance_);
}
inline ::kvrpcpb::KvRawDeleteRequest* Command::mutable_kv_raw_delete_req() {
  
  if (kv_raw_delete_req_ == NULL) {
    kv_raw_delete_req_ = new ::kvrpcpb::KvRawDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_delete_req)
  return kv_raw_delete_req_;
}
inline ::kvrpcpb::KvRawDeleteRequest* Command::release_kv_raw_delete_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_delete_req)
  
  ::kvrpcpb::KvRawDeleteRequest* temp = kv_raw_delete_req_;
  kv_raw_delete_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_raw_delete_req(::kvrpcpb::KvRawDeleteRequest* kv_raw_delete_req) {
  delete kv_raw_delete_req_;
  kv_raw_delete_req_ = kv_raw_delete_req;
  if (kv_raw_delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_delete_req)
}

// .kvrpcpb.KvRawExecuteRequest kv_raw_execute_req = 7;
inline bool Command::has_kv_raw_execute_req() const {
  return this != internal_default_instance() && kv_raw_execute_req_ != NULL;
}
inline void Command::clear_kv_raw_execute_req() {
  if (GetArenaNoVirtual() == NULL && kv_raw_execute_req_ != NULL) delete kv_raw_execute_req_;
  kv_raw_execute_req_ = NULL;
}
inline const ::kvrpcpb::KvRawExecuteRequest& Command::kv_raw_execute_req() const {
  const ::kvrpcpb::KvRawExecuteRequest* p = kv_raw_execute_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_raw_execute_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawExecuteRequest*>(
      &::kvrpcpb::_KvRawExecuteRequest_default_instance_);
}
inline ::kvrpcpb::KvRawExecuteRequest* Command::mutable_kv_raw_execute_req() {
  
  if (kv_raw_execute_req_ == NULL) {
    kv_raw_execute_req_ = new ::kvrpcpb::KvRawExecuteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_raw_execute_req)
  return kv_raw_execute_req_;
}
inline ::kvrpcpb::KvRawExecuteRequest* Command::release_kv_raw_execute_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_raw_execute_req)
  
  ::kvrpcpb::KvRawExecuteRequest* temp = kv_raw_execute_req_;
  kv_raw_execute_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_raw_execute_req(::kvrpcpb::KvRawExecuteRequest* kv_raw_execute_req) {
  delete kv_raw_execute_req_;
  kv_raw_execute_req_ = kv_raw_execute_req;
  if (kv_raw_execute_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_raw_execute_req)
}

// .kvrpcpb.SelectRequest select_req = 8;
inline bool Command::has_select_req() const {
  return this != internal_default_instance() && select_req_ != NULL;
}
inline void Command::clear_select_req() {
  if (GetArenaNoVirtual() == NULL && select_req_ != NULL) delete select_req_;
  select_req_ = NULL;
}
inline const ::kvrpcpb::SelectRequest& Command::select_req() const {
  const ::kvrpcpb::SelectRequest* p = select_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.select_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::SelectRequest*>(
      &::kvrpcpb::_SelectRequest_default_instance_);
}
inline ::kvrpcpb::SelectRequest* Command::mutable_select_req() {
  
  if (select_req_ == NULL) {
    select_req_ = new ::kvrpcpb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.select_req)
  return select_req_;
}
inline ::kvrpcpb::SelectRequest* Command::release_select_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.select_req)
  
  ::kvrpcpb::SelectRequest* temp = select_req_;
  select_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_select_req(::kvrpcpb::SelectRequest* select_req) {
  delete select_req_;
  select_req_ = select_req;
  if (select_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.select_req)
}

// .kvrpcpb.InsertRequest insert_req = 9;
inline bool Command::has_insert_req() const {
  return this != internal_default_instance() && insert_req_ != NULL;
}
inline void Command::clear_insert_req() {
  if (GetArenaNoVirtual() == NULL && insert_req_ != NULL) delete insert_req_;
  insert_req_ = NULL;
}
inline const ::kvrpcpb::InsertRequest& Command::insert_req() const {
  const ::kvrpcpb::InsertRequest* p = insert_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.insert_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::InsertRequest*>(
      &::kvrpcpb::_InsertRequest_default_instance_);
}
inline ::kvrpcpb::InsertRequest* Command::mutable_insert_req() {
  
  if (insert_req_ == NULL) {
    insert_req_ = new ::kvrpcpb::InsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.insert_req)
  return insert_req_;
}
inline ::kvrpcpb::InsertRequest* Command::release_insert_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.insert_req)
  
  ::kvrpcpb::InsertRequest* temp = insert_req_;
  insert_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_insert_req(::kvrpcpb::InsertRequest* insert_req) {
  delete insert_req_;
  insert_req_ = insert_req;
  if (insert_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.insert_req)
}

// .kvrpcpb.DeleteRequest delete_req = 10;
inline bool Command::has_delete_req() const {
  return this != internal_default_instance() && delete_req_ != NULL;
}
inline void Command::clear_delete_req() {
  if (GetArenaNoVirtual() == NULL && delete_req_ != NULL) delete delete_req_;
  delete_req_ = NULL;
}
inline const ::kvrpcpb::DeleteRequest& Command::delete_req() const {
  const ::kvrpcpb::DeleteRequest* p = delete_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::DeleteRequest*>(
      &::kvrpcpb::_DeleteRequest_default_instance_);
}
inline ::kvrpcpb::DeleteRequest* Command::mutable_delete_req() {
  
  if (delete_req_ == NULL) {
    delete_req_ = new ::kvrpcpb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.delete_req)
  return delete_req_;
}
inline ::kvrpcpb::DeleteRequest* Command::release_delete_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.delete_req)
  
  ::kvrpcpb::DeleteRequest* temp = delete_req_;
  delete_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_delete_req(::kvrpcpb::DeleteRequest* delete_req) {
  delete delete_req_;
  delete_req_ = delete_req;
  if (delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.delete_req)
}

// .kvrpcpb.BatchInsertRequest batch_insert_req = 11;
inline bool Command::has_batch_insert_req() const {
  return this != internal_default_instance() && batch_insert_req_ != NULL;
}
inline void Command::clear_batch_insert_req() {
  if (GetArenaNoVirtual() == NULL && batch_insert_req_ != NULL) delete batch_insert_req_;
  batch_insert_req_ = NULL;
}
inline const ::kvrpcpb::BatchInsertRequest& Command::batch_insert_req() const {
  const ::kvrpcpb::BatchInsertRequest* p = batch_insert_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.batch_insert_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::BatchInsertRequest*>(
      &::kvrpcpb::_BatchInsertRequest_default_instance_);
}
inline ::kvrpcpb::BatchInsertRequest* Command::mutable_batch_insert_req() {
  
  if (batch_insert_req_ == NULL) {
    batch_insert_req_ = new ::kvrpcpb::BatchInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.batch_insert_req)
  return batch_insert_req_;
}
inline ::kvrpcpb::BatchInsertRequest* Command::release_batch_insert_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.batch_insert_req)
  
  ::kvrpcpb::BatchInsertRequest* temp = batch_insert_req_;
  batch_insert_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_batch_insert_req(::kvrpcpb::BatchInsertRequest* batch_insert_req) {
  delete batch_insert_req_;
  batch_insert_req_ = batch_insert_req;
  if (batch_insert_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.batch_insert_req)
}

// .kvrpcpb.KvSetRequest kv_set_req = 12;
inline bool Command::has_kv_set_req() const {
  return this != internal_default_instance() && kv_set_req_ != NULL;
}
inline void Command::clear_kv_set_req() {
  if (GetArenaNoVirtual() == NULL && kv_set_req_ != NULL) delete kv_set_req_;
  kv_set_req_ = NULL;
}
inline const ::kvrpcpb::KvSetRequest& Command::kv_set_req() const {
  const ::kvrpcpb::KvSetRequest* p = kv_set_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_set_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvSetRequest*>(
      &::kvrpcpb::_KvSetRequest_default_instance_);
}
inline ::kvrpcpb::KvSetRequest* Command::mutable_kv_set_req() {
  
  if (kv_set_req_ == NULL) {
    kv_set_req_ = new ::kvrpcpb::KvSetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_set_req)
  return kv_set_req_;
}
inline ::kvrpcpb::KvSetRequest* Command::release_kv_set_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_set_req)
  
  ::kvrpcpb::KvSetRequest* temp = kv_set_req_;
  kv_set_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_set_req(::kvrpcpb::KvSetRequest* kv_set_req) {
  delete kv_set_req_;
  kv_set_req_ = kv_set_req;
  if (kv_set_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_set_req)
}

// .kvrpcpb.KvGetRequest kv_get_req = 13;
inline bool Command::has_kv_get_req() const {
  return this != internal_default_instance() && kv_get_req_ != NULL;
}
inline void Command::clear_kv_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_get_req_ != NULL) delete kv_get_req_;
  kv_get_req_ = NULL;
}
inline const ::kvrpcpb::KvGetRequest& Command::kv_get_req() const {
  const ::kvrpcpb::KvGetRequest* p = kv_get_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvGetRequest*>(
      &::kvrpcpb::_KvGetRequest_default_instance_);
}
inline ::kvrpcpb::KvGetRequest* Command::mutable_kv_get_req() {
  
  if (kv_get_req_ == NULL) {
    kv_get_req_ = new ::kvrpcpb::KvGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_get_req)
  return kv_get_req_;
}
inline ::kvrpcpb::KvGetRequest* Command::release_kv_get_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_get_req)
  
  ::kvrpcpb::KvGetRequest* temp = kv_get_req_;
  kv_get_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_get_req(::kvrpcpb::KvGetRequest* kv_get_req) {
  delete kv_get_req_;
  kv_get_req_ = kv_get_req;
  if (kv_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_get_req)
}

// .kvrpcpb.KvBatchSetRequest kv_batch_set_req = 14;
inline bool Command::has_kv_batch_set_req() const {
  return this != internal_default_instance() && kv_batch_set_req_ != NULL;
}
inline void Command::clear_kv_batch_set_req() {
  if (GetArenaNoVirtual() == NULL && kv_batch_set_req_ != NULL) delete kv_batch_set_req_;
  kv_batch_set_req_ = NULL;
}
inline const ::kvrpcpb::KvBatchSetRequest& Command::kv_batch_set_req() const {
  const ::kvrpcpb::KvBatchSetRequest* p = kv_batch_set_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_batch_set_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchSetRequest*>(
      &::kvrpcpb::_KvBatchSetRequest_default_instance_);
}
inline ::kvrpcpb::KvBatchSetRequest* Command::mutable_kv_batch_set_req() {
  
  if (kv_batch_set_req_ == NULL) {
    kv_batch_set_req_ = new ::kvrpcpb::KvBatchSetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_batch_set_req)
  return kv_batch_set_req_;
}
inline ::kvrpcpb::KvBatchSetRequest* Command::release_kv_batch_set_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_batch_set_req)
  
  ::kvrpcpb::KvBatchSetRequest* temp = kv_batch_set_req_;
  kv_batch_set_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_batch_set_req(::kvrpcpb::KvBatchSetRequest* kv_batch_set_req) {
  delete kv_batch_set_req_;
  kv_batch_set_req_ = kv_batch_set_req;
  if (kv_batch_set_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_batch_set_req)
}

// .kvrpcpb.KvBatchGetRequest kv_batch_get_req = 15;
inline bool Command::has_kv_batch_get_req() const {
  return this != internal_default_instance() && kv_batch_get_req_ != NULL;
}
inline void Command::clear_kv_batch_get_req() {
  if (GetArenaNoVirtual() == NULL && kv_batch_get_req_ != NULL) delete kv_batch_get_req_;
  kv_batch_get_req_ = NULL;
}
inline const ::kvrpcpb::KvBatchGetRequest& Command::kv_batch_get_req() const {
  const ::kvrpcpb::KvBatchGetRequest* p = kv_batch_get_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_batch_get_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchGetRequest*>(
      &::kvrpcpb::_KvBatchGetRequest_default_instance_);
}
inline ::kvrpcpb::KvBatchGetRequest* Command::mutable_kv_batch_get_req() {
  
  if (kv_batch_get_req_ == NULL) {
    kv_batch_get_req_ = new ::kvrpcpb::KvBatchGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_batch_get_req)
  return kv_batch_get_req_;
}
inline ::kvrpcpb::KvBatchGetRequest* Command::release_kv_batch_get_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_batch_get_req)
  
  ::kvrpcpb::KvBatchGetRequest* temp = kv_batch_get_req_;
  kv_batch_get_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_batch_get_req(::kvrpcpb::KvBatchGetRequest* kv_batch_get_req) {
  delete kv_batch_get_req_;
  kv_batch_get_req_ = kv_batch_get_req;
  if (kv_batch_get_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_batch_get_req)
}

// .kvrpcpb.KvScanRequest kv_scan_req = 16;
inline bool Command::has_kv_scan_req() const {
  return this != internal_default_instance() && kv_scan_req_ != NULL;
}
inline void Command::clear_kv_scan_req() {
  if (GetArenaNoVirtual() == NULL && kv_scan_req_ != NULL) delete kv_scan_req_;
  kv_scan_req_ = NULL;
}
inline const ::kvrpcpb::KvScanRequest& Command::kv_scan_req() const {
  const ::kvrpcpb::KvScanRequest* p = kv_scan_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_scan_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvScanRequest*>(
      &::kvrpcpb::_KvScanRequest_default_instance_);
}
inline ::kvrpcpb::KvScanRequest* Command::mutable_kv_scan_req() {
  
  if (kv_scan_req_ == NULL) {
    kv_scan_req_ = new ::kvrpcpb::KvScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_scan_req)
  return kv_scan_req_;
}
inline ::kvrpcpb::KvScanRequest* Command::release_kv_scan_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_scan_req)
  
  ::kvrpcpb::KvScanRequest* temp = kv_scan_req_;
  kv_scan_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_scan_req(::kvrpcpb::KvScanRequest* kv_scan_req) {
  delete kv_scan_req_;
  kv_scan_req_ = kv_scan_req;
  if (kv_scan_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_scan_req)
}

// .kvrpcpb.KvDeleteRequest kv_delete_req = 17;
inline bool Command::has_kv_delete_req() const {
  return this != internal_default_instance() && kv_delete_req_ != NULL;
}
inline void Command::clear_kv_delete_req() {
  if (GetArenaNoVirtual() == NULL && kv_delete_req_ != NULL) delete kv_delete_req_;
  kv_delete_req_ = NULL;
}
inline const ::kvrpcpb::KvDeleteRequest& Command::kv_delete_req() const {
  const ::kvrpcpb::KvDeleteRequest* p = kv_delete_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_delete_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvDeleteRequest*>(
      &::kvrpcpb::_KvDeleteRequest_default_instance_);
}
inline ::kvrpcpb::KvDeleteRequest* Command::mutable_kv_delete_req() {
  
  if (kv_delete_req_ == NULL) {
    kv_delete_req_ = new ::kvrpcpb::KvDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_delete_req)
  return kv_delete_req_;
}
inline ::kvrpcpb::KvDeleteRequest* Command::release_kv_delete_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_delete_req)
  
  ::kvrpcpb::KvDeleteRequest* temp = kv_delete_req_;
  kv_delete_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_delete_req(::kvrpcpb::KvDeleteRequest* kv_delete_req) {
  delete kv_delete_req_;
  kv_delete_req_ = kv_delete_req;
  if (kv_delete_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_delete_req)
}

// .kvrpcpb.KvBatchDeleteRequest kv_batch_del_req = 18;
inline bool Command::has_kv_batch_del_req() const {
  return this != internal_default_instance() && kv_batch_del_req_ != NULL;
}
inline void Command::clear_kv_batch_del_req() {
  if (GetArenaNoVirtual() == NULL && kv_batch_del_req_ != NULL) delete kv_batch_del_req_;
  kv_batch_del_req_ = NULL;
}
inline const ::kvrpcpb::KvBatchDeleteRequest& Command::kv_batch_del_req() const {
  const ::kvrpcpb::KvBatchDeleteRequest* p = kv_batch_del_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_batch_del_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchDeleteRequest*>(
      &::kvrpcpb::_KvBatchDeleteRequest_default_instance_);
}
inline ::kvrpcpb::KvBatchDeleteRequest* Command::mutable_kv_batch_del_req() {
  
  if (kv_batch_del_req_ == NULL) {
    kv_batch_del_req_ = new ::kvrpcpb::KvBatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_batch_del_req)
  return kv_batch_del_req_;
}
inline ::kvrpcpb::KvBatchDeleteRequest* Command::release_kv_batch_del_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_batch_del_req)
  
  ::kvrpcpb::KvBatchDeleteRequest* temp = kv_batch_del_req_;
  kv_batch_del_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_batch_del_req(::kvrpcpb::KvBatchDeleteRequest* kv_batch_del_req) {
  delete kv_batch_del_req_;
  kv_batch_del_req_ = kv_batch_del_req;
  if (kv_batch_del_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_batch_del_req)
}

// .kvrpcpb.KvRangeDeleteRequest kv_range_del_req = 19;
inline bool Command::has_kv_range_del_req() const {
  return this != internal_default_instance() && kv_range_del_req_ != NULL;
}
inline void Command::clear_kv_range_del_req() {
  if (GetArenaNoVirtual() == NULL && kv_range_del_req_ != NULL) delete kv_range_del_req_;
  kv_range_del_req_ = NULL;
}
inline const ::kvrpcpb::KvRangeDeleteRequest& Command::kv_range_del_req() const {
  const ::kvrpcpb::KvRangeDeleteRequest* p = kv_range_del_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_range_del_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRangeDeleteRequest*>(
      &::kvrpcpb::_KvRangeDeleteRequest_default_instance_);
}
inline ::kvrpcpb::KvRangeDeleteRequest* Command::mutable_kv_range_del_req() {
  
  if (kv_range_del_req_ == NULL) {
    kv_range_del_req_ = new ::kvrpcpb::KvRangeDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_range_del_req)
  return kv_range_del_req_;
}
inline ::kvrpcpb::KvRangeDeleteRequest* Command::release_kv_range_del_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_range_del_req)
  
  ::kvrpcpb::KvRangeDeleteRequest* temp = kv_range_del_req_;
  kv_range_del_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_range_del_req(::kvrpcpb::KvRangeDeleteRequest* kv_range_del_req) {
  delete kv_range_del_req_;
  kv_range_del_req_ = kv_range_del_req;
  if (kv_range_del_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_range_del_req)
}

// .watchpb.KvWatchPutRequest kv_watch_put_req = 20;
inline bool Command::has_kv_watch_put_req() const {
  return this != internal_default_instance() && kv_watch_put_req_ != NULL;
}
inline void Command::clear_kv_watch_put_req() {
  if (GetArenaNoVirtual() == NULL && kv_watch_put_req_ != NULL) delete kv_watch_put_req_;
  kv_watch_put_req_ = NULL;
}
inline const ::watchpb::KvWatchPutRequest& Command::kv_watch_put_req() const {
  const ::watchpb::KvWatchPutRequest* p = kv_watch_put_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_watch_put_req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchPutRequest*>(
      &::watchpb::_KvWatchPutRequest_default_instance_);
}
inline ::watchpb::KvWatchPutRequest* Command::mutable_kv_watch_put_req() {
  
  if (kv_watch_put_req_ == NULL) {
    kv_watch_put_req_ = new ::watchpb::KvWatchPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_watch_put_req)
  return kv_watch_put_req_;
}
inline ::watchpb::KvWatchPutRequest* Command::release_kv_watch_put_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_watch_put_req)
  
  ::watchpb::KvWatchPutRequest* temp = kv_watch_put_req_;
  kv_watch_put_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_watch_put_req(::watchpb::KvWatchPutRequest* kv_watch_put_req) {
  delete kv_watch_put_req_;
  kv_watch_put_req_ = kv_watch_put_req;
  if (kv_watch_put_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_watch_put_req)
}

// .watchpb.KvWatchDeleteRequest kv_watch_del_req = 21;
inline bool Command::has_kv_watch_del_req() const {
  return this != internal_default_instance() && kv_watch_del_req_ != NULL;
}
inline void Command::clear_kv_watch_del_req() {
  if (GetArenaNoVirtual() == NULL && kv_watch_del_req_ != NULL) delete kv_watch_del_req_;
  kv_watch_del_req_ = NULL;
}
inline const ::watchpb::KvWatchDeleteRequest& Command::kv_watch_del_req() const {
  const ::watchpb::KvWatchDeleteRequest* p = kv_watch_del_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.kv_watch_del_req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchDeleteRequest*>(
      &::watchpb::_KvWatchDeleteRequest_default_instance_);
}
inline ::watchpb::KvWatchDeleteRequest* Command::mutable_kv_watch_del_req() {
  
  if (kv_watch_del_req_ == NULL) {
    kv_watch_del_req_ = new ::watchpb::KvWatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.kv_watch_del_req)
  return kv_watch_del_req_;
}
inline ::watchpb::KvWatchDeleteRequest* Command::release_kv_watch_del_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.kv_watch_del_req)
  
  ::watchpb::KvWatchDeleteRequest* temp = kv_watch_del_req_;
  kv_watch_del_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_kv_watch_del_req(::watchpb::KvWatchDeleteRequest* kv_watch_del_req) {
  delete kv_watch_del_req_;
  kv_watch_del_req_ = kv_watch_del_req;
  if (kv_watch_del_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.kv_watch_del_req)
}

// .raft_cmdpb.SplitRequest admin_split_req = 30;
inline bool Command::has_admin_split_req() const {
  return this != internal_default_instance() && admin_split_req_ != NULL;
}
inline void Command::clear_admin_split_req() {
  if (GetArenaNoVirtual() == NULL && admin_split_req_ != NULL) delete admin_split_req_;
  admin_split_req_ = NULL;
}
inline const ::raft_cmdpb::SplitRequest& Command::admin_split_req() const {
  const ::raft_cmdpb::SplitRequest* p = admin_split_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_split_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitRequest*>(
      &::raft_cmdpb::_SplitRequest_default_instance_);
}
inline ::raft_cmdpb::SplitRequest* Command::mutable_admin_split_req() {
  
  if (admin_split_req_ == NULL) {
    admin_split_req_ = new ::raft_cmdpb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_split_req)
  return admin_split_req_;
}
inline ::raft_cmdpb::SplitRequest* Command::release_admin_split_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_split_req)
  
  ::raft_cmdpb::SplitRequest* temp = admin_split_req_;
  admin_split_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_admin_split_req(::raft_cmdpb::SplitRequest* admin_split_req) {
  delete admin_split_req_;
  admin_split_req_ = admin_split_req;
  if (admin_split_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_split_req)
}

// .raft_cmdpb.MergeRequest admin_merge_req = 31;
inline bool Command::has_admin_merge_req() const {
  return this != internal_default_instance() && admin_merge_req_ != NULL;
}
inline void Command::clear_admin_merge_req() {
  if (GetArenaNoVirtual() == NULL && admin_merge_req_ != NULL) delete admin_merge_req_;
  admin_merge_req_ = NULL;
}
inline const ::raft_cmdpb::MergeRequest& Command::admin_merge_req() const {
  const ::raft_cmdpb::MergeRequest* p = admin_merge_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_merge_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::MergeRequest*>(
      &::raft_cmdpb::_MergeRequest_default_instance_);
}
inline ::raft_cmdpb::MergeRequest* Command::mutable_admin_merge_req() {
  
  if (admin_merge_req_ == NULL) {
    admin_merge_req_ = new ::raft_cmdpb::MergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_merge_req)
  return admin_merge_req_;
}
inline ::raft_cmdpb::MergeRequest* Command::release_admin_merge_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_merge_req)
  
  ::raft_cmdpb::MergeRequest* temp = admin_merge_req_;
  admin_merge_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_admin_merge_req(::raft_cmdpb::MergeRequest* admin_merge_req) {
  delete admin_merge_req_;
  admin_merge_req_ = admin_merge_req;
  if (admin_merge_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_merge_req)
}

// .raft_cmdpb.LeaderChangeRequest admin_leader_change_req = 32;
inline bool Command::has_admin_leader_change_req() const {
  return this != internal_default_instance() && admin_leader_change_req_ != NULL;
}
inline void Command::clear_admin_leader_change_req() {
  if (GetArenaNoVirtual() == NULL && admin_leader_change_req_ != NULL) delete admin_leader_change_req_;
  admin_leader_change_req_ = NULL;
}
inline const ::raft_cmdpb::LeaderChangeRequest& Command::admin_leader_change_req() const {
  const ::raft_cmdpb::LeaderChangeRequest* p = admin_leader_change_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.admin_leader_change_req)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::LeaderChangeRequest*>(
      &::raft_cmdpb::_LeaderChangeRequest_default_instance_);
}
inline ::raft_cmdpb::LeaderChangeRequest* Command::mutable_admin_leader_change_req() {
  
  if (admin_leader_change_req_ == NULL) {
    admin_leader_change_req_ = new ::raft_cmdpb::LeaderChangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.admin_leader_change_req)
  return admin_leader_change_req_;
}
inline ::raft_cmdpb::LeaderChangeRequest* Command::release_admin_leader_change_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.admin_leader_change_req)
  
  ::raft_cmdpb::LeaderChangeRequest* temp = admin_leader_change_req_;
  admin_leader_change_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_admin_leader_change_req(::raft_cmdpb::LeaderChangeRequest* admin_leader_change_req) {
  delete admin_leader_change_req_;
  admin_leader_change_req_ = admin_leader_change_req;
  if (admin_leader_change_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.admin_leader_change_req)
}

// .kvrpcpb.LockRequest lock_req = 40;
inline bool Command::has_lock_req() const {
  return this != internal_default_instance() && lock_req_ != NULL;
}
inline void Command::clear_lock_req() {
  if (GetArenaNoVirtual() == NULL && lock_req_ != NULL) delete lock_req_;
  lock_req_ = NULL;
}
inline const ::kvrpcpb::LockRequest& Command::lock_req() const {
  const ::kvrpcpb::LockRequest* p = lock_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.lock_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockRequest*>(
      &::kvrpcpb::_LockRequest_default_instance_);
}
inline ::kvrpcpb::LockRequest* Command::mutable_lock_req() {
  
  if (lock_req_ == NULL) {
    lock_req_ = new ::kvrpcpb::LockRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.lock_req)
  return lock_req_;
}
inline ::kvrpcpb::LockRequest* Command::release_lock_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.lock_req)
  
  ::kvrpcpb::LockRequest* temp = lock_req_;
  lock_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_lock_req(::kvrpcpb::LockRequest* lock_req) {
  delete lock_req_;
  lock_req_ = lock_req;
  if (lock_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.lock_req)
}

// .kvrpcpb.LockUpdateRequest lock_update_req = 41;
inline bool Command::has_lock_update_req() const {
  return this != internal_default_instance() && lock_update_req_ != NULL;
}
inline void Command::clear_lock_update_req() {
  if (GetArenaNoVirtual() == NULL && lock_update_req_ != NULL) delete lock_update_req_;
  lock_update_req_ = NULL;
}
inline const ::kvrpcpb::LockUpdateRequest& Command::lock_update_req() const {
  const ::kvrpcpb::LockUpdateRequest* p = lock_update_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.lock_update_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockUpdateRequest*>(
      &::kvrpcpb::_LockUpdateRequest_default_instance_);
}
inline ::kvrpcpb::LockUpdateRequest* Command::mutable_lock_update_req() {
  
  if (lock_update_req_ == NULL) {
    lock_update_req_ = new ::kvrpcpb::LockUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.lock_update_req)
  return lock_update_req_;
}
inline ::kvrpcpb::LockUpdateRequest* Command::release_lock_update_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.lock_update_req)
  
  ::kvrpcpb::LockUpdateRequest* temp = lock_update_req_;
  lock_update_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_lock_update_req(::kvrpcpb::LockUpdateRequest* lock_update_req) {
  delete lock_update_req_;
  lock_update_req_ = lock_update_req;
  if (lock_update_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.lock_update_req)
}

// .kvrpcpb.UnlockRequest unlock_req = 42;
inline bool Command::has_unlock_req() const {
  return this != internal_default_instance() && unlock_req_ != NULL;
}
inline void Command::clear_unlock_req() {
  if (GetArenaNoVirtual() == NULL && unlock_req_ != NULL) delete unlock_req_;
  unlock_req_ = NULL;
}
inline const ::kvrpcpb::UnlockRequest& Command::unlock_req() const {
  const ::kvrpcpb::UnlockRequest* p = unlock_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.unlock_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockRequest*>(
      &::kvrpcpb::_UnlockRequest_default_instance_);
}
inline ::kvrpcpb::UnlockRequest* Command::mutable_unlock_req() {
  
  if (unlock_req_ == NULL) {
    unlock_req_ = new ::kvrpcpb::UnlockRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.unlock_req)
  return unlock_req_;
}
inline ::kvrpcpb::UnlockRequest* Command::release_unlock_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.unlock_req)
  
  ::kvrpcpb::UnlockRequest* temp = unlock_req_;
  unlock_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_unlock_req(::kvrpcpb::UnlockRequest* unlock_req) {
  delete unlock_req_;
  unlock_req_ = unlock_req;
  if (unlock_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.unlock_req)
}

// .kvrpcpb.UnlockForceRequest unlock_force_req = 43;
inline bool Command::has_unlock_force_req() const {
  return this != internal_default_instance() && unlock_force_req_ != NULL;
}
inline void Command::clear_unlock_force_req() {
  if (GetArenaNoVirtual() == NULL && unlock_force_req_ != NULL) delete unlock_force_req_;
  unlock_force_req_ = NULL;
}
inline const ::kvrpcpb::UnlockForceRequest& Command::unlock_force_req() const {
  const ::kvrpcpb::UnlockForceRequest* p = unlock_force_req_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Command.unlock_force_req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockForceRequest*>(
      &::kvrpcpb::_UnlockForceRequest_default_instance_);
}
inline ::kvrpcpb::UnlockForceRequest* Command::mutable_unlock_force_req() {
  
  if (unlock_force_req_ == NULL) {
    unlock_force_req_ = new ::kvrpcpb::UnlockForceRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Command.unlock_force_req)
  return unlock_force_req_;
}
inline ::kvrpcpb::UnlockForceRequest* Command::release_unlock_force_req() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Command.unlock_force_req)
  
  ::kvrpcpb::UnlockForceRequest* temp = unlock_force_req_;
  unlock_force_req_ = NULL;
  return temp;
}
inline void Command::set_allocated_unlock_force_req(::kvrpcpb::UnlockForceRequest* unlock_force_req) {
  delete unlock_force_req_;
  unlock_force_req_ = unlock_force_req;
  if (unlock_force_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Command.unlock_force_req)
}

// -------------------------------------------------------------------

// PeerTask

// .metapb.RangeEpoch verify_epoch = 1;
inline bool PeerTask::has_verify_epoch() const {
  return this != internal_default_instance() && verify_epoch_ != NULL;
}
inline void PeerTask::clear_verify_epoch() {
  if (GetArenaNoVirtual() == NULL && verify_epoch_ != NULL) delete verify_epoch_;
  verify_epoch_ = NULL;
}
inline const ::metapb::RangeEpoch& PeerTask::verify_epoch() const {
  const ::metapb::RangeEpoch* p = verify_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.PeerTask.verify_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
inline ::metapb::RangeEpoch* PeerTask::mutable_verify_epoch() {
  
  if (verify_epoch_ == NULL) {
    verify_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PeerTask.verify_epoch)
  return verify_epoch_;
}
inline ::metapb::RangeEpoch* PeerTask::release_verify_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PeerTask.verify_epoch)
  
  ::metapb::RangeEpoch* temp = verify_epoch_;
  verify_epoch_ = NULL;
  return temp;
}
inline void PeerTask::set_allocated_verify_epoch(::metapb::RangeEpoch* verify_epoch) {
  delete verify_epoch_;
  verify_epoch_ = verify_epoch;
  if (verify_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PeerTask.verify_epoch)
}

// .metapb.Peer peer = 2;
inline bool PeerTask::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void PeerTask::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& PeerTask::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.PeerTask.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* PeerTask::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PeerTask.peer)
  return peer_;
}
inline ::metapb::Peer* PeerTask::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PeerTask.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void PeerTask::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PeerTask.peer)
}

// -------------------------------------------------------------------

// SnapshotKVPair

// bytes key = 1;
inline void SnapshotKVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotKVPair::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotKVPair.key)
  return key_.GetNoArena();
}
inline void SnapshotKVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SnapshotKVPair.key)
}
#if LANG_CXX11
inline void SnapshotKVPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SnapshotKVPair.key)
}
#endif
inline void SnapshotKVPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SnapshotKVPair.key)
}
inline void SnapshotKVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SnapshotKVPair.key)
}
inline ::std::string* SnapshotKVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotKVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotKVPair::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotKVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotKVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotKVPair.key)
}

// bytes value = 2;
inline void SnapshotKVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotKVPair::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotKVPair.value)
  return value_.GetNoArena();
}
inline void SnapshotKVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SnapshotKVPair.value)
}
#if LANG_CXX11
inline void SnapshotKVPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SnapshotKVPair.value)
}
#endif
inline void SnapshotKVPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SnapshotKVPair.value)
}
inline void SnapshotKVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SnapshotKVPair.value)
}
inline ::std::string* SnapshotKVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotKVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotKVPair::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotKVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotKVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotKVPair.value)
}

// -------------------------------------------------------------------

// SnapshotContext

// .metapb.Range meta = 1;
inline bool SnapshotContext::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void SnapshotContext::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::metapb::Range& SnapshotContext::meta() const {
  const ::metapb::Range* p = meta_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapshotContext.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* SnapshotContext::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapshotContext.meta)
  return meta_;
}
inline ::metapb::Range* SnapshotContext::release_meta() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapshotContext.meta)
  
  ::metapb::Range* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void SnapshotContext::set_allocated_meta(::metapb::Range* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapshotContext.meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace raft_cmdpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft_cmdpb::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::CmdType>() {
  return ::raft_cmdpb::CmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fcmdpb_2eproto__INCLUDED
