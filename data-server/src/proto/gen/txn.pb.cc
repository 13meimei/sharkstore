// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "txn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace txn {
class TxnIntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnIntent>
     _instance;
} _TxnIntent_default_instance_;
class TxnValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnValue>
     _instance;
} _TxnValue_default_instance_;
class LockInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockInfo>
     _instance;
} _LockInfo_default_instance_;
class LockErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockError>
     _instance;
} _LockError_default_instance_;
class UnexpectedVerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnexpectedVer>
     _instance;
} _UnexpectedVer_default_instance_;
class StatusConflictDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatusConflict>
     _instance;
} _StatusConflict_default_instance_;
class TxnErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TxnError>
     _instance;
} _TxnError_default_instance_;
class PrepareRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PrepareRequest>
     _instance;
} _PrepareRequest_default_instance_;
class PrepareResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PrepareResponse>
     _instance;
} _PrepareResponse_default_instance_;
class DsPrepareRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsPrepareRequest>
     _instance;
} _DsPrepareRequest_default_instance_;
class DsPrepareResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsPrepareResponse>
     _instance;
} _DsPrepareResponse_default_instance_;
class DecideRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DecideRequest>
     _instance;
} _DecideRequest_default_instance_;
class DecideResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DecideResponse>
     _instance;
} _DecideResponse_default_instance_;
class DsDecideRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsDecideRequest>
     _instance;
} _DsDecideRequest_default_instance_;
class DsDecideResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsDecideResponse>
     _instance;
} _DsDecideResponse_default_instance_;
class ClearupRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearupRequest>
     _instance;
} _ClearupRequest_default_instance_;
class ClearupResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClearupResponse>
     _instance;
} _ClearupResponse_default_instance_;
class DsClearupRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsClearupRequest>
     _instance;
} _DsClearupRequest_default_instance_;
class DsClearupResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsClearupResponse>
     _instance;
} _DsClearupResponse_default_instance_;
class GetLockInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetLockInfoRequest>
     _instance;
} _GetLockInfoRequest_default_instance_;
class GetLockInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetLockInfoResponse>
     _instance;
} _GetLockInfoResponse_default_instance_;
class DsGetLockInfoRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsGetLockInfoRequest>
     _instance;
} _DsGetLockInfoRequest_default_instance_;
class DsGetLockInfoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsGetLockInfoResponse>
     _instance;
} _DsGetLockInfoResponse_default_instance_;
class SelectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectRequest>
     _instance;
} _SelectRequest_default_instance_;
class RowValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RowValue>
     _instance;
} _RowValue_default_instance_;
class RowIntentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RowIntent>
     _instance;
} _RowIntent_default_instance_;
class RowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Row>
     _instance;
} _Row_default_instance_;
class SelectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectResponse>
     _instance;
} _SelectResponse_default_instance_;
class DsSelectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsSelectRequest>
     _instance;
} _DsSelectRequest_default_instance_;
class DsSelectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsSelectResponse>
     _instance;
} _DsSelectResponse_default_instance_;

namespace protobuf_txn_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, typ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, check_unique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, expected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnIntent, is_primary_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, intent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, expired_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, txn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnValue, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, is_primary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockError, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, expected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnexpectedVer, actual_ver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusConflict, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, err_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, lock_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, unexpected_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnError, status_conflict_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, intents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, lock_ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, secondary_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareRequest, strict_check_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareResponse, errors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsPrepareResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideRequest, recover_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecideResponse, secondary_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDecideResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupRequest, primary_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearupResponse, err_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsClearupResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoRequest, txn_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLockInfoResponse, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsGetLockInfoResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, where_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, group_bys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, aggred_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowValue, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RowIntent, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, intent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, resp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(TxnIntent)},
  { 11, -1, sizeof(TxnValue)},
  { 22, -1, sizeof(LockInfo)},
  { 33, -1, sizeof(LockError)},
  { 40, -1, sizeof(UnexpectedVer)},
  { 48, -1, sizeof(StatusConflict)},
  { 54, -1, sizeof(TxnError)},
  { 63, -1, sizeof(PrepareRequest)},
  { 75, -1, sizeof(PrepareResponse)},
  { 81, -1, sizeof(DsPrepareRequest)},
  { 88, -1, sizeof(DsPrepareResponse)},
  { 95, -1, sizeof(DecideRequest)},
  { 104, -1, sizeof(DecideResponse)},
  { 111, -1, sizeof(DsDecideRequest)},
  { 118, -1, sizeof(DsDecideResponse)},
  { 125, -1, sizeof(ClearupRequest)},
  { 132, -1, sizeof(ClearupResponse)},
  { 138, -1, sizeof(DsClearupRequest)},
  { 145, -1, sizeof(DsClearupResponse)},
  { 152, -1, sizeof(GetLockInfoRequest)},
  { 159, -1, sizeof(GetLockInfoResponse)},
  { 165, -1, sizeof(DsGetLockInfoRequest)},
  { 172, -1, sizeof(DsGetLockInfoResponse)},
  { 179, -1, sizeof(SelectRequest)},
  { 190, -1, sizeof(RowValue)},
  { 198, -1, sizeof(RowIntent)},
  { 207, -1, sizeof(Row)},
  { 215, -1, sizeof(SelectResponse)},
  { 223, -1, sizeof(DsSelectRequest)},
  { 230, -1, sizeof(DsSelectResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnexpectedVer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusConflict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxnError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsPrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsPrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecideRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecideResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsDecideRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsDecideResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsClearupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsClearupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLockInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLockInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsGetLockInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsGetLockInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RowValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RowIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsSelectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsSelectResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "txn.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::InitDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  _TxnIntent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnIntent_default_instance_);_TxnValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnValue_default_instance_);_LockInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockInfo_default_instance_);_LockError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockError_default_instance_);_UnexpectedVer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnexpectedVer_default_instance_);_StatusConflict_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatusConflict_default_instance_);_TxnError_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TxnError_default_instance_);_PrepareRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PrepareRequest_default_instance_);_PrepareResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PrepareResponse_default_instance_);_DsPrepareRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsPrepareRequest_default_instance_);_DsPrepareResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsPrepareResponse_default_instance_);_DecideRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DecideRequest_default_instance_);_DecideResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DecideResponse_default_instance_);_DsDecideRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsDecideRequest_default_instance_);_DsDecideResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsDecideResponse_default_instance_);_ClearupRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearupRequest_default_instance_);_ClearupResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClearupResponse_default_instance_);_DsClearupRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsClearupRequest_default_instance_);_DsClearupResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsClearupResponse_default_instance_);_GetLockInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetLockInfoRequest_default_instance_);_GetLockInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetLockInfoResponse_default_instance_);_DsGetLockInfoRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsGetLockInfoRequest_default_instance_);_DsGetLockInfoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsGetLockInfoResponse_default_instance_);_SelectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectRequest_default_instance_);_RowValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RowValue_default_instance_);_RowIntent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RowIntent_default_instance_);_Row_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Row_default_instance_);_SelectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectResponse_default_instance_);_DsSelectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsSelectRequest_default_instance_);_DsSelectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsSelectResponse_default_instance_);_TxnValue_default_instance_._instance.get_mutable()->intent_ = const_cast< ::txn::TxnIntent*>(
      ::txn::TxnIntent::internal_default_instance());
  _LockError_default_instance_._instance.get_mutable()->info_ = const_cast< ::txn::LockInfo*>(
      ::txn::LockInfo::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->lock_err_ = const_cast< ::txn::LockError*>(
      ::txn::LockError::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->unexpected_ver_ = const_cast< ::txn::UnexpectedVer*>(
      ::txn::UnexpectedVer::internal_default_instance());
  _TxnError_default_instance_._instance.get_mutable()->status_conflict_ = const_cast< ::txn::StatusConflict*>(
      ::txn::StatusConflict::internal_default_instance());
  _DsPrepareRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsPrepareRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::txn::PrepareRequest*>(
      ::txn::PrepareRequest::internal_default_instance());
  _DsPrepareResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsPrepareResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::txn::PrepareResponse*>(
      ::txn::PrepareResponse::internal_default_instance());
  _DecideResponse_default_instance_._instance.get_mutable()->err_ = const_cast< ::txn::TxnError*>(
      ::txn::TxnError::internal_default_instance());
  _DsDecideRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsDecideRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::txn::DecideRequest*>(
      ::txn::DecideRequest::internal_default_instance());
  _DsDecideResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsDecideResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::txn::DecideResponse*>(
      ::txn::DecideResponse::internal_default_instance());
  _ClearupResponse_default_instance_._instance.get_mutable()->err_ = const_cast< ::txn::TxnError*>(
      ::txn::TxnError::internal_default_instance());
  _DsClearupRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsClearupRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::txn::ClearupRequest*>(
      ::txn::ClearupRequest::internal_default_instance());
  _DsClearupResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsClearupResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::txn::ClearupResponse*>(
      ::txn::ClearupResponse::internal_default_instance());
  _GetLockInfoResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::txn::LockInfo*>(
      ::txn::LockInfo::internal_default_instance());
  _DsGetLockInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsGetLockInfoRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::txn::GetLockInfoRequest*>(
      ::txn::GetLockInfoRequest::internal_default_instance());
  _DsGetLockInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsGetLockInfoResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::txn::GetLockInfoResponse*>(
      ::txn::GetLockInfoResponse::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->scope_ = const_cast< ::kvrpcpb::Scope*>(
      ::kvrpcpb::Scope::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::kvrpcpb::Limit*>(
      ::kvrpcpb::Limit::internal_default_instance());
  _RowIntent_default_instance_._instance.get_mutable()->value_ = const_cast< ::txn::RowValue*>(
      ::txn::RowValue::internal_default_instance());
  _Row_default_instance_._instance.get_mutable()->value_ = const_cast< ::txn::RowValue*>(
      ::txn::RowValue::internal_default_instance());
  _Row_default_instance_._instance.get_mutable()->intent_ = const_cast< ::txn::RowIntent*>(
      ::txn::RowIntent::internal_default_instance());
  _DsSelectRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsSelectRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::txn::SelectRequest*>(
      ::txn::SelectRequest::internal_default_instance());
  _DsSelectResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsSelectResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::txn::SelectResponse*>(
      ::txn::SelectResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ttxn.proto\022\003txn\032\rkvrpcpb.proto\032\014metapb."
      "proto\"\201\001\n\tTxnIntent\022\030\n\003typ\030\001 \001(\0162\013.txn.O"
      "pType\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\022\024\n\014che"
      "ck_unique\030\004 \001(\010\022\024\n\014expected_ver\030\005 \001(\004\022\022\n"
      "\nis_primary\030\006 \001(\010\"\237\001\n\010TxnValue\022\016\n\006txn_id"
      "\030\001 \001(\t\022\036\n\006intent\030\002 \001(\0132\016.txn.TxnIntent\022\023"
      "\n\013primary_key\030\003 \001(\014\022\022\n\nexpired_at\030\004 \001(\004\022"
      "\"\n\ntxn_status\030\n \001(\0162\016.txn.TxnStatus\022\026\n\016s"
      "econdary_keys\030\013 \003(\014\"\214\001\n\010LockInfo\022\016\n\006txn_"
      "id\030\001 \001(\t\022\017\n\007timeout\030\002 \001(\010\022\022\n\nis_primary\030"
      "\n \001(\010\022\023\n\013primary_key\030\013 \001(\014\022\036\n\006status\030\014 \001"
      "(\0162\016.txn.TxnStatus\022\026\n\016secondary_keys\030\r \003"
      "(\014\"5\n\tLockError\022\013\n\003key\030\001 \001(\014\022\033\n\004info\030\002 \001"
      "(\0132\r.txn.LockInfo\"F\n\rUnexpectedVer\022\013\n\003ke"
      "y\030\001 \001(\014\022\024\n\014expected_ver\030\002 \001(\004\022\022\n\nactual_"
      "ver\030\003 \001(\004\"0\n\016StatusConflict\022\036\n\006status\030\001 "
      "\001(\0162\016.txn.TxnStatus\"\374\001\n\010TxnError\022\'\n\010err_"
      "type\030\001 \001(\0162\025.txn.TxnError.ErrType\022 \n\010loc"
      "k_err\030\002 \001(\0132\016.txn.LockError\022*\n\016unexpecte"
      "d_ver\030\003 \001(\0132\022.txn.UnexpectedVer\022,\n\017statu"
      "s_conflict\030\004 \001(\0132\023.txn.StatusConflict\"K\n"
      "\007ErrType\022\013\n\007UNKNOWN\020\000\022\n\n\006LOCKED\020\001\022\022\n\016UNE"
      "XPECTED_VER\020\002\022\023\n\017STATUS_CONFLICT\020\003\"\245\001\n\016P"
      "repareRequest\022\016\n\006txn_id\030\001 \001(\t\022\r\n\005local\030\002"
      " \001(\010\022\037\n\007intents\030\003 \003(\0132\016.txn.TxnIntent\022\023\n"
      "\013primary_key\030\004 \001(\014\022\020\n\010lock_ttl\030\005 \001(\004\022\026\n\016"
      "secondary_keys\030\006 \003(\014\022\024\n\014strict_check\030\020 \001"
      "(\010\"0\n\017PrepareResponse\022\035\n\006errors\030\001 \003(\0132\r."
      "txn.TxnError\"\\\n\020DsPrepareRequest\022&\n\006head"
      "er\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022 \n\003req\030"
      "\002 \001(\0132\023.txn.PrepareRequest\"`\n\021DsPrepareR"
      "esponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Respon"
      "seHeader\022\"\n\004resp\030\002 \001(\0132\024.txn.PrepareResp"
      "onse\"^\n\rDecideRequest\022\016\n\006txn_id\030\001 \001(\t\022\036\n"
      "\006status\030\002 \001(\0162\016.txn.TxnStatus\022\014\n\004keys\030\003 "
      "\003(\014\022\017\n\007recover\030\004 \001(\010\"D\n\016DecideResponse\022\032"
      "\n\003err\030\001 \001(\0132\r.txn.TxnError\022\026\n\016secondary_"
      "keys\030\002 \003(\014\"Z\n\017DsDecideRequest\022&\n\006header\030"
      "\001 \001(\0132\026.kvrpcpb.RequestHeader\022\037\n\003req\030\002 \001"
      "(\0132\022.txn.DecideRequest\"^\n\020DsDecideRespon"
      "se\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.ResponseHea"
      "der\022!\n\004resp\030\002 \001(\0132\023.txn.DecideResponse\"5"
      "\n\016ClearupRequest\022\016\n\006txn_id\030\001 \001(\t\022\023\n\013prim"
      "ary_key\030\002 \001(\014\"-\n\017ClearupResponse\022\032\n\003err\030"
      "\001 \001(\0132\r.txn.TxnError\"\\\n\020DsClearupRequest"
      "\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader"
      "\022 \n\003req\030\002 \001(\0132\023.txn.ClearupRequest\"`\n\021Ds"
      "ClearupResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcp"
      "b.ResponseHeader\022\"\n\004resp\030\002 \001(\0132\024.txn.Cle"
      "arupResponse\"1\n\022GetLockInfoRequest\022\013\n\003ke"
      "y\030\001 \001(\014\022\016\n\006txn_id\030\002 \001(\t\"2\n\023GetLockInfoRe"
      "sponse\022\033\n\004info\030\001 \001(\0132\r.txn.LockInfo\"d\n\024D"
      "sGetLockInfoRequest\022&\n\006header\030\001 \001(\0132\026.kv"
      "rpcpb.RequestHeader\022$\n\003req\030\002 \001(\0132\027.txn.G"
      "etLockInfoRequest\"h\n\025DsGetLockInfoRespon"
      "se\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.ResponseHea"
      "der\022&\n\004resp\030\002 \001(\0132\030.txn.GetLockInfoRespo"
      "nse\"\316\001\n\rSelectRequest\022\013\n\003key\030\001 \001(\014\022\035\n\005sc"
      "ope\030\002 \001(\0132\016.kvrpcpb.Scope\022(\n\nfield_list\030"
      "\003 \003(\0132\024.kvrpcpb.SelectField\022%\n\rwhere_fil"
      "ters\030\004 \003(\0132\016.kvrpcpb.Match\022!\n\tgroup_bys\030"
      "\005 \003(\0132\016.metapb.Column\022\035\n\005limit\030\006 \001(\0132\016.k"
      "vrpcpb.Limit\"B\n\010RowValue\022\016\n\006fields\030\001 \001(\014"
      "\022\025\n\raggred_counts\030\002 \003(\003\022\017\n\007version\030\003 \001(\004"
      "\"_\n\tRowIntent\022\016\n\006txn_id\030\001 \001(\t\022\023\n\013primary"
      "_key\030\002 \001(\014\022\017\n\007timeout\030\003 \001(\010\022\034\n\005value\030\n \001"
      "(\0132\r.txn.RowValue\"P\n\003Row\022\013\n\003key\030\001 \001(\014\022\034\n"
      "\005value\030\002 \001(\0132\r.txn.RowValue\022\036\n\006intent\030\003 "
      "\001(\0132\016.txn.RowIntent\"F\n\016SelectResponse\022\014\n"
      "\004code\030\001 \001(\005\022\026\n\004rows\030\002 \003(\0132\010.txn.Row\022\016\n\006o"
      "ffset\030\003 \001(\004\"Z\n\017DsSelectRequest\022&\n\006header"
      "\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022\037\n\003req\030\002 "
      "\001(\0132\022.txn.SelectRequest\"^\n\020DsSelectRespo"
      "nse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.ResponseHe"
      "ader\022!\n\004resp\030\002 \001(\0132\023.txn.SelectResponse*"
      " \n\006OpType\022\n\n\006INSERT\020\000\022\n\n\006DELETE\020\001*1\n\tTxn"
      "Status\022\010\n\004INIT\020\000\022\r\n\tCOMMITTED\020\001\022\013\n\007ABORT"
      "ED\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "txn.proto", &protobuf_RegisterTypes);
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::AddDescriptors();
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_txn_2eproto

const ::google::protobuf::EnumDescriptor* TxnError_ErrType_descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_enum_descriptors[0];
}
bool TxnError_ErrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TxnError_ErrType TxnError::UNKNOWN;
const TxnError_ErrType TxnError::LOCKED;
const TxnError_ErrType TxnError::UNEXPECTED_VER;
const TxnError_ErrType TxnError::STATUS_CONFLICT;
const TxnError_ErrType TxnError::ErrType_MIN;
const TxnError_ErrType TxnError::ErrType_MAX;
const int TxnError::ErrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OpType_descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_enum_descriptors[1];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TxnStatus_descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_enum_descriptors[2];
}
bool TxnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnIntent::kTypFieldNumber;
const int TxnIntent::kKeyFieldNumber;
const int TxnIntent::kValueFieldNumber;
const int TxnIntent::kCheckUniqueFieldNumber;
const int TxnIntent::kExpectedVerFieldNumber;
const int TxnIntent::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnIntent::TxnIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.TxnIntent)
}
TxnIntent::TxnIntent(const TxnIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&typ_, &from.typ_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_ver_) -
    reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  // @@protoc_insertion_point(copy_constructor:txn.TxnIntent)
}

void TxnIntent::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_ver_) -
      reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  _cached_size_ = 0;
}

TxnIntent::~TxnIntent() {
  // @@protoc_insertion_point(destructor:txn.TxnIntent)
  SharedDtor();
}

void TxnIntent::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxnIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnIntent::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnIntent& TxnIntent::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnIntent* TxnIntent::New(::google::protobuf::Arena* arena) const {
  TxnIntent* n = new TxnIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&typ_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_ver_) -
      reinterpret_cast<char*>(&typ_)) + sizeof(expected_ver_));
  _internal_metadata_.Clear();
}

bool TxnIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.TxnIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.OpType typ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typ(static_cast< ::txn::OpType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool check_unique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_unique_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expected_ver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.TxnIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.TxnIntent)
  return false;
#undef DO_
}

void TxnIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.OpType typ = 1;
  if (this->typ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typ(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->check_unique(), output);
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expected_ver(), output);
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_primary(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.TxnIntent)
}

::google::protobuf::uint8* TxnIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.TxnIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.OpType typ = 1;
  if (this->typ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typ(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->check_unique(), target);
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->expected_ver(), target);
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_primary(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.TxnIntent)
  return target;
}

size_t TxnIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.TxnIntent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .txn.OpType typ = 1;
  if (this->typ() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typ());
  }

  // bool check_unique = 4;
  if (this->check_unique() != 0) {
    total_size += 1 + 1;
  }

  // bool is_primary = 6;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  // uint64 expected_ver = 5;
  if (this->expected_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expected_ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.TxnIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.TxnIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.TxnIntent)
    MergeFrom(*source);
  }
}

void TxnIntent::MergeFrom(const TxnIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.TxnIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.typ() != 0) {
    set_typ(from.typ());
  }
  if (from.check_unique() != 0) {
    set_check_unique(from.check_unique());
  }
  if (from.is_primary() != 0) {
    set_is_primary(from.is_primary());
  }
  if (from.expected_ver() != 0) {
    set_expected_ver(from.expected_ver());
  }
}

void TxnIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.TxnIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnIntent::CopyFrom(const TxnIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.TxnIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnIntent::IsInitialized() const {
  return true;
}

void TxnIntent::Swap(TxnIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnIntent::InternalSwap(TxnIntent* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(typ_, other->typ_);
  swap(check_unique_, other->check_unique_);
  swap(is_primary_, other->is_primary_);
  swap(expected_ver_, other->expected_ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnIntent::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnIntent

// .txn.OpType typ = 1;
void TxnIntent::clear_typ() {
  typ_ = 0;
}
::txn::OpType TxnIntent::typ() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.typ)
  return static_cast< ::txn::OpType >(typ_);
}
void TxnIntent::set_typ(::txn::OpType value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnIntent.typ)
}

// bytes key = 2;
void TxnIntent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnIntent::key() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.key)
  return key_.GetNoArena();
}
void TxnIntent::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.TxnIntent.key)
}
#if LANG_CXX11
void TxnIntent::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.TxnIntent.key)
}
#endif
void TxnIntent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.TxnIntent.key)
}
void TxnIntent::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.TxnIntent.key)
}
::std::string* TxnIntent::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.TxnIntent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnIntent::release_key() {
  // @@protoc_insertion_point(field_release:txn.TxnIntent.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnIntent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.TxnIntent.key)
}

// bytes value = 3;
void TxnIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnIntent::value() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.value)
  return value_.GetNoArena();
}
void TxnIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.TxnIntent.value)
}
#if LANG_CXX11
void TxnIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.TxnIntent.value)
}
#endif
void TxnIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.TxnIntent.value)
}
void TxnIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.TxnIntent.value)
}
::std::string* TxnIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:txn.TxnIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnIntent::release_value() {
  // @@protoc_insertion_point(field_release:txn.TxnIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:txn.TxnIntent.value)
}

// bool check_unique = 4;
void TxnIntent::clear_check_unique() {
  check_unique_ = false;
}
bool TxnIntent::check_unique() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.check_unique)
  return check_unique_;
}
void TxnIntent::set_check_unique(bool value) {
  
  check_unique_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnIntent.check_unique)
}

// uint64 expected_ver = 5;
void TxnIntent::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnIntent::expected_ver() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.expected_ver)
  return expected_ver_;
}
void TxnIntent::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnIntent.expected_ver)
}

// bool is_primary = 6;
void TxnIntent::clear_is_primary() {
  is_primary_ = false;
}
bool TxnIntent::is_primary() const {
  // @@protoc_insertion_point(field_get:txn.TxnIntent.is_primary)
  return is_primary_;
}
void TxnIntent::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnIntent.is_primary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnValue::kTxnIdFieldNumber;
const int TxnValue::kIntentFieldNumber;
const int TxnValue::kPrimaryKeyFieldNumber;
const int TxnValue::kExpiredAtFieldNumber;
const int TxnValue::kTxnStatusFieldNumber;
const int TxnValue::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnValue::TxnValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.TxnValue)
}
TxnValue::TxnValue(const TxnValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_intent()) {
    intent_ = new ::txn::TxnIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  ::memcpy(&expired_at_, &from.expired_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&txn_status_) -
    reinterpret_cast<char*>(&expired_at_)) + sizeof(txn_status_));
  // @@protoc_insertion_point(copy_constructor:txn.TxnValue)
}

void TxnValue::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_status_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(txn_status_));
  _cached_size_ = 0;
}

TxnValue::~TxnValue() {
  // @@protoc_insertion_point(destructor:txn.TxnValue)
  SharedDtor();
}

void TxnValue::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void TxnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnValue::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnValue& TxnValue::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnValue* TxnValue::New(::google::protobuf::Arena* arena) const {
  TxnValue* n = new TxnValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) {
    delete intent_;
  }
  intent_ = NULL;
  ::memset(&expired_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_status_) -
      reinterpret_cast<char*>(&expired_at_)) + sizeof(txn_status_));
  _internal_metadata_.Clear();
}

bool TxnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.TxnValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.TxnValue.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.TxnIntent intent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expired_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expired_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.TxnStatus txn_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_txn_status(static_cast< ::txn::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.TxnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.TxnValue)
  return false;
#undef DO_
}

void TxnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.TxnValue.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // .txn.TxnIntent intent = 2;
  if (this->has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->intent_, output);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_key(), output);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expired_at(), output);
  }

  // .txn.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->txn_status(), output);
  }

  // repeated bytes secondary_keys = 11;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.TxnValue)
}

::google::protobuf::uint8* TxnValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.TxnValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.TxnValue.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // .txn.TxnIntent intent = 2;
  if (this->has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->intent_, deterministic, target);
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_key(), target);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expired_at(), target);
  }

  // .txn.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->txn_status(), target);
  }

  // repeated bytes secondary_keys = 11;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.TxnValue)
  return target;
}

size_t TxnValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.TxnValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 3;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // .txn.TxnIntent intent = 2;
  if (this->has_intent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intent_);
  }

  // uint64 expired_at = 4;
  if (this->expired_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expired_at());
  }

  // .txn.TxnStatus txn_status = 10;
  if (this->txn_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->txn_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.TxnValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.TxnValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.TxnValue)
    MergeFrom(*source);
  }
}

void TxnValue::MergeFrom(const TxnValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.TxnValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_intent()) {
    mutable_intent()->::txn::TxnIntent::MergeFrom(from.intent());
  }
  if (from.expired_at() != 0) {
    set_expired_at(from.expired_at());
  }
  if (from.txn_status() != 0) {
    set_txn_status(from.txn_status());
  }
}

void TxnValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.TxnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnValue::CopyFrom(const TxnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.TxnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnValue::IsInitialized() const {
  return true;
}

void TxnValue::Swap(TxnValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnValue::InternalSwap(TxnValue* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(intent_, other->intent_);
  swap(expired_at_, other->expired_at_);
  swap(txn_status_, other->txn_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnValue::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnValue

// string txn_id = 1;
void TxnValue::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnValue::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.TxnValue.txn_id)
  return txn_id_.GetNoArena();
}
void TxnValue::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.TxnValue.txn_id)
}
#if LANG_CXX11
void TxnValue::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.TxnValue.txn_id)
}
#endif
void TxnValue::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.TxnValue.txn_id)
}
void TxnValue::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.TxnValue.txn_id)
}
::std::string* TxnValue::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.TxnValue.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnValue::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.TxnValue.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnValue::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.TxnValue.txn_id)
}

// .txn.TxnIntent intent = 2;
bool TxnValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
void TxnValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
const ::txn::TxnIntent& TxnValue::intent() const {
  const ::txn::TxnIntent* p = intent_;
  // @@protoc_insertion_point(field_get:txn.TxnValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::TxnIntent*>(
      &::txn::_TxnIntent_default_instance_);
}
::txn::TxnIntent* TxnValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::txn::TxnIntent;
  }
  // @@protoc_insertion_point(field_mutable:txn.TxnValue.intent)
  return intent_;
}
::txn::TxnIntent* TxnValue::release_intent() {
  // @@protoc_insertion_point(field_release:txn.TxnValue.intent)
  
  ::txn::TxnIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void TxnValue::set_allocated_intent(::txn::TxnIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.TxnValue.intent)
}

// bytes primary_key = 3;
void TxnValue::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TxnValue::primary_key() const {
  // @@protoc_insertion_point(field_get:txn.TxnValue.primary_key)
  return primary_key_.GetNoArena();
}
void TxnValue::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.TxnValue.primary_key)
}
#if LANG_CXX11
void TxnValue::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.TxnValue.primary_key)
}
#endif
void TxnValue::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.TxnValue.primary_key)
}
void TxnValue::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.TxnValue.primary_key)
}
::std::string* TxnValue::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.TxnValue.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TxnValue::release_primary_key() {
  // @@protoc_insertion_point(field_release:txn.TxnValue.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TxnValue::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txn.TxnValue.primary_key)
}

// uint64 expired_at = 4;
void TxnValue::clear_expired_at() {
  expired_at_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnValue::expired_at() const {
  // @@protoc_insertion_point(field_get:txn.TxnValue.expired_at)
  return expired_at_;
}
void TxnValue::set_expired_at(::google::protobuf::uint64 value) {
  
  expired_at_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnValue.expired_at)
}

// .txn.TxnStatus txn_status = 10;
void TxnValue::clear_txn_status() {
  txn_status_ = 0;
}
::txn::TxnStatus TxnValue::txn_status() const {
  // @@protoc_insertion_point(field_get:txn.TxnValue.txn_status)
  return static_cast< ::txn::TxnStatus >(txn_status_);
}
void TxnValue::set_txn_status(::txn::TxnStatus value) {
  
  txn_status_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnValue.txn_status)
}

// repeated bytes secondary_keys = 11;
int TxnValue::secondary_keys_size() const {
  return secondary_keys_.size();
}
void TxnValue::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& TxnValue::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txn.TxnValue.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* TxnValue::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.TxnValue.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void TxnValue::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txn.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TxnValue::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txn.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void TxnValue::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txn.TxnValue.secondary_keys)
}
void TxnValue::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txn.TxnValue.secondary_keys)
}
::std::string* TxnValue::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txn.TxnValue.secondary_keys)
  return secondary_keys_.Add();
}
void TxnValue::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txn.TxnValue.secondary_keys)
}
#if LANG_CXX11
void TxnValue::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txn.TxnValue.secondary_keys)
}
#endif
void TxnValue::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txn.TxnValue.secondary_keys)
}
void TxnValue::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txn.TxnValue.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnValue::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txn.TxnValue.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TxnValue::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txn.TxnValue.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kTxnIdFieldNumber;
const int LockInfo::kTimeoutFieldNumber;
const int LockInfo::kIsPrimaryFieldNumber;
const int LockInfo::kPrimaryKeyFieldNumber;
const int LockInfo::kStatusFieldNumber;
const int LockInfo::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:txn.LockInfo)
}

void LockInfo::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  _cached_size_ = 0;
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:txn.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockInfo& LockInfo::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockInfo* LockInfo::New(::google::protobuf::Arena* arena) const {
  LockInfo* n = new LockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.LockInfo.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_primary = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.TxnStatus status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::txn::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.LockInfo.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->timeout(), output);
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_primary(), output);
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->primary_key(), output);
  }

  // .txn.TxnStatus status = 12;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }

  // repeated bytes secondary_keys = 13;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.LockInfo)
}

::google::protobuf::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.LockInfo.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->timeout(), target);
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_primary(), target);
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->primary_key(), target);
  }

  // .txn.TxnStatus status = 12;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }

  // repeated bytes secondary_keys = 13;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.LockInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 11;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // bool timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  // bool is_primary = 10;
  if (this->is_primary() != 0) {
    total_size += 1 + 1;
  }

  // .txn.TxnStatus status = 12;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.LockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.is_primary() != 0) {
    set_is_primary(from.is_primary());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(timeout_, other->timeout_);
  swap(is_primary_, other->is_primary_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockInfo

// string txn_id = 1;
void LockInfo::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.txn_id)
  return txn_id_.GetNoArena();
}
void LockInfo::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.LockInfo.txn_id)
}
#if LANG_CXX11
void LockInfo::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.LockInfo.txn_id)
}
#endif
void LockInfo::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.LockInfo.txn_id)
}
void LockInfo::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.LockInfo.txn_id)
}
::std::string* LockInfo::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.LockInfo.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.LockInfo.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.LockInfo.txn_id)
}

// bool timeout = 2;
void LockInfo::clear_timeout() {
  timeout_ = false;
}
bool LockInfo::timeout() const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.timeout)
  return timeout_;
}
void LockInfo::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:txn.LockInfo.timeout)
}

// bool is_primary = 10;
void LockInfo::clear_is_primary() {
  is_primary_ = false;
}
bool LockInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.is_primary)
  return is_primary_;
}
void LockInfo::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:txn.LockInfo.is_primary)
}

// bytes primary_key = 11;
void LockInfo::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::primary_key() const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.primary_key)
  return primary_key_.GetNoArena();
}
void LockInfo::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.LockInfo.primary_key)
}
#if LANG_CXX11
void LockInfo::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.LockInfo.primary_key)
}
#endif
void LockInfo::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.LockInfo.primary_key)
}
void LockInfo::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.LockInfo.primary_key)
}
::std::string* LockInfo::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.LockInfo.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_primary_key() {
  // @@protoc_insertion_point(field_release:txn.LockInfo.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txn.LockInfo.primary_key)
}

// .txn.TxnStatus status = 12;
void LockInfo::clear_status() {
  status_ = 0;
}
::txn::TxnStatus LockInfo::status() const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.status)
  return static_cast< ::txn::TxnStatus >(status_);
}
void LockInfo::set_status(::txn::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txn.LockInfo.status)
}

// repeated bytes secondary_keys = 13;
int LockInfo::secondary_keys_size() const {
  return secondary_keys_.size();
}
void LockInfo::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& LockInfo::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txn.LockInfo.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* LockInfo::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.LockInfo.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void LockInfo::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txn.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LockInfo::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txn.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void LockInfo::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txn.LockInfo.secondary_keys)
}
void LockInfo::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txn.LockInfo.secondary_keys)
}
::std::string* LockInfo::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txn.LockInfo.secondary_keys)
  return secondary_keys_.Add();
}
void LockInfo::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txn.LockInfo.secondary_keys)
}
#if LANG_CXX11
void LockInfo::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txn.LockInfo.secondary_keys)
}
#endif
void LockInfo::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txn.LockInfo.secondary_keys)
}
void LockInfo::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txn.LockInfo.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockInfo::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txn.LockInfo.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LockInfo::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txn.LockInfo.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockError::kKeyFieldNumber;
const int LockError::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockError::LockError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.LockError)
}
LockError::LockError(const LockError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    info_ = new ::txn::LockInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.LockError)
}

void LockError::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  _cached_size_ = 0;
}

LockError::~LockError() {
  // @@protoc_insertion_point(destructor:txn.LockError)
  SharedDtor();
}

void LockError::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void LockError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockError::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockError& LockError::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockError* LockError::New(::google::protobuf::Arena* arena) const {
  LockError* n = new LockError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockError::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool LockError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.LockError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.LockInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.LockError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.LockError)
  return false;
#undef DO_
}

void LockError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .txn.LockInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.LockError)
}

::google::protobuf::uint8* LockError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.LockError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .txn.LockInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.LockError)
  return target;
}

size_t LockError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.LockError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .txn.LockInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.LockError)
  GOOGLE_DCHECK_NE(&from, this);
  const LockError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.LockError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.LockError)
    MergeFrom(*source);
  }
}

void LockError::MergeFrom(const LockError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.LockError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    mutable_info()->::txn::LockInfo::MergeFrom(from.info());
  }
}

void LockError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.LockError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockError::CopyFrom(const LockError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.LockError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockError::IsInitialized() const {
  return true;
}

void LockError::Swap(LockError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockError::InternalSwap(LockError* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockError::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockError

// bytes key = 1;
void LockError::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockError::key() const {
  // @@protoc_insertion_point(field_get:txn.LockError.key)
  return key_.GetNoArena();
}
void LockError::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.LockError.key)
}
#if LANG_CXX11
void LockError::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.LockError.key)
}
#endif
void LockError::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.LockError.key)
}
void LockError::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.LockError.key)
}
::std::string* LockError::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.LockError.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockError::release_key() {
  // @@protoc_insertion_point(field_release:txn.LockError.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockError::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.LockError.key)
}

// .txn.LockInfo info = 2;
bool LockError::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void LockError::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::txn::LockInfo& LockError::info() const {
  const ::txn::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:txn.LockError.info)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::LockInfo*>(
      &::txn::_LockInfo_default_instance_);
}
::txn::LockInfo* LockError::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::txn::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:txn.LockError.info)
  return info_;
}
::txn::LockInfo* LockError::release_info() {
  // @@protoc_insertion_point(field_release:txn.LockError.info)
  
  ::txn::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void LockError::set_allocated_info(::txn::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.LockError.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnexpectedVer::kKeyFieldNumber;
const int UnexpectedVer::kExpectedVerFieldNumber;
const int UnexpectedVer::kActualVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnexpectedVer::UnexpectedVer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.UnexpectedVer)
}
UnexpectedVer::UnexpectedVer(const UnexpectedVer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&expected_ver_, &from.expected_ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_ver_) -
    reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  // @@protoc_insertion_point(copy_constructor:txn.UnexpectedVer)
}

void UnexpectedVer::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_ver_) -
      reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  _cached_size_ = 0;
}

UnexpectedVer::~UnexpectedVer() {
  // @@protoc_insertion_point(destructor:txn.UnexpectedVer)
  SharedDtor();
}

void UnexpectedVer::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnexpectedVer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnexpectedVer::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnexpectedVer& UnexpectedVer::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnexpectedVer* UnexpectedVer::New(::google::protobuf::Arena* arena) const {
  UnexpectedVer* n = new UnexpectedVer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnexpectedVer::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_ver_) -
      reinterpret_cast<char*>(&expected_ver_)) + sizeof(actual_ver_));
  _internal_metadata_.Clear();
}

bool UnexpectedVer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.UnexpectedVer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expected_ver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 actual_ver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actual_ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.UnexpectedVer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.UnexpectedVer)
  return false;
#undef DO_
}

void UnexpectedVer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->expected_ver(), output);
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->actual_ver(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.UnexpectedVer)
}

::google::protobuf::uint8* UnexpectedVer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.UnexpectedVer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->expected_ver(), target);
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->actual_ver(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.UnexpectedVer)
  return target;
}

size_t UnexpectedVer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.UnexpectedVer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // uint64 expected_ver = 2;
  if (this->expected_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expected_ver());
  }

  // uint64 actual_ver = 3;
  if (this->actual_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->actual_ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnexpectedVer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.UnexpectedVer)
  GOOGLE_DCHECK_NE(&from, this);
  const UnexpectedVer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnexpectedVer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.UnexpectedVer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.UnexpectedVer)
    MergeFrom(*source);
  }
}

void UnexpectedVer::MergeFrom(const UnexpectedVer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.UnexpectedVer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.expected_ver() != 0) {
    set_expected_ver(from.expected_ver());
  }
  if (from.actual_ver() != 0) {
    set_actual_ver(from.actual_ver());
  }
}

void UnexpectedVer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.UnexpectedVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnexpectedVer::CopyFrom(const UnexpectedVer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.UnexpectedVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnexpectedVer::IsInitialized() const {
  return true;
}

void UnexpectedVer::Swap(UnexpectedVer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnexpectedVer::InternalSwap(UnexpectedVer* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(expected_ver_, other->expected_ver_);
  swap(actual_ver_, other->actual_ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnexpectedVer::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnexpectedVer

// bytes key = 1;
void UnexpectedVer::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnexpectedVer::key() const {
  // @@protoc_insertion_point(field_get:txn.UnexpectedVer.key)
  return key_.GetNoArena();
}
void UnexpectedVer::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.UnexpectedVer.key)
}
#if LANG_CXX11
void UnexpectedVer::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.UnexpectedVer.key)
}
#endif
void UnexpectedVer::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.UnexpectedVer.key)
}
void UnexpectedVer::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.UnexpectedVer.key)
}
::std::string* UnexpectedVer::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.UnexpectedVer.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnexpectedVer::release_key() {
  // @@protoc_insertion_point(field_release:txn.UnexpectedVer.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnexpectedVer::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.UnexpectedVer.key)
}

// uint64 expected_ver = 2;
void UnexpectedVer::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UnexpectedVer::expected_ver() const {
  // @@protoc_insertion_point(field_get:txn.UnexpectedVer.expected_ver)
  return expected_ver_;
}
void UnexpectedVer::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:txn.UnexpectedVer.expected_ver)
}

// uint64 actual_ver = 3;
void UnexpectedVer::clear_actual_ver() {
  actual_ver_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UnexpectedVer::actual_ver() const {
  // @@protoc_insertion_point(field_get:txn.UnexpectedVer.actual_ver)
  return actual_ver_;
}
void UnexpectedVer::set_actual_ver(::google::protobuf::uint64 value) {
  
  actual_ver_ = value;
  // @@protoc_insertion_point(field_set:txn.UnexpectedVer.actual_ver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusConflict::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusConflict::StatusConflict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.StatusConflict)
}
StatusConflict::StatusConflict(const StatusConflict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:txn.StatusConflict)
}

void StatusConflict::SharedCtor() {
  status_ = 0;
  _cached_size_ = 0;
}

StatusConflict::~StatusConflict() {
  // @@protoc_insertion_point(destructor:txn.StatusConflict)
  SharedDtor();
}

void StatusConflict::SharedDtor() {
}

void StatusConflict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusConflict::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusConflict& StatusConflict::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusConflict* StatusConflict::New(::google::protobuf::Arena* arena) const {
  StatusConflict* n = new StatusConflict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool StatusConflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.StatusConflict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.TxnStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::txn::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.StatusConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.StatusConflict)
  return false;
#undef DO_
}

void StatusConflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.StatusConflict)
}

::google::protobuf::uint8* StatusConflict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.StatusConflict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.StatusConflict)
  return target;
}

size_t StatusConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.StatusConflict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .txn.TxnStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusConflict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.StatusConflict)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusConflict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusConflict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.StatusConflict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.StatusConflict)
    MergeFrom(*source);
  }
}

void StatusConflict::MergeFrom(const StatusConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.StatusConflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void StatusConflict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.StatusConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusConflict::CopyFrom(const StatusConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.StatusConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusConflict::IsInitialized() const {
  return true;
}

void StatusConflict::Swap(StatusConflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusConflict::InternalSwap(StatusConflict* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusConflict::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusConflict

// .txn.TxnStatus status = 1;
void StatusConflict::clear_status() {
  status_ = 0;
}
::txn::TxnStatus StatusConflict::status() const {
  // @@protoc_insertion_point(field_get:txn.StatusConflict.status)
  return static_cast< ::txn::TxnStatus >(status_);
}
void StatusConflict::set_status(::txn::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txn.StatusConflict.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnError::kErrTypeFieldNumber;
const int TxnError::kLockErrFieldNumber;
const int TxnError::kUnexpectedVerFieldNumber;
const int TxnError::kStatusConflictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnError::TxnError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.TxnError)
}
TxnError::TxnError(const TxnError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lock_err()) {
    lock_err_ = new ::txn::LockError(*from.lock_err_);
  } else {
    lock_err_ = NULL;
  }
  if (from.has_unexpected_ver()) {
    unexpected_ver_ = new ::txn::UnexpectedVer(*from.unexpected_ver_);
  } else {
    unexpected_ver_ = NULL;
  }
  if (from.has_status_conflict()) {
    status_conflict_ = new ::txn::StatusConflict(*from.status_conflict_);
  } else {
    status_conflict_ = NULL;
  }
  err_type_ = from.err_type_;
  // @@protoc_insertion_point(copy_constructor:txn.TxnError)
}

void TxnError::SharedCtor() {
  ::memset(&lock_err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_type_) -
      reinterpret_cast<char*>(&lock_err_)) + sizeof(err_type_));
  _cached_size_ = 0;
}

TxnError::~TxnError() {
  // @@protoc_insertion_point(destructor:txn.TxnError)
  SharedDtor();
}

void TxnError::SharedDtor() {
  if (this != internal_default_instance()) delete lock_err_;
  if (this != internal_default_instance()) delete unexpected_ver_;
  if (this != internal_default_instance()) delete status_conflict_;
}

void TxnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnError::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnError& TxnError::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxnError* TxnError::New(::google::protobuf::Arena* arena) const {
  TxnError* n = new TxnError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnError::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) {
    delete lock_err_;
  }
  lock_err_ = NULL;
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) {
    delete unexpected_ver_;
  }
  unexpected_ver_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) {
    delete status_conflict_;
  }
  status_conflict_ = NULL;
  err_type_ = 0;
  _internal_metadata_.Clear();
}

bool TxnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.TxnError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.TxnError.ErrType err_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_err_type(static_cast< ::txn::TxnError_ErrType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.LockError lock_err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.UnexpectedVer unexpected_ver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unexpected_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.StatusConflict status_conflict = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_conflict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.TxnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.TxnError)
  return false;
#undef DO_
}

void TxnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->err_type(), output);
  }

  // .txn.LockError lock_err = 2;
  if (this->has_lock_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lock_err_, output);
  }

  // .txn.UnexpectedVer unexpected_ver = 3;
  if (this->has_unexpected_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->unexpected_ver_, output);
  }

  // .txn.StatusConflict status_conflict = 4;
  if (this->has_status_conflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_conflict_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.TxnError)
}

::google::protobuf::uint8* TxnError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.TxnError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->err_type(), target);
  }

  // .txn.LockError lock_err = 2;
  if (this->has_lock_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lock_err_, deterministic, target);
  }

  // .txn.UnexpectedVer unexpected_ver = 3;
  if (this->has_unexpected_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->unexpected_ver_, deterministic, target);
  }

  // .txn.StatusConflict status_conflict = 4;
  if (this->has_status_conflict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_conflict_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.TxnError)
  return target;
}

size_t TxnError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.TxnError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .txn.LockError lock_err = 2;
  if (this->has_lock_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_err_);
  }

  // .txn.UnexpectedVer unexpected_ver = 3;
  if (this->has_unexpected_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unexpected_ver_);
  }

  // .txn.StatusConflict status_conflict = 4;
  if (this->has_status_conflict()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_conflict_);
  }

  // .txn.TxnError.ErrType err_type = 1;
  if (this->err_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.TxnError)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.TxnError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.TxnError)
    MergeFrom(*source);
  }
}

void TxnError::MergeFrom(const TxnError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.TxnError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lock_err()) {
    mutable_lock_err()->::txn::LockError::MergeFrom(from.lock_err());
  }
  if (from.has_unexpected_ver()) {
    mutable_unexpected_ver()->::txn::UnexpectedVer::MergeFrom(from.unexpected_ver());
  }
  if (from.has_status_conflict()) {
    mutable_status_conflict()->::txn::StatusConflict::MergeFrom(from.status_conflict());
  }
  if (from.err_type() != 0) {
    set_err_type(from.err_type());
  }
}

void TxnError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.TxnError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnError::CopyFrom(const TxnError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.TxnError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnError::IsInitialized() const {
  return true;
}

void TxnError::Swap(TxnError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnError::InternalSwap(TxnError* other) {
  using std::swap;
  swap(lock_err_, other->lock_err_);
  swap(unexpected_ver_, other->unexpected_ver_);
  swap(status_conflict_, other->status_conflict_);
  swap(err_type_, other->err_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnError::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnError

// .txn.TxnError.ErrType err_type = 1;
void TxnError::clear_err_type() {
  err_type_ = 0;
}
::txn::TxnError_ErrType TxnError::err_type() const {
  // @@protoc_insertion_point(field_get:txn.TxnError.err_type)
  return static_cast< ::txn::TxnError_ErrType >(err_type_);
}
void TxnError::set_err_type(::txn::TxnError_ErrType value) {
  
  err_type_ = value;
  // @@protoc_insertion_point(field_set:txn.TxnError.err_type)
}

// .txn.LockError lock_err = 2;
bool TxnError::has_lock_err() const {
  return this != internal_default_instance() && lock_err_ != NULL;
}
void TxnError::clear_lock_err() {
  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) delete lock_err_;
  lock_err_ = NULL;
}
const ::txn::LockError& TxnError::lock_err() const {
  const ::txn::LockError* p = lock_err_;
  // @@protoc_insertion_point(field_get:txn.TxnError.lock_err)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::LockError*>(
      &::txn::_LockError_default_instance_);
}
::txn::LockError* TxnError::mutable_lock_err() {
  
  if (lock_err_ == NULL) {
    lock_err_ = new ::txn::LockError;
  }
  // @@protoc_insertion_point(field_mutable:txn.TxnError.lock_err)
  return lock_err_;
}
::txn::LockError* TxnError::release_lock_err() {
  // @@protoc_insertion_point(field_release:txn.TxnError.lock_err)
  
  ::txn::LockError* temp = lock_err_;
  lock_err_ = NULL;
  return temp;
}
void TxnError::set_allocated_lock_err(::txn::LockError* lock_err) {
  delete lock_err_;
  lock_err_ = lock_err;
  if (lock_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.TxnError.lock_err)
}

// .txn.UnexpectedVer unexpected_ver = 3;
bool TxnError::has_unexpected_ver() const {
  return this != internal_default_instance() && unexpected_ver_ != NULL;
}
void TxnError::clear_unexpected_ver() {
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) delete unexpected_ver_;
  unexpected_ver_ = NULL;
}
const ::txn::UnexpectedVer& TxnError::unexpected_ver() const {
  const ::txn::UnexpectedVer* p = unexpected_ver_;
  // @@protoc_insertion_point(field_get:txn.TxnError.unexpected_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::UnexpectedVer*>(
      &::txn::_UnexpectedVer_default_instance_);
}
::txn::UnexpectedVer* TxnError::mutable_unexpected_ver() {
  
  if (unexpected_ver_ == NULL) {
    unexpected_ver_ = new ::txn::UnexpectedVer;
  }
  // @@protoc_insertion_point(field_mutable:txn.TxnError.unexpected_ver)
  return unexpected_ver_;
}
::txn::UnexpectedVer* TxnError::release_unexpected_ver() {
  // @@protoc_insertion_point(field_release:txn.TxnError.unexpected_ver)
  
  ::txn::UnexpectedVer* temp = unexpected_ver_;
  unexpected_ver_ = NULL;
  return temp;
}
void TxnError::set_allocated_unexpected_ver(::txn::UnexpectedVer* unexpected_ver) {
  delete unexpected_ver_;
  unexpected_ver_ = unexpected_ver;
  if (unexpected_ver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.TxnError.unexpected_ver)
}

// .txn.StatusConflict status_conflict = 4;
bool TxnError::has_status_conflict() const {
  return this != internal_default_instance() && status_conflict_ != NULL;
}
void TxnError::clear_status_conflict() {
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) delete status_conflict_;
  status_conflict_ = NULL;
}
const ::txn::StatusConflict& TxnError::status_conflict() const {
  const ::txn::StatusConflict* p = status_conflict_;
  // @@protoc_insertion_point(field_get:txn.TxnError.status_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::StatusConflict*>(
      &::txn::_StatusConflict_default_instance_);
}
::txn::StatusConflict* TxnError::mutable_status_conflict() {
  
  if (status_conflict_ == NULL) {
    status_conflict_ = new ::txn::StatusConflict;
  }
  // @@protoc_insertion_point(field_mutable:txn.TxnError.status_conflict)
  return status_conflict_;
}
::txn::StatusConflict* TxnError::release_status_conflict() {
  // @@protoc_insertion_point(field_release:txn.TxnError.status_conflict)
  
  ::txn::StatusConflict* temp = status_conflict_;
  status_conflict_ = NULL;
  return temp;
}
void TxnError::set_allocated_status_conflict(::txn::StatusConflict* status_conflict) {
  delete status_conflict_;
  status_conflict_ = status_conflict;
  if (status_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.TxnError.status_conflict)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareRequest::kTxnIdFieldNumber;
const int PrepareRequest::kLocalFieldNumber;
const int PrepareRequest::kIntentsFieldNumber;
const int PrepareRequest::kPrimaryKeyFieldNumber;
const int PrepareRequest::kLockTtlFieldNumber;
const int PrepareRequest::kSecondaryKeysFieldNumber;
const int PrepareRequest::kStrictCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareRequest::PrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.PrepareRequest)
}
PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intents_(from.intents_),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  ::memcpy(&lock_ttl_, &from.lock_ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&strict_check_) -
    reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  // @@protoc_insertion_point(copy_constructor:txn.PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_check_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  _cached_size_ = 0;
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:txn.PrepareRequest)
  SharedDtor();
}

void PrepareRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareRequest& PrepareRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareRequest* PrepareRequest::New(::google::protobuf::Arena* arena) const {
  PrepareRequest* n = new PrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intents_.Clear();
  secondary_keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_check_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(strict_check_));
  _internal_metadata_.Clear();
}

bool PrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.PrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.PrepareRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool local = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .txn.TxnIntent intents = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ttl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool strict_check = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strict_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.PrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.PrepareRequest)
  return false;
#undef DO_
}

void PrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.PrepareRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bool local = 2;
  if (this->local() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->local(), output);
  }

  // repeated .txn.TxnIntent intents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intents(static_cast<int>(i)), output);
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->primary_key(), output);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lock_ttl(), output);
  }

  // repeated bytes secondary_keys = 6;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->secondary_keys(i), output);
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->strict_check(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.PrepareRequest)
}

::google::protobuf::uint8* PrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.PrepareRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bool local = 2;
  if (this->local() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->local(), target);
  }

  // repeated .txn.TxnIntent intents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->intents(static_cast<int>(i)), deterministic, target);
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->primary_key(), target);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lock_ttl(), target);
  }

  // repeated bytes secondary_keys = 6;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->secondary_keys(i), target);
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->strict_check(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.PrepareRequest)
  return target;
}

size_t PrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.PrepareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .txn.TxnIntent intents = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->intents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intents(static_cast<int>(i)));
    }
  }

  // repeated bytes secondary_keys = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 4;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  // bool local = 2;
  if (this->local() != 0) {
    total_size += 1 + 1;
  }

  // bool strict_check = 16;
  if (this->strict_check() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.PrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.PrepareRequest)
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intents_.MergeFrom(from.intents_);
  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
  if (from.local() != 0) {
    set_local(from.local());
  }
  if (from.strict_check() != 0) {
    set_strict_check(from.strict_check());
  }
}

void PrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  return true;
}

void PrepareRequest::Swap(PrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRequest::InternalSwap(PrepareRequest* other) {
  using std::swap;
  intents_.InternalSwap(&other->intents_);
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(lock_ttl_, other->lock_ttl_);
  swap(local_, other->local_);
  swap(strict_check_, other->strict_check_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareRequest

// string txn_id = 1;
void PrepareRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrepareRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.txn_id)
  return txn_id_.GetNoArena();
}
void PrepareRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.txn_id)
}
#if LANG_CXX11
void PrepareRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.PrepareRequest.txn_id)
}
#endif
void PrepareRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.PrepareRequest.txn_id)
}
void PrepareRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.PrepareRequest.txn_id)
}
::std::string* PrepareRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.PrepareRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrepareRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.PrepareRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrepareRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.PrepareRequest.txn_id)
}

// bool local = 2;
void PrepareRequest::clear_local() {
  local_ = false;
}
bool PrepareRequest::local() const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.local)
  return local_;
}
void PrepareRequest::set_local(bool value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.local)
}

// repeated .txn.TxnIntent intents = 3;
int PrepareRequest::intents_size() const {
  return intents_.size();
}
void PrepareRequest::clear_intents() {
  intents_.Clear();
}
const ::txn::TxnIntent& PrepareRequest::intents(int index) const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.intents)
  return intents_.Get(index);
}
::txn::TxnIntent* PrepareRequest::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:txn.PrepareRequest.intents)
  return intents_.Mutable(index);
}
::txn::TxnIntent* PrepareRequest::add_intents() {
  // @@protoc_insertion_point(field_add:txn.PrepareRequest.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::txn::TxnIntent >*
PrepareRequest::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:txn.PrepareRequest.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::txn::TxnIntent >&
PrepareRequest::intents() const {
  // @@protoc_insertion_point(field_list:txn.PrepareRequest.intents)
  return intents_;
}

// bytes primary_key = 4;
void PrepareRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrepareRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.primary_key)
  return primary_key_.GetNoArena();
}
void PrepareRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.primary_key)
}
#if LANG_CXX11
void PrepareRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.PrepareRequest.primary_key)
}
#endif
void PrepareRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.PrepareRequest.primary_key)
}
void PrepareRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.PrepareRequest.primary_key)
}
::std::string* PrepareRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.PrepareRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrepareRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:txn.PrepareRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrepareRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txn.PrepareRequest.primary_key)
}

// uint64 lock_ttl = 5;
void PrepareRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrepareRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.lock_ttl)
  return lock_ttl_;
}
void PrepareRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.lock_ttl)
}

// repeated bytes secondary_keys = 6;
int PrepareRequest::secondary_keys_size() const {
  return secondary_keys_.size();
}
void PrepareRequest::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& PrepareRequest::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* PrepareRequest::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.PrepareRequest.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void PrepareRequest::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PrepareRequest::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void PrepareRequest::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txn.PrepareRequest.secondary_keys)
}
void PrepareRequest::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txn.PrepareRequest.secondary_keys)
}
::std::string* PrepareRequest::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txn.PrepareRequest.secondary_keys)
  return secondary_keys_.Add();
}
void PrepareRequest::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txn.PrepareRequest.secondary_keys)
}
#if LANG_CXX11
void PrepareRequest::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txn.PrepareRequest.secondary_keys)
}
#endif
void PrepareRequest::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txn.PrepareRequest.secondary_keys)
}
void PrepareRequest::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txn.PrepareRequest.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrepareRequest::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txn.PrepareRequest.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PrepareRequest::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txn.PrepareRequest.secondary_keys)
  return &secondary_keys_;
}

// bool strict_check = 16;
void PrepareRequest::clear_strict_check() {
  strict_check_ = false;
}
bool PrepareRequest::strict_check() const {
  // @@protoc_insertion_point(field_get:txn.PrepareRequest.strict_check)
  return strict_check_;
}
void PrepareRequest::set_strict_check(bool value) {
  
  strict_check_ = value;
  // @@protoc_insertion_point(field_set:txn.PrepareRequest.strict_check)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareResponse::PrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.PrepareResponse)
}
PrepareResponse::PrepareResponse(const PrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:txn.PrepareResponse)
}

void PrepareResponse::SharedCtor() {
  _cached_size_ = 0;
}

PrepareResponse::~PrepareResponse() {
  // @@protoc_insertion_point(destructor:txn.PrepareResponse)
  SharedDtor();
}

void PrepareResponse::SharedDtor() {
}

void PrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareResponse& PrepareResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareResponse* PrepareResponse::New(::google::protobuf::Arena* arena) const {
  PrepareResponse* n = new PrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _internal_metadata_.Clear();
}

bool PrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.PrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .txn.TxnError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.PrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.PrepareResponse)
  return false;
#undef DO_
}

void PrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txn.TxnError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->errors(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.PrepareResponse)
}

::google::protobuf::uint8* PrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.PrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .txn.TxnError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.PrepareResponse)
  return target;
}

size_t PrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.PrepareResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .txn.TxnError errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.PrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.PrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.PrepareResponse)
    MergeFrom(*source);
  }
}

void PrepareResponse::MergeFrom(const PrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.PrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void PrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.PrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareResponse::CopyFrom(const PrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.PrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareResponse::IsInitialized() const {
  return true;
}

void PrepareResponse::Swap(PrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareResponse::InternalSwap(PrepareResponse* other) {
  using std::swap;
  errors_.InternalSwap(&other->errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareResponse

// repeated .txn.TxnError errors = 1;
int PrepareResponse::errors_size() const {
  return errors_.size();
}
void PrepareResponse::clear_errors() {
  errors_.Clear();
}
const ::txn::TxnError& PrepareResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:txn.PrepareResponse.errors)
  return errors_.Get(index);
}
::txn::TxnError* PrepareResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:txn.PrepareResponse.errors)
  return errors_.Mutable(index);
}
::txn::TxnError* PrepareResponse::add_errors() {
  // @@protoc_insertion_point(field_add:txn.PrepareResponse.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::txn::TxnError >*
PrepareResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:txn.PrepareResponse.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::txn::TxnError >&
PrepareResponse::errors() const {
  // @@protoc_insertion_point(field_list:txn.PrepareResponse.errors)
  return errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsPrepareRequest::kHeaderFieldNumber;
const int DsPrepareRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsPrepareRequest::DsPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsPrepareRequest)
}
DsPrepareRequest::DsPrepareRequest(const DsPrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::txn::PrepareRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsPrepareRequest)
}

void DsPrepareRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsPrepareRequest::~DsPrepareRequest() {
  // @@protoc_insertion_point(destructor:txn.DsPrepareRequest)
  SharedDtor();
}

void DsPrepareRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsPrepareRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsPrepareRequest& DsPrepareRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsPrepareRequest* DsPrepareRequest::New(::google::protobuf::Arena* arena) const {
  DsPrepareRequest* n = new DsPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsPrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.PrepareRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsPrepareRequest)
  return false;
#undef DO_
}

void DsPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.PrepareRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsPrepareRequest)
}

::google::protobuf::uint8* DsPrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.PrepareRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsPrepareRequest)
  return target;
}

size_t DsPrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsPrepareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.PrepareRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsPrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsPrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsPrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsPrepareRequest)
    MergeFrom(*source);
  }
}

void DsPrepareRequest::MergeFrom(const DsPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::txn::PrepareRequest::MergeFrom(from.req());
  }
}

void DsPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsPrepareRequest::CopyFrom(const DsPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsPrepareRequest::IsInitialized() const {
  return true;
}

void DsPrepareRequest::Swap(DsPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsPrepareRequest::InternalSwap(DsPrepareRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsPrepareRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsPrepareRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsPrepareRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsPrepareRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsPrepareRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsPrepareRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsPrepareRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsPrepareRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsPrepareRequest::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsPrepareRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsPrepareRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsPrepareRequest.header)
}

// .txn.PrepareRequest req = 2;
bool DsPrepareRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsPrepareRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::txn::PrepareRequest& DsPrepareRequest::req() const {
  const ::txn::PrepareRequest* p = req_;
  // @@protoc_insertion_point(field_get:txn.DsPrepareRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::PrepareRequest*>(
      &::txn::_PrepareRequest_default_instance_);
}
::txn::PrepareRequest* DsPrepareRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txn::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsPrepareRequest.req)
  return req_;
}
::txn::PrepareRequest* DsPrepareRequest::release_req() {
  // @@protoc_insertion_point(field_release:txn.DsPrepareRequest.req)
  
  ::txn::PrepareRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsPrepareRequest::set_allocated_req(::txn::PrepareRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsPrepareRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsPrepareResponse::kHeaderFieldNumber;
const int DsPrepareResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsPrepareResponse::DsPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsPrepareResponse)
}
DsPrepareResponse::DsPrepareResponse(const DsPrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::txn::PrepareResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsPrepareResponse)
}

void DsPrepareResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsPrepareResponse::~DsPrepareResponse() {
  // @@protoc_insertion_point(destructor:txn.DsPrepareResponse)
  SharedDtor();
}

void DsPrepareResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsPrepareResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsPrepareResponse& DsPrepareResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsPrepareResponse* DsPrepareResponse::New(::google::protobuf::Arena* arena) const {
  DsPrepareResponse* n = new DsPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsPrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.PrepareResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsPrepareResponse)
  return false;
#undef DO_
}

void DsPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.PrepareResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsPrepareResponse)
}

::google::protobuf::uint8* DsPrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.PrepareResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsPrepareResponse)
  return target;
}

size_t DsPrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsPrepareResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.PrepareResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsPrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsPrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsPrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsPrepareResponse)
    MergeFrom(*source);
  }
}

void DsPrepareResponse::MergeFrom(const DsPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::txn::PrepareResponse::MergeFrom(from.resp());
  }
}

void DsPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsPrepareResponse::CopyFrom(const DsPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsPrepareResponse::IsInitialized() const {
  return true;
}

void DsPrepareResponse::Swap(DsPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsPrepareResponse::InternalSwap(DsPrepareResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsPrepareResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsPrepareResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsPrepareResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsPrepareResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsPrepareResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsPrepareResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsPrepareResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsPrepareResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsPrepareResponse::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsPrepareResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsPrepareResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsPrepareResponse.header)
}

// .txn.PrepareResponse resp = 2;
bool DsPrepareResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsPrepareResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::txn::PrepareResponse& DsPrepareResponse::resp() const {
  const ::txn::PrepareResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txn.DsPrepareResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::PrepareResponse*>(
      &::txn::_PrepareResponse_default_instance_);
}
::txn::PrepareResponse* DsPrepareResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txn::PrepareResponse;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsPrepareResponse.resp)
  return resp_;
}
::txn::PrepareResponse* DsPrepareResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txn.DsPrepareResponse.resp)
  
  ::txn::PrepareResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsPrepareResponse::set_allocated_resp(::txn::PrepareResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsPrepareResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecideRequest::kTxnIdFieldNumber;
const int DecideRequest::kStatusFieldNumber;
const int DecideRequest::kKeysFieldNumber;
const int DecideRequest::kRecoverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecideRequest::DecideRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DecideRequest)
}
DecideRequest::DecideRequest(const DecideRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&recover_) -
    reinterpret_cast<char*>(&status_)) + sizeof(recover_));
  // @@protoc_insertion_point(copy_constructor:txn.DecideRequest)
}

void DecideRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recover_) -
      reinterpret_cast<char*>(&status_)) + sizeof(recover_));
  _cached_size_ = 0;
}

DecideRequest::~DecideRequest() {
  // @@protoc_insertion_point(destructor:txn.DecideRequest)
  SharedDtor();
}

void DecideRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DecideRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecideRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecideRequest& DecideRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecideRequest* DecideRequest::New(::google::protobuf::Arena* arena) const {
  DecideRequest* n = new DecideRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecideRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recover_) -
      reinterpret_cast<char*>(&status_)) + sizeof(recover_));
  _internal_metadata_.Clear();
}

bool DecideRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DecideRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.DecideRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.TxnStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::txn::TxnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recover = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DecideRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DecideRequest)
  return false;
#undef DO_
}

void DecideRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.DecideRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // .txn.TxnStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recover(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DecideRequest)
}

::google::protobuf::uint8* DecideRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.DecideRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // .txn.TxnStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recover(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DecideRequest)
  return target;
}

size_t DecideRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DecideRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // .txn.TxnStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // bool recover = 4;
  if (this->recover() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecideRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecideRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecideRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DecideRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DecideRequest)
    MergeFrom(*source);
  }
}

void DecideRequest::MergeFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.recover() != 0) {
    set_recover(from.recover());
  }
}

void DecideRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecideRequest::CopyFrom(const DecideRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideRequest::IsInitialized() const {
  return true;
}

void DecideRequest::Swap(DecideRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecideRequest::InternalSwap(DecideRequest* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  txn_id_.Swap(&other->txn_id_);
  swap(status_, other->status_);
  swap(recover_, other->recover_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecideRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecideRequest

// string txn_id = 1;
void DecideRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DecideRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.DecideRequest.txn_id)
  return txn_id_.GetNoArena();
}
void DecideRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.DecideRequest.txn_id)
}
#if LANG_CXX11
void DecideRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.DecideRequest.txn_id)
}
#endif
void DecideRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.DecideRequest.txn_id)
}
void DecideRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.DecideRequest.txn_id)
}
::std::string* DecideRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.DecideRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecideRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.DecideRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecideRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.DecideRequest.txn_id)
}

// .txn.TxnStatus status = 2;
void DecideRequest::clear_status() {
  status_ = 0;
}
::txn::TxnStatus DecideRequest::status() const {
  // @@protoc_insertion_point(field_get:txn.DecideRequest.status)
  return static_cast< ::txn::TxnStatus >(status_);
}
void DecideRequest::set_status(::txn::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txn.DecideRequest.status)
}

// repeated bytes keys = 3;
int DecideRequest::keys_size() const {
  return keys_.size();
}
void DecideRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& DecideRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:txn.DecideRequest.keys)
  return keys_.Get(index);
}
::std::string* DecideRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.DecideRequest.keys)
  return keys_.Mutable(index);
}
void DecideRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txn.DecideRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DecideRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txn.DecideRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void DecideRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txn.DecideRequest.keys)
}
void DecideRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txn.DecideRequest.keys)
}
::std::string* DecideRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:txn.DecideRequest.keys)
  return keys_.Add();
}
void DecideRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txn.DecideRequest.keys)
}
#if LANG_CXX11
void DecideRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txn.DecideRequest.keys)
}
#endif
void DecideRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txn.DecideRequest.keys)
}
void DecideRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txn.DecideRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideRequest::keys() const {
  // @@protoc_insertion_point(field_list:txn.DecideRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DecideRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:txn.DecideRequest.keys)
  return &keys_;
}

// bool recover = 4;
void DecideRequest::clear_recover() {
  recover_ = false;
}
bool DecideRequest::recover() const {
  // @@protoc_insertion_point(field_get:txn.DecideRequest.recover)
  return recover_;
}
void DecideRequest::set_recover(bool value) {
  
  recover_ = value;
  // @@protoc_insertion_point(field_set:txn.DecideRequest.recover)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecideResponse::kErrFieldNumber;
const int DecideResponse::kSecondaryKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecideResponse::DecideResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DecideResponse)
}
DecideResponse::DecideResponse(const DecideResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      secondary_keys_(from.secondary_keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::txn::TxnError(*from.err_);
  } else {
    err_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DecideResponse)
}

void DecideResponse::SharedCtor() {
  err_ = NULL;
  _cached_size_ = 0;
}

DecideResponse::~DecideResponse() {
  // @@protoc_insertion_point(destructor:txn.DecideResponse)
  SharedDtor();
}

void DecideResponse::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
}

void DecideResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecideResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecideResponse& DecideResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecideResponse* DecideResponse::New(::google::protobuf::Arena* arena) const {
  DecideResponse* n = new DecideResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecideResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && err_ != NULL) {
    delete err_;
  }
  err_ = NULL;
  _internal_metadata_.Clear();
}

bool DecideResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DecideResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.TxnError err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes secondary_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_secondary_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DecideResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DecideResponse)
  return false;
#undef DO_
}

void DecideResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError err = 1;
  if (this->has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  // repeated bytes secondary_keys = 2;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->secondary_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DecideResponse)
}

::google::protobuf::uint8* DecideResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError err = 1;
  if (this->has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  // repeated bytes secondary_keys = 2;
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->secondary_keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DecideResponse)
  return target;
}

size_t DecideResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DecideResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes secondary_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->secondary_keys_size());
  for (int i = 0, n = this->secondary_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->secondary_keys(i));
  }

  // .txn.TxnError err = 1;
  if (this->has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecideResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecideResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecideResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DecideResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DecideResponse)
    MergeFrom(*source);
  }
}

void DecideResponse::MergeFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secondary_keys_.MergeFrom(from.secondary_keys_);
  if (from.has_err()) {
    mutable_err()->::txn::TxnError::MergeFrom(from.err());
  }
}

void DecideResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecideResponse::CopyFrom(const DecideResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecideResponse::IsInitialized() const {
  return true;
}

void DecideResponse::Swap(DecideResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecideResponse::InternalSwap(DecideResponse* other) {
  using std::swap;
  secondary_keys_.InternalSwap(&other->secondary_keys_);
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecideResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecideResponse

// .txn.TxnError err = 1;
bool DecideResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
void DecideResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
const ::txn::TxnError& DecideResponse::err() const {
  const ::txn::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:txn.DecideResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::TxnError*>(
      &::txn::_TxnError_default_instance_);
}
::txn::TxnError* DecideResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::txn::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:txn.DecideResponse.err)
  return err_;
}
::txn::TxnError* DecideResponse::release_err() {
  // @@protoc_insertion_point(field_release:txn.DecideResponse.err)
  
  ::txn::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
void DecideResponse::set_allocated_err(::txn::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DecideResponse.err)
}

// repeated bytes secondary_keys = 2;
int DecideResponse::secondary_keys_size() const {
  return secondary_keys_.size();
}
void DecideResponse::clear_secondary_keys() {
  secondary_keys_.Clear();
}
const ::std::string& DecideResponse::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txn.DecideResponse.secondary_keys)
  return secondary_keys_.Get(index);
}
::std::string* DecideResponse::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.DecideResponse.secondary_keys)
  return secondary_keys_.Mutable(index);
}
void DecideResponse::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txn.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void DecideResponse::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txn.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
void DecideResponse::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txn.DecideResponse.secondary_keys)
}
void DecideResponse::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txn.DecideResponse.secondary_keys)
}
::std::string* DecideResponse::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txn.DecideResponse.secondary_keys)
  return secondary_keys_.Add();
}
void DecideResponse::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txn.DecideResponse.secondary_keys)
}
#if LANG_CXX11
void DecideResponse::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txn.DecideResponse.secondary_keys)
}
#endif
void DecideResponse::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txn.DecideResponse.secondary_keys)
}
void DecideResponse::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txn.DecideResponse.secondary_keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideResponse::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txn.DecideResponse.secondary_keys)
  return secondary_keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DecideResponse::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txn.DecideResponse.secondary_keys)
  return &secondary_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsDecideRequest::kHeaderFieldNumber;
const int DsDecideRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsDecideRequest::DsDecideRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsDecideRequest)
}
DsDecideRequest::DsDecideRequest(const DsDecideRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::txn::DecideRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsDecideRequest)
}

void DsDecideRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsDecideRequest::~DsDecideRequest() {
  // @@protoc_insertion_point(destructor:txn.DsDecideRequest)
  SharedDtor();
}

void DsDecideRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsDecideRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsDecideRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsDecideRequest& DsDecideRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsDecideRequest* DsDecideRequest::New(::google::protobuf::Arena* arena) const {
  DsDecideRequest* n = new DsDecideRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsDecideRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsDecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsDecideRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsDecideRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.DecideRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsDecideRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsDecideRequest)
  return false;
#undef DO_
}

void DsDecideRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsDecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.DecideRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsDecideRequest)
}

::google::protobuf::uint8* DsDecideRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsDecideRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.DecideRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsDecideRequest)
  return target;
}

size_t DsDecideRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsDecideRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.DecideRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsDecideRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsDecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsDecideRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsDecideRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsDecideRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsDecideRequest)
    MergeFrom(*source);
  }
}

void DsDecideRequest::MergeFrom(const DsDecideRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsDecideRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::txn::DecideRequest::MergeFrom(from.req());
  }
}

void DsDecideRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsDecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsDecideRequest::CopyFrom(const DsDecideRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsDecideRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsDecideRequest::IsInitialized() const {
  return true;
}

void DsDecideRequest::Swap(DsDecideRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsDecideRequest::InternalSwap(DsDecideRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsDecideRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsDecideRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsDecideRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsDecideRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsDecideRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsDecideRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsDecideRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsDecideRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsDecideRequest::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsDecideRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsDecideRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsDecideRequest.header)
}

// .txn.DecideRequest req = 2;
bool DsDecideRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsDecideRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::txn::DecideRequest& DsDecideRequest::req() const {
  const ::txn::DecideRequest* p = req_;
  // @@protoc_insertion_point(field_get:txn.DsDecideRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::DecideRequest*>(
      &::txn::_DecideRequest_default_instance_);
}
::txn::DecideRequest* DsDecideRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txn::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsDecideRequest.req)
  return req_;
}
::txn::DecideRequest* DsDecideRequest::release_req() {
  // @@protoc_insertion_point(field_release:txn.DsDecideRequest.req)
  
  ::txn::DecideRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsDecideRequest::set_allocated_req(::txn::DecideRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsDecideRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsDecideResponse::kHeaderFieldNumber;
const int DsDecideResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsDecideResponse::DsDecideResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsDecideResponse)
}
DsDecideResponse::DsDecideResponse(const DsDecideResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::txn::DecideResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsDecideResponse)
}

void DsDecideResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsDecideResponse::~DsDecideResponse() {
  // @@protoc_insertion_point(destructor:txn.DsDecideResponse)
  SharedDtor();
}

void DsDecideResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsDecideResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsDecideResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsDecideResponse& DsDecideResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsDecideResponse* DsDecideResponse::New(::google::protobuf::Arena* arena) const {
  DsDecideResponse* n = new DsDecideResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsDecideResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsDecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsDecideResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsDecideResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.DecideResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsDecideResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsDecideResponse)
  return false;
#undef DO_
}

void DsDecideResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsDecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.DecideResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsDecideResponse)
}

::google::protobuf::uint8* DsDecideResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsDecideResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.DecideResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsDecideResponse)
  return target;
}

size_t DsDecideResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsDecideResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.DecideResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsDecideResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsDecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsDecideResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsDecideResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsDecideResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsDecideResponse)
    MergeFrom(*source);
  }
}

void DsDecideResponse::MergeFrom(const DsDecideResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsDecideResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::txn::DecideResponse::MergeFrom(from.resp());
  }
}

void DsDecideResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsDecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsDecideResponse::CopyFrom(const DsDecideResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsDecideResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsDecideResponse::IsInitialized() const {
  return true;
}

void DsDecideResponse::Swap(DsDecideResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsDecideResponse::InternalSwap(DsDecideResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsDecideResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsDecideResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsDecideResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsDecideResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsDecideResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsDecideResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsDecideResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsDecideResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsDecideResponse::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsDecideResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsDecideResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsDecideResponse.header)
}

// .txn.DecideResponse resp = 2;
bool DsDecideResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsDecideResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::txn::DecideResponse& DsDecideResponse::resp() const {
  const ::txn::DecideResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txn.DsDecideResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::DecideResponse*>(
      &::txn::_DecideResponse_default_instance_);
}
::txn::DecideResponse* DsDecideResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txn::DecideResponse;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsDecideResponse.resp)
  return resp_;
}
::txn::DecideResponse* DsDecideResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txn.DsDecideResponse.resp)
  
  ::txn::DecideResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsDecideResponse::set_allocated_resp(::txn::DecideResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsDecideResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearupRequest::kTxnIdFieldNumber;
const int ClearupRequest::kPrimaryKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearupRequest::ClearupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.ClearupRequest)
}
ClearupRequest::ClearupRequest(const ClearupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  // @@protoc_insertion_point(copy_constructor:txn.ClearupRequest)
}

void ClearupRequest::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClearupRequest::~ClearupRequest() {
  // @@protoc_insertion_point(destructor:txn.ClearupRequest)
  SharedDtor();
}

void ClearupRequest::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClearupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearupRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearupRequest& ClearupRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearupRequest* ClearupRequest::New(::google::protobuf::Arena* arena) const {
  ClearupRequest* n = new ClearupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ClearupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.ClearupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.ClearupRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.ClearupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.ClearupRequest)
  return false;
#undef DO_
}

void ClearupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.ClearupRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.ClearupRequest)
}

::google::protobuf::uint8* ClearupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.ClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.ClearupRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.ClearupRequest)
  return target;
}

size_t ClearupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.ClearupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.ClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.ClearupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.ClearupRequest)
    MergeFrom(*source);
  }
}

void ClearupRequest::MergeFrom(const ClearupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.ClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
}

void ClearupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.ClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearupRequest::CopyFrom(const ClearupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.ClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearupRequest::IsInitialized() const {
  return true;
}

void ClearupRequest::Swap(ClearupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearupRequest::InternalSwap(ClearupRequest* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearupRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearupRequest

// string txn_id = 1;
void ClearupRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClearupRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.ClearupRequest.txn_id)
  return txn_id_.GetNoArena();
}
void ClearupRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.ClearupRequest.txn_id)
}
#if LANG_CXX11
void ClearupRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.ClearupRequest.txn_id)
}
#endif
void ClearupRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.ClearupRequest.txn_id)
}
void ClearupRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.ClearupRequest.txn_id)
}
::std::string* ClearupRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.ClearupRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClearupRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.ClearupRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClearupRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.ClearupRequest.txn_id)
}

// bytes primary_key = 2;
void ClearupRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClearupRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:txn.ClearupRequest.primary_key)
  return primary_key_.GetNoArena();
}
void ClearupRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.ClearupRequest.primary_key)
}
#if LANG_CXX11
void ClearupRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.ClearupRequest.primary_key)
}
#endif
void ClearupRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.ClearupRequest.primary_key)
}
void ClearupRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.ClearupRequest.primary_key)
}
::std::string* ClearupRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.ClearupRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClearupRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:txn.ClearupRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClearupRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txn.ClearupRequest.primary_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearupResponse::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearupResponse::ClearupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.ClearupResponse)
}
ClearupResponse::ClearupResponse(const ClearupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err()) {
    err_ = new ::txn::TxnError(*from.err_);
  } else {
    err_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.ClearupResponse)
}

void ClearupResponse::SharedCtor() {
  err_ = NULL;
  _cached_size_ = 0;
}

ClearupResponse::~ClearupResponse() {
  // @@protoc_insertion_point(destructor:txn.ClearupResponse)
  SharedDtor();
}

void ClearupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete err_;
}

void ClearupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearupResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClearupResponse& ClearupResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearupResponse* ClearupResponse::New(::google::protobuf::Arena* arena) const {
  ClearupResponse* n = new ClearupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && err_ != NULL) {
    delete err_;
  }
  err_ = NULL;
  _internal_metadata_.Clear();
}

bool ClearupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.ClearupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.TxnError err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.ClearupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.ClearupResponse)
  return false;
#undef DO_
}

void ClearupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError err = 1;
  if (this->has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->err_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.ClearupResponse)
}

::google::protobuf::uint8* ClearupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.ClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.TxnError err = 1;
  if (this->has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->err_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.ClearupResponse)
  return target;
}

size_t ClearupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.ClearupResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .txn.TxnError err = 1;
  if (this->has_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.ClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.ClearupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.ClearupResponse)
    MergeFrom(*source);
  }
}

void ClearupResponse::MergeFrom(const ClearupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.ClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_err()) {
    mutable_err()->::txn::TxnError::MergeFrom(from.err());
  }
}

void ClearupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.ClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearupResponse::CopyFrom(const ClearupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.ClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearupResponse::IsInitialized() const {
  return true;
}

void ClearupResponse::Swap(ClearupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearupResponse::InternalSwap(ClearupResponse* other) {
  using std::swap;
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearupResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearupResponse

// .txn.TxnError err = 1;
bool ClearupResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
void ClearupResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
const ::txn::TxnError& ClearupResponse::err() const {
  const ::txn::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:txn.ClearupResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::TxnError*>(
      &::txn::_TxnError_default_instance_);
}
::txn::TxnError* ClearupResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::txn::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:txn.ClearupResponse.err)
  return err_;
}
::txn::TxnError* ClearupResponse::release_err() {
  // @@protoc_insertion_point(field_release:txn.ClearupResponse.err)
  
  ::txn::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
void ClearupResponse::set_allocated_err(::txn::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.ClearupResponse.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsClearupRequest::kHeaderFieldNumber;
const int DsClearupRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsClearupRequest::DsClearupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsClearupRequest)
}
DsClearupRequest::DsClearupRequest(const DsClearupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::txn::ClearupRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsClearupRequest)
}

void DsClearupRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsClearupRequest::~DsClearupRequest() {
  // @@protoc_insertion_point(destructor:txn.DsClearupRequest)
  SharedDtor();
}

void DsClearupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsClearupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsClearupRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsClearupRequest& DsClearupRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsClearupRequest* DsClearupRequest::New(::google::protobuf::Arena* arena) const {
  DsClearupRequest* n = new DsClearupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsClearupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsClearupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsClearupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.ClearupRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsClearupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsClearupRequest)
  return false;
#undef DO_
}

void DsClearupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.ClearupRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsClearupRequest)
}

::google::protobuf::uint8* DsClearupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsClearupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.ClearupRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsClearupRequest)
  return target;
}

size_t DsClearupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsClearupRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.ClearupRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsClearupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsClearupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsClearupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsClearupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsClearupRequest)
    MergeFrom(*source);
  }
}

void DsClearupRequest::MergeFrom(const DsClearupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsClearupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::txn::ClearupRequest::MergeFrom(from.req());
  }
}

void DsClearupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsClearupRequest::CopyFrom(const DsClearupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsClearupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsClearupRequest::IsInitialized() const {
  return true;
}

void DsClearupRequest::Swap(DsClearupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsClearupRequest::InternalSwap(DsClearupRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsClearupRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsClearupRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsClearupRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsClearupRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsClearupRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsClearupRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsClearupRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsClearupRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsClearupRequest::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsClearupRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsClearupRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsClearupRequest.header)
}

// .txn.ClearupRequest req = 2;
bool DsClearupRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsClearupRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::txn::ClearupRequest& DsClearupRequest::req() const {
  const ::txn::ClearupRequest* p = req_;
  // @@protoc_insertion_point(field_get:txn.DsClearupRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::ClearupRequest*>(
      &::txn::_ClearupRequest_default_instance_);
}
::txn::ClearupRequest* DsClearupRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txn::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsClearupRequest.req)
  return req_;
}
::txn::ClearupRequest* DsClearupRequest::release_req() {
  // @@protoc_insertion_point(field_release:txn.DsClearupRequest.req)
  
  ::txn::ClearupRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsClearupRequest::set_allocated_req(::txn::ClearupRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsClearupRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsClearupResponse::kHeaderFieldNumber;
const int DsClearupResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsClearupResponse::DsClearupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsClearupResponse)
}
DsClearupResponse::DsClearupResponse(const DsClearupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::txn::ClearupResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsClearupResponse)
}

void DsClearupResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsClearupResponse::~DsClearupResponse() {
  // @@protoc_insertion_point(destructor:txn.DsClearupResponse)
  SharedDtor();
}

void DsClearupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsClearupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsClearupResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsClearupResponse& DsClearupResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsClearupResponse* DsClearupResponse::New(::google::protobuf::Arena* arena) const {
  DsClearupResponse* n = new DsClearupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsClearupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsClearupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsClearupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.ClearupResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsClearupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsClearupResponse)
  return false;
#undef DO_
}

void DsClearupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.ClearupResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsClearupResponse)
}

::google::protobuf::uint8* DsClearupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsClearupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.ClearupResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsClearupResponse)
  return target;
}

size_t DsClearupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsClearupResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.ClearupResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsClearupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsClearupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsClearupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsClearupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsClearupResponse)
    MergeFrom(*source);
  }
}

void DsClearupResponse::MergeFrom(const DsClearupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsClearupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::txn::ClearupResponse::MergeFrom(from.resp());
  }
}

void DsClearupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsClearupResponse::CopyFrom(const DsClearupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsClearupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsClearupResponse::IsInitialized() const {
  return true;
}

void DsClearupResponse::Swap(DsClearupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsClearupResponse::InternalSwap(DsClearupResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsClearupResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsClearupResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsClearupResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsClearupResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsClearupResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsClearupResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsClearupResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsClearupResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsClearupResponse::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsClearupResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsClearupResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsClearupResponse.header)
}

// .txn.ClearupResponse resp = 2;
bool DsClearupResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsClearupResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::txn::ClearupResponse& DsClearupResponse::resp() const {
  const ::txn::ClearupResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txn.DsClearupResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::ClearupResponse*>(
      &::txn::_ClearupResponse_default_instance_);
}
::txn::ClearupResponse* DsClearupResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txn::ClearupResponse;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsClearupResponse.resp)
  return resp_;
}
::txn::ClearupResponse* DsClearupResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txn.DsClearupResponse.resp)
  
  ::txn::ClearupResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsClearupResponse::set_allocated_resp(::txn::ClearupResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsClearupResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLockInfoRequest::kKeyFieldNumber;
const int GetLockInfoRequest::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLockInfoRequest::GetLockInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.GetLockInfoRequest)
}
GetLockInfoRequest::GetLockInfoRequest(const GetLockInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:txn.GetLockInfoRequest)
}

void GetLockInfoRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetLockInfoRequest::~GetLockInfoRequest() {
  // @@protoc_insertion_point(destructor:txn.GetLockInfoRequest)
  SharedDtor();
}

void GetLockInfoRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLockInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLockInfoRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLockInfoRequest& GetLockInfoRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLockInfoRequest* GetLockInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetLockInfoRequest* n = new GetLockInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLockInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetLockInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.GetLockInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.GetLockInfoRequest.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.GetLockInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.GetLockInfoRequest)
  return false;
#undef DO_
}

void GetLockInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.GetLockInfoRequest.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->txn_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.GetLockInfoRequest)
}

::google::protobuf::uint8* GetLockInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.GetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.GetLockInfoRequest.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->txn_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.GetLockInfoRequest)
  return target;
}

size_t GetLockInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.GetLockInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string txn_id = 2;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLockInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.GetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLockInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.GetLockInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.GetLockInfoRequest)
    MergeFrom(*source);
  }
}

void GetLockInfoRequest::MergeFrom(const GetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.GetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
}

void GetLockInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.GetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockInfoRequest::CopyFrom(const GetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.GetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockInfoRequest::IsInitialized() const {
  return true;
}

void GetLockInfoRequest::Swap(GetLockInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLockInfoRequest::InternalSwap(GetLockInfoRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  txn_id_.Swap(&other->txn_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLockInfoRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLockInfoRequest

// bytes key = 1;
void GetLockInfoRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetLockInfoRequest::key() const {
  // @@protoc_insertion_point(field_get:txn.GetLockInfoRequest.key)
  return key_.GetNoArena();
}
void GetLockInfoRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.GetLockInfoRequest.key)
}
#if LANG_CXX11
void GetLockInfoRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.GetLockInfoRequest.key)
}
#endif
void GetLockInfoRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.GetLockInfoRequest.key)
}
void GetLockInfoRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.GetLockInfoRequest.key)
}
::std::string* GetLockInfoRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.GetLockInfoRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLockInfoRequest::release_key() {
  // @@protoc_insertion_point(field_release:txn.GetLockInfoRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLockInfoRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.GetLockInfoRequest.key)
}

// string txn_id = 2;
void GetLockInfoRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetLockInfoRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.GetLockInfoRequest.txn_id)
  return txn_id_.GetNoArena();
}
void GetLockInfoRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.GetLockInfoRequest.txn_id)
}
#if LANG_CXX11
void GetLockInfoRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.GetLockInfoRequest.txn_id)
}
#endif
void GetLockInfoRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.GetLockInfoRequest.txn_id)
}
void GetLockInfoRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.GetLockInfoRequest.txn_id)
}
::std::string* GetLockInfoRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.GetLockInfoRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLockInfoRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.GetLockInfoRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLockInfoRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.GetLockInfoRequest.txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLockInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLockInfoResponse::GetLockInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.GetLockInfoResponse)
}
GetLockInfoResponse::GetLockInfoResponse(const GetLockInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::txn::LockInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.GetLockInfoResponse)
}

void GetLockInfoResponse::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

GetLockInfoResponse::~GetLockInfoResponse() {
  // @@protoc_insertion_point(destructor:txn.GetLockInfoResponse)
  SharedDtor();
}

void GetLockInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void GetLockInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLockInfoResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLockInfoResponse& GetLockInfoResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLockInfoResponse* GetLockInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetLockInfoResponse* n = new GetLockInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLockInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  _internal_metadata_.Clear();
}

bool GetLockInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.GetLockInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .txn.LockInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.GetLockInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.GetLockInfoResponse)
  return false;
#undef DO_
}

void GetLockInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.LockInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.GetLockInfoResponse)
}

::google::protobuf::uint8* GetLockInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.GetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .txn.LockInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.GetLockInfoResponse)
  return target;
}

size_t GetLockInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.GetLockInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .txn.LockInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLockInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.GetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLockInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.GetLockInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.GetLockInfoResponse)
    MergeFrom(*source);
  }
}

void GetLockInfoResponse::MergeFrom(const GetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.GetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::txn::LockInfo::MergeFrom(from.info());
  }
}

void GetLockInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.GetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockInfoResponse::CopyFrom(const GetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.GetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockInfoResponse::IsInitialized() const {
  return true;
}

void GetLockInfoResponse::Swap(GetLockInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLockInfoResponse::InternalSwap(GetLockInfoResponse* other) {
  using std::swap;
  swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLockInfoResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLockInfoResponse

// .txn.LockInfo info = 1;
bool GetLockInfoResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void GetLockInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::txn::LockInfo& GetLockInfoResponse::info() const {
  const ::txn::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:txn.GetLockInfoResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::LockInfo*>(
      &::txn::_LockInfo_default_instance_);
}
::txn::LockInfo* GetLockInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::txn::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:txn.GetLockInfoResponse.info)
  return info_;
}
::txn::LockInfo* GetLockInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:txn.GetLockInfoResponse.info)
  
  ::txn::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void GetLockInfoResponse::set_allocated_info(::txn::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.GetLockInfoResponse.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsGetLockInfoRequest::kHeaderFieldNumber;
const int DsGetLockInfoRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsGetLockInfoRequest::DsGetLockInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsGetLockInfoRequest)
}
DsGetLockInfoRequest::DsGetLockInfoRequest(const DsGetLockInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::txn::GetLockInfoRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsGetLockInfoRequest)
}

void DsGetLockInfoRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsGetLockInfoRequest::~DsGetLockInfoRequest() {
  // @@protoc_insertion_point(destructor:txn.DsGetLockInfoRequest)
  SharedDtor();
}

void DsGetLockInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsGetLockInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsGetLockInfoRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsGetLockInfoRequest& DsGetLockInfoRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsGetLockInfoRequest* DsGetLockInfoRequest::New(::google::protobuf::Arena* arena) const {
  DsGetLockInfoRequest* n = new DsGetLockInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsGetLockInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsGetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsGetLockInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsGetLockInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.GetLockInfoRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsGetLockInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsGetLockInfoRequest)
  return false;
#undef DO_
}

void DsGetLockInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsGetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.GetLockInfoRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsGetLockInfoRequest)
}

::google::protobuf::uint8* DsGetLockInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsGetLockInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.GetLockInfoRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsGetLockInfoRequest)
  return target;
}

size_t DsGetLockInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsGetLockInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.GetLockInfoRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsGetLockInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsGetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsGetLockInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsGetLockInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsGetLockInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsGetLockInfoRequest)
    MergeFrom(*source);
  }
}

void DsGetLockInfoRequest::MergeFrom(const DsGetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsGetLockInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::txn::GetLockInfoRequest::MergeFrom(from.req());
  }
}

void DsGetLockInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsGetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsGetLockInfoRequest::CopyFrom(const DsGetLockInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsGetLockInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsGetLockInfoRequest::IsInitialized() const {
  return true;
}

void DsGetLockInfoRequest::Swap(DsGetLockInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsGetLockInfoRequest::InternalSwap(DsGetLockInfoRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsGetLockInfoRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsGetLockInfoRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsGetLockInfoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsGetLockInfoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsGetLockInfoRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsGetLockInfoRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsGetLockInfoRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsGetLockInfoRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsGetLockInfoRequest::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsGetLockInfoRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsGetLockInfoRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsGetLockInfoRequest.header)
}

// .txn.GetLockInfoRequest req = 2;
bool DsGetLockInfoRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsGetLockInfoRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::txn::GetLockInfoRequest& DsGetLockInfoRequest::req() const {
  const ::txn::GetLockInfoRequest* p = req_;
  // @@protoc_insertion_point(field_get:txn.DsGetLockInfoRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::GetLockInfoRequest*>(
      &::txn::_GetLockInfoRequest_default_instance_);
}
::txn::GetLockInfoRequest* DsGetLockInfoRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txn::GetLockInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsGetLockInfoRequest.req)
  return req_;
}
::txn::GetLockInfoRequest* DsGetLockInfoRequest::release_req() {
  // @@protoc_insertion_point(field_release:txn.DsGetLockInfoRequest.req)
  
  ::txn::GetLockInfoRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsGetLockInfoRequest::set_allocated_req(::txn::GetLockInfoRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsGetLockInfoRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsGetLockInfoResponse::kHeaderFieldNumber;
const int DsGetLockInfoResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsGetLockInfoResponse::DsGetLockInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsGetLockInfoResponse)
}
DsGetLockInfoResponse::DsGetLockInfoResponse(const DsGetLockInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::txn::GetLockInfoResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsGetLockInfoResponse)
}

void DsGetLockInfoResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsGetLockInfoResponse::~DsGetLockInfoResponse() {
  // @@protoc_insertion_point(destructor:txn.DsGetLockInfoResponse)
  SharedDtor();
}

void DsGetLockInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsGetLockInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsGetLockInfoResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsGetLockInfoResponse& DsGetLockInfoResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsGetLockInfoResponse* DsGetLockInfoResponse::New(::google::protobuf::Arena* arena) const {
  DsGetLockInfoResponse* n = new DsGetLockInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsGetLockInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsGetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsGetLockInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsGetLockInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.GetLockInfoResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsGetLockInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsGetLockInfoResponse)
  return false;
#undef DO_
}

void DsGetLockInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsGetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.GetLockInfoResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsGetLockInfoResponse)
}

::google::protobuf::uint8* DsGetLockInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsGetLockInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.GetLockInfoResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsGetLockInfoResponse)
  return target;
}

size_t DsGetLockInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsGetLockInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.GetLockInfoResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsGetLockInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsGetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsGetLockInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsGetLockInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsGetLockInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsGetLockInfoResponse)
    MergeFrom(*source);
  }
}

void DsGetLockInfoResponse::MergeFrom(const DsGetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsGetLockInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::txn::GetLockInfoResponse::MergeFrom(from.resp());
  }
}

void DsGetLockInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsGetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsGetLockInfoResponse::CopyFrom(const DsGetLockInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsGetLockInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsGetLockInfoResponse::IsInitialized() const {
  return true;
}

void DsGetLockInfoResponse::Swap(DsGetLockInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsGetLockInfoResponse::InternalSwap(DsGetLockInfoResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsGetLockInfoResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsGetLockInfoResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsGetLockInfoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsGetLockInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsGetLockInfoResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsGetLockInfoResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsGetLockInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsGetLockInfoResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsGetLockInfoResponse::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsGetLockInfoResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsGetLockInfoResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsGetLockInfoResponse.header)
}

// .txn.GetLockInfoResponse resp = 2;
bool DsGetLockInfoResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsGetLockInfoResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::txn::GetLockInfoResponse& DsGetLockInfoResponse::resp() const {
  const ::txn::GetLockInfoResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txn.DsGetLockInfoResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::GetLockInfoResponse*>(
      &::txn::_GetLockInfoResponse_default_instance_);
}
::txn::GetLockInfoResponse* DsGetLockInfoResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txn::GetLockInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsGetLockInfoResponse.resp)
  return resp_;
}
::txn::GetLockInfoResponse* DsGetLockInfoResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txn.DsGetLockInfoResponse.resp)
  
  ::txn::GetLockInfoResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsGetLockInfoResponse::set_allocated_resp(::txn::GetLockInfoResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsGetLockInfoResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectRequest::kKeyFieldNumber;
const int SelectRequest::kScopeFieldNumber;
const int SelectRequest::kFieldListFieldNumber;
const int SelectRequest::kWhereFiltersFieldNumber;
const int SelectRequest::kGroupBysFieldNumber;
const int SelectRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectRequest::SelectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.SelectRequest)
}
SelectRequest::SelectRequest(const SelectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_list_(from.field_list_),
      where_filters_(from.where_filters_),
      group_bys_(from.group_bys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    scope_ = new ::kvrpcpb::Scope(*from.scope_);
  } else {
    scope_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::kvrpcpb::Limit(*from.limit_);
  } else {
    limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.SelectRequest)
}

void SelectRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(limit_));
  _cached_size_ = 0;
}

SelectRequest::~SelectRequest() {
  // @@protoc_insertion_point(destructor:txn.SelectRequest)
  SharedDtor();
}

void SelectRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scope_;
  if (this != internal_default_instance()) delete limit_;
}

void SelectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectRequest& SelectRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectRequest* SelectRequest::New(::google::protobuf::Arena* arena) const {
  SelectRequest* n = new SelectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_list_.Clear();
  where_filters_.Clear();
  group_bys_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) {
    delete scope_;
  }
  scope_ = NULL;
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  _internal_metadata_.Clear();
}

bool SelectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.SelectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Scope scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.SelectField field_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.Match where_filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_where_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Column group_bys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_bys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Limit limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.SelectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.SelectRequest)
  return false;
#undef DO_
}

void SelectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scope_, output);
  }

  // repeated .kvrpcpb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field_list(static_cast<int>(i)), output);
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->where_filters(static_cast<int>(i)), output);
  }

  // repeated .metapb.Column group_bys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_bys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->group_bys(static_cast<int>(i)), output);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->limit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.SelectRequest)
}

::google::protobuf::uint8* SelectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scope_, deterministic, target);
  }

  // repeated .kvrpcpb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->field_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->where_filters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metapb.Column group_bys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_bys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->group_bys(static_cast<int>(i)), deterministic, target);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->limit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.SelectRequest)
  return target;
}

size_t SelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.SelectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.SelectField field_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_list(static_cast<int>(i)));
    }
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->where_filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->where_filters(static_cast<int>(i)));
    }
  }

  // repeated .metapb.Column group_bys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->group_bys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_bys(static_cast<int>(i)));
    }
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scope_);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.SelectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.SelectRequest)
    MergeFrom(*source);
  }
}

void SelectRequest::MergeFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_list_.MergeFrom(from.field_list_);
  where_filters_.MergeFrom(from.where_filters_);
  group_bys_.MergeFrom(from.group_bys_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    mutable_scope()->::kvrpcpb::Scope::MergeFrom(from.scope());
  }
  if (from.has_limit()) {
    mutable_limit()->::kvrpcpb::Limit::MergeFrom(from.limit());
  }
}

void SelectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRequest::CopyFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRequest::IsInitialized() const {
  return true;
}

void SelectRequest::Swap(SelectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectRequest::InternalSwap(SelectRequest* other) {
  using std::swap;
  field_list_.InternalSwap(&other->field_list_);
  where_filters_.InternalSwap(&other->where_filters_);
  group_bys_.InternalSwap(&other->group_bys_);
  key_.Swap(&other->key_);
  swap(scope_, other->scope_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectRequest

// bytes key = 1;
void SelectRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectRequest::key() const {
  // @@protoc_insertion_point(field_get:txn.SelectRequest.key)
  return key_.GetNoArena();
}
void SelectRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.SelectRequest.key)
}
#if LANG_CXX11
void SelectRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.SelectRequest.key)
}
#endif
void SelectRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.SelectRequest.key)
}
void SelectRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.SelectRequest.key)
}
::std::string* SelectRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectRequest::release_key() {
  // @@protoc_insertion_point(field_release:txn.SelectRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.SelectRequest.key)
}

// .kvrpcpb.Scope scope = 2;
bool SelectRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
void SelectRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
const ::kvrpcpb::Scope& SelectRequest::scope() const {
  const ::kvrpcpb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:txn.SelectRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Scope*>(
      &::kvrpcpb::_Scope_default_instance_);
}
::kvrpcpb::Scope* SelectRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::kvrpcpb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.scope)
  return scope_;
}
::kvrpcpb::Scope* SelectRequest::release_scope() {
  // @@protoc_insertion_point(field_release:txn.SelectRequest.scope)
  
  ::kvrpcpb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_scope(::kvrpcpb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.SelectRequest.scope)
}

// repeated .kvrpcpb.SelectField field_list = 3;
int SelectRequest::field_list_size() const {
  return field_list_.size();
}
void SelectRequest::clear_field_list() {
  field_list_.Clear();
}
const ::kvrpcpb::SelectField& SelectRequest::field_list(int index) const {
  // @@protoc_insertion_point(field_get:txn.SelectRequest.field_list)
  return field_list_.Get(index);
}
::kvrpcpb::SelectField* SelectRequest::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.field_list)
  return field_list_.Mutable(index);
}
::kvrpcpb::SelectField* SelectRequest::add_field_list() {
  // @@protoc_insertion_point(field_add:txn.SelectRequest.field_list)
  return field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >*
SelectRequest::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:txn.SelectRequest.field_list)
  return &field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >&
SelectRequest::field_list() const {
  // @@protoc_insertion_point(field_list:txn.SelectRequest.field_list)
  return field_list_;
}

// repeated .kvrpcpb.Match where_filters = 4;
int SelectRequest::where_filters_size() const {
  return where_filters_.size();
}
void SelectRequest::clear_where_filters() {
  where_filters_.Clear();
}
const ::kvrpcpb::Match& SelectRequest::where_filters(int index) const {
  // @@protoc_insertion_point(field_get:txn.SelectRequest.where_filters)
  return where_filters_.Get(index);
}
::kvrpcpb::Match* SelectRequest::mutable_where_filters(int index) {
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.where_filters)
  return where_filters_.Mutable(index);
}
::kvrpcpb::Match* SelectRequest::add_where_filters() {
  // @@protoc_insertion_point(field_add:txn.SelectRequest.where_filters)
  return where_filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >*
SelectRequest::mutable_where_filters() {
  // @@protoc_insertion_point(field_mutable_list:txn.SelectRequest.where_filters)
  return &where_filters_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >&
SelectRequest::where_filters() const {
  // @@protoc_insertion_point(field_list:txn.SelectRequest.where_filters)
  return where_filters_;
}

// repeated .metapb.Column group_bys = 5;
int SelectRequest::group_bys_size() const {
  return group_bys_.size();
}
void SelectRequest::clear_group_bys() {
  group_bys_.Clear();
}
const ::metapb::Column& SelectRequest::group_bys(int index) const {
  // @@protoc_insertion_point(field_get:txn.SelectRequest.group_bys)
  return group_bys_.Get(index);
}
::metapb::Column* SelectRequest::mutable_group_bys(int index) {
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.group_bys)
  return group_bys_.Mutable(index);
}
::metapb::Column* SelectRequest::add_group_bys() {
  // @@protoc_insertion_point(field_add:txn.SelectRequest.group_bys)
  return group_bys_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Column >*
SelectRequest::mutable_group_bys() {
  // @@protoc_insertion_point(field_mutable_list:txn.SelectRequest.group_bys)
  return &group_bys_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
SelectRequest::group_bys() const {
  // @@protoc_insertion_point(field_list:txn.SelectRequest.group_bys)
  return group_bys_;
}

// .kvrpcpb.Limit limit = 6;
bool SelectRequest::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
void SelectRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
const ::kvrpcpb::Limit& SelectRequest::limit() const {
  const ::kvrpcpb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:txn.SelectRequest.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Limit*>(
      &::kvrpcpb::_Limit_default_instance_);
}
::kvrpcpb::Limit* SelectRequest::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::kvrpcpb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:txn.SelectRequest.limit)
  return limit_;
}
::kvrpcpb::Limit* SelectRequest::release_limit() {
  // @@protoc_insertion_point(field_release:txn.SelectRequest.limit)
  
  ::kvrpcpb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_limit(::kvrpcpb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.SelectRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowValue::kFieldsFieldNumber;
const int RowValue::kAggredCountsFieldNumber;
const int RowValue::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowValue::RowValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.RowValue)
}
RowValue::RowValue(const RowValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      aggred_counts_(from.aggred_counts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fields().size() > 0) {
    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:txn.RowValue)
}

void RowValue::SharedCtor() {
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RowValue::~RowValue() {
  // @@protoc_insertion_point(destructor:txn.RowValue)
  SharedDtor();
}

void RowValue::SharedDtor() {
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RowValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowValue::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowValue& RowValue::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

RowValue* RowValue::New(::google::protobuf::Arena* arena) const {
  RowValue* n = new RowValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowValue::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggred_counts_.Clear();
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RowValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.RowValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 aggred_counts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_aggred_counts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_aggred_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.RowValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.RowValue)
  return false;
#undef DO_
}

void RowValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fields = 1;
  if (this->fields().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fields(), output);
  }

  // repeated int64 aggred_counts = 2;
  if (this->aggred_counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _aggred_counts_cached_byte_size_));
  }
  for (int i = 0, n = this->aggred_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->aggred_counts(i), output);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.RowValue)
}

::google::protobuf::uint8* RowValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.RowValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes fields = 1;
  if (this->fields().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fields(), target);
  }

  // repeated int64 aggred_counts = 2;
  if (this->aggred_counts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _aggred_counts_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->aggred_counts_, target);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.RowValue)
  return target;
}

size_t RowValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.RowValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 aggred_counts = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->aggred_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _aggred_counts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes fields = 1;
  if (this->fields().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fields());
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.RowValue)
  GOOGLE_DCHECK_NE(&from, this);
  const RowValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.RowValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.RowValue)
    MergeFrom(*source);
  }
}

void RowValue::MergeFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.RowValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggred_counts_.MergeFrom(from.aggred_counts_);
  if (from.fields().size() > 0) {

    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void RowValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowValue::CopyFrom(const RowValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.RowValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowValue::IsInitialized() const {
  return true;
}

void RowValue::Swap(RowValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowValue::InternalSwap(RowValue* other) {
  using std::swap;
  aggred_counts_.InternalSwap(&other->aggred_counts_);
  fields_.Swap(&other->fields_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowValue::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowValue

// bytes fields = 1;
void RowValue::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowValue::fields() const {
  // @@protoc_insertion_point(field_get:txn.RowValue.fields)
  return fields_.GetNoArena();
}
void RowValue::set_fields(const ::std::string& value) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.RowValue.fields)
}
#if LANG_CXX11
void RowValue::set_fields(::std::string&& value) {
  
  fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.RowValue.fields)
}
#endif
void RowValue::set_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.RowValue.fields)
}
void RowValue::set_fields(const void* value, size_t size) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.RowValue.fields)
}
::std::string* RowValue::mutable_fields() {
  
  // @@protoc_insertion_point(field_mutable:txn.RowValue.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowValue::release_fields() {
  // @@protoc_insertion_point(field_release:txn.RowValue.fields)
  
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowValue::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    
  } else {
    
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:txn.RowValue.fields)
}

// repeated int64 aggred_counts = 2;
int RowValue::aggred_counts_size() const {
  return aggred_counts_.size();
}
void RowValue::clear_aggred_counts() {
  aggred_counts_.Clear();
}
::google::protobuf::int64 RowValue::aggred_counts(int index) const {
  // @@protoc_insertion_point(field_get:txn.RowValue.aggred_counts)
  return aggred_counts_.Get(index);
}
void RowValue::set_aggred_counts(int index, ::google::protobuf::int64 value) {
  aggred_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:txn.RowValue.aggred_counts)
}
void RowValue::add_aggred_counts(::google::protobuf::int64 value) {
  aggred_counts_.Add(value);
  // @@protoc_insertion_point(field_add:txn.RowValue.aggred_counts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RowValue::aggred_counts() const {
  // @@protoc_insertion_point(field_list:txn.RowValue.aggred_counts)
  return aggred_counts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RowValue::mutable_aggred_counts() {
  // @@protoc_insertion_point(field_mutable_list:txn.RowValue.aggred_counts)
  return &aggred_counts_;
}

// uint64 version = 3;
void RowValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RowValue::version() const {
  // @@protoc_insertion_point(field_get:txn.RowValue.version)
  return version_;
}
void RowValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:txn.RowValue.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowIntent::kTxnIdFieldNumber;
const int RowIntent::kPrimaryKeyFieldNumber;
const int RowIntent::kTimeoutFieldNumber;
const int RowIntent::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowIntent::RowIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.RowIntent)
}
RowIntent::RowIntent(const RowIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txn_id().size() > 0) {
    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_value()) {
    value_ = new ::txn::RowValue(*from.value_);
  } else {
    value_ = NULL;
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:txn.RowIntent)
}

void RowIntent::SharedCtor() {
  txn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timeout_));
  _cached_size_ = 0;
}

RowIntent::~RowIntent() {
  // @@protoc_insertion_point(destructor:txn.RowIntent)
  SharedDtor();
}

void RowIntent::SharedDtor() {
  txn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void RowIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RowIntent::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowIntent& RowIntent::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

RowIntent* RowIntent::New(::google::protobuf::Arena* arena) const {
  RowIntent* n = new RowIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RowIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  timeout_ = false;
  _internal_metadata_.Clear();
}

bool RowIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.RowIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txn_id().data(), static_cast<int>(this->txn_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "txn.RowIntent.txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.RowValue value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.RowIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.RowIntent)
  return false;
#undef DO_
}

void RowIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.RowIntent.txn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->txn_id(), output);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_key(), output);
  }

  // bool timeout = 3;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->timeout(), output);
  }

  // .txn.RowValue value = 10;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.RowIntent)
}

::google::protobuf::uint8* RowIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.RowIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txn_id().data(), static_cast<int>(this->txn_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "txn.RowIntent.txn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->txn_id(), target);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_key(), target);
  }

  // bool timeout = 3;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->timeout(), target);
  }

  // .txn.RowValue value = 10;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.RowIntent)
  return target;
}

size_t RowIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.RowIntent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string txn_id = 1;
  if (this->txn_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_id());
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // .txn.RowValue value = 10;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // bool timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.RowIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const RowIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.RowIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.RowIntent)
    MergeFrom(*source);
  }
}

void RowIntent::MergeFrom(const RowIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.RowIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_id().size() > 0) {

    txn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_id_);
  }
  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_value()) {
    mutable_value()->::txn::RowValue::MergeFrom(from.value());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void RowIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.RowIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowIntent::CopyFrom(const RowIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.RowIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowIntent::IsInitialized() const {
  return true;
}

void RowIntent::Swap(RowIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowIntent::InternalSwap(RowIntent* other) {
  using std::swap;
  txn_id_.Swap(&other->txn_id_);
  primary_key_.Swap(&other->primary_key_);
  swap(value_, other->value_);
  swap(timeout_, other->timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RowIntent::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RowIntent

// string txn_id = 1;
void RowIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:txn.RowIntent.txn_id)
  return txn_id_.GetNoArena();
}
void RowIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.RowIntent.txn_id)
}
#if LANG_CXX11
void RowIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.RowIntent.txn_id)
}
#endif
void RowIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.RowIntent.txn_id)
}
void RowIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.RowIntent.txn_id)
}
::std::string* RowIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txn.RowIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:txn.RowIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txn.RowIntent.txn_id)
}

// bytes primary_key = 2;
void RowIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RowIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:txn.RowIntent.primary_key)
  return primary_key_.GetNoArena();
}
void RowIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.RowIntent.primary_key)
}
#if LANG_CXX11
void RowIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.RowIntent.primary_key)
}
#endif
void RowIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.RowIntent.primary_key)
}
void RowIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.RowIntent.primary_key)
}
::std::string* RowIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.RowIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RowIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:txn.RowIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RowIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txn.RowIntent.primary_key)
}

// bool timeout = 3;
void RowIntent::clear_timeout() {
  timeout_ = false;
}
bool RowIntent::timeout() const {
  // @@protoc_insertion_point(field_get:txn.RowIntent.timeout)
  return timeout_;
}
void RowIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:txn.RowIntent.timeout)
}

// .txn.RowValue value = 10;
bool RowIntent::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void RowIntent::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::txn::RowValue& RowIntent::value() const {
  const ::txn::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:txn.RowIntent.value)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::RowValue*>(
      &::txn::_RowValue_default_instance_);
}
::txn::RowValue* RowIntent::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::txn::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:txn.RowIntent.value)
  return value_;
}
::txn::RowValue* RowIntent::release_value() {
  // @@protoc_insertion_point(field_release:txn.RowIntent.value)
  
  ::txn::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
void RowIntent::set_allocated_value(::txn::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.RowIntent.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kKeyFieldNumber;
const int Row::kValueFieldNumber;
const int Row::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::txn::RowValue(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_intent()) {
    intent_ = new ::txn::RowIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.Row)
}

void Row::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_) -
      reinterpret_cast<char*>(&value_)) + sizeof(intent_));
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:txn.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete intent_;
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Row& Row::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) {
    delete intent_;
  }
  intent_ = NULL;
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.RowValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.RowIntent intent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .txn.RowValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // .txn.RowIntent intent = 3;
  if (this->has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->intent_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .txn.RowValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  // .txn.RowIntent intent = 3;
  if (this->has_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->intent_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.Row)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .txn.RowValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .txn.RowIntent intent = 3;
  if (this->has_intent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::txn::RowValue::MergeFrom(from.value());
  }
  if (from.has_intent()) {
    mutable_intent()->::txn::RowIntent::MergeFrom(from.intent());
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  swap(intent_, other->intent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// bytes key = 1;
void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:txn.Row.key)
  return key_.GetNoArena();
}
void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txn.Row.key)
}
#if LANG_CXX11
void Row::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txn.Row.key)
}
#endif
void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txn.Row.key)
}
void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txn.Row.key)
}
::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txn.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:txn.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txn.Row.key)
}

// .txn.RowValue value = 2;
bool Row::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void Row::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::txn::RowValue& Row::value() const {
  const ::txn::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:txn.Row.value)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::RowValue*>(
      &::txn::_RowValue_default_instance_);
}
::txn::RowValue* Row::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::txn::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:txn.Row.value)
  return value_;
}
::txn::RowValue* Row::release_value() {
  // @@protoc_insertion_point(field_release:txn.Row.value)
  
  ::txn::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
void Row::set_allocated_value(::txn::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.Row.value)
}

// .txn.RowIntent intent = 3;
bool Row::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
void Row::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
const ::txn::RowIntent& Row::intent() const {
  const ::txn::RowIntent* p = intent_;
  // @@protoc_insertion_point(field_get:txn.Row.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::RowIntent*>(
      &::txn::_RowIntent_default_instance_);
}
::txn::RowIntent* Row::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::txn::RowIntent;
  }
  // @@protoc_insertion_point(field_mutable:txn.Row.intent)
  return intent_;
}
::txn::RowIntent* Row::release_intent() {
  // @@protoc_insertion_point(field_release:txn.Row.intent)
  
  ::txn::RowIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void Row::set_allocated_intent(::txn::RowIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.Row.intent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectResponse::kCodeFieldNumber;
const int SelectResponse::kRowsFieldNumber;
const int SelectResponse::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectResponse::SelectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.SelectResponse)
}
SelectResponse::SelectResponse(const SelectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:txn.SelectResponse)
}

void SelectResponse::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _cached_size_ = 0;
}

SelectResponse::~SelectResponse() {
  // @@protoc_insertion_point(destructor:txn.SelectResponse)
  SharedDtor();
}

void SelectResponse::SharedDtor() {
}

void SelectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectResponse& SelectResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectResponse* SelectResponse::New(::google::protobuf::Arena* arena) const {
  SelectResponse* n = new SelectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool SelectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.SelectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .txn.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.SelectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.SelectResponse)
  return false;
#undef DO_
}

void SelectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .txn.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(static_cast<int>(i)), output);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.SelectResponse)
}

::google::protobuf::uint8* SelectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .txn.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.SelectResponse)
  return target;
}

size_t SelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.SelectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .txn.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(static_cast<int>(i)));
    }
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.SelectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.SelectResponse)
    MergeFrom(*source);
  }
}

void SelectResponse::MergeFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void SelectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectResponse::CopyFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResponse::IsInitialized() const {
  return true;
}

void SelectResponse::Swap(SelectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectResponse::InternalSwap(SelectResponse* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  swap(offset_, other->offset_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectResponse

// int32 code = 1;
void SelectResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 SelectResponse::code() const {
  // @@protoc_insertion_point(field_get:txn.SelectResponse.code)
  return code_;
}
void SelectResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:txn.SelectResponse.code)
}

// repeated .txn.Row rows = 2;
int SelectResponse::rows_size() const {
  return rows_.size();
}
void SelectResponse::clear_rows() {
  rows_.Clear();
}
const ::txn::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:txn.SelectResponse.rows)
  return rows_.Get(index);
}
::txn::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:txn.SelectResponse.rows)
  return rows_.Mutable(index);
}
::txn::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:txn.SelectResponse.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::txn::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:txn.SelectResponse.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::txn::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:txn.SelectResponse.rows)
  return rows_;
}

// uint64 offset = 3;
void SelectResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SelectResponse::offset() const {
  // @@protoc_insertion_point(field_get:txn.SelectResponse.offset)
  return offset_;
}
void SelectResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:txn.SelectResponse.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsSelectRequest::kHeaderFieldNumber;
const int DsSelectRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsSelectRequest::DsSelectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsSelectRequest)
}
DsSelectRequest::DsSelectRequest(const DsSelectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::txn::SelectRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsSelectRequest)
}

void DsSelectRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsSelectRequest::~DsSelectRequest() {
  // @@protoc_insertion_point(destructor:txn.DsSelectRequest)
  SharedDtor();
}

void DsSelectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsSelectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsSelectRequest::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsSelectRequest& DsSelectRequest::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsSelectRequest* DsSelectRequest::New(::google::protobuf::Arena* arena) const {
  DsSelectRequest* n = new DsSelectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsSelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsSelectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsSelectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.SelectRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsSelectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsSelectRequest)
  return false;
#undef DO_
}

void DsSelectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.SelectRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsSelectRequest)
}

::google::protobuf::uint8* DsSelectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.SelectRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsSelectRequest)
  return target;
}

size_t DsSelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsSelectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.SelectRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsSelectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsSelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsSelectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsSelectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsSelectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsSelectRequest)
    MergeFrom(*source);
  }
}

void DsSelectRequest::MergeFrom(const DsSelectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsSelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::txn::SelectRequest::MergeFrom(from.req());
  }
}

void DsSelectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsSelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsSelectRequest::CopyFrom(const DsSelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsSelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsSelectRequest::IsInitialized() const {
  return true;
}

void DsSelectRequest::Swap(DsSelectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsSelectRequest::InternalSwap(DsSelectRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsSelectRequest::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsSelectRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsSelectRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsSelectRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsSelectRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsSelectRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsSelectRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsSelectRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsSelectRequest::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsSelectRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsSelectRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsSelectRequest.header)
}

// .txn.SelectRequest req = 2;
bool DsSelectRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsSelectRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::txn::SelectRequest& DsSelectRequest::req() const {
  const ::txn::SelectRequest* p = req_;
  // @@protoc_insertion_point(field_get:txn.DsSelectRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::SelectRequest*>(
      &::txn::_SelectRequest_default_instance_);
}
::txn::SelectRequest* DsSelectRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txn::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsSelectRequest.req)
  return req_;
}
::txn::SelectRequest* DsSelectRequest::release_req() {
  // @@protoc_insertion_point(field_release:txn.DsSelectRequest.req)
  
  ::txn::SelectRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsSelectRequest::set_allocated_req(::txn::SelectRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsSelectRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsSelectResponse::kHeaderFieldNumber;
const int DsSelectResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsSelectResponse::DsSelectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_txn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:txn.DsSelectResponse)
}
DsSelectResponse::DsSelectResponse(const DsSelectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::txn::SelectResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:txn.DsSelectResponse)
}

void DsSelectResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsSelectResponse::~DsSelectResponse() {
  // @@protoc_insertion_point(destructor:txn.DsSelectResponse)
  SharedDtor();
}

void DsSelectResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsSelectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsSelectResponse::descriptor() {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsSelectResponse& DsSelectResponse::default_instance() {
  protobuf_txn_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsSelectResponse* DsSelectResponse::New(::google::protobuf::Arena* arena) const {
  DsSelectResponse* n = new DsSelectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsSelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:txn.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsSelectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:txn.DsSelectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .txn.SelectResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:txn.DsSelectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:txn.DsSelectResponse)
  return false;
#undef DO_
}

void DsSelectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:txn.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .txn.SelectResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:txn.DsSelectResponse)
}

::google::protobuf::uint8* DsSelectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:txn.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .txn.SelectResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txn.DsSelectResponse)
  return target;
}

size_t DsSelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txn.DsSelectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .txn.SelectResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsSelectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:txn.DsSelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsSelectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsSelectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:txn.DsSelectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:txn.DsSelectResponse)
    MergeFrom(*source);
  }
}

void DsSelectResponse::MergeFrom(const DsSelectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txn.DsSelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::txn::SelectResponse::MergeFrom(from.resp());
  }
}

void DsSelectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:txn.DsSelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsSelectResponse::CopyFrom(const DsSelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txn.DsSelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsSelectResponse::IsInitialized() const {
  return true;
}

void DsSelectResponse::Swap(DsSelectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsSelectResponse::InternalSwap(DsSelectResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsSelectResponse::GetMetadata() const {
  protobuf_txn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_txn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsSelectResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsSelectResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsSelectResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsSelectResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txn.DsSelectResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsSelectResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsSelectResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsSelectResponse::release_header() {
  // @@protoc_insertion_point(field_release:txn.DsSelectResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsSelectResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsSelectResponse.header)
}

// .txn.SelectResponse resp = 2;
bool DsSelectResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsSelectResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::txn::SelectResponse& DsSelectResponse::resp() const {
  const ::txn::SelectResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txn.DsSelectResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txn::SelectResponse*>(
      &::txn::_SelectResponse_default_instance_);
}
::txn::SelectResponse* DsSelectResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txn::SelectResponse;
  }
  // @@protoc_insertion_point(field_mutable:txn.DsSelectResponse.resp)
  return resp_;
}
::txn::SelectResponse* DsSelectResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txn.DsSelectResponse.resp)
  
  ::txn::SelectResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsSelectResponse::set_allocated_resp(::txn::SelectResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txn.DsSelectResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace txn

// @@protoc_insertion_point(global_scope)
