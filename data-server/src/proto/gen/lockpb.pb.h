// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lockpb.proto

#ifndef PROTOBUF_lockpb_2eproto__INCLUDED
#define PROTOBUF_lockpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace lockrpcpb {
class DLockResponse;
class DLockResponseDefaultTypeInternal;
extern DLockResponseDefaultTypeInternal _DLockResponse_default_instance_;
class ForceUnLockRequest;
class ForceUnLockRequestDefaultTypeInternal;
extern ForceUnLockRequestDefaultTypeInternal _ForceUnLockRequest_default_instance_;
class LockHeartbeatRequest;
class LockHeartbeatRequestDefaultTypeInternal;
extern LockHeartbeatRequestDefaultTypeInternal _LockHeartbeatRequest_default_instance_;
class LockRequest;
class LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class UnLockRequest;
class UnLockRequestDefaultTypeInternal;
extern UnLockRequestDefaultTypeInternal _UnLockRequest_default_instance_;
class UpdateConditionRequest;
class UpdateConditionRequestDefaultTypeInternal;
extern UpdateConditionRequestDefaultTypeInternal _UpdateConditionRequest_default_instance_;
}  // namespace lockrpcpb

namespace lockrpcpb {

namespace protobuf_lockpb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_lockpb_2eproto

// ===================================================================

class LockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.LockRequest) */ {
 public:
  LockRequest();
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRequest& default_instance();

  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LockRequest* other);
  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LockRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string lock_name = 2;
  void clear_lock_name();
  static const int kLockNameFieldNumber = 2;
  const ::std::string& lock_name() const;
  void set_lock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_name(::std::string&& value);
  #endif
  void set_lock_name(const char* value);
  void set_lock_name(const char* value, size_t size);
  ::std::string* mutable_lock_name();
  ::std::string* release_lock_name();
  void set_allocated_lock_name(::std::string* lock_name);

  // bytes conditions = 3;
  void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  const ::std::string& conditions() const;
  void set_conditions(const ::std::string& value);
  #if LANG_CXX11
  void set_conditions(::std::string&& value);
  #endif
  void set_conditions(const char* value);
  void set_conditions(const void* value, size_t size);
  ::std::string* mutable_conditions();
  ::std::string* release_conditions();
  void set_allocated_conditions(::std::string* conditions);

  // string lock_id = 5;
  void clear_lock_id();
  static const int kLockIdFieldNumber = 5;
  const ::std::string& lock_id() const;
  void set_lock_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_id(::std::string&& value);
  #endif
  void set_lock_id(const char* value);
  void set_lock_id(const char* value, size_t size);
  ::std::string* mutable_lock_id();
  ::std::string* release_lock_id();
  void set_allocated_lock_id(::std::string* lock_id);

  // int64 timeout = 4;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::google::protobuf::int64 timeout() const;
  void set_timeout(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:lockrpcpb.LockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr lock_name_;
  ::google::protobuf::internal::ArenaStringPtr conditions_;
  ::google::protobuf::internal::ArenaStringPtr lock_id_;
  ::google::protobuf::int64 timeout_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnLockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.UnLockRequest) */ {
 public:
  UnLockRequest();
  virtual ~UnLockRequest();

  UnLockRequest(const UnLockRequest& from);

  inline UnLockRequest& operator=(const UnLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnLockRequest(UnLockRequest&& from) noexcept
    : UnLockRequest() {
    *this = ::std::move(from);
  }

  inline UnLockRequest& operator=(UnLockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockRequest& default_instance();

  static inline const UnLockRequest* internal_default_instance() {
    return reinterpret_cast<const UnLockRequest*>(
               &_UnLockRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UnLockRequest* other);
  friend void swap(UnLockRequest& a, UnLockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnLockRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnLockRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnLockRequest& from);
  void MergeFrom(const UnLockRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnLockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string lock_name = 2;
  void clear_lock_name();
  static const int kLockNameFieldNumber = 2;
  const ::std::string& lock_name() const;
  void set_lock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_name(::std::string&& value);
  #endif
  void set_lock_name(const char* value);
  void set_lock_name(const char* value, size_t size);
  ::std::string* mutable_lock_name();
  ::std::string* release_lock_name();
  void set_allocated_lock_name(::std::string* lock_name);

  // string lock_id = 3;
  void clear_lock_id();
  static const int kLockIdFieldNumber = 3;
  const ::std::string& lock_id() const;
  void set_lock_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_id(::std::string&& value);
  #endif
  void set_lock_id(const char* value);
  void set_lock_id(const char* value, size_t size);
  ::std::string* mutable_lock_id();
  ::std::string* release_lock_id();
  void set_allocated_lock_id(::std::string* lock_id);

  // @@protoc_insertion_point(class_scope:lockrpcpb.UnLockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr lock_name_;
  ::google::protobuf::internal::ArenaStringPtr lock_id_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForceUnLockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.ForceUnLockRequest) */ {
 public:
  ForceUnLockRequest();
  virtual ~ForceUnLockRequest();

  ForceUnLockRequest(const ForceUnLockRequest& from);

  inline ForceUnLockRequest& operator=(const ForceUnLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ForceUnLockRequest(ForceUnLockRequest&& from) noexcept
    : ForceUnLockRequest() {
    *this = ::std::move(from);
  }

  inline ForceUnLockRequest& operator=(ForceUnLockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceUnLockRequest& default_instance();

  static inline const ForceUnLockRequest* internal_default_instance() {
    return reinterpret_cast<const ForceUnLockRequest*>(
               &_ForceUnLockRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ForceUnLockRequest* other);
  friend void swap(ForceUnLockRequest& a, ForceUnLockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ForceUnLockRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ForceUnLockRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForceUnLockRequest& from);
  void MergeFrom(const ForceUnLockRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForceUnLockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string lock_name = 2;
  void clear_lock_name();
  static const int kLockNameFieldNumber = 2;
  const ::std::string& lock_name() const;
  void set_lock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_name(::std::string&& value);
  #endif
  void set_lock_name(const char* value);
  void set_lock_name(const char* value, size_t size);
  ::std::string* mutable_lock_name();
  ::std::string* release_lock_name();
  void set_allocated_lock_name(::std::string* lock_name);

  // @@protoc_insertion_point(class_scope:lockrpcpb.ForceUnLockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr lock_name_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockHeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.LockHeartbeatRequest) */ {
 public:
  LockHeartbeatRequest();
  virtual ~LockHeartbeatRequest();

  LockHeartbeatRequest(const LockHeartbeatRequest& from);

  inline LockHeartbeatRequest& operator=(const LockHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockHeartbeatRequest(LockHeartbeatRequest&& from) noexcept
    : LockHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline LockHeartbeatRequest& operator=(LockHeartbeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockHeartbeatRequest& default_instance();

  static inline const LockHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const LockHeartbeatRequest*>(
               &_LockHeartbeatRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LockHeartbeatRequest* other);
  friend void swap(LockHeartbeatRequest& a, LockHeartbeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockHeartbeatRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LockHeartbeatRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockHeartbeatRequest& from);
  void MergeFrom(const LockHeartbeatRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockHeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string lock_name = 2;
  void clear_lock_name();
  static const int kLockNameFieldNumber = 2;
  const ::std::string& lock_name() const;
  void set_lock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_name(::std::string&& value);
  #endif
  void set_lock_name(const char* value);
  void set_lock_name(const char* value, size_t size);
  ::std::string* mutable_lock_name();
  ::std::string* release_lock_name();
  void set_allocated_lock_name(::std::string* lock_name);

  // string lock_id = 3;
  void clear_lock_id();
  static const int kLockIdFieldNumber = 3;
  const ::std::string& lock_id() const;
  void set_lock_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_id(::std::string&& value);
  #endif
  void set_lock_id(const char* value);
  void set_lock_id(const char* value, size_t size);
  ::std::string* mutable_lock_id();
  ::std::string* release_lock_id();
  void set_allocated_lock_id(::std::string* lock_id);

  // @@protoc_insertion_point(class_scope:lockrpcpb.LockHeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr lock_name_;
  ::google::protobuf::internal::ArenaStringPtr lock_id_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateConditionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.UpdateConditionRequest) */ {
 public:
  UpdateConditionRequest();
  virtual ~UpdateConditionRequest();

  UpdateConditionRequest(const UpdateConditionRequest& from);

  inline UpdateConditionRequest& operator=(const UpdateConditionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateConditionRequest(UpdateConditionRequest&& from) noexcept
    : UpdateConditionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConditionRequest& operator=(UpdateConditionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConditionRequest& default_instance();

  static inline const UpdateConditionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConditionRequest*>(
               &_UpdateConditionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UpdateConditionRequest* other);
  friend void swap(UpdateConditionRequest& a, UpdateConditionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateConditionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateConditionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateConditionRequest& from);
  void MergeFrom(const UpdateConditionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateConditionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string namespace = 1;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 1;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string lock_name = 2;
  void clear_lock_name();
  static const int kLockNameFieldNumber = 2;
  const ::std::string& lock_name() const;
  void set_lock_name(const ::std::string& value);
  #if LANG_CXX11
  void set_lock_name(::std::string&& value);
  #endif
  void set_lock_name(const char* value);
  void set_lock_name(const char* value, size_t size);
  ::std::string* mutable_lock_name();
  ::std::string* release_lock_name();
  void set_allocated_lock_name(::std::string* lock_name);

  // bytes conditions = 3;
  void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  const ::std::string& conditions() const;
  void set_conditions(const ::std::string& value);
  #if LANG_CXX11
  void set_conditions(::std::string&& value);
  #endif
  void set_conditions(const char* value);
  void set_conditions(const void* value, size_t size);
  ::std::string* mutable_conditions();
  ::std::string* release_conditions();
  void set_allocated_conditions(::std::string* conditions);

  // @@protoc_insertion_point(class_scope:lockrpcpb.UpdateConditionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr lock_name_;
  ::google::protobuf::internal::ArenaStringPtr conditions_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DLockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lockrpcpb.DLockResponse) */ {
 public:
  DLockResponse();
  virtual ~DLockResponse();

  DLockResponse(const DLockResponse& from);

  inline DLockResponse& operator=(const DLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DLockResponse(DLockResponse&& from) noexcept
    : DLockResponse() {
    *this = ::std::move(from);
  }

  inline DLockResponse& operator=(DLockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DLockResponse& default_instance();

  static inline const DLockResponse* internal_default_instance() {
    return reinterpret_cast<const DLockResponse*>(
               &_DLockResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DLockResponse* other);
  friend void swap(DLockResponse& a, DLockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DLockResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DLockResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DLockResponse& from);
  void MergeFrom(const DLockResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DLockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // bytes conditions = 3;
  void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  const ::std::string& conditions() const;
  void set_conditions(const ::std::string& value);
  #if LANG_CXX11
  void set_conditions(::std::string&& value);
  #endif
  void set_conditions(const char* value);
  void set_conditions(const void* value, size_t size);
  ::std::string* mutable_conditions();
  ::std::string* release_conditions();
  void set_allocated_conditions(::std::string* conditions);

  // int64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int64 code() const;
  void set_code(::google::protobuf::int64 value);

  // int64 update_time = 4;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:lockrpcpb.DLockResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr conditions_;
  ::google::protobuf::int64 code_;
  ::google::protobuf::int64 update_time_;
  mutable int _cached_size_;
  friend struct protobuf_lockpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockRequest

// string namespace = 1;
inline void LockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.namespace)
  return namespace__.GetNoArena();
}
inline void LockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.namespace)
}
#if LANG_CXX11
inline void LockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.namespace)
}
#endif
inline void LockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.namespace)
}
inline void LockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.namespace)
}
inline ::std::string* LockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.namespace)
}

// string lock_name = 2;
inline void LockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.lock_name)
  return lock_name_.GetNoArena();
}
inline void LockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.lock_name)
}
#if LANG_CXX11
inline void LockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.lock_name)
}
#endif
inline void LockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.lock_name)
}
inline void LockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.lock_name)
}
inline ::std::string* LockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.lock_name)
}

// bytes conditions = 3;
inline void LockRequest::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.conditions)
  return conditions_.GetNoArena();
}
inline void LockRequest::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.conditions)
}
#if LANG_CXX11
inline void LockRequest::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.conditions)
}
#endif
inline void LockRequest::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.conditions)
}
inline void LockRequest::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.conditions)
}
inline ::std::string* LockRequest::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.conditions)
}

// int64 timeout = 4;
inline void LockRequest::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LockRequest::timeout() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.timeout)
  return timeout_;
}
inline void LockRequest::set_timeout(::google::protobuf::int64 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.timeout)
}

// string lock_id = 5;
inline void LockRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.lock_id)
  return lock_id_.GetNoArena();
}
inline void LockRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.lock_id)
}
#if LANG_CXX11
inline void LockRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.lock_id)
}
#endif
inline void LockRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.lock_id)
}
inline void LockRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.lock_id)
}
inline ::std::string* LockRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.lock_id)
}

// -------------------------------------------------------------------

// UnLockRequest

// string namespace = 1;
inline void UnLockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.namespace)
  return namespace__.GetNoArena();
}
inline void UnLockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.namespace)
}
#if LANG_CXX11
inline void UnLockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.namespace)
}
#endif
inline void UnLockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.namespace)
}
inline void UnLockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.namespace)
}
inline ::std::string* UnLockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.namespace)
}

// string lock_name = 2;
inline void UnLockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.lock_name)
  return lock_name_.GetNoArena();
}
inline void UnLockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.lock_name)
}
#if LANG_CXX11
inline void UnLockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.lock_name)
}
#endif
inline void UnLockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.lock_name)
}
inline void UnLockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.lock_name)
}
inline ::std::string* UnLockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.lock_name)
}

// string lock_id = 3;
inline void UnLockRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.lock_id)
  return lock_id_.GetNoArena();
}
inline void UnLockRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.lock_id)
}
#if LANG_CXX11
inline void UnLockRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.lock_id)
}
#endif
inline void UnLockRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.lock_id)
}
inline void UnLockRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.lock_id)
}
inline ::std::string* UnLockRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.lock_id)
}

// -------------------------------------------------------------------

// ForceUnLockRequest

// string namespace = 1;
inline void ForceUnLockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForceUnLockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.ForceUnLockRequest.namespace)
  return namespace__.GetNoArena();
}
inline void ForceUnLockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.ForceUnLockRequest.namespace)
}
#if LANG_CXX11
inline void ForceUnLockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.ForceUnLockRequest.namespace)
}
#endif
inline void ForceUnLockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.ForceUnLockRequest.namespace)
}
inline void ForceUnLockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.ForceUnLockRequest.namespace)
}
inline ::std::string* ForceUnLockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.ForceUnLockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForceUnLockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.ForceUnLockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForceUnLockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.ForceUnLockRequest.namespace)
}

// string lock_name = 2;
inline void ForceUnLockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForceUnLockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.ForceUnLockRequest.lock_name)
  return lock_name_.GetNoArena();
}
inline void ForceUnLockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.ForceUnLockRequest.lock_name)
}
#if LANG_CXX11
inline void ForceUnLockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.ForceUnLockRequest.lock_name)
}
#endif
inline void ForceUnLockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.ForceUnLockRequest.lock_name)
}
inline void ForceUnLockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.ForceUnLockRequest.lock_name)
}
inline ::std::string* ForceUnLockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.ForceUnLockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForceUnLockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.ForceUnLockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForceUnLockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.ForceUnLockRequest.lock_name)
}

// -------------------------------------------------------------------

// LockHeartbeatRequest

// string namespace = 1;
inline void LockHeartbeatRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockHeartbeatRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.namespace)
  return namespace__.GetNoArena();
}
inline void LockHeartbeatRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.namespace)
}
#if LANG_CXX11
inline void LockHeartbeatRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.namespace)
}
#endif
inline void LockHeartbeatRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.namespace)
}
inline void LockHeartbeatRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.namespace)
}
inline ::std::string* LockHeartbeatRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockHeartbeatRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockHeartbeatRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.namespace)
}

// string lock_name = 2;
inline void LockHeartbeatRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockHeartbeatRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.lock_name)
  return lock_name_.GetNoArena();
}
inline void LockHeartbeatRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.lock_name)
}
#if LANG_CXX11
inline void LockHeartbeatRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.lock_name)
}
#endif
inline void LockHeartbeatRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.lock_name)
}
inline void LockHeartbeatRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.lock_name)
}
inline ::std::string* LockHeartbeatRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockHeartbeatRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockHeartbeatRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.lock_name)
}

// string lock_id = 3;
inline void LockHeartbeatRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockHeartbeatRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.lock_id)
  return lock_id_.GetNoArena();
}
inline void LockHeartbeatRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.lock_id)
}
#if LANG_CXX11
inline void LockHeartbeatRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.lock_id)
}
#endif
inline void LockHeartbeatRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.lock_id)
}
inline void LockHeartbeatRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.lock_id)
}
inline ::std::string* LockHeartbeatRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockHeartbeatRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockHeartbeatRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.lock_id)
}

// -------------------------------------------------------------------

// UpdateConditionRequest

// string namespace = 1;
inline void UpdateConditionRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateConditionRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.namespace)
  return namespace__.GetNoArena();
}
inline void UpdateConditionRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.namespace)
}
#if LANG_CXX11
inline void UpdateConditionRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.namespace)
}
#endif
inline void UpdateConditionRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.namespace)
}
inline void UpdateConditionRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.namespace)
}
inline ::std::string* UpdateConditionRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateConditionRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConditionRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.namespace)
}

// string lock_name = 2;
inline void UpdateConditionRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateConditionRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.lock_name)
  return lock_name_.GetNoArena();
}
inline void UpdateConditionRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.lock_name)
}
#if LANG_CXX11
inline void UpdateConditionRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.lock_name)
}
#endif
inline void UpdateConditionRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.lock_name)
}
inline void UpdateConditionRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.lock_name)
}
inline ::std::string* UpdateConditionRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateConditionRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConditionRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.lock_name)
}

// bytes conditions = 3;
inline void UpdateConditionRequest::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateConditionRequest::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.conditions)
  return conditions_.GetNoArena();
}
inline void UpdateConditionRequest::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.conditions)
}
#if LANG_CXX11
inline void UpdateConditionRequest::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.conditions)
}
#endif
inline void UpdateConditionRequest::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.conditions)
}
inline void UpdateConditionRequest::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.conditions)
}
inline ::std::string* UpdateConditionRequest::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateConditionRequest::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConditionRequest::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.conditions)
}

// -------------------------------------------------------------------

// DLockResponse

// int64 code = 1;
inline void DLockResponse::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DLockResponse::code() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.code)
  return code_;
}
inline void DLockResponse::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.code)
}

// string error = 2;
inline void DLockResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DLockResponse::error() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.error)
  return error_.GetNoArena();
}
inline void DLockResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.error)
}
#if LANG_CXX11
inline void DLockResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.DLockResponse.error)
}
#endif
inline void DLockResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.DLockResponse.error)
}
inline void DLockResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.DLockResponse.error)
}
inline ::std::string* DLockResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.DLockResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:lockrpcpb.DLockResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DLockResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.DLockResponse.error)
}

// bytes conditions = 3;
inline void DLockResponse::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DLockResponse::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.conditions)
  return conditions_.GetNoArena();
}
inline void DLockResponse::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.conditions)
}
#if LANG_CXX11
inline void DLockResponse::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.DLockResponse.conditions)
}
#endif
inline void DLockResponse::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.DLockResponse.conditions)
}
inline void DLockResponse::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.DLockResponse.conditions)
}
inline ::std::string* DLockResponse::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.DLockResponse.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DLockResponse::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.DLockResponse.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DLockResponse::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.DLockResponse.conditions)
}

// int64 update_time = 4;
inline void DLockResponse::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DLockResponse::update_time() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.update_time)
  return update_time_;
}
inline void DLockResponse::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.update_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace lockrpcpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lockpb_2eproto__INCLUDED
