// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metapb.proto

#ifndef PROTOBUF_metapb_2eproto__INCLUDED
#define PROTOBUF_metapb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace metapb {
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class DataBase;
class DataBaseDefaultTypeInternal;
extern DataBaseDefaultTypeInternal _DataBase_default_instance_;
class Leader;
class LeaderDefaultTypeInternal;
extern LeaderDefaultTypeInternal _Leader_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeLabel;
class NodeLabelDefaultTypeInternal;
extern NodeLabelDefaultTypeInternal _NodeLabel_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Primary;
class PrimaryDefaultTypeInternal;
extern PrimaryDefaultTypeInternal _Primary_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RangeEpoch;
class RangeEpochDefaultTypeInternal;
extern RangeEpochDefaultTypeInternal _RangeEpoch_default_instance_;
class Replica;
class ReplicaDefaultTypeInternal;
extern ReplicaDefaultTypeInternal _Replica_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableEpoch;
class TableEpochDefaultTypeInternal;
extern TableEpochDefaultTypeInternal _TableEpoch_default_instance_;
}  // namespace metapb

namespace metapb {

namespace protobuf_metapb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_metapb_2eproto

enum NodeState {
  N_Invalid = 0,
  N_Login = 1,
  N_Logout = 2,
  N_Offline = 3,
  N_Tombstone = 4,
  N_Upgrade = 5,
  N_Initial = 6,
  NodeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodeState_IsValid(int value);
const NodeState NodeState_MIN = N_Invalid;
const NodeState NodeState_MAX = N_Initial;
const int NodeState_ARRAYSIZE = NodeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeState_descriptor();
inline const ::std::string& NodeState_Name(NodeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeState_descriptor(), value);
}
inline bool NodeState_Parse(
    const ::std::string& name, NodeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeState>(
    NodeState_descriptor(), name, value);
}
enum RangeState {
  R_Invalid = 0,
  R_Init = 1,
  R_Normal = 2,
  R_Split = 3,
  R_Merge = 4,
  R_Remove = 5,
  R_LoadSnap = 6,
  R_Abnormal = 7,
  R_Offline = 8,
  RangeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RangeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RangeState_IsValid(int value);
const RangeState RangeState_MIN = R_Invalid;
const RangeState RangeState_MAX = R_Offline;
const int RangeState_ARRAYSIZE = RangeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RangeState_descriptor();
inline const ::std::string& RangeState_Name(RangeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RangeState_descriptor(), value);
}
inline bool RangeState_Parse(
    const ::std::string& name, RangeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangeState>(
    RangeState_descriptor(), name, value);
}
enum PeerType {
  PeerType_Invalid = 0,
  PeerType_Normal = 1,
  PeerType_Learner = 2,
  PeerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerType_IsValid(int value);
const PeerType PeerType_MIN = PeerType_Invalid;
const PeerType PeerType_MAX = PeerType_Learner;
const int PeerType_ARRAYSIZE = PeerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerType_descriptor();
inline const ::std::string& PeerType_Name(PeerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerType_descriptor(), value);
}
inline bool PeerType_Parse(
    const ::std::string& name, PeerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerType>(
    PeerType_descriptor(), name, value);
}
enum DataType {
  Invalid = 0,
  Tinyint = 1,
  Smallint = 2,
  Int = 3,
  BigInt = 4,
  Float = 5,
  Double = 6,
  Varchar = 7,
  Binary = 8,
  Date = 9,
  TimeStamp = 10,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = Invalid;
const DataType DataType_MAX = TimeStamp;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum TableStatus {
  TableInvalid = 0,
  TableInit = 1,
  TablePrepare = 2,
  TableRunning = 3,
  TableDelete = 4,
  TableDeleting = 5,
  TableStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableStatus_IsValid(int value);
const TableStatus TableStatus_MIN = TableInvalid;
const TableStatus TableStatus_MAX = TableDeleting;
const int TableStatus_ARRAYSIZE = TableStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableStatus_descriptor();
inline const ::std::string& TableStatus_Name(TableStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableStatus_descriptor(), value);
}
inline bool TableStatus_Parse(
    const ::std::string& name, TableStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableStatus>(
    TableStatus_descriptor(), name, value);
}
// ===================================================================

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 max_peer_count = 2;
  void clear_max_peer_count();
  static const int kMaxPeerCountFieldNumber = 2;
  ::google::protobuf::uint32 max_peer_count() const;
  void set_max_peer_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:metapb.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 max_peer_count_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeLabel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.NodeLabel) */ {
 public:
  NodeLabel();
  virtual ~NodeLabel();

  NodeLabel(const NodeLabel& from);

  inline NodeLabel& operator=(const NodeLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeLabel(NodeLabel&& from) noexcept
    : NodeLabel() {
    *this = ::std::move(from);
  }

  inline NodeLabel& operator=(NodeLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeLabel& default_instance();

  static inline const NodeLabel* internal_default_instance() {
    return reinterpret_cast<const NodeLabel*>(
               &_NodeLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NodeLabel* other);
  friend void swap(NodeLabel& a, NodeLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeLabel& from);
  void MergeFrom(const NodeLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:metapb.NodeLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.NodeLabel labels = 7;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 7;
  const ::metapb::NodeLabel& labels(int index) const;
  ::metapb::NodeLabel* mutable_labels(int index);
  ::metapb::NodeLabel* add_labels();
  ::google::protobuf::RepeatedPtrField< ::metapb::NodeLabel >*
      mutable_labels();
  const ::google::protobuf::RepeatedPtrField< ::metapb::NodeLabel >&
      labels() const;

  // string server_addr = 2;
  void clear_server_addr();
  static const int kServerAddrFieldNumber = 2;
  const ::std::string& server_addr() const;
  void set_server_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_server_addr(::std::string&& value);
  #endif
  void set_server_addr(const char* value);
  void set_server_addr(const char* value, size_t size);
  ::std::string* mutable_server_addr();
  ::std::string* release_server_addr();
  void set_allocated_server_addr(::std::string* server_addr);

  // string raft_addr = 3;
  void clear_raft_addr();
  static const int kRaftAddrFieldNumber = 3;
  const ::std::string& raft_addr() const;
  void set_raft_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_raft_addr(::std::string&& value);
  #endif
  void set_raft_addr(const char* value);
  void set_raft_addr(const char* value, size_t size);
  ::std::string* mutable_raft_addr();
  ::std::string* release_raft_addr();
  void set_allocated_raft_addr(::std::string* raft_addr);

  // string admin_addr = 4;
  void clear_admin_addr();
  static const int kAdminAddrFieldNumber = 4;
  const ::std::string& admin_addr() const;
  void set_admin_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_admin_addr(::std::string&& value);
  #endif
  void set_admin_addr(const char* value);
  void set_admin_addr(const char* value, size_t size);
  ::std::string* mutable_admin_addr();
  ::std::string* release_admin_addr();
  void set_allocated_admin_addr(::std::string* admin_addr);

  // string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // .metapb.NodeState state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::metapb::NodeState state() const;
  void set_state(::metapb::NodeState value);

  // @@protoc_insertion_point(class_scope:metapb.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metapb::NodeLabel > labels_;
  ::google::protobuf::internal::ArenaStringPtr server_addr_;
  ::google::protobuf::internal::ArenaStringPtr raft_addr_;
  ::google::protobuf::internal::ArenaStringPtr admin_addr_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 id_;
  int state_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // .metapb.PeerType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::metapb::PeerType type() const;
  void set_type(::metapb::PeerType value);

  // @@protoc_insertion_point(class_scope:metapb.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 node_id_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Replica : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Replica) */ {
 public:
  Replica();
  virtual ~Replica();

  Replica(const Replica& from);

  inline Replica& operator=(const Replica& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Replica(Replica&& from) noexcept
    : Replica() {
    *this = ::std::move(from);
  }

  inline Replica& operator=(Replica&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Replica& default_instance();

  static inline const Replica* internal_default_instance() {
    return reinterpret_cast<const Replica*>(
               &_Replica_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Replica* other);
  friend void swap(Replica& a, Replica& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Replica* New() const PROTOBUF_FINAL { return New(NULL); }

  Replica* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Replica& from);
  void MergeFrom(const Replica& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Replica* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes start_key = 3;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 3;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 4;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* mutable_peer();
  ::metapb::Peer* release_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.Replica)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::metapb::Peer* peer_;
  ::google::protobuf::uint64 range_id_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeEpoch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.RangeEpoch) */ {
 public:
  RangeEpoch();
  virtual ~RangeEpoch();

  RangeEpoch(const RangeEpoch& from);

  inline RangeEpoch& operator=(const RangeEpoch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeEpoch(RangeEpoch&& from) noexcept
    : RangeEpoch() {
    *this = ::std::move(from);
  }

  inline RangeEpoch& operator=(RangeEpoch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeEpoch& default_instance();

  static inline const RangeEpoch* internal_default_instance() {
    return reinterpret_cast<const RangeEpoch*>(
               &_RangeEpoch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RangeEpoch* other);
  friend void swap(RangeEpoch& a, RangeEpoch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeEpoch* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeEpoch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeEpoch& from);
  void MergeFrom(const RangeEpoch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeEpoch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 conf_ver = 1;
  void clear_conf_ver();
  static const int kConfVerFieldNumber = 1;
  ::google::protobuf::uint64 conf_ver() const;
  void set_conf_ver(::google::protobuf::uint64 value);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.RangeEpoch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 conf_ver_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const PROTOBUF_FINAL { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.Peer peers = 5;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 5;
  const ::metapb::Peer& peers(int index) const;
  ::metapb::Peer* mutable_peers(int index);
  ::metapb::Peer* add_peers();
  ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
      peers() const;

  // repeated .metapb.Column primary_keys = 7;
  int primary_keys_size() const;
  void clear_primary_keys();
  static const int kPrimaryKeysFieldNumber = 7;
  const ::metapb::Column& primary_keys(int index) const;
  ::metapb::Column* mutable_primary_keys(int index);
  ::metapb::Column* add_primary_keys();
  ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
      mutable_primary_keys();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
      primary_keys() const;

  // bytes start_key = 2;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 3;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // .metapb.RangeEpoch range_epoch = 4;
  bool has_range_epoch() const;
  void clear_range_epoch();
  static const int kRangeEpochFieldNumber = 4;
  const ::metapb::RangeEpoch& range_epoch() const;
  ::metapb::RangeEpoch* mutable_range_epoch();
  ::metapb::RangeEpoch* release_range_epoch();
  void set_allocated_range_epoch(::metapb::RangeEpoch* range_epoch);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 table_id = 6;
  void clear_table_id();
  static const int kTableIdFieldNumber = 6;
  ::google::protobuf::uint64 table_id() const;
  void set_table_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Peer > peers_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Column > primary_keys_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::metapb::RangeEpoch* range_epoch_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 table_id_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Leader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Leader) */ {
 public:
  Leader();
  virtual ~Leader();

  Leader(const Leader& from);

  inline Leader& operator=(const Leader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Leader(Leader&& from) noexcept
    : Leader() {
    *this = ::std::move(from);
  }

  inline Leader& operator=(Leader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Leader& default_instance();

  static inline const Leader* internal_default_instance() {
    return reinterpret_cast<const Leader*>(
               &_Leader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Leader* other);
  friend void swap(Leader& a, Leader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Leader* New() const PROTOBUF_FINAL { return New(NULL); }

  Leader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Leader& from);
  void MergeFrom(const Leader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Leader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_addr = 3;
  void clear_node_addr();
  static const int kNodeAddrFieldNumber = 3;
  const ::std::string& node_addr() const;
  void set_node_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_node_addr(::std::string&& value);
  #endif
  void set_node_addr(const char* value);
  void set_node_addr(const char* value, size_t size);
  ::std::string* mutable_node_addr();
  ::std::string* release_node_addr();
  void set_allocated_node_addr(::std::string* node_addr);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.Leader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_addr_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 node_id_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Route* other);
  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const PROTOBUF_FINAL { return New(NULL); }

  Route* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Range range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  const ::metapb::Range& range() const;
  ::metapb::Range* mutable_range();
  ::metapb::Range* release_range();
  void set_allocated_range(::metapb::Range* range);

  // .metapb.Peer leader = 2;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  const ::metapb::Peer& leader() const;
  ::metapb::Peer* mutable_leader();
  ::metapb::Peer* release_leader();
  void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:metapb.Route)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Range* range_;
  ::metapb::Peer* leader_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.DataBase) */ {
 public:
  DataBase();
  virtual ~DataBase();

  DataBase(const DataBase& from);

  inline DataBase& operator=(const DataBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataBase(DataBase&& from) noexcept
    : DataBase() {
    *this = ::std::move(from);
  }

  inline DataBase& operator=(DataBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBase& default_instance();

  static inline const DataBase* internal_default_instance() {
    return reinterpret_cast<const DataBase*>(
               &_DataBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DataBase* other);
  friend void swap(DataBase& a, DataBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataBase* New() const PROTOBUF_FINAL { return New(NULL); }

  DataBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataBase& from);
  void MergeFrom(const DataBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string properties = 3;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // int64 create_time = 5;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:metapb.DataBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::int64 create_time_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Column : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Column* other);
  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const PROTOBUF_FINAL { return New(NULL); }

  Column* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes default_value = 11;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 11;
  const ::std::string& default_value() const;
  void set_default_value(const ::std::string& value);
  #if LANG_CXX11
  void set_default_value(::std::string&& value);
  #endif
  void set_default_value(const char* value);
  void set_default_value(const void* value, size_t size);
  ::std::string* mutable_default_value();
  ::std::string* release_default_value();
  void set_allocated_default_value(::std::string* default_value);

  // string properties = 12;
  void clear_properties();
  static const int kPropertiesFieldNumber = 12;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // .metapb.DataType data_type = 3;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  ::metapb::DataType data_type() const;
  void set_data_type(::metapb::DataType value);

  // int32 scale = 5;
  void clear_scale();
  static const int kScaleFieldNumber = 5;
  ::google::protobuf::int32 scale() const;
  void set_scale(::google::protobuf::int32 value);

  // uint64 primary_key = 8;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 8;
  ::google::protobuf::uint64 primary_key() const;
  void set_primary_key(::google::protobuf::uint64 value);

  // int32 precision = 6;
  void clear_precision();
  static const int kPrecisionFieldNumber = 6;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // bool unsigned = 4;
  void clear_unsigned_();
  static const int kUnsignedFieldNumber = 4;
  bool unsigned_() const;
  void set_unsigned_(bool value);

  // bool nullable = 7;
  void clear_nullable();
  static const int kNullableFieldNumber = 7;
  bool nullable() const;
  void set_nullable(bool value);

  // bool index = 10;
  void clear_index();
  static const int kIndexFieldNumber = 10;
  bool index() const;
  void set_index(bool value);

  // bool auto_increment = 13;
  void clear_auto_increment();
  static const int kAutoIncrementFieldNumber = 13;
  bool auto_increment() const;
  void set_auto_increment(bool value);

  // int32 ordinal = 9;
  void clear_ordinal();
  static const int kOrdinalFieldNumber = 9;
  ::google::protobuf::int32 ordinal() const;
  void set_ordinal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:metapb.Column)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr default_value_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::uint64 id_;
  int data_type_;
  ::google::protobuf::int32 scale_;
  ::google::protobuf::uint64 primary_key_;
  ::google::protobuf::int32 precision_;
  bool unsigned__;
  bool nullable_;
  bool index_;
  bool auto_increment_;
  ::google::protobuf::int32 ordinal_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Primary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Primary) */ {
 public:
  Primary();
  virtual ~Primary();

  Primary(const Primary& from);

  inline Primary& operator=(const Primary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Primary(Primary&& from) noexcept
    : Primary() {
    *this = ::std::move(from);
  }

  inline Primary& operator=(Primary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Primary& default_instance();

  static inline const Primary* internal_default_instance() {
    return reinterpret_cast<const Primary*>(
               &_Primary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Primary* other);
  friend void swap(Primary& a, Primary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Primary* New() const PROTOBUF_FINAL { return New(NULL); }

  Primary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Primary& from);
  void MergeFrom(const Primary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Primary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string column_name = 1;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // .metapb.Primary next = 2;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 2;
  const ::metapb::Primary& next() const;
  ::metapb::Primary* mutable_next();
  ::metapb::Primary* release_next();
  void set_allocated_next(::metapb::Primary* next);

  // @@protoc_insertion_point(class_scope:metapb.Primary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::metapb::Primary* next_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableEpoch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.TableEpoch) */ {
 public:
  TableEpoch();
  virtual ~TableEpoch();

  TableEpoch(const TableEpoch& from);

  inline TableEpoch& operator=(const TableEpoch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableEpoch(TableEpoch&& from) noexcept
    : TableEpoch() {
    *this = ::std::move(from);
  }

  inline TableEpoch& operator=(TableEpoch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableEpoch& default_instance();

  static inline const TableEpoch* internal_default_instance() {
    return reinterpret_cast<const TableEpoch*>(
               &_TableEpoch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TableEpoch* other);
  friend void swap(TableEpoch& a, TableEpoch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableEpoch* New() const PROTOBUF_FINAL { return New(NULL); }

  TableEpoch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableEpoch& from);
  void MergeFrom(const TableEpoch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableEpoch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 conf_ver = 1;
  void clear_conf_ver();
  static const int kConfVerFieldNumber = 1;
  ::google::protobuf::uint64 conf_ver() const;
  void set_conf_ver(::google::protobuf::uint64 value);

  // uint64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:metapb.TableEpoch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 conf_ver_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:metapb.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.Column columns = 6;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 6;
  const ::metapb::Column& columns(int index) const;
  ::metapb::Column* mutable_columns(int index);
  ::metapb::Column* add_columns();
  ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
      mutable_columns();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
      columns() const;

  // repeated .metapb.Column regxs = 8;
  int regxs_size() const;
  void clear_regxs();
  static const int kRegxsFieldNumber = 8;
  const ::metapb::Column& regxs(int index) const;
  ::metapb::Column* mutable_regxs(int index);
  ::metapb::Column* add_regxs();
  ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
      mutable_regxs();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
      regxs() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string db_name = 2;
  void clear_db_name();
  static const int kDbNameFieldNumber = 2;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // string properties = 5;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::std::string& properties() const;
  void set_properties(const ::std::string& value);
  #if LANG_CXX11
  void set_properties(::std::string&& value);
  #endif
  void set_properties(const char* value);
  void set_properties(const char* value, size_t size);
  ::std::string* mutable_properties();
  ::std::string* release_properties();
  void set_allocated_properties(::std::string* properties);

  // bytes expand = 12;
  void clear_expand();
  static const int kExpandFieldNumber = 12;
  const ::std::string& expand() const;
  void set_expand(const ::std::string& value);
  #if LANG_CXX11
  void set_expand(::std::string&& value);
  #endif
  void set_expand(const char* value);
  void set_expand(const void* value, size_t size);
  ::std::string* mutable_expand();
  ::std::string* release_expand();
  void set_allocated_expand(::std::string* expand);

  // .metapb.TableEpoch epoch = 7;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 7;
  const ::metapb::TableEpoch& epoch() const;
  ::metapb::TableEpoch* mutable_epoch();
  ::metapb::TableEpoch* release_epoch();
  void set_allocated_epoch(::metapb::TableEpoch* epoch);

  // uint64 db_id = 3;
  void clear_db_id();
  static const int kDbIdFieldNumber = 3;
  ::google::protobuf::uint64 db_id() const;
  void set_db_id(::google::protobuf::uint64 value);

  // uint64 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 create_time = 9;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 9;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // bool pk_dup_check = 10;
  void clear_pk_dup_check();
  static const int kPkDupCheckFieldNumber = 10;
  bool pk_dup_check() const;
  void set_pk_dup_check(bool value);

  // .metapb.TableStatus status = 11;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  ::metapb::TableStatus status() const;
  void set_status(::metapb::TableStatus value);

  // @@protoc_insertion_point(class_scope:metapb.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Column > columns_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Column > regxs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr properties_;
  ::google::protobuf::internal::ArenaStringPtr expand_;
  ::metapb::TableEpoch* epoch_;
  ::google::protobuf::uint64 db_id_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 create_time_;
  bool pk_dup_check_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_metapb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cluster

// uint64 id = 1;
inline void Cluster::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Cluster::id() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.id)
  return id_;
}
inline void Cluster::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.id)
}

// uint32 max_peer_count = 2;
inline void Cluster::clear_max_peer_count() {
  max_peer_count_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::max_peer_count() const {
  // @@protoc_insertion_point(field_get:metapb.Cluster.max_peer_count)
  return max_peer_count_;
}
inline void Cluster::set_max_peer_count(::google::protobuf::uint32 value) {
  
  max_peer_count_ = value;
  // @@protoc_insertion_point(field_set:metapb.Cluster.max_peer_count)
}

// -------------------------------------------------------------------

// NodeLabel

// string key = 1;
inline void NodeLabel::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeLabel::key() const {
  // @@protoc_insertion_point(field_get:metapb.NodeLabel.key)
  return key_.GetNoArena();
}
inline void NodeLabel::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.NodeLabel.key)
}
#if LANG_CXX11
inline void NodeLabel::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.NodeLabel.key)
}
#endif
inline void NodeLabel::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.NodeLabel.key)
}
inline void NodeLabel::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.NodeLabel.key)
}
inline ::std::string* NodeLabel::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:metapb.NodeLabel.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeLabel::release_key() {
  // @@protoc_insertion_point(field_release:metapb.NodeLabel.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeLabel::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:metapb.NodeLabel.key)
}

// string value = 2;
inline void NodeLabel::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeLabel::value() const {
  // @@protoc_insertion_point(field_get:metapb.NodeLabel.value)
  return value_.GetNoArena();
}
inline void NodeLabel::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.NodeLabel.value)
}
#if LANG_CXX11
inline void NodeLabel::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.NodeLabel.value)
}
#endif
inline void NodeLabel::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.NodeLabel.value)
}
inline void NodeLabel::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.NodeLabel.value)
}
inline ::std::string* NodeLabel::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:metapb.NodeLabel.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeLabel::release_value() {
  // @@protoc_insertion_point(field_release:metapb.NodeLabel.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeLabel::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:metapb.NodeLabel.value)
}

// -------------------------------------------------------------------

// Node

// uint64 id = 1;
inline void Node::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Node::id() const {
  // @@protoc_insertion_point(field_get:metapb.Node.id)
  return id_;
}
inline void Node::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Node.id)
}

// string server_addr = 2;
inline void Node::clear_server_addr() {
  server_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::server_addr() const {
  // @@protoc_insertion_point(field_get:metapb.Node.server_addr)
  return server_addr_.GetNoArena();
}
inline void Node::set_server_addr(const ::std::string& value) {
  
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Node.server_addr)
}
#if LANG_CXX11
inline void Node::set_server_addr(::std::string&& value) {
  
  server_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Node.server_addr)
}
#endif
inline void Node::set_server_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Node.server_addr)
}
inline void Node::set_server_addr(const char* value, size_t size) {
  
  server_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Node.server_addr)
}
inline ::std::string* Node::mutable_server_addr() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Node.server_addr)
  return server_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_server_addr() {
  // @@protoc_insertion_point(field_release:metapb.Node.server_addr)
  
  return server_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_server_addr(::std::string* server_addr) {
  if (server_addr != NULL) {
    
  } else {
    
  }
  server_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_addr);
  // @@protoc_insertion_point(field_set_allocated:metapb.Node.server_addr)
}

// string raft_addr = 3;
inline void Node::clear_raft_addr() {
  raft_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::raft_addr() const {
  // @@protoc_insertion_point(field_get:metapb.Node.raft_addr)
  return raft_addr_.GetNoArena();
}
inline void Node::set_raft_addr(const ::std::string& value) {
  
  raft_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Node.raft_addr)
}
#if LANG_CXX11
inline void Node::set_raft_addr(::std::string&& value) {
  
  raft_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Node.raft_addr)
}
#endif
inline void Node::set_raft_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raft_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Node.raft_addr)
}
inline void Node::set_raft_addr(const char* value, size_t size) {
  
  raft_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Node.raft_addr)
}
inline ::std::string* Node::mutable_raft_addr() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Node.raft_addr)
  return raft_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_raft_addr() {
  // @@protoc_insertion_point(field_release:metapb.Node.raft_addr)
  
  return raft_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_raft_addr(::std::string* raft_addr) {
  if (raft_addr != NULL) {
    
  } else {
    
  }
  raft_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raft_addr);
  // @@protoc_insertion_point(field_set_allocated:metapb.Node.raft_addr)
}

// string admin_addr = 4;
inline void Node::clear_admin_addr() {
  admin_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::admin_addr() const {
  // @@protoc_insertion_point(field_get:metapb.Node.admin_addr)
  return admin_addr_.GetNoArena();
}
inline void Node::set_admin_addr(const ::std::string& value) {
  
  admin_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Node.admin_addr)
}
#if LANG_CXX11
inline void Node::set_admin_addr(::std::string&& value) {
  
  admin_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Node.admin_addr)
}
#endif
inline void Node::set_admin_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  admin_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Node.admin_addr)
}
inline void Node::set_admin_addr(const char* value, size_t size) {
  
  admin_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Node.admin_addr)
}
inline ::std::string* Node::mutable_admin_addr() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Node.admin_addr)
  return admin_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_admin_addr() {
  // @@protoc_insertion_point(field_release:metapb.Node.admin_addr)
  
  return admin_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_admin_addr(::std::string* admin_addr) {
  if (admin_addr != NULL) {
    
  } else {
    
  }
  admin_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), admin_addr);
  // @@protoc_insertion_point(field_set_allocated:metapb.Node.admin_addr)
}

// .metapb.NodeState state = 5;
inline void Node::clear_state() {
  state_ = 0;
}
inline ::metapb::NodeState Node::state() const {
  // @@protoc_insertion_point(field_get:metapb.Node.state)
  return static_cast< ::metapb::NodeState >(state_);
}
inline void Node::set_state(::metapb::NodeState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:metapb.Node.state)
}

// string version = 6;
inline void Node::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::version() const {
  // @@protoc_insertion_point(field_get:metapb.Node.version)
  return version_.GetNoArena();
}
inline void Node::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Node.version)
}
#if LANG_CXX11
inline void Node::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Node.version)
}
#endif
inline void Node::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Node.version)
}
inline void Node::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Node.version)
}
inline ::std::string* Node::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Node.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_version() {
  // @@protoc_insertion_point(field_release:metapb.Node.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metapb.Node.version)
}

// repeated .metapb.NodeLabel labels = 7;
inline int Node::labels_size() const {
  return labels_.size();
}
inline void Node::clear_labels() {
  labels_.Clear();
}
inline const ::metapb::NodeLabel& Node::labels(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Node.labels)
  return labels_.Get(index);
}
inline ::metapb::NodeLabel* Node::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Node.labels)
  return labels_.Mutable(index);
}
inline ::metapb::NodeLabel* Node::add_labels() {
  // @@protoc_insertion_point(field_add:metapb.Node.labels)
  return labels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::NodeLabel >*
Node::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Node.labels)
  return &labels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::NodeLabel >&
Node::labels() const {
  // @@protoc_insertion_point(field_list:metapb.Node.labels)
  return labels_;
}

// -------------------------------------------------------------------

// Peer

// uint64 id = 1;
inline void Peer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.id)
  return id_;
}
inline void Peer::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.id)
}

// uint64 node_id = 2;
inline void Peer::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::node_id() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.node_id)
  return node_id_;
}
inline void Peer::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.node_id)
}

// .metapb.PeerType type = 3;
inline void Peer::clear_type() {
  type_ = 0;
}
inline ::metapb::PeerType Peer::type() const {
  // @@protoc_insertion_point(field_get:metapb.Peer.type)
  return static_cast< ::metapb::PeerType >(type_);
}
inline void Peer::set_type(::metapb::PeerType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:metapb.Peer.type)
}

// -------------------------------------------------------------------

// Replica

// uint64 range_id = 1;
inline void Replica::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Replica::range_id() const {
  // @@protoc_insertion_point(field_get:metapb.Replica.range_id)
  return range_id_;
}
inline void Replica::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Replica.range_id)
}

// .metapb.Peer peer = 2;
inline bool Replica::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void Replica::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::metapb::Peer& Replica::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:metapb.Replica.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* Replica::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Replica.peer)
  return peer_;
}
inline ::metapb::Peer* Replica::release_peer() {
  // @@protoc_insertion_point(field_release:metapb.Replica.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void Replica::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Replica.peer)
}

// bytes start_key = 3;
inline void Replica::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Replica::start_key() const {
  // @@protoc_insertion_point(field_get:metapb.Replica.start_key)
  return start_key_.GetNoArena();
}
inline void Replica::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Replica.start_key)
}
#if LANG_CXX11
inline void Replica::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Replica.start_key)
}
#endif
inline void Replica::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Replica.start_key)
}
inline void Replica::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Replica.start_key)
}
inline ::std::string* Replica::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Replica.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Replica::release_start_key() {
  // @@protoc_insertion_point(field_release:metapb.Replica.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Replica.start_key)
}

// bytes end_key = 4;
inline void Replica::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Replica::end_key() const {
  // @@protoc_insertion_point(field_get:metapb.Replica.end_key)
  return end_key_.GetNoArena();
}
inline void Replica::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Replica.end_key)
}
#if LANG_CXX11
inline void Replica::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Replica.end_key)
}
#endif
inline void Replica::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Replica.end_key)
}
inline void Replica::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Replica.end_key)
}
inline ::std::string* Replica::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Replica.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Replica::release_end_key() {
  // @@protoc_insertion_point(field_release:metapb.Replica.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Replica::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Replica.end_key)
}

// -------------------------------------------------------------------

// RangeEpoch

// uint64 conf_ver = 1;
inline void RangeEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:metapb.RangeEpoch.conf_ver)
  return conf_ver_;
}
inline void RangeEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:metapb.RangeEpoch.conf_ver)
}

// uint64 version = 2;
inline void RangeEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeEpoch::version() const {
  // @@protoc_insertion_point(field_get:metapb.RangeEpoch.version)
  return version_;
}
inline void RangeEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:metapb.RangeEpoch.version)
}

// -------------------------------------------------------------------

// Range

// uint64 id = 1;
inline void Range::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::id() const {
  // @@protoc_insertion_point(field_get:metapb.Range.id)
  return id_;
}
inline void Range::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Range.id)
}

// bytes start_key = 2;
inline void Range::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Range::start_key() const {
  // @@protoc_insertion_point(field_get:metapb.Range.start_key)
  return start_key_.GetNoArena();
}
inline void Range::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Range.start_key)
}
#if LANG_CXX11
inline void Range::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Range.start_key)
}
#endif
inline void Range::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Range.start_key)
}
inline void Range::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Range.start_key)
}
inline ::std::string* Range::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Range.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_start_key() {
  // @@protoc_insertion_point(field_release:metapb.Range.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Range.start_key)
}

// bytes end_key = 3;
inline void Range::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Range::end_key() const {
  // @@protoc_insertion_point(field_get:metapb.Range.end_key)
  return end_key_.GetNoArena();
}
inline void Range::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Range.end_key)
}
#if LANG_CXX11
inline void Range::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Range.end_key)
}
#endif
inline void Range::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Range.end_key)
}
inline void Range::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Range.end_key)
}
inline ::std::string* Range::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Range.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_end_key() {
  // @@protoc_insertion_point(field_release:metapb.Range.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:metapb.Range.end_key)
}

// .metapb.RangeEpoch range_epoch = 4;
inline bool Range::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
inline void Range::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
inline const ::metapb::RangeEpoch& Range::range_epoch() const {
  const ::metapb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:metapb.Range.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
inline ::metapb::RangeEpoch* Range::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Range.range_epoch)
  return range_epoch_;
}
inline ::metapb::RangeEpoch* Range::release_range_epoch() {
  // @@protoc_insertion_point(field_release:metapb.Range.range_epoch)
  
  ::metapb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
inline void Range::set_allocated_range_epoch(::metapb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Range.range_epoch)
}

// repeated .metapb.Peer peers = 5;
inline int Range::peers_size() const {
  return peers_.size();
}
inline void Range::clear_peers() {
  peers_.Clear();
}
inline const ::metapb::Peer& Range::peers(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Range.peers)
  return peers_.Get(index);
}
inline ::metapb::Peer* Range::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Range.peers)
  return peers_.Mutable(index);
}
inline ::metapb::Peer* Range::add_peers() {
  // @@protoc_insertion_point(field_add:metapb.Range.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
Range::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Range.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
Range::peers() const {
  // @@protoc_insertion_point(field_list:metapb.Range.peers)
  return peers_;
}

// uint64 table_id = 6;
inline void Range::clear_table_id() {
  table_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Range::table_id() const {
  // @@protoc_insertion_point(field_get:metapb.Range.table_id)
  return table_id_;
}
inline void Range::set_table_id(::google::protobuf::uint64 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Range.table_id)
}

// repeated .metapb.Column primary_keys = 7;
inline int Range::primary_keys_size() const {
  return primary_keys_.size();
}
inline void Range::clear_primary_keys() {
  primary_keys_.Clear();
}
inline const ::metapb::Column& Range::primary_keys(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Range.primary_keys)
  return primary_keys_.Get(index);
}
inline ::metapb::Column* Range::mutable_primary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Range.primary_keys)
  return primary_keys_.Mutable(index);
}
inline ::metapb::Column* Range::add_primary_keys() {
  // @@protoc_insertion_point(field_add:metapb.Range.primary_keys)
  return primary_keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
Range::mutable_primary_keys() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Range.primary_keys)
  return &primary_keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
Range::primary_keys() const {
  // @@protoc_insertion_point(field_list:metapb.Range.primary_keys)
  return primary_keys_;
}

// -------------------------------------------------------------------

// Leader

// uint64 range_id = 1;
inline void Leader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Leader::range_id() const {
  // @@protoc_insertion_point(field_get:metapb.Leader.range_id)
  return range_id_;
}
inline void Leader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Leader.range_id)
}

// uint64 node_id = 2;
inline void Leader::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Leader::node_id() const {
  // @@protoc_insertion_point(field_get:metapb.Leader.node_id)
  return node_id_;
}
inline void Leader::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Leader.node_id)
}

// string node_addr = 3;
inline void Leader::clear_node_addr() {
  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Leader::node_addr() const {
  // @@protoc_insertion_point(field_get:metapb.Leader.node_addr)
  return node_addr_.GetNoArena();
}
inline void Leader::set_node_addr(const ::std::string& value) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Leader.node_addr)
}
#if LANG_CXX11
inline void Leader::set_node_addr(::std::string&& value) {
  
  node_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Leader.node_addr)
}
#endif
inline void Leader::set_node_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Leader.node_addr)
}
inline void Leader::set_node_addr(const char* value, size_t size) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Leader.node_addr)
}
inline ::std::string* Leader::mutable_node_addr() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Leader.node_addr)
  return node_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Leader::release_node_addr() {
  // @@protoc_insertion_point(field_release:metapb.Leader.node_addr)
  
  return node_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Leader::set_allocated_node_addr(::std::string* node_addr) {
  if (node_addr != NULL) {
    
  } else {
    
  }
  node_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_addr);
  // @@protoc_insertion_point(field_set_allocated:metapb.Leader.node_addr)
}

// -------------------------------------------------------------------

// Route

// .metapb.Range range = 1;
inline bool Route::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline void Route::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
inline const ::metapb::Range& Route::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:metapb.Route.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
inline ::metapb::Range* Route::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Route.range)
  return range_;
}
inline ::metapb::Range* Route::release_range() {
  // @@protoc_insertion_point(field_release:metapb.Route.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void Route::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Route.range)
}

// .metapb.Peer leader = 2;
inline bool Route::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline void Route::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
inline const ::metapb::Peer& Route::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:metapb.Route.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* Route::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Route.leader)
  return leader_;
}
inline ::metapb::Peer* Route::release_leader() {
  // @@protoc_insertion_point(field_release:metapb.Route.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void Route::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Route.leader)
}

// -------------------------------------------------------------------

// DataBase

// string name = 1;
inline void DataBase::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBase::name() const {
  // @@protoc_insertion_point(field_get:metapb.DataBase.name)
  return name_.GetNoArena();
}
inline void DataBase::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.DataBase.name)
}
#if LANG_CXX11
inline void DataBase::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.DataBase.name)
}
#endif
inline void DataBase::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.DataBase.name)
}
inline void DataBase::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.DataBase.name)
}
inline ::std::string* DataBase::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metapb.DataBase.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBase::release_name() {
  // @@protoc_insertion_point(field_release:metapb.DataBase.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBase::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metapb.DataBase.name)
}

// uint64 id = 2;
inline void DataBase::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataBase::id() const {
  // @@protoc_insertion_point(field_get:metapb.DataBase.id)
  return id_;
}
inline void DataBase::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.DataBase.id)
}

// string properties = 3;
inline void DataBase::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataBase::properties() const {
  // @@protoc_insertion_point(field_get:metapb.DataBase.properties)
  return properties_.GetNoArena();
}
inline void DataBase::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.DataBase.properties)
}
#if LANG_CXX11
inline void DataBase::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.DataBase.properties)
}
#endif
inline void DataBase::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.DataBase.properties)
}
inline void DataBase::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.DataBase.properties)
}
inline ::std::string* DataBase::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:metapb.DataBase.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataBase::release_properties() {
  // @@protoc_insertion_point(field_release:metapb.DataBase.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataBase::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:metapb.DataBase.properties)
}

// uint64 version = 4;
inline void DataBase::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataBase::version() const {
  // @@protoc_insertion_point(field_get:metapb.DataBase.version)
  return version_;
}
inline void DataBase::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:metapb.DataBase.version)
}

// int64 create_time = 5;
inline void DataBase::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataBase::create_time() const {
  // @@protoc_insertion_point(field_get:metapb.DataBase.create_time)
  return create_time_;
}
inline void DataBase::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:metapb.DataBase.create_time)
}

// -------------------------------------------------------------------

// Column

// string name = 1;
inline void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:metapb.Column.name)
  return name_.GetNoArena();
}
inline void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Column.name)
}
#if LANG_CXX11
inline void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Column.name)
}
#endif
inline void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Column.name)
}
inline void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Column.name)
}
inline ::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:metapb.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metapb.Column.name)
}

// uint64 id = 2;
inline void Column::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::id() const {
  // @@protoc_insertion_point(field_get:metapb.Column.id)
  return id_;
}
inline void Column::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.id)
}

// .metapb.DataType data_type = 3;
inline void Column::clear_data_type() {
  data_type_ = 0;
}
inline ::metapb::DataType Column::data_type() const {
  // @@protoc_insertion_point(field_get:metapb.Column.data_type)
  return static_cast< ::metapb::DataType >(data_type_);
}
inline void Column::set_data_type(::metapb::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.data_type)
}

// bool unsigned = 4;
inline void Column::clear_unsigned_() {
  unsigned__ = false;
}
inline bool Column::unsigned_() const {
  // @@protoc_insertion_point(field_get:metapb.Column.unsigned)
  return unsigned__;
}
inline void Column::set_unsigned_(bool value) {
  
  unsigned__ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.unsigned)
}

// int32 scale = 5;
inline void Column::clear_scale() {
  scale_ = 0;
}
inline ::google::protobuf::int32 Column::scale() const {
  // @@protoc_insertion_point(field_get:metapb.Column.scale)
  return scale_;
}
inline void Column::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.scale)
}

// int32 precision = 6;
inline void Column::clear_precision() {
  precision_ = 0;
}
inline ::google::protobuf::int32 Column::precision() const {
  // @@protoc_insertion_point(field_get:metapb.Column.precision)
  return precision_;
}
inline void Column::set_precision(::google::protobuf::int32 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.precision)
}

// bool nullable = 7;
inline void Column::clear_nullable() {
  nullable_ = false;
}
inline bool Column::nullable() const {
  // @@protoc_insertion_point(field_get:metapb.Column.nullable)
  return nullable_;
}
inline void Column::set_nullable(bool value) {
  
  nullable_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.nullable)
}

// uint64 primary_key = 8;
inline void Column::clear_primary_key() {
  primary_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Column::primary_key() const {
  // @@protoc_insertion_point(field_get:metapb.Column.primary_key)
  return primary_key_;
}
inline void Column::set_primary_key(::google::protobuf::uint64 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.primary_key)
}

// int32 ordinal = 9;
inline void Column::clear_ordinal() {
  ordinal_ = 0;
}
inline ::google::protobuf::int32 Column::ordinal() const {
  // @@protoc_insertion_point(field_get:metapb.Column.ordinal)
  return ordinal_;
}
inline void Column::set_ordinal(::google::protobuf::int32 value) {
  
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.ordinal)
}

// bool index = 10;
inline void Column::clear_index() {
  index_ = false;
}
inline bool Column::index() const {
  // @@protoc_insertion_point(field_get:metapb.Column.index)
  return index_;
}
inline void Column::set_index(bool value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.index)
}

// bytes default_value = 11;
inline void Column::clear_default_value() {
  default_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::default_value() const {
  // @@protoc_insertion_point(field_get:metapb.Column.default_value)
  return default_value_.GetNoArena();
}
inline void Column::set_default_value(const ::std::string& value) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Column.default_value)
}
#if LANG_CXX11
inline void Column::set_default_value(::std::string&& value) {
  
  default_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Column.default_value)
}
#endif
inline void Column::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Column.default_value)
}
inline void Column::set_default_value(const void* value, size_t size) {
  
  default_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Column.default_value)
}
inline ::std::string* Column::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Column.default_value)
  return default_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_default_value() {
  // @@protoc_insertion_point(field_release:metapb.Column.default_value)
  
  return default_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value);
  // @@protoc_insertion_point(field_set_allocated:metapb.Column.default_value)
}

// string properties = 12;
inline void Column::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::properties() const {
  // @@protoc_insertion_point(field_get:metapb.Column.properties)
  return properties_.GetNoArena();
}
inline void Column::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Column.properties)
}
#if LANG_CXX11
inline void Column::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Column.properties)
}
#endif
inline void Column::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Column.properties)
}
inline void Column::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Column.properties)
}
inline ::std::string* Column::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Column.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_properties() {
  // @@protoc_insertion_point(field_release:metapb.Column.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:metapb.Column.properties)
}

// bool auto_increment = 13;
inline void Column::clear_auto_increment() {
  auto_increment_ = false;
}
inline bool Column::auto_increment() const {
  // @@protoc_insertion_point(field_get:metapb.Column.auto_increment)
  return auto_increment_;
}
inline void Column::set_auto_increment(bool value) {
  
  auto_increment_ = value;
  // @@protoc_insertion_point(field_set:metapb.Column.auto_increment)
}

// -------------------------------------------------------------------

// Primary

// string column_name = 1;
inline void Primary::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Primary::column_name() const {
  // @@protoc_insertion_point(field_get:metapb.Primary.column_name)
  return column_name_.GetNoArena();
}
inline void Primary::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Primary.column_name)
}
#if LANG_CXX11
inline void Primary::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Primary.column_name)
}
#endif
inline void Primary::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Primary.column_name)
}
inline void Primary::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Primary.column_name)
}
inline ::std::string* Primary::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Primary.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Primary::release_column_name() {
  // @@protoc_insertion_point(field_release:metapb.Primary.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Primary::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:metapb.Primary.column_name)
}

// .metapb.Primary next = 2;
inline bool Primary::has_next() const {
  return this != internal_default_instance() && next_ != NULL;
}
inline void Primary::clear_next() {
  if (GetArenaNoVirtual() == NULL && next_ != NULL) delete next_;
  next_ = NULL;
}
inline const ::metapb::Primary& Primary::next() const {
  const ::metapb::Primary* p = next_;
  // @@protoc_insertion_point(field_get:metapb.Primary.next)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Primary*>(
      &::metapb::_Primary_default_instance_);
}
inline ::metapb::Primary* Primary::mutable_next() {
  
  if (next_ == NULL) {
    next_ = new ::metapb::Primary;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Primary.next)
  return next_;
}
inline ::metapb::Primary* Primary::release_next() {
  // @@protoc_insertion_point(field_release:metapb.Primary.next)
  
  ::metapb::Primary* temp = next_;
  next_ = NULL;
  return temp;
}
inline void Primary::set_allocated_next(::metapb::Primary* next) {
  delete next_;
  next_ = next;
  if (next) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Primary.next)
}

// -------------------------------------------------------------------

// TableEpoch

// uint64 conf_ver = 1;
inline void TableEpoch::clear_conf_ver() {
  conf_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableEpoch::conf_ver() const {
  // @@protoc_insertion_point(field_get:metapb.TableEpoch.conf_ver)
  return conf_ver_;
}
inline void TableEpoch::set_conf_ver(::google::protobuf::uint64 value) {
  
  conf_ver_ = value;
  // @@protoc_insertion_point(field_set:metapb.TableEpoch.conf_ver)
}

// uint64 version = 2;
inline void TableEpoch::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableEpoch::version() const {
  // @@protoc_insertion_point(field_get:metapb.TableEpoch.version)
  return version_;
}
inline void TableEpoch::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:metapb.TableEpoch.version)
}

// -------------------------------------------------------------------

// Table

// string name = 1;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:metapb.Table.name)
  return name_.GetNoArena();
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Table.name)
}
#if LANG_CXX11
inline void Table::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Table.name)
}
#endif
inline void Table::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  // @@protoc_insertion_point(field_release:metapb.Table.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:metapb.Table.name)
}

// string db_name = 2;
inline void Table::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::db_name() const {
  // @@protoc_insertion_point(field_get:metapb.Table.db_name)
  return db_name_.GetNoArena();
}
inline void Table::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Table.db_name)
}
#if LANG_CXX11
inline void Table::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Table.db_name)
}
#endif
inline void Table::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Table.db_name)
}
inline void Table::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Table.db_name)
}
inline ::std::string* Table::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Table.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_db_name() {
  // @@protoc_insertion_point(field_release:metapb.Table.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:metapb.Table.db_name)
}

// uint64 db_id = 3;
inline void Table::clear_db_id() {
  db_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::db_id() const {
  // @@protoc_insertion_point(field_get:metapb.Table.db_id)
  return db_id_;
}
inline void Table::set_db_id(::google::protobuf::uint64 value) {
  
  db_id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Table.db_id)
}

// uint64 id = 4;
inline void Table::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Table::id() const {
  // @@protoc_insertion_point(field_get:metapb.Table.id)
  return id_;
}
inline void Table::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:metapb.Table.id)
}

// string properties = 5;
inline void Table::clear_properties() {
  properties_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::properties() const {
  // @@protoc_insertion_point(field_get:metapb.Table.properties)
  return properties_.GetNoArena();
}
inline void Table::set_properties(const ::std::string& value) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Table.properties)
}
#if LANG_CXX11
inline void Table::set_properties(::std::string&& value) {
  
  properties_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Table.properties)
}
#endif
inline void Table::set_properties(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Table.properties)
}
inline void Table::set_properties(const char* value, size_t size) {
  
  properties_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Table.properties)
}
inline ::std::string* Table::mutable_properties() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Table.properties)
  return properties_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_properties() {
  // @@protoc_insertion_point(field_release:metapb.Table.properties)
  
  return properties_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_properties(::std::string* properties) {
  if (properties != NULL) {
    
  } else {
    
  }
  properties_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), properties);
  // @@protoc_insertion_point(field_set_allocated:metapb.Table.properties)
}

// repeated .metapb.Column columns = 6;
inline int Table::columns_size() const {
  return columns_.size();
}
inline void Table::clear_columns() {
  columns_.Clear();
}
inline const ::metapb::Column& Table::columns(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Table.columns)
  return columns_.Get(index);
}
inline ::metapb::Column* Table::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Table.columns)
  return columns_.Mutable(index);
}
inline ::metapb::Column* Table::add_columns() {
  // @@protoc_insertion_point(field_add:metapb.Table.columns)
  return columns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
Table::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Table.columns)
  return &columns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
Table::columns() const {
  // @@protoc_insertion_point(field_list:metapb.Table.columns)
  return columns_;
}

// .metapb.TableEpoch epoch = 7;
inline bool Table::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
inline void Table::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
inline const ::metapb::TableEpoch& Table::epoch() const {
  const ::metapb::TableEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:metapb.Table.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::TableEpoch*>(
      &::metapb::_TableEpoch_default_instance_);
}
inline ::metapb::TableEpoch* Table::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::TableEpoch;
  }
  // @@protoc_insertion_point(field_mutable:metapb.Table.epoch)
  return epoch_;
}
inline ::metapb::TableEpoch* Table::release_epoch() {
  // @@protoc_insertion_point(field_release:metapb.Table.epoch)
  
  ::metapb::TableEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
inline void Table::set_allocated_epoch(::metapb::TableEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:metapb.Table.epoch)
}

// repeated .metapb.Column regxs = 8;
inline int Table::regxs_size() const {
  return regxs_.size();
}
inline void Table::clear_regxs() {
  regxs_.Clear();
}
inline const ::metapb::Column& Table::regxs(int index) const {
  // @@protoc_insertion_point(field_get:metapb.Table.regxs)
  return regxs_.Get(index);
}
inline ::metapb::Column* Table::mutable_regxs(int index) {
  // @@protoc_insertion_point(field_mutable:metapb.Table.regxs)
  return regxs_.Mutable(index);
}
inline ::metapb::Column* Table::add_regxs() {
  // @@protoc_insertion_point(field_add:metapb.Table.regxs)
  return regxs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
Table::mutable_regxs() {
  // @@protoc_insertion_point(field_mutable_list:metapb.Table.regxs)
  return &regxs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
Table::regxs() const {
  // @@protoc_insertion_point(field_list:metapb.Table.regxs)
  return regxs_;
}

// int64 create_time = 9;
inline void Table::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Table::create_time() const {
  // @@protoc_insertion_point(field_get:metapb.Table.create_time)
  return create_time_;
}
inline void Table::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:metapb.Table.create_time)
}

// bool pk_dup_check = 10;
inline void Table::clear_pk_dup_check() {
  pk_dup_check_ = false;
}
inline bool Table::pk_dup_check() const {
  // @@protoc_insertion_point(field_get:metapb.Table.pk_dup_check)
  return pk_dup_check_;
}
inline void Table::set_pk_dup_check(bool value) {
  
  pk_dup_check_ = value;
  // @@protoc_insertion_point(field_set:metapb.Table.pk_dup_check)
}

// .metapb.TableStatus status = 11;
inline void Table::clear_status() {
  status_ = 0;
}
inline ::metapb::TableStatus Table::status() const {
  // @@protoc_insertion_point(field_get:metapb.Table.status)
  return static_cast< ::metapb::TableStatus >(status_);
}
inline void Table::set_status(::metapb::TableStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:metapb.Table.status)
}

// bytes expand = 12;
inline void Table::clear_expand() {
  expand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::expand() const {
  // @@protoc_insertion_point(field_get:metapb.Table.expand)
  return expand_.GetNoArena();
}
inline void Table::set_expand(const ::std::string& value) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metapb.Table.expand)
}
#if LANG_CXX11
inline void Table::set_expand(::std::string&& value) {
  
  expand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metapb.Table.expand)
}
#endif
inline void Table::set_expand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metapb.Table.expand)
}
inline void Table::set_expand(const void* value, size_t size) {
  
  expand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metapb.Table.expand)
}
inline ::std::string* Table::mutable_expand() {
  
  // @@protoc_insertion_point(field_mutable:metapb.Table.expand)
  return expand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_expand() {
  // @@protoc_insertion_point(field_release:metapb.Table.expand)
  
  return expand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_expand(::std::string* expand) {
  if (expand != NULL) {
    
  } else {
    
  }
  expand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expand);
  // @@protoc_insertion_point(field_set_allocated:metapb.Table.expand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace metapb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::metapb::NodeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::NodeState>() {
  return ::metapb::NodeState_descriptor();
}
template <> struct is_proto_enum< ::metapb::RangeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::RangeState>() {
  return ::metapb::RangeState_descriptor();
}
template <> struct is_proto_enum< ::metapb::PeerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::PeerType>() {
  return ::metapb::PeerType_descriptor();
}
template <> struct is_proto_enum< ::metapb::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::DataType>() {
  return ::metapb::DataType_descriptor();
}
template <> struct is_proto_enum< ::metapb::TableStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::metapb::TableStatus>() {
  return ::metapb::TableStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metapb_2eproto__INCLUDED
