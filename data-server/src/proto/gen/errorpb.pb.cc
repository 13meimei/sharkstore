// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "errorpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace errorpb {
class NotLeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NotLeader>
     _instance;
} _NotLeader_default_instance_;
class RangeNotFoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeNotFound>
     _instance;
} _RangeNotFound_default_instance_;
class KeyNotInRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyNotInRange>
     _instance;
} _KeyNotInRange_default_instance_;
class StaleCommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StaleCommand>
     _instance;
} _StaleCommand_default_instance_;
class TimeoutDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Timeout>
     _instance;
} _Timeout_default_instance_;
class RaftFailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RaftFail>
     _instance;
} _RaftFail_default_instance_;
class StaleEpochDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StaleEpoch>
     _instance;
} _StaleEpoch_default_instance_;
class StaleRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StaleRange>
     _instance;
} _StaleRange_default_instance_;
class StaleReadIndexDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StaleReadIndex>
     _instance;
} _StaleReadIndex_default_instance_;
class ServerIsBusyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerIsBusy>
     _instance;
} _ServerIsBusy_default_instance_;
class EntryTooLargeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EntryTooLarge>
     _instance;
} _EntryTooLarge_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;

namespace protobuf_errorpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeader, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFound, range_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRange, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRange, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRange, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyNotInRange, end_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftFail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, old_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleEpoch, new_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleRange, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleReadIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleReadIndex, read_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaleReadIndex, replica_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerIsBusy, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryTooLarge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryTooLarge, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryTooLarge, entry_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, not_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, range_not_found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, key_not_in_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, server_is_busy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, entry_too_large_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, raft_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stale_read_index_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(NotLeader)},
  { 8, -1, sizeof(RangeNotFound)},
  { 14, -1, sizeof(KeyNotInRange)},
  { 23, -1, sizeof(StaleCommand)},
  { 28, -1, sizeof(Timeout)},
  { 33, -1, sizeof(RaftFail)},
  { 38, -1, sizeof(StaleEpoch)},
  { 45, -1, sizeof(StaleRange)},
  { 51, -1, sizeof(StaleReadIndex)},
  { 58, -1, sizeof(ServerIsBusy)},
  { 64, -1, sizeof(EntryTooLarge)},
  { 71, -1, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeNotFound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyNotInRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StaleCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Timeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RaftFail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StaleEpoch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StaleRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StaleReadIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerIsBusy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntryTooLarge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "errorpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  _NotLeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NotLeader_default_instance_);_RangeNotFound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeNotFound_default_instance_);_KeyNotInRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyNotInRange_default_instance_);_StaleCommand_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StaleCommand_default_instance_);_Timeout_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Timeout_default_instance_);_RaftFail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RaftFail_default_instance_);_StaleEpoch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StaleEpoch_default_instance_);_StaleRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StaleRange_default_instance_);_StaleReadIndex_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StaleReadIndex_default_instance_);_ServerIsBusy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerIsBusy_default_instance_);_EntryTooLarge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EntryTooLarge_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_NotLeader_default_instance_._instance.get_mutable()->epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _NotLeader_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  _StaleEpoch_default_instance_._instance.get_mutable()->old_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _StaleEpoch_default_instance_._instance.get_mutable()->new_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _StaleRange_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->not_leader_ = const_cast< ::errorpb::NotLeader*>(
      ::errorpb::NotLeader::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->stale_command_ = const_cast< ::errorpb::StaleCommand*>(
      ::errorpb::StaleCommand::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->range_not_found_ = const_cast< ::errorpb::RangeNotFound*>(
      ::errorpb::RangeNotFound::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->key_not_in_range_ = const_cast< ::errorpb::KeyNotInRange*>(
      ::errorpb::KeyNotInRange::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->stale_epoch_ = const_cast< ::errorpb::StaleEpoch*>(
      ::errorpb::StaleEpoch::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->server_is_busy_ = const_cast< ::errorpb::ServerIsBusy*>(
      ::errorpb::ServerIsBusy::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->entry_too_large_ = const_cast< ::errorpb::EntryTooLarge*>(
      ::errorpb::EntryTooLarge::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::errorpb::Timeout*>(
      ::errorpb::Timeout::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->raft_fail_ = const_cast< ::errorpb::RaftFail*>(
      ::errorpb::RaftFail::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->stale_range_ = const_cast< ::errorpb::StaleRange*>(
      ::errorpb::StaleRange::internal_default_instance());
  _Error_default_instance_._instance.get_mutable()->stale_read_index_ = const_cast< ::errorpb::StaleReadIndex*>(
      ::errorpb::StaleReadIndex::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rerrorpb.proto\022\007errorpb\032\014metapb.proto\"^"
      "\n\tNotLeader\022\020\n\010range_id\030\001 \001(\004\022!\n\005epoch\030\002"
      " \001(\0132\022.metapb.RangeEpoch\022\034\n\006leader\030\003 \001(\013"
      "2\014.metapb.Peer\"!\n\rRangeNotFound\022\020\n\010range"
      "_id\030\001 \001(\004\"R\n\rKeyNotInRange\022\013\n\003key\030\001 \001(\014\022"
      "\020\n\010range_id\030\002 \001(\004\022\021\n\tstart_key\030\003 \001(\014\022\017\n\007"
      "end_key\030\004 \001(\014\"\016\n\014StaleCommand\"\t\n\007Timeout"
      "\"\n\n\010RaftFail\"P\n\nStaleEpoch\022 \n\told_range\030"
      "\001 \001(\0132\r.metapb.Range\022 \n\tnew_range\030\002 \001(\0132"
      "\r.metapb.Range\"*\n\nStaleRange\022\034\n\005range\030\001 "
      "\001(\0132\r.metapb.Range\";\n\016StaleReadIndex\022\022\n\n"
      "read_index\030\001 \001(\004\022\025\n\rreplica_index\030\002 \001(\004\""
      "\036\n\014ServerIsBusy\022\016\n\006reason\030\001 \001(\t\"5\n\rEntry"
      "TooLarge\022\020\n\010range_id\030\001 \001(\004\022\022\n\nentry_size"
      "\030\002 \001(\004\"\201\004\n\005Error\022\017\n\007message\030\001 \001(\t\022&\n\nnot"
      "_leader\030\002 \001(\0132\022.errorpb.NotLeader\022,\n\rsta"
      "le_command\030\003 \001(\0132\025.errorpb.StaleCommand\022"
      "/\n\017range_not_found\030\004 \001(\0132\026.errorpb.Range"
      "NotFound\0220\n\020key_not_in_range\030\005 \001(\0132\026.err"
      "orpb.KeyNotInRange\022(\n\013stale_epoch\030\006 \001(\0132"
      "\023.errorpb.StaleEpoch\022-\n\016server_is_busy\030\007"
      " \001(\0132\025.errorpb.ServerIsBusy\022/\n\017entry_too"
      "_large\030\010 \001(\0132\026.errorpb.EntryTooLarge\022!\n\007"
      "timeout\030\t \001(\0132\020.errorpb.Timeout\022$\n\traft_"
      "fail\030\n \001(\0132\021.errorpb.RaftFail\022(\n\013stale_r"
      "ange\030\013 \001(\0132\023.errorpb.StaleRange\0221\n\020stale"
      "_read_index\030\014 \001(\0132\027.errorpb.StaleReadInd"
      "exb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "errorpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_errorpb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotLeader::kRangeIdFieldNumber;
const int NotLeader::kEpochFieldNumber;
const int NotLeader::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotLeader::NotLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.NotLeader)
}
NotLeader::NotLeader(const NotLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_epoch()) {
    epoch_ = new ::metapb::RangeEpoch(*from.epoch_);
  } else {
    epoch_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.NotLeader)
}

void NotLeader::SharedCtor() {
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

NotLeader::~NotLeader() {
  // @@protoc_insertion_point(destructor:errorpb.NotLeader)
  SharedDtor();
}

void NotLeader::SharedDtor() {
  if (this != internal_default_instance()) delete epoch_;
  if (this != internal_default_instance()) delete leader_;
}

void NotLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotLeader::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotLeader& NotLeader::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotLeader* NotLeader::New(::google::protobuf::Arena* arena) const {
  NotLeader* n = new NotLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) {
    delete epoch_;
  }
  epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool NotLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.NotLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.NotLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.NotLeader)
  return false;
#undef DO_
}

void NotLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->epoch_, output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leader_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.NotLeader)
}

::google::protobuf::uint8* NotLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.NotLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->epoch_, deterministic, target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leader_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.NotLeader)
  return target;
}

size_t NotLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.NotLeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.RangeEpoch epoch = 2;
  if (this->has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->epoch_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const NotLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.NotLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.NotLeader)
    MergeFrom(*source);
  }
}

void NotLeader::MergeFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_epoch()) {
    mutable_epoch()->::metapb::RangeEpoch::MergeFrom(from.epoch());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void NotLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeader::CopyFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeader::IsInitialized() const {
  return true;
}

void NotLeader::Swap(NotLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotLeader::InternalSwap(NotLeader* other) {
  using std::swap;
  swap(epoch_, other->epoch_);
  swap(leader_, other->leader_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotLeader::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotLeader

// uint64 range_id = 1;
void NotLeader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NotLeader::range_id() const {
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.range_id)
  return range_id_;
}
void NotLeader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.NotLeader.range_id)
}

// .metapb.RangeEpoch epoch = 2;
bool NotLeader::has_epoch() const {
  return this != internal_default_instance() && epoch_ != NULL;
}
void NotLeader::clear_epoch() {
  if (GetArenaNoVirtual() == NULL && epoch_ != NULL) delete epoch_;
  epoch_ = NULL;
}
const ::metapb::RangeEpoch& NotLeader::epoch() const {
  const ::metapb::RangeEpoch* p = epoch_;
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* NotLeader::mutable_epoch() {
  
  if (epoch_ == NULL) {
    epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.NotLeader.epoch)
  return epoch_;
}
::metapb::RangeEpoch* NotLeader::release_epoch() {
  // @@protoc_insertion_point(field_release:errorpb.NotLeader.epoch)
  
  ::metapb::RangeEpoch* temp = epoch_;
  epoch_ = NULL;
  return temp;
}
void NotLeader::set_allocated_epoch(::metapb::RangeEpoch* epoch) {
  delete epoch_;
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.NotLeader.epoch)
}

// .metapb.Peer leader = 3;
bool NotLeader::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void NotLeader::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& NotLeader::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
::metapb::Peer* NotLeader::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.NotLeader.leader)
  return leader_;
}
::metapb::Peer* NotLeader::release_leader() {
  // @@protoc_insertion_point(field_release:errorpb.NotLeader.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void NotLeader::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.NotLeader.leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeNotFound::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeNotFound::RangeNotFound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RangeNotFound)
}
RangeNotFound::RangeNotFound(const RangeNotFound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.RangeNotFound)
}

void RangeNotFound::SharedCtor() {
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RangeNotFound::~RangeNotFound() {
  // @@protoc_insertion_point(destructor:errorpb.RangeNotFound)
  SharedDtor();
}

void RangeNotFound::SharedDtor() {
}

void RangeNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeNotFound::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeNotFound& RangeNotFound::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeNotFound* RangeNotFound::New(::google::protobuf::Arena* arena) const {
  RangeNotFound* n = new RangeNotFound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RangeNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RangeNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RangeNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RangeNotFound)
  return false;
#undef DO_
}

void RangeNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RangeNotFound)
}

::google::protobuf::uint8* RangeNotFound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RangeNotFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RangeNotFound)
  return target;
}

size_t RangeNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.RangeNotFound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeNotFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.RangeNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeNotFound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeNotFound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.RangeNotFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.RangeNotFound)
    MergeFrom(*source);
  }
}

void RangeNotFound::MergeFrom(const RangeNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.RangeNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void RangeNotFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.RangeNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeNotFound::CopyFrom(const RangeNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.RangeNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeNotFound::IsInitialized() const {
  return true;
}

void RangeNotFound::Swap(RangeNotFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeNotFound::InternalSwap(RangeNotFound* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeNotFound::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeNotFound

// uint64 range_id = 1;
void RangeNotFound::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeNotFound::range_id() const {
  // @@protoc_insertion_point(field_get:errorpb.RangeNotFound.range_id)
  return range_id_;
}
void RangeNotFound::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RangeNotFound.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyNotInRange::kKeyFieldNumber;
const int KeyNotInRange::kRangeIdFieldNumber;
const int KeyNotInRange::kStartKeyFieldNumber;
const int KeyNotInRange::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyNotInRange::KeyNotInRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.KeyNotInRange)
}
KeyNotInRange::KeyNotInRange(const KeyNotInRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  range_id_ = from.range_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.KeyNotInRange)
}

void KeyNotInRange::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

KeyNotInRange::~KeyNotInRange() {
  // @@protoc_insertion_point(destructor:errorpb.KeyNotInRange)
  SharedDtor();
}

void KeyNotInRange::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyNotInRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyNotInRange::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyNotInRange& KeyNotInRange::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyNotInRange* KeyNotInRange::New(::google::protobuf::Arena* arena) const {
  KeyNotInRange* n = new KeyNotInRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyNotInRange::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.KeyNotInRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool KeyNotInRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.KeyNotInRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.KeyNotInRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.KeyNotInRange)
  return false;
#undef DO_
}

void KeyNotInRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.KeyNotInRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_key(), output);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.KeyNotInRange)
}

::google::protobuf::uint8* KeyNotInRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.KeyNotInRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.KeyNotInRange)
  return target;
}

size_t KeyNotInRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.KeyNotInRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyNotInRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.KeyNotInRange)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyNotInRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyNotInRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.KeyNotInRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.KeyNotInRange)
    MergeFrom(*source);
  }
}

void KeyNotInRange::MergeFrom(const KeyNotInRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.KeyNotInRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void KeyNotInRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.KeyNotInRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyNotInRange::CopyFrom(const KeyNotInRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.KeyNotInRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyNotInRange::IsInitialized() const {
  return true;
}

void KeyNotInRange::Swap(KeyNotInRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyNotInRange::InternalSwap(KeyNotInRange* other) {
  using std::swap;
  key_.Swap(&other->key_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyNotInRange::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyNotInRange

// bytes key = 1;
void KeyNotInRange::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyNotInRange::key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRange.key)
  return key_.GetNoArena();
}
void KeyNotInRange::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRange.key)
}
#if LANG_CXX11
void KeyNotInRange::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRange.key)
}
#endif
void KeyNotInRange::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRange.key)
}
void KeyNotInRange::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRange.key)
}
::std::string* KeyNotInRange::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRange.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRange::release_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRange.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRange::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRange.key)
}

// uint64 range_id = 2;
void KeyNotInRange::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KeyNotInRange::range_id() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRange.range_id)
  return range_id_;
}
void KeyNotInRange::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRange.range_id)
}

// bytes start_key = 3;
void KeyNotInRange::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyNotInRange::start_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRange.start_key)
  return start_key_.GetNoArena();
}
void KeyNotInRange::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRange.start_key)
}
#if LANG_CXX11
void KeyNotInRange::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRange.start_key)
}
#endif
void KeyNotInRange::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRange.start_key)
}
void KeyNotInRange::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRange.start_key)
}
::std::string* KeyNotInRange::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRange.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRange::release_start_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRange.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRange::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRange.start_key)
}

// bytes end_key = 4;
void KeyNotInRange::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyNotInRange::end_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRange.end_key)
  return end_key_.GetNoArena();
}
void KeyNotInRange::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRange.end_key)
}
#if LANG_CXX11
void KeyNotInRange::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRange.end_key)
}
#endif
void KeyNotInRange::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRange.end_key)
}
void KeyNotInRange::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRange.end_key)
}
::std::string* KeyNotInRange::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRange.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyNotInRange::release_end_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRange.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyNotInRange::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRange.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleCommand::StaleCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleCommand)
}
StaleCommand::StaleCommand(const StaleCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleCommand)
}

void StaleCommand::SharedCtor() {
  _cached_size_ = 0;
}

StaleCommand::~StaleCommand() {
  // @@protoc_insertion_point(destructor:errorpb.StaleCommand)
  SharedDtor();
}

void StaleCommand::SharedDtor() {
}

void StaleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleCommand::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaleCommand& StaleCommand::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

StaleCommand* StaleCommand::New(::google::protobuf::Arena* arena) const {
  StaleCommand* n = new StaleCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool StaleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleCommand)
  return false;
#undef DO_
}

void StaleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleCommand)
}

::google::protobuf::uint8* StaleCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleCommand)
  return target;
}

size_t StaleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const StaleCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleCommand)
    MergeFrom(*source);
  }
}

void StaleCommand::MergeFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StaleCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleCommand::CopyFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleCommand::IsInitialized() const {
  return true;
}

void StaleCommand::Swap(StaleCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleCommand::InternalSwap(StaleCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleCommand::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleCommand

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timeout::Timeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.Timeout)
}
Timeout::Timeout(const Timeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:errorpb.Timeout)
}

void Timeout::SharedCtor() {
  _cached_size_ = 0;
}

Timeout::~Timeout() {
  // @@protoc_insertion_point(destructor:errorpb.Timeout)
  SharedDtor();
}

void Timeout::SharedDtor() {
}

void Timeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timeout::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timeout& Timeout::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Timeout* Timeout::New(::google::protobuf::Arena* arena) const {
  Timeout* n = new Timeout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Timeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.Timeout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.Timeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.Timeout)
  return false;
#undef DO_
}

void Timeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.Timeout)
}

::google::protobuf::uint8* Timeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.Timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.Timeout)
  return target;
}

size_t Timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.Timeout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  const Timeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.Timeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.Timeout)
    MergeFrom(*source);
  }
}

void Timeout::MergeFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Timeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timeout::CopyFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timeout::IsInitialized() const {
  return true;
}

void Timeout::Swap(Timeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timeout::InternalSwap(Timeout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timeout::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timeout

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftFail::RaftFail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.RaftFail)
}
RaftFail::RaftFail(const RaftFail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:errorpb.RaftFail)
}

void RaftFail::SharedCtor() {
  _cached_size_ = 0;
}

RaftFail::~RaftFail() {
  // @@protoc_insertion_point(destructor:errorpb.RaftFail)
  SharedDtor();
}

void RaftFail::SharedDtor() {
}

void RaftFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftFail::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaftFail& RaftFail::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RaftFail* RaftFail::New(::google::protobuf::Arena* arena) const {
  RaftFail* n = new RaftFail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftFail::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RaftFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.RaftFail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.RaftFail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.RaftFail)
  return false;
#undef DO_
}

void RaftFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.RaftFail)
}

::google::protobuf::uint8* RaftFail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RaftFail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RaftFail)
  return target;
}

size_t RaftFail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.RaftFail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftFail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.RaftFail)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftFail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftFail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.RaftFail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.RaftFail)
    MergeFrom(*source);
  }
}

void RaftFail::MergeFrom(const RaftFail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.RaftFail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RaftFail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.RaftFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftFail::CopyFrom(const RaftFail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.RaftFail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftFail::IsInitialized() const {
  return true;
}

void RaftFail::Swap(RaftFail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftFail::InternalSwap(RaftFail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftFail::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftFail

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaleEpoch::kOldRangeFieldNumber;
const int StaleEpoch::kNewRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleEpoch::StaleEpoch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleEpoch)
}
StaleEpoch::StaleEpoch(const StaleEpoch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_range()) {
    old_range_ = new ::metapb::Range(*from.old_range_);
  } else {
    old_range_ = NULL;
  }
  if (from.has_new_range()) {
    new_range_ = new ::metapb::Range(*from.new_range_);
  } else {
    new_range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleEpoch)
}

void StaleEpoch::SharedCtor() {
  ::memset(&old_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_range_) -
      reinterpret_cast<char*>(&old_range_)) + sizeof(new_range_));
  _cached_size_ = 0;
}

StaleEpoch::~StaleEpoch() {
  // @@protoc_insertion_point(destructor:errorpb.StaleEpoch)
  SharedDtor();
}

void StaleEpoch::SharedDtor() {
  if (this != internal_default_instance()) delete old_range_;
  if (this != internal_default_instance()) delete new_range_;
}

void StaleEpoch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleEpoch::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaleEpoch& StaleEpoch::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

StaleEpoch* StaleEpoch::New(::google::protobuf::Arena* arena) const {
  StaleEpoch* n = new StaleEpoch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleEpoch::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && old_range_ != NULL) {
    delete old_range_;
  }
  old_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) {
    delete new_range_;
  }
  new_range_ = NULL;
  _internal_metadata_.Clear();
}

bool StaleEpoch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleEpoch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Range old_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range new_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleEpoch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleEpoch)
  return false;
#undef DO_
}

void StaleEpoch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range old_range = 1;
  if (this->has_old_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->old_range_, output);
  }

  // .metapb.Range new_range = 2;
  if (this->has_new_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleEpoch)
}

::google::protobuf::uint8* StaleEpoch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleEpoch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range old_range = 1;
  if (this->has_old_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->old_range_, deterministic, target);
  }

  // .metapb.Range new_range = 2;
  if (this->has_new_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->new_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleEpoch)
  return target;
}

size_t StaleEpoch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleEpoch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Range old_range = 1;
  if (this->has_old_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_range_);
  }

  // .metapb.Range new_range = 2;
  if (this->has_new_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleEpoch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  const StaleEpoch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleEpoch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleEpoch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleEpoch)
    MergeFrom(*source);
  }
}

void StaleEpoch::MergeFrom(const StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleEpoch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_range()) {
    mutable_old_range()->::metapb::Range::MergeFrom(from.old_range());
  }
  if (from.has_new_range()) {
    mutable_new_range()->::metapb::Range::MergeFrom(from.new_range());
  }
}

void StaleEpoch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleEpoch::CopyFrom(const StaleEpoch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleEpoch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleEpoch::IsInitialized() const {
  return true;
}

void StaleEpoch::Swap(StaleEpoch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleEpoch::InternalSwap(StaleEpoch* other) {
  using std::swap;
  swap(old_range_, other->old_range_);
  swap(new_range_, other->new_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleEpoch::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleEpoch

// .metapb.Range old_range = 1;
bool StaleEpoch::has_old_range() const {
  return this != internal_default_instance() && old_range_ != NULL;
}
void StaleEpoch::clear_old_range() {
  if (GetArenaNoVirtual() == NULL && old_range_ != NULL) delete old_range_;
  old_range_ = NULL;
}
const ::metapb::Range& StaleEpoch::old_range() const {
  const ::metapb::Range* p = old_range_;
  // @@protoc_insertion_point(field_get:errorpb.StaleEpoch.old_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* StaleEpoch::mutable_old_range() {
  
  if (old_range_ == NULL) {
    old_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.StaleEpoch.old_range)
  return old_range_;
}
::metapb::Range* StaleEpoch::release_old_range() {
  // @@protoc_insertion_point(field_release:errorpb.StaleEpoch.old_range)
  
  ::metapb::Range* temp = old_range_;
  old_range_ = NULL;
  return temp;
}
void StaleEpoch::set_allocated_old_range(::metapb::Range* old_range) {
  delete old_range_;
  old_range_ = old_range;
  if (old_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.StaleEpoch.old_range)
}

// .metapb.Range new_range = 2;
bool StaleEpoch::has_new_range() const {
  return this != internal_default_instance() && new_range_ != NULL;
}
void StaleEpoch::clear_new_range() {
  if (GetArenaNoVirtual() == NULL && new_range_ != NULL) delete new_range_;
  new_range_ = NULL;
}
const ::metapb::Range& StaleEpoch::new_range() const {
  const ::metapb::Range* p = new_range_;
  // @@protoc_insertion_point(field_get:errorpb.StaleEpoch.new_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* StaleEpoch::mutable_new_range() {
  
  if (new_range_ == NULL) {
    new_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.StaleEpoch.new_range)
  return new_range_;
}
::metapb::Range* StaleEpoch::release_new_range() {
  // @@protoc_insertion_point(field_release:errorpb.StaleEpoch.new_range)
  
  ::metapb::Range* temp = new_range_;
  new_range_ = NULL;
  return temp;
}
void StaleEpoch::set_allocated_new_range(::metapb::Range* new_range) {
  delete new_range_;
  new_range_ = new_range;
  if (new_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.StaleEpoch.new_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaleRange::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleRange::StaleRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleRange)
}
StaleRange::StaleRange(const StaleRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleRange)
}

void StaleRange::SharedCtor() {
  range_ = NULL;
  _cached_size_ = 0;
}

StaleRange::~StaleRange() {
  // @@protoc_insertion_point(destructor:errorpb.StaleRange)
  SharedDtor();
}

void StaleRange::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void StaleRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleRange::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaleRange& StaleRange::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

StaleRange* StaleRange::New(::google::protobuf::Arena* arena) const {
  StaleRange* n = new StaleRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleRange::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  _internal_metadata_.Clear();
}

bool StaleRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleRange)
  return false;
#undef DO_
}

void StaleRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleRange)
}

::google::protobuf::uint8* StaleRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleRange)
  return target;
}

size_t StaleRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleRange)
  GOOGLE_DCHECK_NE(&from, this);
  const StaleRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleRange)
    MergeFrom(*source);
  }
}

void StaleRange::MergeFrom(const StaleRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
}

void StaleRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleRange::CopyFrom(const StaleRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleRange::IsInitialized() const {
  return true;
}

void StaleRange::Swap(StaleRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleRange::InternalSwap(StaleRange* other) {
  using std::swap;
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleRange::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleRange

// .metapb.Range range = 1;
bool StaleRange::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void StaleRange::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& StaleRange::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:errorpb.StaleRange.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* StaleRange::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.StaleRange.range)
  return range_;
}
::metapb::Range* StaleRange::release_range() {
  // @@protoc_insertion_point(field_release:errorpb.StaleRange.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void StaleRange::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.StaleRange.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaleReadIndex::kReadIndexFieldNumber;
const int StaleReadIndex::kReplicaIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaleReadIndex::StaleReadIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.StaleReadIndex)
}
StaleReadIndex::StaleReadIndex(const StaleReadIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&read_index_, &from.read_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_index_) -
    reinterpret_cast<char*>(&read_index_)) + sizeof(replica_index_));
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleReadIndex)
}

void StaleReadIndex::SharedCtor() {
  ::memset(&read_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_index_) -
      reinterpret_cast<char*>(&read_index_)) + sizeof(replica_index_));
  _cached_size_ = 0;
}

StaleReadIndex::~StaleReadIndex() {
  // @@protoc_insertion_point(destructor:errorpb.StaleReadIndex)
  SharedDtor();
}

void StaleReadIndex::SharedDtor() {
}

void StaleReadIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaleReadIndex::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaleReadIndex& StaleReadIndex::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

StaleReadIndex* StaleReadIndex::New(::google::protobuf::Arena* arena) const {
  StaleReadIndex* n = new StaleReadIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaleReadIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleReadIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&read_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_index_) -
      reinterpret_cast<char*>(&read_index_)) + sizeof(replica_index_));
  _internal_metadata_.Clear();
}

bool StaleReadIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.StaleReadIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 read_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 replica_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replica_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.StaleReadIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.StaleReadIndex)
  return false;
#undef DO_
}

void StaleReadIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.StaleReadIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 read_index = 1;
  if (this->read_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->read_index(), output);
  }

  // uint64 replica_index = 2;
  if (this->replica_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->replica_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.StaleReadIndex)
}

::google::protobuf::uint8* StaleReadIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleReadIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 read_index = 1;
  if (this->read_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->read_index(), target);
  }

  // uint64 replica_index = 2;
  if (this->replica_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->replica_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleReadIndex)
  return target;
}

size_t StaleReadIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleReadIndex)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 read_index = 1;
  if (this->read_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_index());
  }

  // uint64 replica_index = 2;
  if (this->replica_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->replica_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaleReadIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleReadIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const StaleReadIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaleReadIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleReadIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleReadIndex)
    MergeFrom(*source);
  }
}

void StaleReadIndex::MergeFrom(const StaleReadIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleReadIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_index() != 0) {
    set_read_index(from.read_index());
  }
  if (from.replica_index() != 0) {
    set_replica_index(from.replica_index());
  }
}

void StaleReadIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleReadIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleReadIndex::CopyFrom(const StaleReadIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleReadIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleReadIndex::IsInitialized() const {
  return true;
}

void StaleReadIndex::Swap(StaleReadIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaleReadIndex::InternalSwap(StaleReadIndex* other) {
  using std::swap;
  swap(read_index_, other->read_index_);
  swap(replica_index_, other->replica_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaleReadIndex::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaleReadIndex

// uint64 read_index = 1;
void StaleReadIndex::clear_read_index() {
  read_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StaleReadIndex::read_index() const {
  // @@protoc_insertion_point(field_get:errorpb.StaleReadIndex.read_index)
  return read_index_;
}
void StaleReadIndex::set_read_index(::google::protobuf::uint64 value) {
  
  read_index_ = value;
  // @@protoc_insertion_point(field_set:errorpb.StaleReadIndex.read_index)
}

// uint64 replica_index = 2;
void StaleReadIndex::clear_replica_index() {
  replica_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StaleReadIndex::replica_index() const {
  // @@protoc_insertion_point(field_get:errorpb.StaleReadIndex.replica_index)
  return replica_index_;
}
void StaleReadIndex::set_replica_index(::google::protobuf::uint64 value) {
  
  replica_index_ = value;
  // @@protoc_insertion_point(field_set:errorpb.StaleReadIndex.replica_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerIsBusy::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerIsBusy::ServerIsBusy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.ServerIsBusy)
}
ServerIsBusy::ServerIsBusy(const ServerIsBusy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:errorpb.ServerIsBusy)
}

void ServerIsBusy::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServerIsBusy::~ServerIsBusy() {
  // @@protoc_insertion_point(destructor:errorpb.ServerIsBusy)
  SharedDtor();
}

void ServerIsBusy::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerIsBusy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerIsBusy::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerIsBusy& ServerIsBusy::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerIsBusy* ServerIsBusy::New(::google::protobuf::Arena* arena) const {
  ServerIsBusy* n = new ServerIsBusy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerIsBusy::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.ServerIsBusy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ServerIsBusy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.ServerIsBusy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "errorpb.ServerIsBusy.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.ServerIsBusy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.ServerIsBusy)
  return false;
#undef DO_
}

void ServerIsBusy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.ServerIsBusy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "errorpb.ServerIsBusy.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.ServerIsBusy)
}

::google::protobuf::uint8* ServerIsBusy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.ServerIsBusy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "errorpb.ServerIsBusy.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.ServerIsBusy)
  return target;
}

size_t ServerIsBusy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.ServerIsBusy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerIsBusy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.ServerIsBusy)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerIsBusy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerIsBusy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.ServerIsBusy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.ServerIsBusy)
    MergeFrom(*source);
  }
}

void ServerIsBusy::MergeFrom(const ServerIsBusy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.ServerIsBusy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void ServerIsBusy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.ServerIsBusy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerIsBusy::CopyFrom(const ServerIsBusy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.ServerIsBusy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerIsBusy::IsInitialized() const {
  return true;
}

void ServerIsBusy::Swap(ServerIsBusy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerIsBusy::InternalSwap(ServerIsBusy* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerIsBusy::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerIsBusy

// string reason = 1;
void ServerIsBusy::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerIsBusy::reason() const {
  // @@protoc_insertion_point(field_get:errorpb.ServerIsBusy.reason)
  return reason_.GetNoArena();
}
void ServerIsBusy::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.ServerIsBusy.reason)
}
#if LANG_CXX11
void ServerIsBusy::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.ServerIsBusy.reason)
}
#endif
void ServerIsBusy::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.ServerIsBusy.reason)
}
void ServerIsBusy::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.ServerIsBusy.reason)
}
::std::string* ServerIsBusy::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.ServerIsBusy.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerIsBusy::release_reason() {
  // @@protoc_insertion_point(field_release:errorpb.ServerIsBusy.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerIsBusy::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:errorpb.ServerIsBusy.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryTooLarge::kRangeIdFieldNumber;
const int EntryTooLarge::kEntrySizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryTooLarge::EntryTooLarge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.EntryTooLarge)
}
EntryTooLarge::EntryTooLarge(const EntryTooLarge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_size_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(entry_size_));
  // @@protoc_insertion_point(copy_constructor:errorpb.EntryTooLarge)
}

void EntryTooLarge::SharedCtor() {
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_size_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(entry_size_));
  _cached_size_ = 0;
}

EntryTooLarge::~EntryTooLarge() {
  // @@protoc_insertion_point(destructor:errorpb.EntryTooLarge)
  SharedDtor();
}

void EntryTooLarge::SharedDtor() {
}

void EntryTooLarge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryTooLarge::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntryTooLarge& EntryTooLarge::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntryTooLarge* EntryTooLarge::New(::google::protobuf::Arena* arena) const {
  EntryTooLarge* n = new EntryTooLarge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntryTooLarge::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.EntryTooLarge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_size_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(entry_size_));
  _internal_metadata_.Clear();
}

bool EntryTooLarge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.EntryTooLarge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 entry_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.EntryTooLarge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.EntryTooLarge)
  return false;
#undef DO_
}

void EntryTooLarge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.EntryTooLarge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 entry_size = 2;
  if (this->entry_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->entry_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.EntryTooLarge)
}

::google::protobuf::uint8* EntryTooLarge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.EntryTooLarge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 entry_size = 2;
  if (this->entry_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->entry_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.EntryTooLarge)
  return target;
}

size_t EntryTooLarge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.EntryTooLarge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 entry_size = 2;
  if (this->entry_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entry_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryTooLarge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.EntryTooLarge)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryTooLarge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntryTooLarge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.EntryTooLarge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.EntryTooLarge)
    MergeFrom(*source);
  }
}

void EntryTooLarge::MergeFrom(const EntryTooLarge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.EntryTooLarge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.entry_size() != 0) {
    set_entry_size(from.entry_size());
  }
}

void EntryTooLarge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.EntryTooLarge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryTooLarge::CopyFrom(const EntryTooLarge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.EntryTooLarge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryTooLarge::IsInitialized() const {
  return true;
}

void EntryTooLarge::Swap(EntryTooLarge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntryTooLarge::InternalSwap(EntryTooLarge* other) {
  using std::swap;
  swap(range_id_, other->range_id_);
  swap(entry_size_, other->entry_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntryTooLarge::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntryTooLarge

// uint64 range_id = 1;
void EntryTooLarge::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EntryTooLarge::range_id() const {
  // @@protoc_insertion_point(field_get:errorpb.EntryTooLarge.range_id)
  return range_id_;
}
void EntryTooLarge::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.EntryTooLarge.range_id)
}

// uint64 entry_size = 2;
void EntryTooLarge::clear_entry_size() {
  entry_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EntryTooLarge::entry_size() const {
  // @@protoc_insertion_point(field_get:errorpb.EntryTooLarge.entry_size)
  return entry_size_;
}
void EntryTooLarge::set_entry_size(::google::protobuf::uint64 value) {
  
  entry_size_ = value;
  // @@protoc_insertion_point(field_set:errorpb.EntryTooLarge.entry_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
const int Error::kNotLeaderFieldNumber;
const int Error::kStaleCommandFieldNumber;
const int Error::kRangeNotFoundFieldNumber;
const int Error::kKeyNotInRangeFieldNumber;
const int Error::kStaleEpochFieldNumber;
const int Error::kServerIsBusyFieldNumber;
const int Error::kEntryTooLargeFieldNumber;
const int Error::kTimeoutFieldNumber;
const int Error::kRaftFailFieldNumber;
const int Error::kStaleRangeFieldNumber;
const int Error::kStaleReadIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_errorpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:errorpb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_not_leader()) {
    not_leader_ = new ::errorpb::NotLeader(*from.not_leader_);
  } else {
    not_leader_ = NULL;
  }
  if (from.has_stale_command()) {
    stale_command_ = new ::errorpb::StaleCommand(*from.stale_command_);
  } else {
    stale_command_ = NULL;
  }
  if (from.has_range_not_found()) {
    range_not_found_ = new ::errorpb::RangeNotFound(*from.range_not_found_);
  } else {
    range_not_found_ = NULL;
  }
  if (from.has_key_not_in_range()) {
    key_not_in_range_ = new ::errorpb::KeyNotInRange(*from.key_not_in_range_);
  } else {
    key_not_in_range_ = NULL;
  }
  if (from.has_stale_epoch()) {
    stale_epoch_ = new ::errorpb::StaleEpoch(*from.stale_epoch_);
  } else {
    stale_epoch_ = NULL;
  }
  if (from.has_server_is_busy()) {
    server_is_busy_ = new ::errorpb::ServerIsBusy(*from.server_is_busy_);
  } else {
    server_is_busy_ = NULL;
  }
  if (from.has_entry_too_large()) {
    entry_too_large_ = new ::errorpb::EntryTooLarge(*from.entry_too_large_);
  } else {
    entry_too_large_ = NULL;
  }
  if (from.has_timeout()) {
    timeout_ = new ::errorpb::Timeout(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_raft_fail()) {
    raft_fail_ = new ::errorpb::RaftFail(*from.raft_fail_);
  } else {
    raft_fail_ = NULL;
  }
  if (from.has_stale_range()) {
    stale_range_ = new ::errorpb::StaleRange(*from.stale_range_);
  } else {
    stale_range_ = NULL;
  }
  if (from.has_stale_read_index()) {
    stale_read_index_ = new ::errorpb::StaleReadIndex(*from.stale_read_index_);
  } else {
    stale_read_index_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:errorpb.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&not_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stale_read_index_) -
      reinterpret_cast<char*>(&not_leader_)) + sizeof(stale_read_index_));
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:errorpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete not_leader_;
  if (this != internal_default_instance()) delete stale_command_;
  if (this != internal_default_instance()) delete range_not_found_;
  if (this != internal_default_instance()) delete key_not_in_range_;
  if (this != internal_default_instance()) delete stale_epoch_;
  if (this != internal_default_instance()) delete server_is_busy_;
  if (this != internal_default_instance()) delete entry_too_large_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete raft_fail_;
  if (this != internal_default_instance()) delete stale_range_;
  if (this != internal_default_instance()) delete stale_read_index_;
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_errorpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && not_leader_ != NULL) {
    delete not_leader_;
  }
  not_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && stale_command_ != NULL) {
    delete stale_command_;
  }
  stale_command_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_not_found_ != NULL) {
    delete range_not_found_;
  }
  range_not_found_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_not_in_range_ != NULL) {
    delete key_not_in_range_;
  }
  key_not_in_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && stale_epoch_ != NULL) {
    delete stale_epoch_;
  }
  stale_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_is_busy_ != NULL) {
    delete server_is_busy_;
  }
  server_is_busy_ = NULL;
  if (GetArenaNoVirtual() == NULL && entry_too_large_ != NULL) {
    delete entry_too_large_;
  }
  entry_too_large_ = NULL;
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && raft_fail_ != NULL) {
    delete raft_fail_;
  }
  raft_fail_ = NULL;
  if (GetArenaNoVirtual() == NULL && stale_range_ != NULL) {
    delete stale_range_;
  }
  stale_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && stale_read_index_ != NULL) {
    delete stale_read_index_;
  }
  stale_read_index_ = NULL;
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:errorpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "errorpb.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.NotLeader not_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.StaleCommand stale_command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.RangeNotFound range_not_found = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_not_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.KeyNotInRange key_not_in_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_not_in_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.StaleEpoch stale_epoch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.ServerIsBusy server_is_busy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_is_busy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.EntryTooLarge entry_too_large = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry_too_large()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.Timeout timeout = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.RaftFail raft_fail = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_fail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.StaleRange stale_range = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.StaleReadIndex stale_read_index = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stale_read_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:errorpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:errorpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:errorpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "errorpb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // .errorpb.NotLeader not_leader = 2;
  if (this->has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->not_leader_, output);
  }

  // .errorpb.StaleCommand stale_command = 3;
  if (this->has_stale_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stale_command_, output);
  }

  // .errorpb.RangeNotFound range_not_found = 4;
  if (this->has_range_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->range_not_found_, output);
  }

  // .errorpb.KeyNotInRange key_not_in_range = 5;
  if (this->has_key_not_in_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->key_not_in_range_, output);
  }

  // .errorpb.StaleEpoch stale_epoch = 6;
  if (this->has_stale_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stale_epoch_, output);
  }

  // .errorpb.ServerIsBusy server_is_busy = 7;
  if (this->has_server_is_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->server_is_busy_, output);
  }

  // .errorpb.EntryTooLarge entry_too_large = 8;
  if (this->has_entry_too_large()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->entry_too_large_, output);
  }

  // .errorpb.Timeout timeout = 9;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->timeout_, output);
  }

  // .errorpb.RaftFail raft_fail = 10;
  if (this->has_raft_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->raft_fail_, output);
  }

  // .errorpb.StaleRange stale_range = 11;
  if (this->has_stale_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->stale_range_, output);
  }

  // .errorpb.StaleReadIndex stale_read_index = 12;
  if (this->has_stale_read_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->stale_read_index_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:errorpb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "errorpb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // .errorpb.NotLeader not_leader = 2;
  if (this->has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->not_leader_, deterministic, target);
  }

  // .errorpb.StaleCommand stale_command = 3;
  if (this->has_stale_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stale_command_, deterministic, target);
  }

  // .errorpb.RangeNotFound range_not_found = 4;
  if (this->has_range_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->range_not_found_, deterministic, target);
  }

  // .errorpb.KeyNotInRange key_not_in_range = 5;
  if (this->has_key_not_in_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->key_not_in_range_, deterministic, target);
  }

  // .errorpb.StaleEpoch stale_epoch = 6;
  if (this->has_stale_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stale_epoch_, deterministic, target);
  }

  // .errorpb.ServerIsBusy server_is_busy = 7;
  if (this->has_server_is_busy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->server_is_busy_, deterministic, target);
  }

  // .errorpb.EntryTooLarge entry_too_large = 8;
  if (this->has_entry_too_large()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->entry_too_large_, deterministic, target);
  }

  // .errorpb.Timeout timeout = 9;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->timeout_, deterministic, target);
  }

  // .errorpb.RaftFail raft_fail = 10;
  if (this->has_raft_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->raft_fail_, deterministic, target);
  }

  // .errorpb.StaleRange stale_range = 11;
  if (this->has_stale_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->stale_range_, deterministic, target);
  }

  // .errorpb.StaleReadIndex stale_read_index = 12;
  if (this->has_stale_read_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->stale_read_index_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .errorpb.NotLeader not_leader = 2;
  if (this->has_not_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->not_leader_);
  }

  // .errorpb.StaleCommand stale_command = 3;
  if (this->has_stale_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stale_command_);
  }

  // .errorpb.RangeNotFound range_not_found = 4;
  if (this->has_range_not_found()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_not_found_);
  }

  // .errorpb.KeyNotInRange key_not_in_range = 5;
  if (this->has_key_not_in_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_not_in_range_);
  }

  // .errorpb.StaleEpoch stale_epoch = 6;
  if (this->has_stale_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stale_epoch_);
  }

  // .errorpb.ServerIsBusy server_is_busy = 7;
  if (this->has_server_is_busy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_is_busy_);
  }

  // .errorpb.EntryTooLarge entry_too_large = 8;
  if (this->has_entry_too_large()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_too_large_);
  }

  // .errorpb.Timeout timeout = 9;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_);
  }

  // .errorpb.RaftFail raft_fail = 10;
  if (this->has_raft_fail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->raft_fail_);
  }

  // .errorpb.StaleRange stale_range = 11;
  if (this->has_stale_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stale_range_);
  }

  // .errorpb.StaleReadIndex stale_read_index = 12;
  if (this->has_stale_read_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stale_read_index_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_not_leader()) {
    mutable_not_leader()->::errorpb::NotLeader::MergeFrom(from.not_leader());
  }
  if (from.has_stale_command()) {
    mutable_stale_command()->::errorpb::StaleCommand::MergeFrom(from.stale_command());
  }
  if (from.has_range_not_found()) {
    mutable_range_not_found()->::errorpb::RangeNotFound::MergeFrom(from.range_not_found());
  }
  if (from.has_key_not_in_range()) {
    mutable_key_not_in_range()->::errorpb::KeyNotInRange::MergeFrom(from.key_not_in_range());
  }
  if (from.has_stale_epoch()) {
    mutable_stale_epoch()->::errorpb::StaleEpoch::MergeFrom(from.stale_epoch());
  }
  if (from.has_server_is_busy()) {
    mutable_server_is_busy()->::errorpb::ServerIsBusy::MergeFrom(from.server_is_busy());
  }
  if (from.has_entry_too_large()) {
    mutable_entry_too_large()->::errorpb::EntryTooLarge::MergeFrom(from.entry_too_large());
  }
  if (from.has_timeout()) {
    mutable_timeout()->::errorpb::Timeout::MergeFrom(from.timeout());
  }
  if (from.has_raft_fail()) {
    mutable_raft_fail()->::errorpb::RaftFail::MergeFrom(from.raft_fail());
  }
  if (from.has_stale_range()) {
    mutable_stale_range()->::errorpb::StaleRange::MergeFrom(from.stale_range());
  }
  if (from.has_stale_read_index()) {
    mutable_stale_read_index()->::errorpb::StaleReadIndex::MergeFrom(from.stale_read_index());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(not_leader_, other->not_leader_);
  swap(stale_command_, other->stale_command_);
  swap(range_not_found_, other->range_not_found_);
  swap(key_not_in_range_, other->key_not_in_range_);
  swap(stale_epoch_, other->stale_epoch_);
  swap(server_is_busy_, other->server_is_busy_);
  swap(entry_too_large_, other->entry_too_large_);
  swap(timeout_, other->timeout_);
  swap(raft_fail_, other->raft_fail_);
  swap(stale_range_, other->stale_range_);
  swap(stale_read_index_, other->stale_read_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_errorpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_errorpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// string message = 1;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.Error.message)
}
#endif
void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:errorpb.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.message)
}

// .errorpb.NotLeader not_leader = 2;
bool Error::has_not_leader() const {
  return this != internal_default_instance() && not_leader_ != NULL;
}
void Error::clear_not_leader() {
  if (GetArenaNoVirtual() == NULL && not_leader_ != NULL) delete not_leader_;
  not_leader_ = NULL;
}
const ::errorpb::NotLeader& Error::not_leader() const {
  const ::errorpb::NotLeader* p = not_leader_;
  // @@protoc_insertion_point(field_get:errorpb.Error.not_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::NotLeader*>(
      &::errorpb::_NotLeader_default_instance_);
}
::errorpb::NotLeader* Error::mutable_not_leader() {
  
  if (not_leader_ == NULL) {
    not_leader_ = new ::errorpb::NotLeader;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.not_leader)
  return not_leader_;
}
::errorpb::NotLeader* Error::release_not_leader() {
  // @@protoc_insertion_point(field_release:errorpb.Error.not_leader)
  
  ::errorpb::NotLeader* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
void Error::set_allocated_not_leader(::errorpb::NotLeader* not_leader) {
  delete not_leader_;
  not_leader_ = not_leader;
  if (not_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.not_leader)
}

// .errorpb.StaleCommand stale_command = 3;
bool Error::has_stale_command() const {
  return this != internal_default_instance() && stale_command_ != NULL;
}
void Error::clear_stale_command() {
  if (GetArenaNoVirtual() == NULL && stale_command_ != NULL) delete stale_command_;
  stale_command_ = NULL;
}
const ::errorpb::StaleCommand& Error::stale_command() const {
  const ::errorpb::StaleCommand* p = stale_command_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_command)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleCommand*>(
      &::errorpb::_StaleCommand_default_instance_);
}
::errorpb::StaleCommand* Error::mutable_stale_command() {
  
  if (stale_command_ == NULL) {
    stale_command_ = new ::errorpb::StaleCommand;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_command)
  return stale_command_;
}
::errorpb::StaleCommand* Error::release_stale_command() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_command)
  
  ::errorpb::StaleCommand* temp = stale_command_;
  stale_command_ = NULL;
  return temp;
}
void Error::set_allocated_stale_command(::errorpb::StaleCommand* stale_command) {
  delete stale_command_;
  stale_command_ = stale_command;
  if (stale_command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_command)
}

// .errorpb.RangeNotFound range_not_found = 4;
bool Error::has_range_not_found() const {
  return this != internal_default_instance() && range_not_found_ != NULL;
}
void Error::clear_range_not_found() {
  if (GetArenaNoVirtual() == NULL && range_not_found_ != NULL) delete range_not_found_;
  range_not_found_ = NULL;
}
const ::errorpb::RangeNotFound& Error::range_not_found() const {
  const ::errorpb::RangeNotFound* p = range_not_found_;
  // @@protoc_insertion_point(field_get:errorpb.Error.range_not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::RangeNotFound*>(
      &::errorpb::_RangeNotFound_default_instance_);
}
::errorpb::RangeNotFound* Error::mutable_range_not_found() {
  
  if (range_not_found_ == NULL) {
    range_not_found_ = new ::errorpb::RangeNotFound;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.range_not_found)
  return range_not_found_;
}
::errorpb::RangeNotFound* Error::release_range_not_found() {
  // @@protoc_insertion_point(field_release:errorpb.Error.range_not_found)
  
  ::errorpb::RangeNotFound* temp = range_not_found_;
  range_not_found_ = NULL;
  return temp;
}
void Error::set_allocated_range_not_found(::errorpb::RangeNotFound* range_not_found) {
  delete range_not_found_;
  range_not_found_ = range_not_found;
  if (range_not_found) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.range_not_found)
}

// .errorpb.KeyNotInRange key_not_in_range = 5;
bool Error::has_key_not_in_range() const {
  return this != internal_default_instance() && key_not_in_range_ != NULL;
}
void Error::clear_key_not_in_range() {
  if (GetArenaNoVirtual() == NULL && key_not_in_range_ != NULL) delete key_not_in_range_;
  key_not_in_range_ = NULL;
}
const ::errorpb::KeyNotInRange& Error::key_not_in_range() const {
  const ::errorpb::KeyNotInRange* p = key_not_in_range_;
  // @@protoc_insertion_point(field_get:errorpb.Error.key_not_in_range)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::KeyNotInRange*>(
      &::errorpb::_KeyNotInRange_default_instance_);
}
::errorpb::KeyNotInRange* Error::mutable_key_not_in_range() {
  
  if (key_not_in_range_ == NULL) {
    key_not_in_range_ = new ::errorpb::KeyNotInRange;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.key_not_in_range)
  return key_not_in_range_;
}
::errorpb::KeyNotInRange* Error::release_key_not_in_range() {
  // @@protoc_insertion_point(field_release:errorpb.Error.key_not_in_range)
  
  ::errorpb::KeyNotInRange* temp = key_not_in_range_;
  key_not_in_range_ = NULL;
  return temp;
}
void Error::set_allocated_key_not_in_range(::errorpb::KeyNotInRange* key_not_in_range) {
  delete key_not_in_range_;
  key_not_in_range_ = key_not_in_range;
  if (key_not_in_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.key_not_in_range)
}

// .errorpb.StaleEpoch stale_epoch = 6;
bool Error::has_stale_epoch() const {
  return this != internal_default_instance() && stale_epoch_ != NULL;
}
void Error::clear_stale_epoch() {
  if (GetArenaNoVirtual() == NULL && stale_epoch_ != NULL) delete stale_epoch_;
  stale_epoch_ = NULL;
}
const ::errorpb::StaleEpoch& Error::stale_epoch() const {
  const ::errorpb::StaleEpoch* p = stale_epoch_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleEpoch*>(
      &::errorpb::_StaleEpoch_default_instance_);
}
::errorpb::StaleEpoch* Error::mutable_stale_epoch() {
  
  if (stale_epoch_ == NULL) {
    stale_epoch_ = new ::errorpb::StaleEpoch;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_epoch)
  return stale_epoch_;
}
::errorpb::StaleEpoch* Error::release_stale_epoch() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_epoch)
  
  ::errorpb::StaleEpoch* temp = stale_epoch_;
  stale_epoch_ = NULL;
  return temp;
}
void Error::set_allocated_stale_epoch(::errorpb::StaleEpoch* stale_epoch) {
  delete stale_epoch_;
  stale_epoch_ = stale_epoch;
  if (stale_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_epoch)
}

// .errorpb.ServerIsBusy server_is_busy = 7;
bool Error::has_server_is_busy() const {
  return this != internal_default_instance() && server_is_busy_ != NULL;
}
void Error::clear_server_is_busy() {
  if (GetArenaNoVirtual() == NULL && server_is_busy_ != NULL) delete server_is_busy_;
  server_is_busy_ = NULL;
}
const ::errorpb::ServerIsBusy& Error::server_is_busy() const {
  const ::errorpb::ServerIsBusy* p = server_is_busy_;
  // @@protoc_insertion_point(field_get:errorpb.Error.server_is_busy)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::ServerIsBusy*>(
      &::errorpb::_ServerIsBusy_default_instance_);
}
::errorpb::ServerIsBusy* Error::mutable_server_is_busy() {
  
  if (server_is_busy_ == NULL) {
    server_is_busy_ = new ::errorpb::ServerIsBusy;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.server_is_busy)
  return server_is_busy_;
}
::errorpb::ServerIsBusy* Error::release_server_is_busy() {
  // @@protoc_insertion_point(field_release:errorpb.Error.server_is_busy)
  
  ::errorpb::ServerIsBusy* temp = server_is_busy_;
  server_is_busy_ = NULL;
  return temp;
}
void Error::set_allocated_server_is_busy(::errorpb::ServerIsBusy* server_is_busy) {
  delete server_is_busy_;
  server_is_busy_ = server_is_busy;
  if (server_is_busy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.server_is_busy)
}

// .errorpb.EntryTooLarge entry_too_large = 8;
bool Error::has_entry_too_large() const {
  return this != internal_default_instance() && entry_too_large_ != NULL;
}
void Error::clear_entry_too_large() {
  if (GetArenaNoVirtual() == NULL && entry_too_large_ != NULL) delete entry_too_large_;
  entry_too_large_ = NULL;
}
const ::errorpb::EntryTooLarge& Error::entry_too_large() const {
  const ::errorpb::EntryTooLarge* p = entry_too_large_;
  // @@protoc_insertion_point(field_get:errorpb.Error.entry_too_large)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::EntryTooLarge*>(
      &::errorpb::_EntryTooLarge_default_instance_);
}
::errorpb::EntryTooLarge* Error::mutable_entry_too_large() {
  
  if (entry_too_large_ == NULL) {
    entry_too_large_ = new ::errorpb::EntryTooLarge;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.entry_too_large)
  return entry_too_large_;
}
::errorpb::EntryTooLarge* Error::release_entry_too_large() {
  // @@protoc_insertion_point(field_release:errorpb.Error.entry_too_large)
  
  ::errorpb::EntryTooLarge* temp = entry_too_large_;
  entry_too_large_ = NULL;
  return temp;
}
void Error::set_allocated_entry_too_large(::errorpb::EntryTooLarge* entry_too_large) {
  delete entry_too_large_;
  entry_too_large_ = entry_too_large;
  if (entry_too_large) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.entry_too_large)
}

// .errorpb.Timeout timeout = 9;
bool Error::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
void Error::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
const ::errorpb::Timeout& Error::timeout() const {
  const ::errorpb::Timeout* p = timeout_;
  // @@protoc_insertion_point(field_get:errorpb.Error.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::Timeout*>(
      &::errorpb::_Timeout_default_instance_);
}
::errorpb::Timeout* Error::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::errorpb::Timeout;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.timeout)
  return timeout_;
}
::errorpb::Timeout* Error::release_timeout() {
  // @@protoc_insertion_point(field_release:errorpb.Error.timeout)
  
  ::errorpb::Timeout* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
void Error::set_allocated_timeout(::errorpb::Timeout* timeout) {
  delete timeout_;
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.timeout)
}

// .errorpb.RaftFail raft_fail = 10;
bool Error::has_raft_fail() const {
  return this != internal_default_instance() && raft_fail_ != NULL;
}
void Error::clear_raft_fail() {
  if (GetArenaNoVirtual() == NULL && raft_fail_ != NULL) delete raft_fail_;
  raft_fail_ = NULL;
}
const ::errorpb::RaftFail& Error::raft_fail() const {
  const ::errorpb::RaftFail* p = raft_fail_;
  // @@protoc_insertion_point(field_get:errorpb.Error.raft_fail)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::RaftFail*>(
      &::errorpb::_RaftFail_default_instance_);
}
::errorpb::RaftFail* Error::mutable_raft_fail() {
  
  if (raft_fail_ == NULL) {
    raft_fail_ = new ::errorpb::RaftFail;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.raft_fail)
  return raft_fail_;
}
::errorpb::RaftFail* Error::release_raft_fail() {
  // @@protoc_insertion_point(field_release:errorpb.Error.raft_fail)
  
  ::errorpb::RaftFail* temp = raft_fail_;
  raft_fail_ = NULL;
  return temp;
}
void Error::set_allocated_raft_fail(::errorpb::RaftFail* raft_fail) {
  delete raft_fail_;
  raft_fail_ = raft_fail;
  if (raft_fail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.raft_fail)
}

// .errorpb.StaleRange stale_range = 11;
bool Error::has_stale_range() const {
  return this != internal_default_instance() && stale_range_ != NULL;
}
void Error::clear_stale_range() {
  if (GetArenaNoVirtual() == NULL && stale_range_ != NULL) delete stale_range_;
  stale_range_ = NULL;
}
const ::errorpb::StaleRange& Error::stale_range() const {
  const ::errorpb::StaleRange* p = stale_range_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_range)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleRange*>(
      &::errorpb::_StaleRange_default_instance_);
}
::errorpb::StaleRange* Error::mutable_stale_range() {
  
  if (stale_range_ == NULL) {
    stale_range_ = new ::errorpb::StaleRange;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_range)
  return stale_range_;
}
::errorpb::StaleRange* Error::release_stale_range() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_range)
  
  ::errorpb::StaleRange* temp = stale_range_;
  stale_range_ = NULL;
  return temp;
}
void Error::set_allocated_stale_range(::errorpb::StaleRange* stale_range) {
  delete stale_range_;
  stale_range_ = stale_range;
  if (stale_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_range)
}

// .errorpb.StaleReadIndex stale_read_index = 12;
bool Error::has_stale_read_index() const {
  return this != internal_default_instance() && stale_read_index_ != NULL;
}
void Error::clear_stale_read_index() {
  if (GetArenaNoVirtual() == NULL && stale_read_index_ != NULL) delete stale_read_index_;
  stale_read_index_ = NULL;
}
const ::errorpb::StaleReadIndex& Error::stale_read_index() const {
  const ::errorpb::StaleReadIndex* p = stale_read_index_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_read_index)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleReadIndex*>(
      &::errorpb::_StaleReadIndex_default_instance_);
}
::errorpb::StaleReadIndex* Error::mutable_stale_read_index() {
  
  if (stale_read_index_ == NULL) {
    stale_read_index_ = new ::errorpb::StaleReadIndex;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_read_index)
  return stale_read_index_;
}
::errorpb::StaleReadIndex* Error::release_stale_read_index() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_read_index)
  
  ::errorpb::StaleReadIndex* temp = stale_read_index_;
  stale_read_index_ = NULL;
  return temp;
}
void Error::set_allocated_stale_read_index(::errorpb::StaleReadIndex* stale_read_index) {
  delete stale_read_index_;
  stale_read_index_ = stale_read_index;
  if (stale_read_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_read_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace errorpb

// @@protoc_insertion_point(global_scope)
