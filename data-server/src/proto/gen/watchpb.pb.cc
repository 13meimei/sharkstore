// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "watchpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace watchpb {
class EventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event>
     _instance;
} _Event_default_instance_;
class WatchKeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WatchKeyValue>
     _instance;
} _WatchKeyValue_default_instance_;
class DsWatchRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsWatchRequest>
     _instance;
} _DsWatchRequest_default_instance_;
class WatchCreateRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WatchCreateRequest>
     _instance;
} _WatchCreateRequest_default_instance_;
class DsWatchResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsWatchResponse>
     _instance;
} _DsWatchResponse_default_instance_;
class WatchResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WatchResponse>
     _instance;
} _WatchResponse_default_instance_;
class DsKvWatchPutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchPutRequest>
     _instance;
} _DsKvWatchPutRequest_default_instance_;
class DsKvWatchPutResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchPutResponse>
     _instance;
} _DsKvWatchPutResponse_default_instance_;
class KvWatchPutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvWatchPutRequest>
     _instance;
} _KvWatchPutRequest_default_instance_;
class DsKvWatchDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchDeleteRequest>
     _instance;
} _DsKvWatchDeleteRequest_default_instance_;
class DsKvWatchDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchDeleteResponse>
     _instance;
} _DsKvWatchDeleteResponse_default_instance_;
class KvWatchDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvWatchDeleteRequest>
     _instance;
} _KvWatchDeleteRequest_default_instance_;
class KvWatchResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvWatchResponse>
     _instance;
} _KvWatchResponse_default_instance_;
class DsKvWatchGetMultiRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchGetMultiRequest>
     _instance;
} _DsKvWatchGetMultiRequest_default_instance_;
class DsKvWatchGetMultiResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvWatchGetMultiResponse>
     _instance;
} _DsKvWatchGetMultiResponse_default_instance_;

namespace protobuf_watchpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, expireat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchKeyValue, ext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, kv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, startversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, watchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, expireat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchCreateRequest, longpull_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsWatchResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, watchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WatchResponse, events_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchPutResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchPutRequest, kv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchDeleteRequest, kv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchDeleteRequest, prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvWatchResponse, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiRequest, kv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiRequest, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiRequest, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvWatchGetMultiResponse, kvs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Event)},
  { 7, -1, sizeof(WatchKeyValue)},
  { 18, -1, sizeof(DsWatchRequest)},
  { 25, -1, sizeof(WatchCreateRequest)},
  { 37, -1, sizeof(DsWatchResponse)},
  { 44, -1, sizeof(WatchResponse)},
  { 53, -1, sizeof(DsKvWatchPutRequest)},
  { 60, -1, sizeof(DsKvWatchPutResponse)},
  { 67, -1, sizeof(KvWatchPutRequest)},
  { 73, -1, sizeof(DsKvWatchDeleteRequest)},
  { 80, -1, sizeof(DsKvWatchDeleteResponse)},
  { 87, -1, sizeof(KvWatchDeleteRequest)},
  { 94, -1, sizeof(KvWatchResponse)},
  { 100, -1, sizeof(DsKvWatchGetMultiRequest)},
  { 109, -1, sizeof(DsKvWatchGetMultiResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsWatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsWatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchPutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchPutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvWatchPutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvWatchDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvWatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchGetMultiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvWatchGetMultiResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "watchpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::InitDefaults();
  _Event_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_default_instance_);_WatchKeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WatchKeyValue_default_instance_);_DsWatchRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsWatchRequest_default_instance_);_WatchCreateRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WatchCreateRequest_default_instance_);_DsWatchResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsWatchResponse_default_instance_);_WatchResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WatchResponse_default_instance_);_DsKvWatchPutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchPutRequest_default_instance_);_DsKvWatchPutResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchPutResponse_default_instance_);_KvWatchPutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvWatchPutRequest_default_instance_);_DsKvWatchDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchDeleteRequest_default_instance_);_DsKvWatchDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchDeleteResponse_default_instance_);_KvWatchDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvWatchDeleteRequest_default_instance_);_KvWatchResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvWatchResponse_default_instance_);_DsKvWatchGetMultiRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchGetMultiRequest_default_instance_);_DsKvWatchGetMultiResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvWatchGetMultiResponse_default_instance_);_Event_default_instance_._instance.get_mutable()->kv_ = const_cast< ::watchpb::WatchKeyValue*>(
      ::watchpb::WatchKeyValue::internal_default_instance());
  _DsWatchRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsWatchRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::watchpb::WatchCreateRequest*>(
      ::watchpb::WatchCreateRequest::internal_default_instance());
  _WatchCreateRequest_default_instance_._instance.get_mutable()->kv_ = const_cast< ::watchpb::WatchKeyValue*>(
      ::watchpb::WatchKeyValue::internal_default_instance());
  _DsWatchResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsWatchResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::watchpb::WatchResponse*>(
      ::watchpb::WatchResponse::internal_default_instance());
  _DsKvWatchPutRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvWatchPutRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::watchpb::KvWatchPutRequest*>(
      ::watchpb::KvWatchPutRequest::internal_default_instance());
  _DsKvWatchPutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvWatchPutResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::watchpb::KvWatchResponse*>(
      ::watchpb::KvWatchResponse::internal_default_instance());
  _KvWatchPutRequest_default_instance_._instance.get_mutable()->kv_ = const_cast< ::watchpb::WatchKeyValue*>(
      ::watchpb::WatchKeyValue::internal_default_instance());
  _DsKvWatchDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvWatchDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::watchpb::KvWatchDeleteRequest*>(
      ::watchpb::KvWatchDeleteRequest::internal_default_instance());
  _DsKvWatchDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvWatchDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::watchpb::KvWatchResponse*>(
      ::watchpb::KvWatchResponse::internal_default_instance());
  _KvWatchDeleteRequest_default_instance_._instance.get_mutable()->kv_ = const_cast< ::watchpb::WatchKeyValue*>(
      ::watchpb::WatchKeyValue::internal_default_instance());
  _DsKvWatchGetMultiRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvWatchGetMultiRequest_default_instance_._instance.get_mutable()->kv_ = const_cast< ::watchpb::WatchKeyValue*>(
      ::watchpb::WatchKeyValue::internal_default_instance());
  _DsKvWatchGetMultiResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rwatchpb.proto\022\007watchpb\032\rkvrpcpb.proto\""
      "M\n\005Event\022 \n\004type\030\001 \001(\0162\022.watchpb.EventTy"
      "pe\022\"\n\002kv\030\002 \001(\0132\026.watchpb.WatchKeyValue\"l"
      "\n\rWatchKeyValue\022\017\n\007tableId\030\001 \001(\003\022\013\n\003key\030"
      "\002 \003(\014\022\017\n\007version\030\003 \001(\003\022\r\n\005value\030\004 \001(\014\022\020\n"
      "\010expireAt\030\005 \001(\004\022\013\n\003ext\030\006 \001(\014\"b\n\016DsWatchR"
      "equest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Request"
      "Header\022(\n\003req\030\002 \001(\0132\033.watchpb.WatchCreat"
      "eRequest\"\271\001\n\022WatchCreateRequest\022\"\n\002kv\030\001 "
      "\001(\0132\026.watchpb.WatchKeyValue\022\024\n\014startVers"
      "ion\030\002 \001(\003\022$\n\007filters\030\003 \003(\0162\023.watchpb.Fil"
      "terType\022\017\n\007watchId\030\004 \001(\003\022\020\n\010expireAt\030\005 \001"
      "(\003\022\016\n\006prefix\030\006 \001(\010\022\020\n\010longPull\030\007 \001(\003\"`\n\017"
      "DsWatchResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcp"
      "b.ResponseHeader\022$\n\004resp\030\002 \001(\0132\026.watchpb"
      ".WatchResponse\"]\n\rWatchResponse\022\017\n\007watch"
      "Id\030\001 \001(\003\022\014\n\004code\030\003 \001(\005\022\r\n\005scope\030\006 \001(\005\022\036\n"
      "\006events\030\t \003(\0132\016.watchpb.Event\"f\n\023DsKvWat"
      "chPutRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.R"
      "equestHeader\022\'\n\003req\030\002 \001(\0132\032.watchpb.KvWa"
      "tchPutRequest\"g\n\024DsKvWatchPutResponse\022\'\n"
      "\006header\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022&"
      "\n\004resp\030\002 \001(\0132\030.watchpb.KvWatchResponse\"7"
      "\n\021KvWatchPutRequest\022\"\n\002kv\030\001 \001(\0132\026.watchp"
      "b.WatchKeyValue\"l\n\026DsKvWatchDeleteReques"
      "t\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeade"
      "r\022*\n\003req\030\002 \001(\0132\035.watchpb.KvWatchDeleteRe"
      "quest\"j\n\027DsKvWatchDeleteResponse\022\'\n\006head"
      "er\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022&\n\004res"
      "p\030\002 \001(\0132\030.watchpb.KvWatchResponse\"J\n\024KvW"
      "atchDeleteRequest\022\"\n\002kv\030\001 \001(\0132\026.watchpb."
      "WatchKeyValue\022\016\n\006prefix\030\002 \001(\010\"\037\n\017KvWatch"
      "Response\022\014\n\004code\030\001 \001(\005\"\205\001\n\030DsKvWatchGetM"
      "ultiRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Re"
      "questHeader\022\"\n\002kv\030\002 \001(\0132\026.watchpb.WatchK"
      "eyValue\022\016\n\006prefix\030\003 \001(\010\022\r\n\005limit\030\004 \001(\r\"w"
      "\n\031DsKvWatchGetMultiResponse\022\'\n\006header\030\001 "
      "\001(\0132\027.kvrpcpb.ResponseHeader\022\014\n\004code\030\002 \001"
      "(\005\022#\n\003kvs\030\003 \003(\0132\026.watchpb.WatchKeyValue*"
      " \n\tEventType\022\007\n\003PUT\020\000\022\n\n\006DELETE\020\001*1\n\nSco"
      "peValue\022\021\n\rRESPONSE_PART\020\000\022\020\n\014RESPONSE_A"
      "LL\020\001*%\n\nFilterType\022\t\n\005NOPUT\020\000\022\014\n\010NODELET"
      "E\020\001B#\n!com.tig.shark.common.network.grpc"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1728);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "watchpb.proto", &protobuf_RegisterTypes);
  ::kvrpcpb::protobuf_kvrpcpb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_watchpb_2eproto

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_enum_descriptors[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScopeValue_descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_enum_descriptors[1];
}
bool ScopeValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FilterType_descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_enum_descriptors[2];
}
bool FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTypeFieldNumber;
const int Event::kKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv()) {
    kv_ = new ::watchpb::WatchKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:watchpb.Event)
}

void Event::SharedCtor() {
  ::memset(&kv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&kv_)) + sizeof(type_));
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:watchpb.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete kv_;
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .watchpb.EventType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::watchpb::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.WatchKeyValue kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.EventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->kv_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.EventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->kv_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.Event)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  // .watchpb.EventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv()) {
    mutable_kv()->::watchpb::WatchKeyValue::MergeFrom(from.kv());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(kv_, other->kv_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// .watchpb.EventType type = 1;
void Event::clear_type() {
  type_ = 0;
}
::watchpb::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:watchpb.Event.type)
  return static_cast< ::watchpb::EventType >(type_);
}
void Event::set_type(::watchpb::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:watchpb.Event.type)
}

// .watchpb.WatchKeyValue kv = 2;
bool Event::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void Event::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::watchpb::WatchKeyValue& Event::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.Event.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
::watchpb::WatchKeyValue* Event::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.Event.kv)
  return kv_;
}
::watchpb::WatchKeyValue* Event::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.Event.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void Event::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.Event.kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchKeyValue::kTableIdFieldNumber;
const int WatchKeyValue::kKeyFieldNumber;
const int WatchKeyValue::kVersionFieldNumber;
const int WatchKeyValue::kValueFieldNumber;
const int WatchKeyValue::kExpireAtFieldNumber;
const int WatchKeyValue::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchKeyValue::WatchKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.WatchKeyValue)
}
WatchKeyValue::WatchKeyValue(const WatchKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_(from.key_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  ::memcpy(&tableid_, &from.tableid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expireat_) -
    reinterpret_cast<char*>(&tableid_)) + sizeof(expireat_));
  // @@protoc_insertion_point(copy_constructor:watchpb.WatchKeyValue)
}

void WatchKeyValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expireat_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(expireat_));
  _cached_size_ = 0;
}

WatchKeyValue::~WatchKeyValue() {
  // @@protoc_insertion_point(destructor:watchpb.WatchKeyValue)
  SharedDtor();
}

void WatchKeyValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WatchKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchKeyValue::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WatchKeyValue& WatchKeyValue::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchKeyValue* WatchKeyValue::New(::google::protobuf::Arena* arena) const {
  WatchKeyValue* n = new WatchKeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.WatchKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expireat_) -
      reinterpret_cast<char*>(&tableid_)) + sizeof(expireat_));
  _internal_metadata_.Clear();
}

bool WatchKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.WatchKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 tableId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 expireAt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expireat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ext = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.WatchKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.WatchKeyValue)
  return false;
#undef DO_
}

void WatchKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.WatchKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // repeated bytes key = 2;
  for (int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // int64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // uint64 expireAt = 5;
  if (this->expireat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expireat(), output);
  }

  // bytes ext = 6;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.WatchKeyValue)
}

::google::protobuf::uint8* WatchKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.WatchKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // repeated bytes key = 2;
  for (int i = 0, n = this->key_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // int64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->version(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // uint64 expireAt = 5;
  if (this->expireat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->expireat(), target);
  }

  // bytes ext = 6;
  if (this->ext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.WatchKeyValue)
  return target;
}

size_t WatchKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.WatchKeyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes key = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->key_size());
  for (int i = 0, n = this->key_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // bytes ext = 6;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ext());
  }

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tableid());
  }

  // int64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // uint64 expireAt = 5;
  if (this->expireat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->expireat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.WatchKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchKeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.WatchKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.WatchKeyValue)
    MergeFrom(*source);
  }
}

void WatchKeyValue::MergeFrom(const WatchKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.WatchKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.expireat() != 0) {
    set_expireat(from.expireat());
  }
}

void WatchKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.WatchKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchKeyValue::CopyFrom(const WatchKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.WatchKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchKeyValue::IsInitialized() const {
  return true;
}

void WatchKeyValue::Swap(WatchKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchKeyValue::InternalSwap(WatchKeyValue* other) {
  using std::swap;
  key_.InternalSwap(&other->key_);
  value_.Swap(&other->value_);
  ext_.Swap(&other->ext_);
  swap(tableid_, other->tableid_);
  swap(version_, other->version_);
  swap(expireat_, other->expireat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchKeyValue::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchKeyValue

// int64 tableId = 1;
void WatchKeyValue::clear_tableid() {
  tableid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchKeyValue::tableid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.tableId)
  return tableid_;
}
void WatchKeyValue::set_tableid(::google::protobuf::int64 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.tableId)
}

// repeated bytes key = 2;
int WatchKeyValue::key_size() const {
  return key_.size();
}
void WatchKeyValue::clear_key() {
  key_.Clear();
}
const ::std::string& WatchKeyValue::key(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.key)
  return key_.Get(index);
}
::std::string* WatchKeyValue::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.key)
  return key_.Mutable(index);
}
void WatchKeyValue::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.key)
  key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void WatchKeyValue::set_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.key)
  key_.Mutable(index)->assign(std::move(value));
}
#endif
void WatchKeyValue::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.key)
}
void WatchKeyValue::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.key)
}
::std::string* WatchKeyValue::add_key() {
  // @@protoc_insertion_point(field_add_mutable:watchpb.WatchKeyValue.key)
  return key_.Add();
}
void WatchKeyValue::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:watchpb.WatchKeyValue.key)
}
#if LANG_CXX11
void WatchKeyValue::add_key(::std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:watchpb.WatchKeyValue.key)
}
#endif
void WatchKeyValue::add_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:watchpb.WatchKeyValue.key)
}
void WatchKeyValue::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:watchpb.WatchKeyValue.key)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
WatchKeyValue::key() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchKeyValue.key)
  return key_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
WatchKeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchKeyValue.key)
  return &key_;
}

// int64 version = 3;
void WatchKeyValue::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchKeyValue::version() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.version)
  return version_;
}
void WatchKeyValue::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.version)
}

// bytes value = 4;
void WatchKeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WatchKeyValue::value() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.value)
  return value_.GetNoArena();
}
void WatchKeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.value)
}
#if LANG_CXX11
void WatchKeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:watchpb.WatchKeyValue.value)
}
#endif
void WatchKeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.value)
}
void WatchKeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.value)
}
::std::string* WatchKeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WatchKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:watchpb.WatchKeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WatchKeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchKeyValue.value)
}

// uint64 expireAt = 5;
void WatchKeyValue::clear_expireat() {
  expireat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WatchKeyValue::expireat() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.expireAt)
  return expireat_;
}
void WatchKeyValue::set_expireat(::google::protobuf::uint64 value) {
  
  expireat_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.expireAt)
}

// bytes ext = 6;
void WatchKeyValue::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WatchKeyValue::ext() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.ext)
  return ext_.GetNoArena();
}
void WatchKeyValue::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.ext)
}
#if LANG_CXX11
void WatchKeyValue::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:watchpb.WatchKeyValue.ext)
}
#endif
void WatchKeyValue::set_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.ext)
}
void WatchKeyValue::set_ext(const void* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.ext)
}
::std::string* WatchKeyValue::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WatchKeyValue::release_ext() {
  // @@protoc_insertion_point(field_release:watchpb.WatchKeyValue.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WatchKeyValue::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchKeyValue.ext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsWatchRequest::kHeaderFieldNumber;
const int DsWatchRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsWatchRequest::DsWatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsWatchRequest)
}
DsWatchRequest::DsWatchRequest(const DsWatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::watchpb::WatchCreateRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsWatchRequest)
}

void DsWatchRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsWatchRequest::~DsWatchRequest() {
  // @@protoc_insertion_point(destructor:watchpb.DsWatchRequest)
  SharedDtor();
}

void DsWatchRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsWatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsWatchRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsWatchRequest& DsWatchRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsWatchRequest* DsWatchRequest::New(::google::protobuf::Arena* arena) const {
  DsWatchRequest* n = new DsWatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsWatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsWatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsWatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsWatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.WatchCreateRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsWatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsWatchRequest)
  return false;
#undef DO_
}

void DsWatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsWatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.WatchCreateRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsWatchRequest)
}

::google::protobuf::uint8* DsWatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsWatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.WatchCreateRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsWatchRequest)
  return target;
}

size_t DsWatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsWatchRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.WatchCreateRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsWatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsWatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsWatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsWatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsWatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsWatchRequest)
    MergeFrom(*source);
  }
}

void DsWatchRequest::MergeFrom(const DsWatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsWatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::watchpb::WatchCreateRequest::MergeFrom(from.req());
  }
}

void DsWatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsWatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsWatchRequest::CopyFrom(const DsWatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsWatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsWatchRequest::IsInitialized() const {
  return true;
}

void DsWatchRequest::Swap(DsWatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsWatchRequest::InternalSwap(DsWatchRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsWatchRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsWatchRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsWatchRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsWatchRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsWatchRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsWatchRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsWatchRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsWatchRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchRequest.header)
}

// .watchpb.WatchCreateRequest req = 2;
bool DsWatchRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsWatchRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::watchpb::WatchCreateRequest& DsWatchRequest::req() const {
  const ::watchpb::WatchCreateRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchCreateRequest*>(
      &::watchpb::_WatchCreateRequest_default_instance_);
}
::watchpb::WatchCreateRequest* DsWatchRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::WatchCreateRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchRequest.req)
  return req_;
}
::watchpb::WatchCreateRequest* DsWatchRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchRequest.req)
  
  ::watchpb::WatchCreateRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsWatchRequest::set_allocated_req(::watchpb::WatchCreateRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchCreateRequest::kKvFieldNumber;
const int WatchCreateRequest::kStartVersionFieldNumber;
const int WatchCreateRequest::kFiltersFieldNumber;
const int WatchCreateRequest::kWatchIdFieldNumber;
const int WatchCreateRequest::kExpireAtFieldNumber;
const int WatchCreateRequest::kPrefixFieldNumber;
const int WatchCreateRequest::kLongPullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchCreateRequest::WatchCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.WatchCreateRequest)
}
WatchCreateRequest::WatchCreateRequest(const WatchCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv()) {
    kv_ = new ::watchpb::WatchKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  ::memcpy(&startversion_, &from.startversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefix_) -
    reinterpret_cast<char*>(&startversion_)) + sizeof(prefix_));
  // @@protoc_insertion_point(copy_constructor:watchpb.WatchCreateRequest)
}

void WatchCreateRequest::SharedCtor() {
  ::memset(&kv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_) -
      reinterpret_cast<char*>(&kv_)) + sizeof(prefix_));
  _cached_size_ = 0;
}

WatchCreateRequest::~WatchCreateRequest() {
  // @@protoc_insertion_point(destructor:watchpb.WatchCreateRequest)
  SharedDtor();
}

void WatchCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete kv_;
}

void WatchCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchCreateRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WatchCreateRequest& WatchCreateRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchCreateRequest* WatchCreateRequest::New(::google::protobuf::Arena* arena) const {
  WatchCreateRequest* n = new WatchCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.WatchCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  ::memset(&startversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_) -
      reinterpret_cast<char*>(&startversion_)) + sizeof(prefix_));
  _internal_metadata_.Clear();
}

bool WatchCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.WatchCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .watchpb.WatchKeyValue kv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 startVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .watchpb.FilterType filters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_filters(static_cast< ::watchpb::FilterType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_filters(static_cast< ::watchpb::FilterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 watchId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &watchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expireAt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expireat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prefix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 longPull = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longpull_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.WatchCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.WatchCreateRequest)
  return false;
#undef DO_
}

void WatchCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.WatchCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kv_, output);
  }

  // int64 startVersion = 2;
  if (this->startversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->startversion(), output);
  }

  // repeated .watchpb.FilterType filters = 3;
  if (this->filters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_filters_cached_byte_size_));
  }
  for (int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->filters(i), output);
  }

  // int64 watchId = 4;
  if (this->watchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->watchid(), output);
  }

  // int64 expireAt = 5;
  if (this->expireat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expireat(), output);
  }

  // bool prefix = 6;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prefix(), output);
  }

  // int64 longPull = 7;
  if (this->longpull() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->longpull(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.WatchCreateRequest)
}

::google::protobuf::uint8* WatchCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.WatchCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kv_, deterministic, target);
  }

  // int64 startVersion = 2;
  if (this->startversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->startversion(), target);
  }

  // repeated .watchpb.FilterType filters = 3;
  if (this->filters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _filters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->filters_, target);
  }

  // int64 watchId = 4;
  if (this->watchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->watchid(), target);
  }

  // int64 expireAt = 5;
  if (this->expireat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expireat(), target);
  }

  // bool prefix = 6;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prefix(), target);
  }

  // int64 longPull = 7;
  if (this->longpull() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->longpull(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.WatchCreateRequest)
  return target;
}

size_t WatchCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.WatchCreateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .watchpb.FilterType filters = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->filters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->filters(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _filters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  // int64 startVersion = 2;
  if (this->startversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->startversion());
  }

  // int64 watchId = 4;
  if (this->watchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->watchid());
  }

  // int64 expireAt = 5;
  if (this->expireat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expireat());
  }

  // int64 longPull = 7;
  if (this->longpull() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->longpull());
  }

  // bool prefix = 6;
  if (this->prefix() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.WatchCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.WatchCreateRequest)
    MergeFrom(*source);
  }
}

void WatchCreateRequest::MergeFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.has_kv()) {
    mutable_kv()->::watchpb::WatchKeyValue::MergeFrom(from.kv());
  }
  if (from.startversion() != 0) {
    set_startversion(from.startversion());
  }
  if (from.watchid() != 0) {
    set_watchid(from.watchid());
  }
  if (from.expireat() != 0) {
    set_expireat(from.expireat());
  }
  if (from.longpull() != 0) {
    set_longpull(from.longpull());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
}

void WatchCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchCreateRequest::CopyFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCreateRequest::IsInitialized() const {
  return true;
}

void WatchCreateRequest::Swap(WatchCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchCreateRequest::InternalSwap(WatchCreateRequest* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  swap(kv_, other->kv_);
  swap(startversion_, other->startversion_);
  swap(watchid_, other->watchid_);
  swap(expireat_, other->expireat_);
  swap(longpull_, other->longpull_);
  swap(prefix_, other->prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchCreateRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchCreateRequest

// .watchpb.WatchKeyValue kv = 1;
bool WatchCreateRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void WatchCreateRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::watchpb::WatchKeyValue& WatchCreateRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
::watchpb::WatchKeyValue* WatchCreateRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.WatchCreateRequest.kv)
  return kv_;
}
::watchpb::WatchKeyValue* WatchCreateRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.WatchCreateRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void WatchCreateRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchCreateRequest.kv)
}

// int64 startVersion = 2;
void WatchCreateRequest::clear_startversion() {
  startversion_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCreateRequest::startversion() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.startVersion)
  return startversion_;
}
void WatchCreateRequest::set_startversion(::google::protobuf::int64 value) {
  
  startversion_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.startVersion)
}

// repeated .watchpb.FilterType filters = 3;
int WatchCreateRequest::filters_size() const {
  return filters_.size();
}
void WatchCreateRequest::clear_filters() {
  filters_.Clear();
}
::watchpb::FilterType WatchCreateRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.filters)
  return static_cast< ::watchpb::FilterType >(filters_.Get(index));
}
void WatchCreateRequest::set_filters(int index, ::watchpb::FilterType value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.filters)
}
void WatchCreateRequest::add_filters(::watchpb::FilterType value) {
  filters_.Add(value);
  // @@protoc_insertion_point(field_add:watchpb.WatchCreateRequest.filters)
}
const ::google::protobuf::RepeatedField<int>&
WatchCreateRequest::filters() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchCreateRequest.filters)
  return filters_;
}
::google::protobuf::RepeatedField<int>*
WatchCreateRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchCreateRequest.filters)
  return &filters_;
}

// int64 watchId = 4;
void WatchCreateRequest::clear_watchid() {
  watchid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCreateRequest::watchid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.watchId)
  return watchid_;
}
void WatchCreateRequest::set_watchid(::google::protobuf::int64 value) {
  
  watchid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.watchId)
}

// int64 expireAt = 5;
void WatchCreateRequest::clear_expireat() {
  expireat_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCreateRequest::expireat() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.expireAt)
  return expireat_;
}
void WatchCreateRequest::set_expireat(::google::protobuf::int64 value) {
  
  expireat_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.expireAt)
}

// bool prefix = 6;
void WatchCreateRequest::clear_prefix() {
  prefix_ = false;
}
bool WatchCreateRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.prefix)
  return prefix_;
}
void WatchCreateRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.prefix)
}

// int64 longPull = 7;
void WatchCreateRequest::clear_longpull() {
  longpull_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchCreateRequest::longpull() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.longPull)
  return longpull_;
}
void WatchCreateRequest::set_longpull(::google::protobuf::int64 value) {
  
  longpull_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.longPull)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsWatchResponse::kHeaderFieldNumber;
const int DsWatchResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsWatchResponse::DsWatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsWatchResponse)
}
DsWatchResponse::DsWatchResponse(const DsWatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::watchpb::WatchResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsWatchResponse)
}

void DsWatchResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsWatchResponse::~DsWatchResponse() {
  // @@protoc_insertion_point(destructor:watchpb.DsWatchResponse)
  SharedDtor();
}

void DsWatchResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsWatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsWatchResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsWatchResponse& DsWatchResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsWatchResponse* DsWatchResponse::New(::google::protobuf::Arena* arena) const {
  DsWatchResponse* n = new DsWatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsWatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsWatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsWatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.WatchResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsWatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsWatchResponse)
  return false;
#undef DO_
}

void DsWatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.WatchResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsWatchResponse)
}

::google::protobuf::uint8* DsWatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.WatchResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsWatchResponse)
  return target;
}

size_t DsWatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsWatchResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.WatchResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsWatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsWatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsWatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsWatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsWatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsWatchResponse)
    MergeFrom(*source);
  }
}

void DsWatchResponse::MergeFrom(const DsWatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsWatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::watchpb::WatchResponse::MergeFrom(from.resp());
  }
}

void DsWatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsWatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsWatchResponse::CopyFrom(const DsWatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsWatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsWatchResponse::IsInitialized() const {
  return true;
}

void DsWatchResponse::Swap(DsWatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsWatchResponse::InternalSwap(DsWatchResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsWatchResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsWatchResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsWatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsWatchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsWatchResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsWatchResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsWatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsWatchResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchResponse.header)
}

// .watchpb.WatchResponse resp = 2;
bool DsWatchResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsWatchResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::watchpb::WatchResponse& DsWatchResponse::resp() const {
  const ::watchpb::WatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchResponse*>(
      &::watchpb::_WatchResponse_default_instance_);
}
::watchpb::WatchResponse* DsWatchResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::WatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchResponse.resp)
  return resp_;
}
::watchpb::WatchResponse* DsWatchResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchResponse.resp)
  
  ::watchpb::WatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsWatchResponse::set_allocated_resp(::watchpb::WatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WatchResponse::kWatchIdFieldNumber;
const int WatchResponse::kCodeFieldNumber;
const int WatchResponse::kScopeFieldNumber;
const int WatchResponse::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WatchResponse::WatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.WatchResponse)
}
WatchResponse::WatchResponse(const WatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&watchid_, &from.watchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&watchid_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:watchpb.WatchResponse)
}

void WatchResponse::SharedCtor() {
  ::memset(&watchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scope_) -
      reinterpret_cast<char*>(&watchid_)) + sizeof(scope_));
  _cached_size_ = 0;
}

WatchResponse::~WatchResponse() {
  // @@protoc_insertion_point(destructor:watchpb.WatchResponse)
  SharedDtor();
}

void WatchResponse::SharedDtor() {
}

void WatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WatchResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WatchResponse& WatchResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

WatchResponse* WatchResponse::New(::google::protobuf::Arena* arena) const {
  WatchResponse* n = new WatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.WatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  ::memset(&watchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scope_) -
      reinterpret_cast<char*>(&watchid_)) + sizeof(scope_));
  _internal_metadata_.Clear();
}

bool WatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.WatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 watchId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &watchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scope = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .watchpb.Event events = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.WatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.WatchResponse)
  return false;
#undef DO_
}

void WatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.WatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 watchId = 1;
  if (this->watchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->watchid(), output);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // int32 scope = 6;
  if (this->scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scope(), output);
  }

  // repeated .watchpb.Event events = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->events(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.WatchResponse)
}

::google::protobuf::uint8* WatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.WatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 watchId = 1;
  if (this->watchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->watchid(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  // int32 scope = 6;
  if (this->scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scope(), target);
  }

  // repeated .watchpb.Event events = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->events(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.WatchResponse)
  return target;
}

size_t WatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.WatchResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .watchpb.Event events = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  // int64 watchId = 1;
  if (this->watchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->watchid());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // int32 scope = 6;
  if (this->scope() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scope());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.WatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.WatchResponse)
    MergeFrom(*source);
  }
}

void WatchResponse::MergeFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.watchid() != 0) {
    set_watchid(from.watchid());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.scope() != 0) {
    set_scope(from.scope());
  }
}

void WatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchResponse::CopyFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchResponse::IsInitialized() const {
  return true;
}

void WatchResponse::Swap(WatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WatchResponse::InternalSwap(WatchResponse* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(watchid_, other->watchid_);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WatchResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WatchResponse

// int64 watchId = 1;
void WatchResponse::clear_watchid() {
  watchid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WatchResponse::watchid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.watchId)
  return watchid_;
}
void WatchResponse::set_watchid(::google::protobuf::int64 value) {
  
  watchid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.watchId)
}

// int32 code = 3;
void WatchResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 WatchResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.code)
  return code_;
}
void WatchResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.code)
}

// int32 scope = 6;
void WatchResponse::clear_scope() {
  scope_ = 0;
}
::google::protobuf::int32 WatchResponse::scope() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.scope)
  return scope_;
}
void WatchResponse::set_scope(::google::protobuf::int32 value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.scope)
}

// repeated .watchpb.Event events = 9;
int WatchResponse::events_size() const {
  return events_.size();
}
void WatchResponse::clear_events() {
  events_.Clear();
}
const ::watchpb::Event& WatchResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.events)
  return events_.Get(index);
}
::watchpb::Event* WatchResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.WatchResponse.events)
  return events_.Mutable(index);
}
::watchpb::Event* WatchResponse::add_events() {
  // @@protoc_insertion_point(field_add:watchpb.WatchResponse.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::watchpb::Event >*
WatchResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchResponse.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::watchpb::Event >&
WatchResponse::events() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchResponse.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchPutRequest::kHeaderFieldNumber;
const int DsKvWatchPutRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchPutRequest::DsKvWatchPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchPutRequest)
}
DsKvWatchPutRequest::DsKvWatchPutRequest(const DsKvWatchPutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::watchpb::KvWatchPutRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchPutRequest)
}

void DsKvWatchPutRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvWatchPutRequest::~DsKvWatchPutRequest() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchPutRequest)
  SharedDtor();
}

void DsKvWatchPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvWatchPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchPutRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchPutRequest& DsKvWatchPutRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchPutRequest* DsKvWatchPutRequest::New(::google::protobuf::Arena* arena) const {
  DsKvWatchPutRequest* n = new DsKvWatchPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvWatchPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchPutRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchPutRequest)
  return false;
#undef DO_
}

void DsKvWatchPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.KvWatchPutRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchPutRequest)
}

::google::protobuf::uint8* DsKvWatchPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.KvWatchPutRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchPutRequest)
  return target;
}

size_t DsKvWatchPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchPutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.KvWatchPutRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchPutRequest)
    MergeFrom(*source);
  }
}

void DsKvWatchPutRequest::MergeFrom(const DsKvWatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::watchpb::KvWatchPutRequest::MergeFrom(from.req());
  }
}

void DsKvWatchPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchPutRequest::CopyFrom(const DsKvWatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchPutRequest::IsInitialized() const {
  return true;
}

void DsKvWatchPutRequest::Swap(DsKvWatchPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchPutRequest::InternalSwap(DsKvWatchPutRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchPutRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchPutRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvWatchPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvWatchPutRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvWatchPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvWatchPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchPutRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutRequest.header)
}

// .watchpb.KvWatchPutRequest req = 2;
bool DsKvWatchPutRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvWatchPutRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::watchpb::KvWatchPutRequest& DsKvWatchPutRequest::req() const {
  const ::watchpb::KvWatchPutRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchPutRequest*>(
      &::watchpb::_KvWatchPutRequest_default_instance_);
}
::watchpb::KvWatchPutRequest* DsKvWatchPutRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::KvWatchPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutRequest.req)
  return req_;
}
::watchpb::KvWatchPutRequest* DsKvWatchPutRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutRequest.req)
  
  ::watchpb::KvWatchPutRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvWatchPutRequest::set_allocated_req(::watchpb::KvWatchPutRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchPutResponse::kHeaderFieldNumber;
const int DsKvWatchPutResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchPutResponse::DsKvWatchPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchPutResponse)
}
DsKvWatchPutResponse::DsKvWatchPutResponse(const DsKvWatchPutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::watchpb::KvWatchResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchPutResponse)
}

void DsKvWatchPutResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvWatchPutResponse::~DsKvWatchPutResponse() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchPutResponse)
  SharedDtor();
}

void DsKvWatchPutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvWatchPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchPutResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchPutResponse& DsKvWatchPutResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchPutResponse* DsKvWatchPutResponse::New(::google::protobuf::Arena* arena) const {
  DsKvWatchPutResponse* n = new DsKvWatchPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvWatchPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchPutResponse)
  return false;
#undef DO_
}

void DsKvWatchPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchPutResponse)
}

::google::protobuf::uint8* DsKvWatchPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchPutResponse)
  return target;
}

size_t DsKvWatchPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchPutResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchPutResponse)
    MergeFrom(*source);
  }
}

void DsKvWatchPutResponse::MergeFrom(const DsKvWatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::watchpb::KvWatchResponse::MergeFrom(from.resp());
  }
}

void DsKvWatchPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchPutResponse::CopyFrom(const DsKvWatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchPutResponse::IsInitialized() const {
  return true;
}

void DsKvWatchPutResponse::Swap(DsKvWatchPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchPutResponse::InternalSwap(DsKvWatchPutResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchPutResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchPutResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvWatchPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvWatchPutResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvWatchPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvWatchPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchPutResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutResponse.header)
}

// .watchpb.KvWatchResponse resp = 2;
bool DsKvWatchPutResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvWatchPutResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::watchpb::KvWatchResponse& DsKvWatchPutResponse::resp() const {
  const ::watchpb::KvWatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchResponse*>(
      &::watchpb::_KvWatchResponse_default_instance_);
}
::watchpb::KvWatchResponse* DsKvWatchPutResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::KvWatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutResponse.resp)
  return resp_;
}
::watchpb::KvWatchResponse* DsKvWatchPutResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutResponse.resp)
  
  ::watchpb::KvWatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvWatchPutResponse::set_allocated_resp(::watchpb::KvWatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvWatchPutRequest::kKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvWatchPutRequest::KvWatchPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.KvWatchPutRequest)
}
KvWatchPutRequest::KvWatchPutRequest(const KvWatchPutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv()) {
    kv_ = new ::watchpb::WatchKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.KvWatchPutRequest)
}

void KvWatchPutRequest::SharedCtor() {
  kv_ = NULL;
  _cached_size_ = 0;
}

KvWatchPutRequest::~KvWatchPutRequest() {
  // @@protoc_insertion_point(destructor:watchpb.KvWatchPutRequest)
  SharedDtor();
}

void KvWatchPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete kv_;
}

void KvWatchPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvWatchPutRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvWatchPutRequest& KvWatchPutRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvWatchPutRequest* KvWatchPutRequest::New(::google::protobuf::Arena* arena) const {
  KvWatchPutRequest* n = new KvWatchPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvWatchPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.KvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  _internal_metadata_.Clear();
}

bool KvWatchPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.KvWatchPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .watchpb.WatchKeyValue kv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.KvWatchPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.KvWatchPutRequest)
  return false;
#undef DO_
}

void KvWatchPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.KvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kv_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.KvWatchPutRequest)
}

::google::protobuf::uint8* KvWatchPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.KvWatchPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kv_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.KvWatchPutRequest)
  return target;
}

size_t KvWatchPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.KvWatchPutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvWatchPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.KvWatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvWatchPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvWatchPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.KvWatchPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.KvWatchPutRequest)
    MergeFrom(*source);
  }
}

void KvWatchPutRequest::MergeFrom(const KvWatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.KvWatchPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv()) {
    mutable_kv()->::watchpb::WatchKeyValue::MergeFrom(from.kv());
  }
}

void KvWatchPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.KvWatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvWatchPutRequest::CopyFrom(const KvWatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.KvWatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvWatchPutRequest::IsInitialized() const {
  return true;
}

void KvWatchPutRequest::Swap(KvWatchPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvWatchPutRequest::InternalSwap(KvWatchPutRequest* other) {
  using std::swap;
  swap(kv_, other->kv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvWatchPutRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvWatchPutRequest

// .watchpb.WatchKeyValue kv = 1;
bool KvWatchPutRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void KvWatchPutRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::watchpb::WatchKeyValue& KvWatchPutRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.KvWatchPutRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
::watchpb::WatchKeyValue* KvWatchPutRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.KvWatchPutRequest.kv)
  return kv_;
}
::watchpb::WatchKeyValue* KvWatchPutRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.KvWatchPutRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void KvWatchPutRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.KvWatchPutRequest.kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchDeleteRequest::kHeaderFieldNumber;
const int DsKvWatchDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchDeleteRequest::DsKvWatchDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchDeleteRequest)
}
DsKvWatchDeleteRequest::DsKvWatchDeleteRequest(const DsKvWatchDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::watchpb::KvWatchDeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchDeleteRequest)
}

void DsKvWatchDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvWatchDeleteRequest::~DsKvWatchDeleteRequest() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchDeleteRequest)
  SharedDtor();
}

void DsKvWatchDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvWatchDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchDeleteRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchDeleteRequest& DsKvWatchDeleteRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchDeleteRequest* DsKvWatchDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvWatchDeleteRequest* n = new DsKvWatchDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvWatchDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchDeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchDeleteRequest)
  return false;
#undef DO_
}

void DsKvWatchDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.KvWatchDeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchDeleteRequest)
}

::google::protobuf::uint8* DsKvWatchDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.KvWatchDeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchDeleteRequest)
  return target;
}

size_t DsKvWatchDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.KvWatchDeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchDeleteRequest)
    MergeFrom(*source);
  }
}

void DsKvWatchDeleteRequest::MergeFrom(const DsKvWatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::watchpb::KvWatchDeleteRequest::MergeFrom(from.req());
  }
}

void DsKvWatchDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchDeleteRequest::CopyFrom(const DsKvWatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchDeleteRequest::IsInitialized() const {
  return true;
}

void DsKvWatchDeleteRequest::Swap(DsKvWatchDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchDeleteRequest::InternalSwap(DsKvWatchDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchDeleteRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvWatchDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvWatchDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvWatchDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvWatchDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteRequest.header)
}

// .watchpb.KvWatchDeleteRequest req = 2;
bool DsKvWatchDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvWatchDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::watchpb::KvWatchDeleteRequest& DsKvWatchDeleteRequest::req() const {
  const ::watchpb::KvWatchDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchDeleteRequest*>(
      &::watchpb::_KvWatchDeleteRequest_default_instance_);
}
::watchpb::KvWatchDeleteRequest* DsKvWatchDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::KvWatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteRequest.req)
  return req_;
}
::watchpb::KvWatchDeleteRequest* DsKvWatchDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteRequest.req)
  
  ::watchpb::KvWatchDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvWatchDeleteRequest::set_allocated_req(::watchpb::KvWatchDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchDeleteResponse::kHeaderFieldNumber;
const int DsKvWatchDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchDeleteResponse::DsKvWatchDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchDeleteResponse)
}
DsKvWatchDeleteResponse::DsKvWatchDeleteResponse(const DsKvWatchDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::watchpb::KvWatchResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchDeleteResponse)
}

void DsKvWatchDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvWatchDeleteResponse::~DsKvWatchDeleteResponse() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchDeleteResponse)
  SharedDtor();
}

void DsKvWatchDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvWatchDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchDeleteResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchDeleteResponse& DsKvWatchDeleteResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchDeleteResponse* DsKvWatchDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvWatchDeleteResponse* n = new DsKvWatchDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvWatchDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.KvWatchResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchDeleteResponse)
  return false;
#undef DO_
}

void DsKvWatchDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchDeleteResponse)
}

::google::protobuf::uint8* DsKvWatchDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchDeleteResponse)
  return target;
}

size_t DsKvWatchDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.KvWatchResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchDeleteResponse)
    MergeFrom(*source);
  }
}

void DsKvWatchDeleteResponse::MergeFrom(const DsKvWatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::watchpb::KvWatchResponse::MergeFrom(from.resp());
  }
}

void DsKvWatchDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchDeleteResponse::CopyFrom(const DsKvWatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchDeleteResponse::IsInitialized() const {
  return true;
}

void DsKvWatchDeleteResponse::Swap(DsKvWatchDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchDeleteResponse::InternalSwap(DsKvWatchDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchDeleteResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvWatchDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvWatchDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvWatchDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvWatchDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteResponse.header)
}

// .watchpb.KvWatchResponse resp = 2;
bool DsKvWatchDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvWatchDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::watchpb::KvWatchResponse& DsKvWatchDeleteResponse::resp() const {
  const ::watchpb::KvWatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchResponse*>(
      &::watchpb::_KvWatchResponse_default_instance_);
}
::watchpb::KvWatchResponse* DsKvWatchDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::KvWatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteResponse.resp)
  return resp_;
}
::watchpb::KvWatchResponse* DsKvWatchDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteResponse.resp)
  
  ::watchpb::KvWatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvWatchDeleteResponse::set_allocated_resp(::watchpb::KvWatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvWatchDeleteRequest::kKvFieldNumber;
const int KvWatchDeleteRequest::kPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvWatchDeleteRequest::KvWatchDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.KvWatchDeleteRequest)
}
KvWatchDeleteRequest::KvWatchDeleteRequest(const KvWatchDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv()) {
    kv_ = new ::watchpb::WatchKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  prefix_ = from.prefix_;
  // @@protoc_insertion_point(copy_constructor:watchpb.KvWatchDeleteRequest)
}

void KvWatchDeleteRequest::SharedCtor() {
  ::memset(&kv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_) -
      reinterpret_cast<char*>(&kv_)) + sizeof(prefix_));
  _cached_size_ = 0;
}

KvWatchDeleteRequest::~KvWatchDeleteRequest() {
  // @@protoc_insertion_point(destructor:watchpb.KvWatchDeleteRequest)
  SharedDtor();
}

void KvWatchDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete kv_;
}

void KvWatchDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvWatchDeleteRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvWatchDeleteRequest& KvWatchDeleteRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvWatchDeleteRequest* KvWatchDeleteRequest::New(::google::protobuf::Arena* arena) const {
  KvWatchDeleteRequest* n = new KvWatchDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvWatchDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.KvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  prefix_ = false;
  _internal_metadata_.Clear();
}

bool KvWatchDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.KvWatchDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .watchpb.WatchKeyValue kv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.KvWatchDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.KvWatchDeleteRequest)
  return false;
#undef DO_
}

void KvWatchDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.KvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kv_, output);
  }

  // bool prefix = 2;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prefix(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.KvWatchDeleteRequest)
}

::google::protobuf::uint8* KvWatchDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.KvWatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kv_, deterministic, target);
  }

  // bool prefix = 2;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prefix(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.KvWatchDeleteRequest)
  return target;
}

size_t KvWatchDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.KvWatchDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .watchpb.WatchKeyValue kv = 1;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  // bool prefix = 2;
  if (this->prefix() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvWatchDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.KvWatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvWatchDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvWatchDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.KvWatchDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.KvWatchDeleteRequest)
    MergeFrom(*source);
  }
}

void KvWatchDeleteRequest::MergeFrom(const KvWatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.KvWatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv()) {
    mutable_kv()->::watchpb::WatchKeyValue::MergeFrom(from.kv());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
}

void KvWatchDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.KvWatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvWatchDeleteRequest::CopyFrom(const KvWatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.KvWatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvWatchDeleteRequest::IsInitialized() const {
  return true;
}

void KvWatchDeleteRequest::Swap(KvWatchDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvWatchDeleteRequest::InternalSwap(KvWatchDeleteRequest* other) {
  using std::swap;
  swap(kv_, other->kv_);
  swap(prefix_, other->prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvWatchDeleteRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvWatchDeleteRequest

// .watchpb.WatchKeyValue kv = 1;
bool KvWatchDeleteRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void KvWatchDeleteRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::watchpb::WatchKeyValue& KvWatchDeleteRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.KvWatchDeleteRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
::watchpb::WatchKeyValue* KvWatchDeleteRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.KvWatchDeleteRequest.kv)
  return kv_;
}
::watchpb::WatchKeyValue* KvWatchDeleteRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.KvWatchDeleteRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void KvWatchDeleteRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.KvWatchDeleteRequest.kv)
}

// bool prefix = 2;
void KvWatchDeleteRequest::clear_prefix() {
  prefix_ = false;
}
bool KvWatchDeleteRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.KvWatchDeleteRequest.prefix)
  return prefix_;
}
void KvWatchDeleteRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.KvWatchDeleteRequest.prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvWatchResponse::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvWatchResponse::KvWatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.KvWatchResponse)
}
KvWatchResponse::KvWatchResponse(const KvWatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:watchpb.KvWatchResponse)
}

void KvWatchResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvWatchResponse::~KvWatchResponse() {
  // @@protoc_insertion_point(destructor:watchpb.KvWatchResponse)
  SharedDtor();
}

void KvWatchResponse::SharedDtor() {
}

void KvWatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvWatchResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvWatchResponse& KvWatchResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvWatchResponse* KvWatchResponse::New(::google::protobuf::Arena* arena) const {
  KvWatchResponse* n = new KvWatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvWatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.KvWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvWatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.KvWatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.KvWatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.KvWatchResponse)
  return false;
#undef DO_
}

void KvWatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.KvWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.KvWatchResponse)
}

::google::protobuf::uint8* KvWatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.KvWatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.KvWatchResponse)
  return target;
}

size_t KvWatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.KvWatchResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvWatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.KvWatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvWatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvWatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.KvWatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.KvWatchResponse)
    MergeFrom(*source);
  }
}

void KvWatchResponse::MergeFrom(const KvWatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.KvWatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvWatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.KvWatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvWatchResponse::CopyFrom(const KvWatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.KvWatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvWatchResponse::IsInitialized() const {
  return true;
}

void KvWatchResponse::Swap(KvWatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvWatchResponse::InternalSwap(KvWatchResponse* other) {
  using std::swap;
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvWatchResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvWatchResponse

// int32 code = 1;
void KvWatchResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvWatchResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.KvWatchResponse.code)
  return code_;
}
void KvWatchResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.KvWatchResponse.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchGetMultiRequest::kHeaderFieldNumber;
const int DsKvWatchGetMultiRequest::kKvFieldNumber;
const int DsKvWatchGetMultiRequest::kPrefixFieldNumber;
const int DsKvWatchGetMultiRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchGetMultiRequest::DsKvWatchGetMultiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchGetMultiRequest)
}
DsKvWatchGetMultiRequest::DsKvWatchGetMultiRequest(const DsKvWatchGetMultiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_kv()) {
    kv_ = new ::watchpb::WatchKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  ::memcpy(&prefix_, &from.prefix_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchGetMultiRequest)
}

void DsKvWatchGetMultiRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(limit_));
  _cached_size_ = 0;
}

DsKvWatchGetMultiRequest::~DsKvWatchGetMultiRequest() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchGetMultiRequest)
  SharedDtor();
}

void DsKvWatchGetMultiRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete kv_;
}

void DsKvWatchGetMultiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchGetMultiRequest::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchGetMultiRequest& DsKvWatchGetMultiRequest::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchGetMultiRequest* DsKvWatchGetMultiRequest::New(::google::protobuf::Arena* arena) const {
  DsKvWatchGetMultiRequest* n = new DsKvWatchGetMultiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchGetMultiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchGetMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  ::memset(&prefix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&prefix_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

bool DsKvWatchGetMultiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchGetMultiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .watchpb.WatchKeyValue kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchGetMultiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchGetMultiRequest)
  return false;
#undef DO_
}

void DsKvWatchGetMultiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchGetMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->kv_, output);
  }

  // bool prefix = 3;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prefix(), output);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchGetMultiRequest)
}

::google::protobuf::uint8* DsKvWatchGetMultiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchGetMultiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->kv_, deterministic, target);
  }

  // bool prefix = 3;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prefix(), target);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchGetMultiRequest)
  return target;
}

size_t DsKvWatchGetMultiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchGetMultiRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .watchpb.WatchKeyValue kv = 2;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  // bool prefix = 3;
  if (this->prefix() != 0) {
    total_size += 1 + 1;
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchGetMultiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchGetMultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchGetMultiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchGetMultiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchGetMultiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchGetMultiRequest)
    MergeFrom(*source);
  }
}

void DsKvWatchGetMultiRequest::MergeFrom(const DsKvWatchGetMultiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchGetMultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_kv()) {
    mutable_kv()->::watchpb::WatchKeyValue::MergeFrom(from.kv());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void DsKvWatchGetMultiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchGetMultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchGetMultiRequest::CopyFrom(const DsKvWatchGetMultiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchGetMultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchGetMultiRequest::IsInitialized() const {
  return true;
}

void DsKvWatchGetMultiRequest::Swap(DsKvWatchGetMultiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchGetMultiRequest::InternalSwap(DsKvWatchGetMultiRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(kv_, other->kv_);
  swap(prefix_, other->prefix_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchGetMultiRequest::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchGetMultiRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvWatchGetMultiRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchGetMultiRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvWatchGetMultiRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvWatchGetMultiRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvWatchGetMultiRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchGetMultiRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiRequest.header)
}

// .watchpb.WatchKeyValue kv = 2;
bool DsKvWatchGetMultiRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void DsKvWatchGetMultiRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::watchpb::WatchKeyValue& DsKvWatchGetMultiRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
::watchpb::WatchKeyValue* DsKvWatchGetMultiRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiRequest.kv)
  return kv_;
}
::watchpb::WatchKeyValue* DsKvWatchGetMultiRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void DsKvWatchGetMultiRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiRequest.kv)
}

// bool prefix = 3;
void DsKvWatchGetMultiRequest::clear_prefix() {
  prefix_ = false;
}
bool DsKvWatchGetMultiRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.prefix)
  return prefix_;
}
void DsKvWatchGetMultiRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiRequest.prefix)
}

// uint32 limit = 4;
void DsKvWatchGetMultiRequest::clear_limit() {
  limit_ = 0u;
}
::google::protobuf::uint32 DsKvWatchGetMultiRequest::limit() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.limit)
  return limit_;
}
void DsKvWatchGetMultiRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvWatchGetMultiResponse::kHeaderFieldNumber;
const int DsKvWatchGetMultiResponse::kCodeFieldNumber;
const int DsKvWatchGetMultiResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvWatchGetMultiResponse::DsKvWatchGetMultiResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_watchpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:watchpb.DsKvWatchGetMultiResponse)
}
DsKvWatchGetMultiResponse::DsKvWatchGetMultiResponse(const DsKvWatchGetMultiResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:watchpb.DsKvWatchGetMultiResponse)
}

void DsKvWatchGetMultiResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(code_));
  _cached_size_ = 0;
}

DsKvWatchGetMultiResponse::~DsKvWatchGetMultiResponse() {
  // @@protoc_insertion_point(destructor:watchpb.DsKvWatchGetMultiResponse)
  SharedDtor();
}

void DsKvWatchGetMultiResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DsKvWatchGetMultiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvWatchGetMultiResponse::descriptor() {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvWatchGetMultiResponse& DsKvWatchGetMultiResponse::default_instance() {
  protobuf_watchpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvWatchGetMultiResponse* DsKvWatchGetMultiResponse::New(::google::protobuf::Arena* arena) const {
  DsKvWatchGetMultiResponse* n = new DsKvWatchGetMultiResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvWatchGetMultiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:watchpb.DsKvWatchGetMultiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  code_ = 0;
  _internal_metadata_.Clear();
}

bool DsKvWatchGetMultiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:watchpb.DsKvWatchGetMultiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .watchpb.WatchKeyValue kvs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:watchpb.DsKvWatchGetMultiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:watchpb.DsKvWatchGetMultiResponse)
  return false;
#undef DO_
}

void DsKvWatchGetMultiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:watchpb.DsKvWatchGetMultiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // repeated .watchpb.WatchKeyValue kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kvs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:watchpb.DsKvWatchGetMultiResponse)
}

::google::protobuf::uint8* DsKvWatchGetMultiResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:watchpb.DsKvWatchGetMultiResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // repeated .watchpb.WatchKeyValue kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->kvs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:watchpb.DsKvWatchGetMultiResponse)
  return target;
}

size_t DsKvWatchGetMultiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:watchpb.DsKvWatchGetMultiResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .watchpb.WatchKeyValue kvs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(static_cast<int>(i)));
    }
  }

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvWatchGetMultiResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:watchpb.DsKvWatchGetMultiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvWatchGetMultiResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvWatchGetMultiResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:watchpb.DsKvWatchGetMultiResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:watchpb.DsKvWatchGetMultiResponse)
    MergeFrom(*source);
  }
}

void DsKvWatchGetMultiResponse::MergeFrom(const DsKvWatchGetMultiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:watchpb.DsKvWatchGetMultiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void DsKvWatchGetMultiResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:watchpb.DsKvWatchGetMultiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvWatchGetMultiResponse::CopyFrom(const DsKvWatchGetMultiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:watchpb.DsKvWatchGetMultiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvWatchGetMultiResponse::IsInitialized() const {
  return true;
}

void DsKvWatchGetMultiResponse::Swap(DsKvWatchGetMultiResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvWatchGetMultiResponse::InternalSwap(DsKvWatchGetMultiResponse* other) {
  using std::swap;
  kvs_.InternalSwap(&other->kvs_);
  swap(header_, other->header_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvWatchGetMultiResponse::GetMetadata() const {
  protobuf_watchpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_watchpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvWatchGetMultiResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvWatchGetMultiResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvWatchGetMultiResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvWatchGetMultiResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvWatchGetMultiResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvWatchGetMultiResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvWatchGetMultiResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiResponse.header)
}

// int32 code = 2;
void DsKvWatchGetMultiResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 DsKvWatchGetMultiResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.code)
  return code_;
}
void DsKvWatchGetMultiResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiResponse.code)
}

// repeated .watchpb.WatchKeyValue kvs = 3;
int DsKvWatchGetMultiResponse::kvs_size() const {
  return kvs_.size();
}
void DsKvWatchGetMultiResponse::clear_kvs() {
  kvs_.Clear();
}
const ::watchpb::WatchKeyValue& DsKvWatchGetMultiResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Get(index);
}
::watchpb::WatchKeyValue* DsKvWatchGetMultiResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Mutable(index);
}
::watchpb::WatchKeyValue* DsKvWatchGetMultiResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >*
DsKvWatchGetMultiResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.DsKvWatchGetMultiResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >&
DsKvWatchGetMultiResponse::kvs() const {
  // @@protoc_insertion_point(field_list:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace watchpb

// @@protoc_insertion_point(global_scope)
