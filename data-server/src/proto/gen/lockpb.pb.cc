// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lockpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lockpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lockrpcpb {
class LockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockRequest>
     _instance;
} _LockRequest_default_instance_;
class UnLockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnLockRequest>
     _instance;
} _UnLockRequest_default_instance_;
class ForceUnLockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ForceUnLockRequest>
     _instance;
} _ForceUnLockRequest_default_instance_;
class LockHeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockHeartbeatRequest>
     _instance;
} _LockHeartbeatRequest_default_instance_;
class UpdateConditionRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpdateConditionRequest>
     _instance;
} _UpdateConditionRequest_default_instance_;
class DLockResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DLockResponse>
     _instance;
} _DLockResponse_default_instance_;

namespace protobuf_lockpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, lock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, lock_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, lock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockRequest, lock_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUnLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUnLockRequest, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUnLockRequest, lock_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockHeartbeatRequest, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockHeartbeatRequest, lock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockHeartbeatRequest, lock_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConditionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConditionRequest, namespace__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConditionRequest, lock_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConditionRequest, conditions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLockResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLockResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLockResponse, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLockResponse, update_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LockRequest)},
  { 10, -1, sizeof(UnLockRequest)},
  { 18, -1, sizeof(ForceUnLockRequest)},
  { 25, -1, sizeof(LockHeartbeatRequest)},
  { 33, -1, sizeof(UpdateConditionRequest)},
  { 41, -1, sizeof(DLockResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnLockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForceUnLockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateConditionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DLockResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lockpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockRequest_default_instance_);_UnLockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnLockRequest_default_instance_);_ForceUnLockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ForceUnLockRequest_default_instance_);_LockHeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockHeartbeatRequest_default_instance_);_UpdateConditionRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpdateConditionRequest_default_instance_);_DLockResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DLockResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014lockpb.proto\022\tlockrpcpb\"i\n\013LockRequest"
      "\022\021\n\tnamespace\030\001 \001(\t\022\021\n\tlock_name\030\002 \001(\t\022\022"
      "\n\nconditions\030\003 \001(\014\022\017\n\007timeout\030\004 \001(\003\022\017\n\007l"
      "ock_id\030\005 \001(\t\"F\n\rUnLockRequest\022\021\n\tnamespa"
      "ce\030\001 \001(\t\022\021\n\tlock_name\030\002 \001(\t\022\017\n\007lock_id\030\003"
      " \001(\t\":\n\022ForceUnLockRequest\022\021\n\tnamespace\030"
      "\001 \001(\t\022\021\n\tlock_name\030\002 \001(\t\"M\n\024LockHeartbea"
      "tRequest\022\021\n\tnamespace\030\001 \001(\t\022\021\n\tlock_name"
      "\030\002 \001(\t\022\017\n\007lock_id\030\003 \001(\t\"R\n\026UpdateConditi"
      "onRequest\022\021\n\tnamespace\030\001 \001(\t\022\021\n\tlock_nam"
      "e\030\002 \001(\t\022\022\n\nconditions\030\003 \001(\014\"U\n\rDLockResp"
      "onse\022\014\n\004code\030\001 \001(\003\022\r\n\005error\030\002 \001(\t\022\022\n\ncon"
      "ditions\030\003 \001(\014\022\023\n\013update_time\030\004 \001(\0032\362\002\n\014D"
      "LockService\022:\n\004Lock\022\026.lockrpcpb.LockRequ"
      "est\032\030.lockrpcpb.DLockResponse\"\000\022>\n\006UnLoc"
      "k\022\030.lockrpcpb.UnLockRequest\032\030.lockrpcpb."
      "DLockResponse\"\000\022H\n\013ForceUnLock\022\035.lockrpc"
      "pb.ForceUnLockRequest\032\030.lockrpcpb.DLockR"
      "esponse\"\000\022J\n\013DoHeartbeat\022\037.lockrpcpb.Loc"
      "kHeartbeatRequest\032\030.lockrpcpb.DLockRespo"
      "nse\"\000\022P\n\017UpdateCondition\022!.lockrpcpb.Upd"
      "ateConditionRequest\032\030.lockrpcpb.DLockRes"
      "ponse\"\000B\032\n\030com.sharkstore.lock.grpcb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lockpb.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_lockpb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockRequest::kNamespaceFieldNumber;
const int LockRequest::kLockNameFieldNumber;
const int LockRequest::kConditionsFieldNumber;
const int LockRequest::kTimeoutFieldNumber;
const int LockRequest::kLockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockRequest::LockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_name().size() > 0) {
    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conditions().size() > 0) {
    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_id().size() > 0) {
    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.LockRequest)
}

void LockRequest::SharedCtor() {
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:lockrpcpb.LockRequest)
  SharedDtor();
}

void LockRequest::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockRequest::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockRequest& LockRequest::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockRequest* LockRequest::New(::google::protobuf::Arena* arena) const {
  LockRequest* n = new LockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool LockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.LockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockRequest.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_name().data(), static_cast<int>(this->lock_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockRequest.lock_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_id().data(), static_cast<int>(this->lock_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockRequest.lock_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.LockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.LockRequest)
  return false;
#undef DO_
}

void LockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.lock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lock_name(), output);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->conditions(), output);
  }

  // int64 timeout = 4;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timeout(), output);
  }

  // string lock_id = 5;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.lock_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lock_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.LockRequest)
}

::google::protobuf::uint8* LockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.lock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lock_name(), target);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->conditions(), target);
  }

  // int64 timeout = 4;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timeout(), target);
  }

  // string lock_id = 5;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockRequest.lock_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lock_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.LockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_name());
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->conditions());
  }

  // string lock_id = 5;
  if (this->lock_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_id());
  }

  // int64 timeout = 4;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.LockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.lock_name().size() > 0) {

    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  if (from.conditions().size() > 0) {

    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
  if (from.lock_id().size() > 0) {

    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void LockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::Swap(LockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  namespace__.Swap(&other->namespace__);
  lock_name_.Swap(&other->lock_name_);
  conditions_.Swap(&other->conditions_);
  lock_id_.Swap(&other->lock_id_);
  swap(timeout_, other->timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockRequest::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockRequest

// string namespace = 1;
void LockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.namespace)
  return namespace__.GetNoArena();
}
void LockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.namespace)
}
#if LANG_CXX11
void LockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.namespace)
}
#endif
void LockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.namespace)
}
void LockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.namespace)
}
::std::string* LockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.namespace)
}

// string lock_name = 2;
void LockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.lock_name)
  return lock_name_.GetNoArena();
}
void LockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.lock_name)
}
#if LANG_CXX11
void LockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.lock_name)
}
#endif
void LockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.lock_name)
}
void LockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.lock_name)
}
::std::string* LockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.lock_name)
}

// bytes conditions = 3;
void LockRequest::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockRequest::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.conditions)
  return conditions_.GetNoArena();
}
void LockRequest::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.conditions)
}
#if LANG_CXX11
void LockRequest::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.conditions)
}
#endif
void LockRequest::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.conditions)
}
void LockRequest::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.conditions)
}
::std::string* LockRequest::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockRequest::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockRequest::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.conditions)
}

// int64 timeout = 4;
void LockRequest::clear_timeout() {
  timeout_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockRequest::timeout() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.timeout)
  return timeout_;
}
void LockRequest::set_timeout(::google::protobuf::int64 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.timeout)
}

// string lock_id = 5;
void LockRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockRequest.lock_id)
  return lock_id_.GetNoArena();
}
void LockRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockRequest.lock_id)
}
#if LANG_CXX11
void LockRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockRequest.lock_id)
}
#endif
void LockRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockRequest.lock_id)
}
void LockRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockRequest.lock_id)
}
::std::string* LockRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockRequest.lock_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnLockRequest::kNamespaceFieldNumber;
const int UnLockRequest::kLockNameFieldNumber;
const int UnLockRequest::kLockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnLockRequest::UnLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.UnLockRequest)
}
UnLockRequest::UnLockRequest(const UnLockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_name().size() > 0) {
    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_id().size() > 0) {
    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.UnLockRequest)
}

void UnLockRequest::SharedCtor() {
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnLockRequest::~UnLockRequest() {
  // @@protoc_insertion_point(destructor:lockrpcpb.UnLockRequest)
  SharedDtor();
}

void UnLockRequest::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnLockRequest::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnLockRequest& UnLockRequest::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnLockRequest* UnLockRequest::New(::google::protobuf::Arena* arena) const {
  UnLockRequest* n = new UnLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.UnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UnLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.UnLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.UnLockRequest.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_name().data(), static_cast<int>(this->lock_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.UnLockRequest.lock_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_id().data(), static_cast<int>(this->lock_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.UnLockRequest.lock_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.UnLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.UnLockRequest)
  return false;
#undef DO_
}

void UnLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.UnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.lock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lock_name(), output);
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.lock_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lock_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.UnLockRequest)
}

::google::protobuf::uint8* UnLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.UnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.lock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lock_name(), target);
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UnLockRequest.lock_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lock_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.UnLockRequest)
  return target;
}

size_t UnLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.UnLockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_name());
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.UnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.UnLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.UnLockRequest)
    MergeFrom(*source);
  }
}

void UnLockRequest::MergeFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.UnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.lock_name().size() > 0) {

    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  if (from.lock_id().size() > 0) {

    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
}

void UnLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockRequest::CopyFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockRequest::IsInitialized() const {
  return true;
}

void UnLockRequest::Swap(UnLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnLockRequest::InternalSwap(UnLockRequest* other) {
  using std::swap;
  namespace__.Swap(&other->namespace__);
  lock_name_.Swap(&other->lock_name_);
  lock_id_.Swap(&other->lock_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnLockRequest::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnLockRequest

// string namespace = 1;
void UnLockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnLockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.namespace)
  return namespace__.GetNoArena();
}
void UnLockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.namespace)
}
#if LANG_CXX11
void UnLockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.namespace)
}
#endif
void UnLockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.namespace)
}
void UnLockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.namespace)
}
::std::string* UnLockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnLockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnLockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.namespace)
}

// string lock_name = 2;
void UnLockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnLockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.lock_name)
  return lock_name_.GetNoArena();
}
void UnLockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.lock_name)
}
#if LANG_CXX11
void UnLockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.lock_name)
}
#endif
void UnLockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.lock_name)
}
void UnLockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.lock_name)
}
::std::string* UnLockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnLockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnLockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.lock_name)
}

// string lock_id = 3;
void UnLockRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnLockRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UnLockRequest.lock_id)
  return lock_id_.GetNoArena();
}
void UnLockRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UnLockRequest.lock_id)
}
#if LANG_CXX11
void UnLockRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UnLockRequest.lock_id)
}
#endif
void UnLockRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UnLockRequest.lock_id)
}
void UnLockRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UnLockRequest.lock_id)
}
::std::string* UnLockRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UnLockRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnLockRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UnLockRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnLockRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UnLockRequest.lock_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForceUnLockRequest::kNamespaceFieldNumber;
const int ForceUnLockRequest::kLockNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForceUnLockRequest::ForceUnLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.ForceUnLockRequest)
}
ForceUnLockRequest::ForceUnLockRequest(const ForceUnLockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_name().size() > 0) {
    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.ForceUnLockRequest)
}

void ForceUnLockRequest::SharedCtor() {
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForceUnLockRequest::~ForceUnLockRequest() {
  // @@protoc_insertion_point(destructor:lockrpcpb.ForceUnLockRequest)
  SharedDtor();
}

void ForceUnLockRequest::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForceUnLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceUnLockRequest::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ForceUnLockRequest& ForceUnLockRequest::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForceUnLockRequest* ForceUnLockRequest::New(::google::protobuf::Arena* arena) const {
  ForceUnLockRequest* n = new ForceUnLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForceUnLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.ForceUnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ForceUnLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.ForceUnLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.ForceUnLockRequest.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_name().data(), static_cast<int>(this->lock_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.ForceUnLockRequest.lock_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.ForceUnLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.ForceUnLockRequest)
  return false;
#undef DO_
}

void ForceUnLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.ForceUnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.ForceUnLockRequest.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.ForceUnLockRequest.lock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lock_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.ForceUnLockRequest)
}

::google::protobuf::uint8* ForceUnLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.ForceUnLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.ForceUnLockRequest.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.ForceUnLockRequest.lock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lock_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.ForceUnLockRequest)
  return target;
}

size_t ForceUnLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.ForceUnLockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceUnLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.ForceUnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForceUnLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForceUnLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.ForceUnLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.ForceUnLockRequest)
    MergeFrom(*source);
  }
}

void ForceUnLockRequest::MergeFrom(const ForceUnLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.ForceUnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.lock_name().size() > 0) {

    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
}

void ForceUnLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.ForceUnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceUnLockRequest::CopyFrom(const ForceUnLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.ForceUnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceUnLockRequest::IsInitialized() const {
  return true;
}

void ForceUnLockRequest::Swap(ForceUnLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForceUnLockRequest::InternalSwap(ForceUnLockRequest* other) {
  using std::swap;
  namespace__.Swap(&other->namespace__);
  lock_name_.Swap(&other->lock_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForceUnLockRequest::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForceUnLockRequest

// string namespace = 1;
void ForceUnLockRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForceUnLockRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.ForceUnLockRequest.namespace)
  return namespace__.GetNoArena();
}
void ForceUnLockRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.ForceUnLockRequest.namespace)
}
#if LANG_CXX11
void ForceUnLockRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.ForceUnLockRequest.namespace)
}
#endif
void ForceUnLockRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.ForceUnLockRequest.namespace)
}
void ForceUnLockRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.ForceUnLockRequest.namespace)
}
::std::string* ForceUnLockRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.ForceUnLockRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForceUnLockRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.ForceUnLockRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForceUnLockRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.ForceUnLockRequest.namespace)
}

// string lock_name = 2;
void ForceUnLockRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForceUnLockRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.ForceUnLockRequest.lock_name)
  return lock_name_.GetNoArena();
}
void ForceUnLockRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.ForceUnLockRequest.lock_name)
}
#if LANG_CXX11
void ForceUnLockRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.ForceUnLockRequest.lock_name)
}
#endif
void ForceUnLockRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.ForceUnLockRequest.lock_name)
}
void ForceUnLockRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.ForceUnLockRequest.lock_name)
}
::std::string* ForceUnLockRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.ForceUnLockRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForceUnLockRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.ForceUnLockRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForceUnLockRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.ForceUnLockRequest.lock_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockHeartbeatRequest::kNamespaceFieldNumber;
const int LockHeartbeatRequest::kLockNameFieldNumber;
const int LockHeartbeatRequest::kLockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockHeartbeatRequest::LockHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.LockHeartbeatRequest)
}
LockHeartbeatRequest::LockHeartbeatRequest(const LockHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_name().size() > 0) {
    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_id().size() > 0) {
    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.LockHeartbeatRequest)
}

void LockHeartbeatRequest::SharedCtor() {
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LockHeartbeatRequest::~LockHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:lockrpcpb.LockHeartbeatRequest)
  SharedDtor();
}

void LockHeartbeatRequest::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockHeartbeatRequest::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockHeartbeatRequest& LockHeartbeatRequest::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockHeartbeatRequest* LockHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  LockHeartbeatRequest* n = new LockHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.LockHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LockHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.LockHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockHeartbeatRequest.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_name().data(), static_cast<int>(this->lock_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockHeartbeatRequest.lock_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_id().data(), static_cast<int>(this->lock_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.LockHeartbeatRequest.lock_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.LockHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.LockHeartbeatRequest)
  return false;
#undef DO_
}

void LockHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.LockHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.lock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lock_name(), output);
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.lock_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lock_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.LockHeartbeatRequest)
}

::google::protobuf::uint8* LockHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.LockHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.lock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lock_name(), target);
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_id().data(), static_cast<int>(this->lock_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.LockHeartbeatRequest.lock_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lock_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.LockHeartbeatRequest)
  return target;
}

size_t LockHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.LockHeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_name());
  }

  // string lock_id = 3;
  if (this->lock_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.LockHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.LockHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.LockHeartbeatRequest)
    MergeFrom(*source);
  }
}

void LockHeartbeatRequest::MergeFrom(const LockHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.LockHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.lock_name().size() > 0) {

    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  if (from.lock_id().size() > 0) {

    lock_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_id_);
  }
}

void LockHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.LockHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockHeartbeatRequest::CopyFrom(const LockHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.LockHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockHeartbeatRequest::IsInitialized() const {
  return true;
}

void LockHeartbeatRequest::Swap(LockHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockHeartbeatRequest::InternalSwap(LockHeartbeatRequest* other) {
  using std::swap;
  namespace__.Swap(&other->namespace__);
  lock_name_.Swap(&other->lock_name_);
  lock_id_.Swap(&other->lock_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockHeartbeatRequest::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockHeartbeatRequest

// string namespace = 1;
void LockHeartbeatRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockHeartbeatRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.namespace)
  return namespace__.GetNoArena();
}
void LockHeartbeatRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.namespace)
}
#if LANG_CXX11
void LockHeartbeatRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.namespace)
}
#endif
void LockHeartbeatRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.namespace)
}
void LockHeartbeatRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.namespace)
}
::std::string* LockHeartbeatRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockHeartbeatRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockHeartbeatRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.namespace)
}

// string lock_name = 2;
void LockHeartbeatRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockHeartbeatRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.lock_name)
  return lock_name_.GetNoArena();
}
void LockHeartbeatRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.lock_name)
}
#if LANG_CXX11
void LockHeartbeatRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.lock_name)
}
#endif
void LockHeartbeatRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.lock_name)
}
void LockHeartbeatRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.lock_name)
}
::std::string* LockHeartbeatRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockHeartbeatRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockHeartbeatRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.lock_name)
}

// string lock_id = 3;
void LockHeartbeatRequest::clear_lock_id() {
  lock_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockHeartbeatRequest::lock_id() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.LockHeartbeatRequest.lock_id)
  return lock_id_.GetNoArena();
}
void LockHeartbeatRequest::set_lock_id(const ::std::string& value) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.LockHeartbeatRequest.lock_id)
}
#if LANG_CXX11
void LockHeartbeatRequest::set_lock_id(::std::string&& value) {
  
  lock_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.LockHeartbeatRequest.lock_id)
}
#endif
void LockHeartbeatRequest::set_lock_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.LockHeartbeatRequest.lock_id)
}
void LockHeartbeatRequest::set_lock_id(const char* value, size_t size) {
  
  lock_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.LockHeartbeatRequest.lock_id)
}
::std::string* LockHeartbeatRequest::mutable_lock_id() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.LockHeartbeatRequest.lock_id)
  return lock_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockHeartbeatRequest::release_lock_id() {
  // @@protoc_insertion_point(field_release:lockrpcpb.LockHeartbeatRequest.lock_id)
  
  return lock_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockHeartbeatRequest::set_allocated_lock_id(::std::string* lock_id) {
  if (lock_id != NULL) {
    
  } else {
    
  }
  lock_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_id);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.LockHeartbeatRequest.lock_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateConditionRequest::kNamespaceFieldNumber;
const int UpdateConditionRequest::kLockNameFieldNumber;
const int UpdateConditionRequest::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateConditionRequest::UpdateConditionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.UpdateConditionRequest)
}
UpdateConditionRequest::UpdateConditionRequest(const UpdateConditionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_name().size() > 0) {
    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conditions().size() > 0) {
    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.UpdateConditionRequest)
}

void UpdateConditionRequest::SharedCtor() {
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateConditionRequest::~UpdateConditionRequest() {
  // @@protoc_insertion_point(destructor:lockrpcpb.UpdateConditionRequest)
  SharedDtor();
}

void UpdateConditionRequest::SharedDtor() {
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateConditionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConditionRequest::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateConditionRequest& UpdateConditionRequest::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateConditionRequest* UpdateConditionRequest::New(::google::protobuf::Arena* arena) const {
  UpdateConditionRequest* n = new UpdateConditionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateConditionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.UpdateConditionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpdateConditionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.UpdateConditionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.UpdateConditionRequest.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_name().data(), static_cast<int>(this->lock_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.UpdateConditionRequest.lock_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.UpdateConditionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.UpdateConditionRequest)
  return false;
#undef DO_
}

void UpdateConditionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.UpdateConditionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UpdateConditionRequest.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UpdateConditionRequest.lock_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lock_name(), output);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->conditions(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.UpdateConditionRequest)
}

::google::protobuf::uint8* UpdateConditionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.UpdateConditionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UpdateConditionRequest.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_(), target);
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_name().data(), static_cast<int>(this->lock_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.UpdateConditionRequest.lock_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lock_name(), target);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->conditions(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.UpdateConditionRequest)
  return target;
}

size_t UpdateConditionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.UpdateConditionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string lock_name = 2;
  if (this->lock_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_name());
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->conditions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConditionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.UpdateConditionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConditionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateConditionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.UpdateConditionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.UpdateConditionRequest)
    MergeFrom(*source);
  }
}

void UpdateConditionRequest::MergeFrom(const UpdateConditionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.UpdateConditionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.lock_name().size() > 0) {

    lock_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_name_);
  }
  if (from.conditions().size() > 0) {

    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
}

void UpdateConditionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.UpdateConditionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConditionRequest::CopyFrom(const UpdateConditionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.UpdateConditionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConditionRequest::IsInitialized() const {
  return true;
}

void UpdateConditionRequest::Swap(UpdateConditionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateConditionRequest::InternalSwap(UpdateConditionRequest* other) {
  using std::swap;
  namespace__.Swap(&other->namespace__);
  lock_name_.Swap(&other->lock_name_);
  conditions_.Swap(&other->conditions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateConditionRequest::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateConditionRequest

// string namespace = 1;
void UpdateConditionRequest::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateConditionRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.namespace)
  return namespace__.GetNoArena();
}
void UpdateConditionRequest::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.namespace)
}
#if LANG_CXX11
void UpdateConditionRequest::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.namespace)
}
#endif
void UpdateConditionRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.namespace)
}
void UpdateConditionRequest::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.namespace)
}
::std::string* UpdateConditionRequest::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateConditionRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateConditionRequest::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.namespace)
}

// string lock_name = 2;
void UpdateConditionRequest::clear_lock_name() {
  lock_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateConditionRequest::lock_name() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.lock_name)
  return lock_name_.GetNoArena();
}
void UpdateConditionRequest::set_lock_name(const ::std::string& value) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.lock_name)
}
#if LANG_CXX11
void UpdateConditionRequest::set_lock_name(::std::string&& value) {
  
  lock_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.lock_name)
}
#endif
void UpdateConditionRequest::set_lock_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.lock_name)
}
void UpdateConditionRequest::set_lock_name(const char* value, size_t size) {
  
  lock_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.lock_name)
}
::std::string* UpdateConditionRequest::mutable_lock_name() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.lock_name)
  return lock_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateConditionRequest::release_lock_name() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.lock_name)
  
  return lock_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateConditionRequest::set_allocated_lock_name(::std::string* lock_name) {
  if (lock_name != NULL) {
    
  } else {
    
  }
  lock_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_name);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.lock_name)
}

// bytes conditions = 3;
void UpdateConditionRequest::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateConditionRequest::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.UpdateConditionRequest.conditions)
  return conditions_.GetNoArena();
}
void UpdateConditionRequest::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.UpdateConditionRequest.conditions)
}
#if LANG_CXX11
void UpdateConditionRequest::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.UpdateConditionRequest.conditions)
}
#endif
void UpdateConditionRequest::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.UpdateConditionRequest.conditions)
}
void UpdateConditionRequest::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.UpdateConditionRequest.conditions)
}
::std::string* UpdateConditionRequest::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.UpdateConditionRequest.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateConditionRequest::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.UpdateConditionRequest.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateConditionRequest::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.UpdateConditionRequest.conditions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DLockResponse::kCodeFieldNumber;
const int DLockResponse::kErrorFieldNumber;
const int DLockResponse::kConditionsFieldNumber;
const int DLockResponse::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DLockResponse::DLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lockpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockrpcpb.DLockResponse)
}
DLockResponse::DLockResponse(const DLockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conditions().size() > 0) {
    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:lockrpcpb.DLockResponse)
}

void DLockResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  _cached_size_ = 0;
}

DLockResponse::~DLockResponse() {
  // @@protoc_insertion_point(destructor:lockrpcpb.DLockResponse)
  SharedDtor();
}

void DLockResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DLockResponse::descriptor() {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DLockResponse& DLockResponse::default_instance() {
  protobuf_lockpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DLockResponse* DLockResponse::New(::google::protobuf::Arena* arena) const {
  DLockResponse* n = new DLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lockrpcpb.DLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  _internal_metadata_.Clear();
}

bool DLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockrpcpb.DLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockrpcpb.DLockResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockrpcpb.DLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockrpcpb.DLockResponse)
  return false;
#undef DO_
}

void DLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockrpcpb.DLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->code(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.DLockResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->conditions(), output);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockrpcpb.DLockResponse)
}

::google::protobuf::uint8* DLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockrpcpb.DLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->code(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockrpcpb.DLockResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->conditions(), target);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockrpcpb.DLockResponse)
  return target;
}

size_t DLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockrpcpb.DLockResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // bytes conditions = 3;
  if (this->conditions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->conditions());
  }

  // int64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->code());
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockrpcpb.DLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockrpcpb.DLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockrpcpb.DLockResponse)
    MergeFrom(*source);
  }
}

void DLockResponse::MergeFrom(const DLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockrpcpb.DLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.conditions().size() > 0) {

    conditions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conditions_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void DLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockrpcpb.DLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLockResponse::CopyFrom(const DLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockrpcpb.DLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLockResponse::IsInitialized() const {
  return true;
}

void DLockResponse::Swap(DLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DLockResponse::InternalSwap(DLockResponse* other) {
  using std::swap;
  error_.Swap(&other->error_);
  conditions_.Swap(&other->conditions_);
  swap(code_, other->code_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DLockResponse::GetMetadata() const {
  protobuf_lockpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lockpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DLockResponse

// int64 code = 1;
void DLockResponse::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DLockResponse::code() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.code)
  return code_;
}
void DLockResponse::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.code)
}

// string error = 2;
void DLockResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DLockResponse::error() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.error)
  return error_.GetNoArena();
}
void DLockResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.error)
}
#if LANG_CXX11
void DLockResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.DLockResponse.error)
}
#endif
void DLockResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.DLockResponse.error)
}
void DLockResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.DLockResponse.error)
}
::std::string* DLockResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.DLockResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:lockrpcpb.DLockResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DLockResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.DLockResponse.error)
}

// bytes conditions = 3;
void DLockResponse::clear_conditions() {
  conditions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DLockResponse::conditions() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.conditions)
  return conditions_.GetNoArena();
}
void DLockResponse::set_conditions(const ::std::string& value) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.conditions)
}
#if LANG_CXX11
void DLockResponse::set_conditions(::std::string&& value) {
  
  conditions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockrpcpb.DLockResponse.conditions)
}
#endif
void DLockResponse::set_conditions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockrpcpb.DLockResponse.conditions)
}
void DLockResponse::set_conditions(const void* value, size_t size) {
  
  conditions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockrpcpb.DLockResponse.conditions)
}
::std::string* DLockResponse::mutable_conditions() {
  
  // @@protoc_insertion_point(field_mutable:lockrpcpb.DLockResponse.conditions)
  return conditions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DLockResponse::release_conditions() {
  // @@protoc_insertion_point(field_release:lockrpcpb.DLockResponse.conditions)
  
  return conditions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DLockResponse::set_allocated_conditions(::std::string* conditions) {
  if (conditions != NULL) {
    
  } else {
    
  }
  conditions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conditions);
  // @@protoc_insertion_point(field_set_allocated:lockrpcpb.DLockResponse.conditions)
}

// int64 update_time = 4;
void DLockResponse::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DLockResponse::update_time() const {
  // @@protoc_insertion_point(field_get:lockrpcpb.DLockResponse.update_time)
  return update_time_;
}
void DLockResponse::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:lockrpcpb.DLockResponse.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lockrpcpb

// @@protoc_insertion_point(global_scope)
