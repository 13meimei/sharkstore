// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#ifndef PROTOBUF_txn_2eproto__INCLUDED
#define PROTOBUF_txn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kvrpcpb.pb.h"
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)
namespace txnpb {
class ClearupRequest;
class ClearupRequestDefaultTypeInternal;
extern ClearupRequestDefaultTypeInternal _ClearupRequest_default_instance_;
class ClearupResponse;
class ClearupResponseDefaultTypeInternal;
extern ClearupResponseDefaultTypeInternal _ClearupResponse_default_instance_;
class DecideRequest;
class DecideRequestDefaultTypeInternal;
extern DecideRequestDefaultTypeInternal _DecideRequest_default_instance_;
class DecideResponse;
class DecideResponseDefaultTypeInternal;
extern DecideResponseDefaultTypeInternal _DecideResponse_default_instance_;
class DsClearupRequest;
class DsClearupRequestDefaultTypeInternal;
extern DsClearupRequestDefaultTypeInternal _DsClearupRequest_default_instance_;
class DsClearupResponse;
class DsClearupResponseDefaultTypeInternal;
extern DsClearupResponseDefaultTypeInternal _DsClearupResponse_default_instance_;
class DsDecideRequest;
class DsDecideRequestDefaultTypeInternal;
extern DsDecideRequestDefaultTypeInternal _DsDecideRequest_default_instance_;
class DsDecideResponse;
class DsDecideResponseDefaultTypeInternal;
extern DsDecideResponseDefaultTypeInternal _DsDecideResponse_default_instance_;
class DsGetLockInfoRequest;
class DsGetLockInfoRequestDefaultTypeInternal;
extern DsGetLockInfoRequestDefaultTypeInternal _DsGetLockInfoRequest_default_instance_;
class DsGetLockInfoResponse;
class DsGetLockInfoResponseDefaultTypeInternal;
extern DsGetLockInfoResponseDefaultTypeInternal _DsGetLockInfoResponse_default_instance_;
class DsPrepareRequest;
class DsPrepareRequestDefaultTypeInternal;
extern DsPrepareRequestDefaultTypeInternal _DsPrepareRequest_default_instance_;
class DsPrepareResponse;
class DsPrepareResponseDefaultTypeInternal;
extern DsPrepareResponseDefaultTypeInternal _DsPrepareResponse_default_instance_;
class DsSelectRequest;
class DsSelectRequestDefaultTypeInternal;
extern DsSelectRequestDefaultTypeInternal _DsSelectRequest_default_instance_;
class DsSelectResponse;
class DsSelectResponseDefaultTypeInternal;
extern DsSelectResponseDefaultTypeInternal _DsSelectResponse_default_instance_;
class GetLockInfoRequest;
class GetLockInfoRequestDefaultTypeInternal;
extern GetLockInfoRequestDefaultTypeInternal _GetLockInfoRequest_default_instance_;
class GetLockInfoResponse;
class GetLockInfoResponseDefaultTypeInternal;
extern GetLockInfoResponseDefaultTypeInternal _GetLockInfoResponse_default_instance_;
class LockError;
class LockErrorDefaultTypeInternal;
extern LockErrorDefaultTypeInternal _LockError_default_instance_;
class LockInfo;
class LockInfoDefaultTypeInternal;
extern LockInfoDefaultTypeInternal _LockInfo_default_instance_;
class PrepareRequest;
class PrepareRequestDefaultTypeInternal;
extern PrepareRequestDefaultTypeInternal _PrepareRequest_default_instance_;
class PrepareResponse;
class PrepareResponseDefaultTypeInternal;
extern PrepareResponseDefaultTypeInternal _PrepareResponse_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowIntent;
class RowIntentDefaultTypeInternal;
extern RowIntentDefaultTypeInternal _RowIntent_default_instance_;
class RowValue;
class RowValueDefaultTypeInternal;
extern RowValueDefaultTypeInternal _RowValue_default_instance_;
class SelectRequest;
class SelectRequestDefaultTypeInternal;
extern SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
class SelectResponse;
class SelectResponseDefaultTypeInternal;
extern SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
class ServerError;
class ServerErrorDefaultTypeInternal;
extern ServerErrorDefaultTypeInternal _ServerError_default_instance_;
class StatusConflict;
class StatusConflictDefaultTypeInternal;
extern StatusConflictDefaultTypeInternal _StatusConflict_default_instance_;
class TxnError;
class TxnErrorDefaultTypeInternal;
extern TxnErrorDefaultTypeInternal _TxnError_default_instance_;
class TxnIntent;
class TxnIntentDefaultTypeInternal;
extern TxnIntentDefaultTypeInternal _TxnIntent_default_instance_;
class TxnValue;
class TxnValueDefaultTypeInternal;
extern TxnValueDefaultTypeInternal _TxnValue_default_instance_;
class UnexpectedVer;
class UnexpectedVerDefaultTypeInternal;
extern UnexpectedVerDefaultTypeInternal _UnexpectedVer_default_instance_;
}  // namespace txnpb

namespace txnpb {

namespace protobuf_txn_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_txn_2eproto

enum TxnError_ErrType {
  TxnError_ErrType_UNKNOWN = 0,
  TxnError_ErrType_SERVER_ERROR = 1,
  TxnError_ErrType_LOCKED = 2,
  TxnError_ErrType_UNEXPECTED_VER = 3,
  TxnError_ErrType_STATUS_CONFLICT = 4,
  TxnError_ErrType_TxnError_ErrType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxnError_ErrType_TxnError_ErrType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxnError_ErrType_IsValid(int value);
const TxnError_ErrType TxnError_ErrType_ErrType_MIN = TxnError_ErrType_UNKNOWN;
const TxnError_ErrType TxnError_ErrType_ErrType_MAX = TxnError_ErrType_STATUS_CONFLICT;
const int TxnError_ErrType_ErrType_ARRAYSIZE = TxnError_ErrType_ErrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnError_ErrType_descriptor();
inline const ::std::string& TxnError_ErrType_Name(TxnError_ErrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnError_ErrType_descriptor(), value);
}
inline bool TxnError_ErrType_Parse(
    const ::std::string& name, TxnError_ErrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnError_ErrType>(
    TxnError_ErrType_descriptor(), name, value);
}
enum OpType {
  INSERT = 0,
  DELETE = 1,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OpType_IsValid(int value);
const OpType OpType_MIN = INSERT;
const OpType OpType_MAX = DELETE;
const int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpType_descriptor();
inline const ::std::string& OpType_Name(OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpType_descriptor(), value);
}
inline bool OpType_Parse(
    const ::std::string& name, OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum TxnStatus {
  INIT = 0,
  COMMITTED = 1,
  ABORTED = 2,
  TxnStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxnStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxnStatus_IsValid(int value);
const TxnStatus TxnStatus_MIN = INIT;
const TxnStatus TxnStatus_MAX = ABORTED;
const int TxnStatus_ARRAYSIZE = TxnStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxnStatus_descriptor();
inline const ::std::string& TxnStatus_Name(TxnStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxnStatus_descriptor(), value);
}
inline bool TxnStatus_Parse(
    const ::std::string& name, TxnStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxnStatus>(
    TxnStatus_descriptor(), name, value);
}
// ===================================================================

class TxnIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.TxnIntent) */ {
 public:
  TxnIntent();
  virtual ~TxnIntent();

  TxnIntent(const TxnIntent& from);

  inline TxnIntent& operator=(const TxnIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnIntent(TxnIntent&& from) noexcept
    : TxnIntent() {
    *this = ::std::move(from);
  }

  inline TxnIntent& operator=(TxnIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnIntent& default_instance();

  static inline const TxnIntent* internal_default_instance() {
    return reinterpret_cast<const TxnIntent*>(
               &_TxnIntent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TxnIntent* other);
  friend void swap(TxnIntent& a, TxnIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnIntent* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnIntent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnIntent& from);
  void MergeFrom(const TxnIntent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .txnpb.OpType typ = 1;
  void clear_typ();
  static const int kTypFieldNumber = 1;
  ::txnpb::OpType typ() const;
  void set_typ(::txnpb::OpType value);

  // bool check_unique = 4;
  void clear_check_unique();
  static const int kCheckUniqueFieldNumber = 4;
  bool check_unique() const;
  void set_check_unique(bool value);

  // bool is_primary = 6;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 6;
  bool is_primary() const;
  void set_is_primary(bool value);

  // uint64 expected_ver = 5;
  void clear_expected_ver();
  static const int kExpectedVerFieldNumber = 5;
  ::google::protobuf::uint64 expected_ver() const;
  void set_expected_ver(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:txnpb.TxnIntent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int typ_;
  bool check_unique_;
  bool is_primary_;
  ::google::protobuf::uint64 expected_ver_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.TxnValue) */ {
 public:
  TxnValue();
  virtual ~TxnValue();

  TxnValue(const TxnValue& from);

  inline TxnValue& operator=(const TxnValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnValue(TxnValue&& from) noexcept
    : TxnValue() {
    *this = ::std::move(from);
  }

  inline TxnValue& operator=(TxnValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnValue& default_instance();

  static inline const TxnValue* internal_default_instance() {
    return reinterpret_cast<const TxnValue*>(
               &_TxnValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TxnValue* other);
  friend void swap(TxnValue& a, TxnValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnValue* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnValue& from);
  void MergeFrom(const TxnValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 11;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 11;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 3;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 3;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // .txnpb.TxnIntent intent = 2;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 2;
  const ::txnpb::TxnIntent& intent() const;
  ::txnpb::TxnIntent* mutable_intent();
  ::txnpb::TxnIntent* release_intent();
  void set_allocated_intent(::txnpb::TxnIntent* intent);

  // uint64 expired_at = 4;
  void clear_expired_at();
  static const int kExpiredAtFieldNumber = 4;
  ::google::protobuf::uint64 expired_at() const;
  void set_expired_at(::google::protobuf::uint64 value);

  // uint64 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // .txnpb.TxnStatus txn_status = 10;
  void clear_txn_status();
  static const int kTxnStatusFieldNumber = 10;
  ::txnpb::TxnStatus txn_status() const;
  void set_txn_status(::txnpb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:txnpb.TxnValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::txnpb::TxnIntent* intent_;
  ::google::protobuf::uint64 expired_at_;
  ::google::protobuf::uint64 version_;
  int txn_status_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.LockInfo) */ {
 public:
  LockInfo();
  virtual ~LockInfo();

  LockInfo(const LockInfo& from);

  inline LockInfo& operator=(const LockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockInfo(LockInfo&& from) noexcept
    : LockInfo() {
    *this = ::std::move(from);
  }

  inline LockInfo& operator=(LockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockInfo& default_instance();

  static inline const LockInfo* internal_default_instance() {
    return reinterpret_cast<const LockInfo*>(
               &_LockInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LockInfo* other);
  friend void swap(LockInfo& a, LockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LockInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockInfo& from);
  void MergeFrom(const LockInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 13;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 13;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 11;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 11;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // bool timeout = 2;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  bool timeout() const;
  void set_timeout(bool value);

  // bool is_primary = 10;
  void clear_is_primary();
  static const int kIsPrimaryFieldNumber = 10;
  bool is_primary() const;
  void set_is_primary(bool value);

  // .txnpb.TxnStatus status = 12;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::txnpb::TxnStatus status() const;
  void set_status(::txnpb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:txnpb.LockInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  bool timeout_;
  bool is_primary_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.LockError) */ {
 public:
  LockError();
  virtual ~LockError();

  LockError(const LockError& from);

  inline LockError& operator=(const LockError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockError(LockError&& from) noexcept
    : LockError() {
    *this = ::std::move(from);
  }

  inline LockError& operator=(LockError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockError& default_instance();

  static inline const LockError* internal_default_instance() {
    return reinterpret_cast<const LockError*>(
               &_LockError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LockError* other);
  friend void swap(LockError& a, LockError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockError* New() const PROTOBUF_FINAL { return New(NULL); }

  LockError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockError& from);
  void MergeFrom(const LockError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .txnpb.LockInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::txnpb::LockInfo& info() const;
  ::txnpb::LockInfo* mutable_info();
  ::txnpb::LockInfo* release_info();
  void set_allocated_info(::txnpb::LockInfo* info);

  // @@protoc_insertion_point(class_scope:txnpb.LockError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::txnpb::LockInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnexpectedVer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.UnexpectedVer) */ {
 public:
  UnexpectedVer();
  virtual ~UnexpectedVer();

  UnexpectedVer(const UnexpectedVer& from);

  inline UnexpectedVer& operator=(const UnexpectedVer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnexpectedVer(UnexpectedVer&& from) noexcept
    : UnexpectedVer() {
    *this = ::std::move(from);
  }

  inline UnexpectedVer& operator=(UnexpectedVer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnexpectedVer& default_instance();

  static inline const UnexpectedVer* internal_default_instance() {
    return reinterpret_cast<const UnexpectedVer*>(
               &_UnexpectedVer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UnexpectedVer* other);
  friend void swap(UnexpectedVer& a, UnexpectedVer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnexpectedVer* New() const PROTOBUF_FINAL { return New(NULL); }

  UnexpectedVer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnexpectedVer& from);
  void MergeFrom(const UnexpectedVer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnexpectedVer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // uint64 expected_ver = 2;
  void clear_expected_ver();
  static const int kExpectedVerFieldNumber = 2;
  ::google::protobuf::uint64 expected_ver() const;
  void set_expected_ver(::google::protobuf::uint64 value);

  // uint64 actual_ver = 3;
  void clear_actual_ver();
  static const int kActualVerFieldNumber = 3;
  ::google::protobuf::uint64 actual_ver() const;
  void set_actual_ver(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:txnpb.UnexpectedVer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 expected_ver_;
  ::google::protobuf::uint64 actual_ver_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusConflict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.StatusConflict) */ {
 public:
  StatusConflict();
  virtual ~StatusConflict();

  StatusConflict(const StatusConflict& from);

  inline StatusConflict& operator=(const StatusConflict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusConflict(StatusConflict&& from) noexcept
    : StatusConflict() {
    *this = ::std::move(from);
  }

  inline StatusConflict& operator=(StatusConflict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusConflict& default_instance();

  static inline const StatusConflict* internal_default_instance() {
    return reinterpret_cast<const StatusConflict*>(
               &_StatusConflict_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StatusConflict* other);
  friend void swap(StatusConflict& a, StatusConflict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusConflict* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusConflict* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusConflict& from);
  void MergeFrom(const StatusConflict& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusConflict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .txnpb.TxnStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::txnpb::TxnStatus status() const;
  void set_status(::txnpb::TxnStatus value);

  // @@protoc_insertion_point(class_scope:txnpb.StatusConflict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.ServerError) */ {
 public:
  ServerError();
  virtual ~ServerError();

  ServerError(const ServerError& from);

  inline ServerError& operator=(const ServerError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerError(ServerError&& from) noexcept
    : ServerError() {
    *this = ::std::move(from);
  }

  inline ServerError& operator=(ServerError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerError& default_instance();

  static inline const ServerError* internal_default_instance() {
    return reinterpret_cast<const ServerError*>(
               &_ServerError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ServerError* other);
  friend void swap(ServerError& a, ServerError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerError* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerError& from);
  void MergeFrom(const ServerError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txnpb.ServerError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnError : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.TxnError) */ {
 public:
  TxnError();
  virtual ~TxnError();

  TxnError(const TxnError& from);

  inline TxnError& operator=(const TxnError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnError(TxnError&& from) noexcept
    : TxnError() {
    *this = ::std::move(from);
  }

  inline TxnError& operator=(TxnError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnError& default_instance();

  static inline const TxnError* internal_default_instance() {
    return reinterpret_cast<const TxnError*>(
               &_TxnError_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TxnError* other);
  friend void swap(TxnError& a, TxnError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnError* New() const PROTOBUF_FINAL { return New(NULL); }

  TxnError* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxnError& from);
  void MergeFrom(const TxnError& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TxnError_ErrType ErrType;
  static const ErrType UNKNOWN =
    TxnError_ErrType_UNKNOWN;
  static const ErrType SERVER_ERROR =
    TxnError_ErrType_SERVER_ERROR;
  static const ErrType LOCKED =
    TxnError_ErrType_LOCKED;
  static const ErrType UNEXPECTED_VER =
    TxnError_ErrType_UNEXPECTED_VER;
  static const ErrType STATUS_CONFLICT =
    TxnError_ErrType_STATUS_CONFLICT;
  static inline bool ErrType_IsValid(int value) {
    return TxnError_ErrType_IsValid(value);
  }
  static const ErrType ErrType_MIN =
    TxnError_ErrType_ErrType_MIN;
  static const ErrType ErrType_MAX =
    TxnError_ErrType_ErrType_MAX;
  static const int ErrType_ARRAYSIZE =
    TxnError_ErrType_ErrType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrType_descriptor() {
    return TxnError_ErrType_descriptor();
  }
  static inline const ::std::string& ErrType_Name(ErrType value) {
    return TxnError_ErrType_Name(value);
  }
  static inline bool ErrType_Parse(const ::std::string& name,
      ErrType* value) {
    return TxnError_ErrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .txnpb.ServerError server_err = 2;
  bool has_server_err() const;
  void clear_server_err();
  static const int kServerErrFieldNumber = 2;
  const ::txnpb::ServerError& server_err() const;
  ::txnpb::ServerError* mutable_server_err();
  ::txnpb::ServerError* release_server_err();
  void set_allocated_server_err(::txnpb::ServerError* server_err);

  // .txnpb.LockError lock_err = 3;
  bool has_lock_err() const;
  void clear_lock_err();
  static const int kLockErrFieldNumber = 3;
  const ::txnpb::LockError& lock_err() const;
  ::txnpb::LockError* mutable_lock_err();
  ::txnpb::LockError* release_lock_err();
  void set_allocated_lock_err(::txnpb::LockError* lock_err);

  // .txnpb.UnexpectedVer unexpected_ver = 4;
  bool has_unexpected_ver() const;
  void clear_unexpected_ver();
  static const int kUnexpectedVerFieldNumber = 4;
  const ::txnpb::UnexpectedVer& unexpected_ver() const;
  ::txnpb::UnexpectedVer* mutable_unexpected_ver();
  ::txnpb::UnexpectedVer* release_unexpected_ver();
  void set_allocated_unexpected_ver(::txnpb::UnexpectedVer* unexpected_ver);

  // .txnpb.StatusConflict status_conflict = 5;
  bool has_status_conflict() const;
  void clear_status_conflict();
  static const int kStatusConflictFieldNumber = 5;
  const ::txnpb::StatusConflict& status_conflict() const;
  ::txnpb::StatusConflict* mutable_status_conflict();
  ::txnpb::StatusConflict* release_status_conflict();
  void set_allocated_status_conflict(::txnpb::StatusConflict* status_conflict);

  // .txnpb.TxnError.ErrType err_type = 1;
  void clear_err_type();
  static const int kErrTypeFieldNumber = 1;
  ::txnpb::TxnError_ErrType err_type() const;
  void set_err_type(::txnpb::TxnError_ErrType value);

  // @@protoc_insertion_point(class_scope:txnpb.TxnError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::txnpb::ServerError* server_err_;
  ::txnpb::LockError* lock_err_;
  ::txnpb::UnexpectedVer* unexpected_ver_;
  ::txnpb::StatusConflict* status_conflict_;
  int err_type_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.PrepareRequest) */ {
 public:
  PrepareRequest();
  virtual ~PrepareRequest();

  PrepareRequest(const PrepareRequest& from);

  inline PrepareRequest& operator=(const PrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareRequest(PrepareRequest&& from) noexcept
    : PrepareRequest() {
    *this = ::std::move(from);
  }

  inline PrepareRequest& operator=(PrepareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareRequest& default_instance();

  static inline const PrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareRequest*>(
               &_PrepareRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PrepareRequest* other);
  friend void swap(PrepareRequest& a, PrepareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareRequest& from);
  void MergeFrom(const PrepareRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .txnpb.TxnIntent intents = 3;
  int intents_size() const;
  void clear_intents();
  static const int kIntentsFieldNumber = 3;
  const ::txnpb::TxnIntent& intents(int index) const;
  ::txnpb::TxnIntent* mutable_intents(int index);
  ::txnpb::TxnIntent* add_intents();
  ::google::protobuf::RepeatedPtrField< ::txnpb::TxnIntent >*
      mutable_intents();
  const ::google::protobuf::RepeatedPtrField< ::txnpb::TxnIntent >&
      intents() const;

  // repeated bytes secondary_keys = 6;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 6;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 4;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 4;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // uint64 lock_ttl = 5;
  void clear_lock_ttl();
  static const int kLockTtlFieldNumber = 5;
  ::google::protobuf::uint64 lock_ttl() const;
  void set_lock_ttl(::google::protobuf::uint64 value);

  // bool local = 2;
  void clear_local();
  static const int kLocalFieldNumber = 2;
  bool local() const;
  void set_local(bool value);

  // bool strict_check = 16;
  void clear_strict_check();
  static const int kStrictCheckFieldNumber = 16;
  bool strict_check() const;
  void set_strict_check(bool value);

  // @@protoc_insertion_point(class_scope:txnpb.PrepareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::txnpb::TxnIntent > intents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::google::protobuf::uint64 lock_ttl_;
  bool local_;
  bool strict_check_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.PrepareResponse) */ {
 public:
  PrepareResponse();
  virtual ~PrepareResponse();

  PrepareResponse(const PrepareResponse& from);

  inline PrepareResponse& operator=(const PrepareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareResponse(PrepareResponse&& from) noexcept
    : PrepareResponse() {
    *this = ::std::move(from);
  }

  inline PrepareResponse& operator=(PrepareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareResponse& default_instance();

  static inline const PrepareResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareResponse*>(
               &_PrepareResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PrepareResponse* other);
  friend void swap(PrepareResponse& a, PrepareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareResponse& from);
  void MergeFrom(const PrepareResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .txnpb.TxnError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  const ::txnpb::TxnError& errors(int index) const;
  ::txnpb::TxnError* mutable_errors(int index);
  ::txnpb::TxnError* add_errors();
  ::google::protobuf::RepeatedPtrField< ::txnpb::TxnError >*
      mutable_errors();
  const ::google::protobuf::RepeatedPtrField< ::txnpb::TxnError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:txnpb.PrepareResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::txnpb::TxnError > errors_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsPrepareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsPrepareRequest) */ {
 public:
  DsPrepareRequest();
  virtual ~DsPrepareRequest();

  DsPrepareRequest(const DsPrepareRequest& from);

  inline DsPrepareRequest& operator=(const DsPrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsPrepareRequest(DsPrepareRequest&& from) noexcept
    : DsPrepareRequest() {
    *this = ::std::move(from);
  }

  inline DsPrepareRequest& operator=(DsPrepareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsPrepareRequest& default_instance();

  static inline const DsPrepareRequest* internal_default_instance() {
    return reinterpret_cast<const DsPrepareRequest*>(
               &_DsPrepareRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DsPrepareRequest* other);
  friend void swap(DsPrepareRequest& a, DsPrepareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsPrepareRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsPrepareRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsPrepareRequest& from);
  void MergeFrom(const DsPrepareRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsPrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .txnpb.PrepareRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::txnpb::PrepareRequest& req() const;
  ::txnpb::PrepareRequest* mutable_req();
  ::txnpb::PrepareRequest* release_req();
  void set_allocated_req(::txnpb::PrepareRequest* req);

  // @@protoc_insertion_point(class_scope:txnpb.DsPrepareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::txnpb::PrepareRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsPrepareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsPrepareResponse) */ {
 public:
  DsPrepareResponse();
  virtual ~DsPrepareResponse();

  DsPrepareResponse(const DsPrepareResponse& from);

  inline DsPrepareResponse& operator=(const DsPrepareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsPrepareResponse(DsPrepareResponse&& from) noexcept
    : DsPrepareResponse() {
    *this = ::std::move(from);
  }

  inline DsPrepareResponse& operator=(DsPrepareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsPrepareResponse& default_instance();

  static inline const DsPrepareResponse* internal_default_instance() {
    return reinterpret_cast<const DsPrepareResponse*>(
               &_DsPrepareResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DsPrepareResponse* other);
  friend void swap(DsPrepareResponse& a, DsPrepareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsPrepareResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsPrepareResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsPrepareResponse& from);
  void MergeFrom(const DsPrepareResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsPrepareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .txnpb.PrepareResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::txnpb::PrepareResponse& resp() const;
  ::txnpb::PrepareResponse* mutable_resp();
  ::txnpb::PrepareResponse* release_resp();
  void set_allocated_resp(::txnpb::PrepareResponse* resp);

  // @@protoc_insertion_point(class_scope:txnpb.DsPrepareResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::txnpb::PrepareResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecideRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DecideRequest) */ {
 public:
  DecideRequest();
  virtual ~DecideRequest();

  DecideRequest(const DecideRequest& from);

  inline DecideRequest& operator=(const DecideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecideRequest(DecideRequest&& from) noexcept
    : DecideRequest() {
    *this = ::std::move(from);
  }

  inline DecideRequest& operator=(DecideRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecideRequest& default_instance();

  static inline const DecideRequest* internal_default_instance() {
    return reinterpret_cast<const DecideRequest*>(
               &_DecideRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DecideRequest* other);
  friend void swap(DecideRequest& a, DecideRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecideRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DecideRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecideRequest& from);
  void MergeFrom(const DecideRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecideRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // .txnpb.TxnStatus status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::txnpb::TxnStatus status() const;
  void set_status(::txnpb::TxnStatus value);

  // bool recover = 4;
  void clear_recover();
  static const int kRecoverFieldNumber = 4;
  bool recover() const;
  void set_recover(bool value);

  // @@protoc_insertion_point(class_scope:txnpb.DecideRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  int status_;
  bool recover_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecideResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DecideResponse) */ {
 public:
  DecideResponse();
  virtual ~DecideResponse();

  DecideResponse(const DecideResponse& from);

  inline DecideResponse& operator=(const DecideResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecideResponse(DecideResponse&& from) noexcept
    : DecideResponse() {
    *this = ::std::move(from);
  }

  inline DecideResponse& operator=(DecideResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecideResponse& default_instance();

  static inline const DecideResponse* internal_default_instance() {
    return reinterpret_cast<const DecideResponse*>(
               &_DecideResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DecideResponse* other);
  friend void swap(DecideResponse& a, DecideResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecideResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DecideResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecideResponse& from);
  void MergeFrom(const DecideResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecideResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes secondary_keys = 2;
  int secondary_keys_size() const;
  void clear_secondary_keys();
  static const int kSecondaryKeysFieldNumber = 2;
  const ::std::string& secondary_keys(int index) const;
  ::std::string* mutable_secondary_keys(int index);
  void set_secondary_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_secondary_keys(int index, ::std::string&& value);
  #endif
  void set_secondary_keys(int index, const char* value);
  void set_secondary_keys(int index, const void* value, size_t size);
  ::std::string* add_secondary_keys();
  void add_secondary_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_secondary_keys(::std::string&& value);
  #endif
  void add_secondary_keys(const char* value);
  void add_secondary_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& secondary_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secondary_keys();

  // .txnpb.TxnError err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::txnpb::TxnError& err() const;
  ::txnpb::TxnError* mutable_err();
  ::txnpb::TxnError* release_err();
  void set_allocated_err(::txnpb::TxnError* err);

  // @@protoc_insertion_point(class_scope:txnpb.DecideResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secondary_keys_;
  ::txnpb::TxnError* err_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsDecideRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsDecideRequest) */ {
 public:
  DsDecideRequest();
  virtual ~DsDecideRequest();

  DsDecideRequest(const DsDecideRequest& from);

  inline DsDecideRequest& operator=(const DsDecideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDecideRequest(DsDecideRequest&& from) noexcept
    : DsDecideRequest() {
    *this = ::std::move(from);
  }

  inline DsDecideRequest& operator=(DsDecideRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsDecideRequest& default_instance();

  static inline const DsDecideRequest* internal_default_instance() {
    return reinterpret_cast<const DsDecideRequest*>(
               &_DsDecideRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DsDecideRequest* other);
  friend void swap(DsDecideRequest& a, DsDecideRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDecideRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDecideRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDecideRequest& from);
  void MergeFrom(const DsDecideRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDecideRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .txnpb.DecideRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::txnpb::DecideRequest& req() const;
  ::txnpb::DecideRequest* mutable_req();
  ::txnpb::DecideRequest* release_req();
  void set_allocated_req(::txnpb::DecideRequest* req);

  // @@protoc_insertion_point(class_scope:txnpb.DsDecideRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::txnpb::DecideRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsDecideResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsDecideResponse) */ {
 public:
  DsDecideResponse();
  virtual ~DsDecideResponse();

  DsDecideResponse(const DsDecideResponse& from);

  inline DsDecideResponse& operator=(const DsDecideResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDecideResponse(DsDecideResponse&& from) noexcept
    : DsDecideResponse() {
    *this = ::std::move(from);
  }

  inline DsDecideResponse& operator=(DsDecideResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsDecideResponse& default_instance();

  static inline const DsDecideResponse* internal_default_instance() {
    return reinterpret_cast<const DsDecideResponse*>(
               &_DsDecideResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DsDecideResponse* other);
  friend void swap(DsDecideResponse& a, DsDecideResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDecideResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDecideResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDecideResponse& from);
  void MergeFrom(const DsDecideResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDecideResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .txnpb.DecideResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::txnpb::DecideResponse& resp() const;
  ::txnpb::DecideResponse* mutable_resp();
  ::txnpb::DecideResponse* release_resp();
  void set_allocated_resp(::txnpb::DecideResponse* resp);

  // @@protoc_insertion_point(class_scope:txnpb.DsDecideResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::txnpb::DecideResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.ClearupRequest) */ {
 public:
  ClearupRequest();
  virtual ~ClearupRequest();

  ClearupRequest(const ClearupRequest& from);

  inline ClearupRequest& operator=(const ClearupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearupRequest(ClearupRequest&& from) noexcept
    : ClearupRequest() {
    *this = ::std::move(from);
  }

  inline ClearupRequest& operator=(ClearupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearupRequest& default_instance();

  static inline const ClearupRequest* internal_default_instance() {
    return reinterpret_cast<const ClearupRequest*>(
               &_ClearupRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ClearupRequest* other);
  friend void swap(ClearupRequest& a, ClearupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearupRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearupRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearupRequest& from);
  void MergeFrom(const ClearupRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 2;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 2;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // @@protoc_insertion_point(class_scope:txnpb.ClearupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.ClearupResponse) */ {
 public:
  ClearupResponse();
  virtual ~ClearupResponse();

  ClearupResponse(const ClearupResponse& from);

  inline ClearupResponse& operator=(const ClearupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearupResponse(ClearupResponse&& from) noexcept
    : ClearupResponse() {
    *this = ::std::move(from);
  }

  inline ClearupResponse& operator=(ClearupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearupResponse& default_instance();

  static inline const ClearupResponse* internal_default_instance() {
    return reinterpret_cast<const ClearupResponse*>(
               &_ClearupResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ClearupResponse* other);
  friend void swap(ClearupResponse& a, ClearupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearupResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearupResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearupResponse& from);
  void MergeFrom(const ClearupResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .txnpb.TxnError err = 1;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::txnpb::TxnError& err() const;
  ::txnpb::TxnError* mutable_err();
  ::txnpb::TxnError* release_err();
  void set_allocated_err(::txnpb::TxnError* err);

  // @@protoc_insertion_point(class_scope:txnpb.ClearupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::txnpb::TxnError* err_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsClearupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsClearupRequest) */ {
 public:
  DsClearupRequest();
  virtual ~DsClearupRequest();

  DsClearupRequest(const DsClearupRequest& from);

  inline DsClearupRequest& operator=(const DsClearupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsClearupRequest(DsClearupRequest&& from) noexcept
    : DsClearupRequest() {
    *this = ::std::move(from);
  }

  inline DsClearupRequest& operator=(DsClearupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsClearupRequest& default_instance();

  static inline const DsClearupRequest* internal_default_instance() {
    return reinterpret_cast<const DsClearupRequest*>(
               &_DsClearupRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DsClearupRequest* other);
  friend void swap(DsClearupRequest& a, DsClearupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsClearupRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsClearupRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsClearupRequest& from);
  void MergeFrom(const DsClearupRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsClearupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .txnpb.ClearupRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::txnpb::ClearupRequest& req() const;
  ::txnpb::ClearupRequest* mutable_req();
  ::txnpb::ClearupRequest* release_req();
  void set_allocated_req(::txnpb::ClearupRequest* req);

  // @@protoc_insertion_point(class_scope:txnpb.DsClearupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::txnpb::ClearupRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsClearupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsClearupResponse) */ {
 public:
  DsClearupResponse();
  virtual ~DsClearupResponse();

  DsClearupResponse(const DsClearupResponse& from);

  inline DsClearupResponse& operator=(const DsClearupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsClearupResponse(DsClearupResponse&& from) noexcept
    : DsClearupResponse() {
    *this = ::std::move(from);
  }

  inline DsClearupResponse& operator=(DsClearupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsClearupResponse& default_instance();

  static inline const DsClearupResponse* internal_default_instance() {
    return reinterpret_cast<const DsClearupResponse*>(
               &_DsClearupResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DsClearupResponse* other);
  friend void swap(DsClearupResponse& a, DsClearupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsClearupResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsClearupResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsClearupResponse& from);
  void MergeFrom(const DsClearupResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsClearupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .txnpb.ClearupResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::txnpb::ClearupResponse& resp() const;
  ::txnpb::ClearupResponse* mutable_resp();
  ::txnpb::ClearupResponse* release_resp();
  void set_allocated_resp(::txnpb::ClearupResponse* resp);

  // @@protoc_insertion_point(class_scope:txnpb.DsClearupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::txnpb::ClearupResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLockInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.GetLockInfoRequest) */ {
 public:
  GetLockInfoRequest();
  virtual ~GetLockInfoRequest();

  GetLockInfoRequest(const GetLockInfoRequest& from);

  inline GetLockInfoRequest& operator=(const GetLockInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLockInfoRequest(GetLockInfoRequest&& from) noexcept
    : GetLockInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetLockInfoRequest& operator=(GetLockInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLockInfoRequest& default_instance();

  static inline const GetLockInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetLockInfoRequest*>(
               &_GetLockInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetLockInfoRequest* other);
  friend void swap(GetLockInfoRequest& a, GetLockInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLockInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLockInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLockInfoRequest& from);
  void MergeFrom(const GetLockInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLockInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string txn_id = 2;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // @@protoc_insertion_point(class_scope:txnpb.GetLockInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLockInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.GetLockInfoResponse) */ {
 public:
  GetLockInfoResponse();
  virtual ~GetLockInfoResponse();

  GetLockInfoResponse(const GetLockInfoResponse& from);

  inline GetLockInfoResponse& operator=(const GetLockInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLockInfoResponse(GetLockInfoResponse&& from) noexcept
    : GetLockInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetLockInfoResponse& operator=(GetLockInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLockInfoResponse& default_instance();

  static inline const GetLockInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetLockInfoResponse*>(
               &_GetLockInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GetLockInfoResponse* other);
  friend void swap(GetLockInfoResponse& a, GetLockInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLockInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLockInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLockInfoResponse& from);
  void MergeFrom(const GetLockInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLockInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .txnpb.LockInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::txnpb::LockInfo& info() const;
  ::txnpb::LockInfo* mutable_info();
  ::txnpb::LockInfo* release_info();
  void set_allocated_info(::txnpb::LockInfo* info);

  // @@protoc_insertion_point(class_scope:txnpb.GetLockInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::txnpb::LockInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsGetLockInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsGetLockInfoRequest) */ {
 public:
  DsGetLockInfoRequest();
  virtual ~DsGetLockInfoRequest();

  DsGetLockInfoRequest(const DsGetLockInfoRequest& from);

  inline DsGetLockInfoRequest& operator=(const DsGetLockInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsGetLockInfoRequest(DsGetLockInfoRequest&& from) noexcept
    : DsGetLockInfoRequest() {
    *this = ::std::move(from);
  }

  inline DsGetLockInfoRequest& operator=(DsGetLockInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsGetLockInfoRequest& default_instance();

  static inline const DsGetLockInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DsGetLockInfoRequest*>(
               &_DsGetLockInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DsGetLockInfoRequest* other);
  friend void swap(DsGetLockInfoRequest& a, DsGetLockInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsGetLockInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsGetLockInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsGetLockInfoRequest& from);
  void MergeFrom(const DsGetLockInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsGetLockInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .txnpb.GetLockInfoRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::txnpb::GetLockInfoRequest& req() const;
  ::txnpb::GetLockInfoRequest* mutable_req();
  ::txnpb::GetLockInfoRequest* release_req();
  void set_allocated_req(::txnpb::GetLockInfoRequest* req);

  // @@protoc_insertion_point(class_scope:txnpb.DsGetLockInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::txnpb::GetLockInfoRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsGetLockInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsGetLockInfoResponse) */ {
 public:
  DsGetLockInfoResponse();
  virtual ~DsGetLockInfoResponse();

  DsGetLockInfoResponse(const DsGetLockInfoResponse& from);

  inline DsGetLockInfoResponse& operator=(const DsGetLockInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsGetLockInfoResponse(DsGetLockInfoResponse&& from) noexcept
    : DsGetLockInfoResponse() {
    *this = ::std::move(from);
  }

  inline DsGetLockInfoResponse& operator=(DsGetLockInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsGetLockInfoResponse& default_instance();

  static inline const DsGetLockInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DsGetLockInfoResponse*>(
               &_DsGetLockInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DsGetLockInfoResponse* other);
  friend void swap(DsGetLockInfoResponse& a, DsGetLockInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsGetLockInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsGetLockInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsGetLockInfoResponse& from);
  void MergeFrom(const DsGetLockInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsGetLockInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .txnpb.GetLockInfoResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::txnpb::GetLockInfoResponse& resp() const;
  ::txnpb::GetLockInfoResponse* mutable_resp();
  ::txnpb::GetLockInfoResponse* release_resp();
  void set_allocated_resp(::txnpb::GetLockInfoResponse* resp);

  // @@protoc_insertion_point(class_scope:txnpb.DsGetLockInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::txnpb::GetLockInfoResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.SelectRequest) */ {
 public:
  SelectRequest();
  virtual ~SelectRequest();

  SelectRequest(const SelectRequest& from);

  inline SelectRequest& operator=(const SelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectRequest(SelectRequest&& from) noexcept
    : SelectRequest() {
    *this = ::std::move(from);
  }

  inline SelectRequest& operator=(SelectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectRequest& default_instance();

  static inline const SelectRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRequest*>(
               &_SelectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SelectRequest* other);
  friend void swap(SelectRequest& a, SelectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectRequest& from);
  void MergeFrom(const SelectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .kvrpcpb.SelectField field_list = 3;
  int field_list_size() const;
  void clear_field_list();
  static const int kFieldListFieldNumber = 3;
  const ::kvrpcpb::SelectField& field_list(int index) const;
  ::kvrpcpb::SelectField* mutable_field_list(int index);
  ::kvrpcpb::SelectField* add_field_list();
  ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >*
      mutable_field_list();
  const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >&
      field_list() const;

  // repeated .kvrpcpb.Match where_filters = 4;
  int where_filters_size() const;
  void clear_where_filters();
  static const int kWhereFiltersFieldNumber = 4;
  const ::kvrpcpb::Match& where_filters(int index) const;
  ::kvrpcpb::Match* mutable_where_filters(int index);
  ::kvrpcpb::Match* add_where_filters();
  ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >*
      mutable_where_filters();
  const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >&
      where_filters() const;

  // repeated .metapb.Column group_bys = 5;
  int group_bys_size() const;
  void clear_group_bys();
  static const int kGroupBysFieldNumber = 5;
  const ::metapb::Column& group_bys(int index) const;
  ::metapb::Column* mutable_group_bys(int index);
  ::metapb::Column* add_group_bys();
  ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
      mutable_group_bys();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
      group_bys() const;

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .kvrpcpb.Scope scope = 2;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 2;
  const ::kvrpcpb::Scope& scope() const;
  ::kvrpcpb::Scope* mutable_scope();
  ::kvrpcpb::Scope* release_scope();
  void set_allocated_scope(::kvrpcpb::Scope* scope);

  // .kvrpcpb.Limit limit = 6;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  const ::kvrpcpb::Limit& limit() const;
  ::kvrpcpb::Limit* mutable_limit();
  ::kvrpcpb::Limit* release_limit();
  void set_allocated_limit(::kvrpcpb::Limit* limit);

  // @@protoc_insertion_point(class_scope:txnpb.SelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField > field_list_;
  ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match > where_filters_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Column > group_bys_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::kvrpcpb::Scope* scope_;
  ::kvrpcpb::Limit* limit_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.RowValue) */ {
 public:
  RowValue();
  virtual ~RowValue();

  RowValue(const RowValue& from);

  inline RowValue& operator=(const RowValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowValue(RowValue&& from) noexcept
    : RowValue() {
    *this = ::std::move(from);
  }

  inline RowValue& operator=(RowValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowValue& default_instance();

  static inline const RowValue* internal_default_instance() {
    return reinterpret_cast<const RowValue*>(
               &_RowValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(RowValue* other);
  friend void swap(RowValue& a, RowValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowValue* New() const PROTOBUF_FINAL { return New(NULL); }

  RowValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowValue& from);
  void MergeFrom(const RowValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 aggred_counts = 2;
  int aggred_counts_size() const;
  void clear_aggred_counts();
  static const int kAggredCountsFieldNumber = 2;
  ::google::protobuf::int64 aggred_counts(int index) const;
  void set_aggred_counts(int index, ::google::protobuf::int64 value);
  void add_aggred_counts(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      aggred_counts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_aggred_counts();

  // bytes fields = 1;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  const ::std::string& fields() const;
  void set_fields(const ::std::string& value);
  #if LANG_CXX11
  void set_fields(::std::string&& value);
  #endif
  void set_fields(const char* value);
  void set_fields(const void* value, size_t size);
  ::std::string* mutable_fields();
  ::std::string* release_fields();
  void set_allocated_fields(::std::string* fields);

  // uint64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:txnpb.RowValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > aggred_counts_;
  mutable int _aggred_counts_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr fields_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.RowIntent) */ {
 public:
  RowIntent();
  virtual ~RowIntent();

  RowIntent(const RowIntent& from);

  inline RowIntent& operator=(const RowIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowIntent(RowIntent&& from) noexcept
    : RowIntent() {
    *this = ::std::move(from);
  }

  inline RowIntent& operator=(RowIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowIntent& default_instance();

  static inline const RowIntent* internal_default_instance() {
    return reinterpret_cast<const RowIntent*>(
               &_RowIntent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(RowIntent* other);
  friend void swap(RowIntent& a, RowIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowIntent* New() const PROTOBUF_FINAL { return New(NULL); }

  RowIntent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowIntent& from);
  void MergeFrom(const RowIntent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  const ::std::string& txn_id() const;
  void set_txn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_id(::std::string&& value);
  #endif
  void set_txn_id(const char* value);
  void set_txn_id(const char* value, size_t size);
  ::std::string* mutable_txn_id();
  ::std::string* release_txn_id();
  void set_allocated_txn_id(::std::string* txn_id);

  // bytes primary_key = 2;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 2;
  const ::std::string& primary_key() const;
  void set_primary_key(const ::std::string& value);
  #if LANG_CXX11
  void set_primary_key(::std::string&& value);
  #endif
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  ::std::string* mutable_primary_key();
  ::std::string* release_primary_key();
  void set_allocated_primary_key(::std::string* primary_key);

  // .txnpb.RowValue value = 10;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::txnpb::RowValue& value() const;
  ::txnpb::RowValue* mutable_value();
  ::txnpb::RowValue* release_value();
  void set_allocated_value(::txnpb::RowValue* value);

  // bool timeout = 3;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  bool timeout() const;
  void set_timeout(bool value);

  // @@protoc_insertion_point(class_scope:txnpb.RowIntent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txn_id_;
  ::google::protobuf::internal::ArenaStringPtr primary_key_;
  ::txnpb::RowValue* value_;
  bool timeout_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .txnpb.RowValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::txnpb::RowValue& value() const;
  ::txnpb::RowValue* mutable_value();
  ::txnpb::RowValue* release_value();
  void set_allocated_value(::txnpb::RowValue* value);

  // .txnpb.RowIntent intent = 3;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 3;
  const ::txnpb::RowIntent& intent() const;
  ::txnpb::RowIntent* mutable_intent();
  ::txnpb::RowIntent* release_intent();
  void set_allocated_intent(::txnpb::RowIntent* intent);

  // @@protoc_insertion_point(class_scope:txnpb.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::txnpb::RowValue* value_;
  ::txnpb::RowIntent* intent_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.SelectResponse) */ {
 public:
  SelectResponse();
  virtual ~SelectResponse();

  SelectResponse(const SelectResponse& from);

  inline SelectResponse& operator=(const SelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectResponse(SelectResponse&& from) noexcept
    : SelectResponse() {
    *this = ::std::move(from);
  }

  inline SelectResponse& operator=(SelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectResponse& default_instance();

  static inline const SelectResponse* internal_default_instance() {
    return reinterpret_cast<const SelectResponse*>(
               &_SelectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(SelectResponse* other);
  friend void swap(SelectResponse& a, SelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectResponse& from);
  void MergeFrom(const SelectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .txnpb.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::txnpb::Row& rows(int index) const;
  ::txnpb::Row* mutable_rows(int index);
  ::txnpb::Row* add_rows();
  ::google::protobuf::RepeatedPtrField< ::txnpb::Row >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::txnpb::Row >&
      rows() const;

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:txnpb.SelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::txnpb::Row > rows_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsSelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsSelectRequest) */ {
 public:
  DsSelectRequest();
  virtual ~DsSelectRequest();

  DsSelectRequest(const DsSelectRequest& from);

  inline DsSelectRequest& operator=(const DsSelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsSelectRequest(DsSelectRequest&& from) noexcept
    : DsSelectRequest() {
    *this = ::std::move(from);
  }

  inline DsSelectRequest& operator=(DsSelectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsSelectRequest& default_instance();

  static inline const DsSelectRequest* internal_default_instance() {
    return reinterpret_cast<const DsSelectRequest*>(
               &_DsSelectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DsSelectRequest* other);
  friend void swap(DsSelectRequest& a, DsSelectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsSelectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsSelectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsSelectRequest& from);
  void MergeFrom(const DsSelectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsSelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .txnpb.SelectRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::txnpb::SelectRequest& req() const;
  ::txnpb::SelectRequest* mutable_req();
  ::txnpb::SelectRequest* release_req();
  void set_allocated_req(::txnpb::SelectRequest* req);

  // @@protoc_insertion_point(class_scope:txnpb.DsSelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::txnpb::SelectRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsSelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:txnpb.DsSelectResponse) */ {
 public:
  DsSelectResponse();
  virtual ~DsSelectResponse();

  DsSelectResponse(const DsSelectResponse& from);

  inline DsSelectResponse& operator=(const DsSelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsSelectResponse(DsSelectResponse&& from) noexcept
    : DsSelectResponse() {
    *this = ::std::move(from);
  }

  inline DsSelectResponse& operator=(DsSelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsSelectResponse& default_instance();

  static inline const DsSelectResponse* internal_default_instance() {
    return reinterpret_cast<const DsSelectResponse*>(
               &_DsSelectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(DsSelectResponse* other);
  friend void swap(DsSelectResponse& a, DsSelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsSelectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsSelectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsSelectResponse& from);
  void MergeFrom(const DsSelectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsSelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .txnpb.SelectResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::txnpb::SelectResponse& resp() const;
  ::txnpb::SelectResponse* mutable_resp();
  ::txnpb::SelectResponse* release_resp();
  void set_allocated_resp(::txnpb::SelectResponse* resp);

  // @@protoc_insertion_point(class_scope:txnpb.DsSelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::txnpb::SelectResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_txn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxnIntent

// .txnpb.OpType typ = 1;
inline void TxnIntent::clear_typ() {
  typ_ = 0;
}
inline ::txnpb::OpType TxnIntent::typ() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.typ)
  return static_cast< ::txnpb::OpType >(typ_);
}
inline void TxnIntent::set_typ(::txnpb::OpType value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.typ)
}

// bytes key = 2;
inline void TxnIntent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnIntent::key() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.key)
  return key_.GetNoArena();
}
inline void TxnIntent::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.key)
}
#if LANG_CXX11
inline void TxnIntent::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.TxnIntent.key)
}
#endif
inline void TxnIntent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.TxnIntent.key)
}
inline void TxnIntent::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.TxnIntent.key)
}
inline ::std::string* TxnIntent::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.TxnIntent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnIntent::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.TxnIntent.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnIntent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnIntent.key)
}

// bytes value = 3;
inline void TxnIntent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnIntent::value() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.value)
  return value_.GetNoArena();
}
inline void TxnIntent::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.value)
}
#if LANG_CXX11
inline void TxnIntent::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.TxnIntent.value)
}
#endif
inline void TxnIntent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.TxnIntent.value)
}
inline void TxnIntent::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.TxnIntent.value)
}
inline ::std::string* TxnIntent::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.TxnIntent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnIntent::release_value() {
  // @@protoc_insertion_point(field_release:txnpb.TxnIntent.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnIntent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnIntent.value)
}

// bool check_unique = 4;
inline void TxnIntent::clear_check_unique() {
  check_unique_ = false;
}
inline bool TxnIntent::check_unique() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.check_unique)
  return check_unique_;
}
inline void TxnIntent::set_check_unique(bool value) {
  
  check_unique_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.check_unique)
}

// uint64 expected_ver = 5;
inline void TxnIntent::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnIntent::expected_ver() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.expected_ver)
  return expected_ver_;
}
inline void TxnIntent::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.expected_ver)
}

// bool is_primary = 6;
inline void TxnIntent::clear_is_primary() {
  is_primary_ = false;
}
inline bool TxnIntent::is_primary() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnIntent.is_primary)
  return is_primary_;
}
inline void TxnIntent::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnIntent.is_primary)
}

// -------------------------------------------------------------------

// TxnValue

// string txn_id = 1;
inline void TxnValue::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnValue::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.txn_id)
  return txn_id_.GetNoArena();
}
inline void TxnValue::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.txn_id)
}
#if LANG_CXX11
inline void TxnValue::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.TxnValue.txn_id)
}
#endif
inline void TxnValue::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.TxnValue.txn_id)
}
inline void TxnValue::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.TxnValue.txn_id)
}
inline ::std::string* TxnValue::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.TxnValue.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnValue::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.TxnValue.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnValue::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnValue.txn_id)
}

// .txnpb.TxnIntent intent = 2;
inline bool TxnValue::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
inline void TxnValue::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
inline const ::txnpb::TxnIntent& TxnValue::intent() const {
  const ::txnpb::TxnIntent* p = intent_;
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::TxnIntent*>(
      &::txnpb::_TxnIntent_default_instance_);
}
inline ::txnpb::TxnIntent* TxnValue::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::txnpb::TxnIntent;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.TxnValue.intent)
  return intent_;
}
inline ::txnpb::TxnIntent* TxnValue::release_intent() {
  // @@protoc_insertion_point(field_release:txnpb.TxnValue.intent)
  
  ::txnpb::TxnIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline void TxnValue::set_allocated_intent(::txnpb::TxnIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnValue.intent)
}

// bytes primary_key = 3;
inline void TxnValue::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxnValue::primary_key() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.primary_key)
  return primary_key_.GetNoArena();
}
inline void TxnValue::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.primary_key)
}
#if LANG_CXX11
inline void TxnValue::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.TxnValue.primary_key)
}
#endif
inline void TxnValue::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.TxnValue.primary_key)
}
inline void TxnValue::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.TxnValue.primary_key)
}
inline ::std::string* TxnValue::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.TxnValue.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxnValue::release_primary_key() {
  // @@protoc_insertion_point(field_release:txnpb.TxnValue.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxnValue::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnValue.primary_key)
}

// uint64 expired_at = 4;
inline void TxnValue::clear_expired_at() {
  expired_at_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnValue::expired_at() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.expired_at)
  return expired_at_;
}
inline void TxnValue::set_expired_at(::google::protobuf::uint64 value) {
  
  expired_at_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.expired_at)
}

// uint64 version = 5;
inline void TxnValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnValue::version() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.version)
  return version_;
}
inline void TxnValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.version)
}

// .txnpb.TxnStatus txn_status = 10;
inline void TxnValue::clear_txn_status() {
  txn_status_ = 0;
}
inline ::txnpb::TxnStatus TxnValue::txn_status() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.txn_status)
  return static_cast< ::txnpb::TxnStatus >(txn_status_);
}
inline void TxnValue::set_txn_status(::txnpb::TxnStatus value) {
  
  txn_status_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.txn_status)
}

// repeated bytes secondary_keys = 11;
inline int TxnValue::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void TxnValue::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& TxnValue::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.TxnValue.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* TxnValue::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.TxnValue.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void TxnValue::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TxnValue::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txnpb.TxnValue.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TxnValue::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txnpb.TxnValue.secondary_keys)
}
inline void TxnValue::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txnpb.TxnValue.secondary_keys)
}
inline ::std::string* TxnValue::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txnpb.TxnValue.secondary_keys)
  return secondary_keys_.Add();
}
inline void TxnValue::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txnpb.TxnValue.secondary_keys)
}
#if LANG_CXX11
inline void TxnValue::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txnpb.TxnValue.secondary_keys)
}
#endif
inline void TxnValue::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txnpb.TxnValue.secondary_keys)
}
inline void TxnValue::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txnpb.TxnValue.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TxnValue::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txnpb.TxnValue.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TxnValue::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.TxnValue.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// LockInfo

// string txn_id = 1;
inline void LockInfo::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInfo::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.txn_id)
  return txn_id_.GetNoArena();
}
inline void LockInfo::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.txn_id)
}
#if LANG_CXX11
inline void LockInfo::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.LockInfo.txn_id)
}
#endif
inline void LockInfo::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.LockInfo.txn_id)
}
inline void LockInfo::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.LockInfo.txn_id)
}
inline ::std::string* LockInfo::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.LockInfo.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInfo::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.LockInfo.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInfo::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.LockInfo.txn_id)
}

// bool timeout = 2;
inline void LockInfo::clear_timeout() {
  timeout_ = false;
}
inline bool LockInfo::timeout() const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.timeout)
  return timeout_;
}
inline void LockInfo::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.timeout)
}

// bool is_primary = 10;
inline void LockInfo::clear_is_primary() {
  is_primary_ = false;
}
inline bool LockInfo::is_primary() const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.is_primary)
  return is_primary_;
}
inline void LockInfo::set_is_primary(bool value) {
  
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.is_primary)
}

// bytes primary_key = 11;
inline void LockInfo::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInfo::primary_key() const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.primary_key)
  return primary_key_.GetNoArena();
}
inline void LockInfo::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.primary_key)
}
#if LANG_CXX11
inline void LockInfo::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.LockInfo.primary_key)
}
#endif
inline void LockInfo::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.LockInfo.primary_key)
}
inline void LockInfo::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.LockInfo.primary_key)
}
inline ::std::string* LockInfo::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.LockInfo.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInfo::release_primary_key() {
  // @@protoc_insertion_point(field_release:txnpb.LockInfo.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInfo::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.LockInfo.primary_key)
}

// .txnpb.TxnStatus status = 12;
inline void LockInfo::clear_status() {
  status_ = 0;
}
inline ::txnpb::TxnStatus LockInfo::status() const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.status)
  return static_cast< ::txnpb::TxnStatus >(status_);
}
inline void LockInfo::set_status(::txnpb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.status)
}

// repeated bytes secondary_keys = 13;
inline int LockInfo::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void LockInfo::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& LockInfo::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.LockInfo.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* LockInfo::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.LockInfo.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void LockInfo::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LockInfo::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txnpb.LockInfo.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LockInfo::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txnpb.LockInfo.secondary_keys)
}
inline void LockInfo::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txnpb.LockInfo.secondary_keys)
}
inline ::std::string* LockInfo::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txnpb.LockInfo.secondary_keys)
  return secondary_keys_.Add();
}
inline void LockInfo::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txnpb.LockInfo.secondary_keys)
}
#if LANG_CXX11
inline void LockInfo::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txnpb.LockInfo.secondary_keys)
}
#endif
inline void LockInfo::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txnpb.LockInfo.secondary_keys)
}
inline void LockInfo::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txnpb.LockInfo.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockInfo::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txnpb.LockInfo.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockInfo::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.LockInfo.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// LockError

// bytes key = 1;
inline void LockError::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockError::key() const {
  // @@protoc_insertion_point(field_get:txnpb.LockError.key)
  return key_.GetNoArena();
}
inline void LockError::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.LockError.key)
}
#if LANG_CXX11
inline void LockError::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.LockError.key)
}
#endif
inline void LockError::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.LockError.key)
}
inline void LockError::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.LockError.key)
}
inline ::std::string* LockError::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.LockError.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockError::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.LockError.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockError::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.LockError.key)
}

// .txnpb.LockInfo info = 2;
inline bool LockError::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void LockError::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::txnpb::LockInfo& LockError::info() const {
  const ::txnpb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:txnpb.LockError.info)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::LockInfo*>(
      &::txnpb::_LockInfo_default_instance_);
}
inline ::txnpb::LockInfo* LockError::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::txnpb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.LockError.info)
  return info_;
}
inline ::txnpb::LockInfo* LockError::release_info() {
  // @@protoc_insertion_point(field_release:txnpb.LockError.info)
  
  ::txnpb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void LockError::set_allocated_info(::txnpb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.LockError.info)
}

// -------------------------------------------------------------------

// UnexpectedVer

// bytes key = 1;
inline void UnexpectedVer::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnexpectedVer::key() const {
  // @@protoc_insertion_point(field_get:txnpb.UnexpectedVer.key)
  return key_.GetNoArena();
}
inline void UnexpectedVer::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.UnexpectedVer.key)
}
#if LANG_CXX11
inline void UnexpectedVer::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.UnexpectedVer.key)
}
#endif
inline void UnexpectedVer::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.UnexpectedVer.key)
}
inline void UnexpectedVer::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.UnexpectedVer.key)
}
inline ::std::string* UnexpectedVer::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.UnexpectedVer.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnexpectedVer::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.UnexpectedVer.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnexpectedVer::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.UnexpectedVer.key)
}

// uint64 expected_ver = 2;
inline void UnexpectedVer::clear_expected_ver() {
  expected_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnexpectedVer::expected_ver() const {
  // @@protoc_insertion_point(field_get:txnpb.UnexpectedVer.expected_ver)
  return expected_ver_;
}
inline void UnexpectedVer::set_expected_ver(::google::protobuf::uint64 value) {
  
  expected_ver_ = value;
  // @@protoc_insertion_point(field_set:txnpb.UnexpectedVer.expected_ver)
}

// uint64 actual_ver = 3;
inline void UnexpectedVer::clear_actual_ver() {
  actual_ver_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnexpectedVer::actual_ver() const {
  // @@protoc_insertion_point(field_get:txnpb.UnexpectedVer.actual_ver)
  return actual_ver_;
}
inline void UnexpectedVer::set_actual_ver(::google::protobuf::uint64 value) {
  
  actual_ver_ = value;
  // @@protoc_insertion_point(field_set:txnpb.UnexpectedVer.actual_ver)
}

// -------------------------------------------------------------------

// StatusConflict

// .txnpb.TxnStatus status = 1;
inline void StatusConflict::clear_status() {
  status_ = 0;
}
inline ::txnpb::TxnStatus StatusConflict::status() const {
  // @@protoc_insertion_point(field_get:txnpb.StatusConflict.status)
  return static_cast< ::txnpb::TxnStatus >(status_);
}
inline void StatusConflict::set_status(::txnpb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txnpb.StatusConflict.status)
}

// -------------------------------------------------------------------

// ServerError

// int32 code = 1;
inline void ServerError::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ServerError::code() const {
  // @@protoc_insertion_point(field_get:txnpb.ServerError.code)
  return code_;
}
inline void ServerError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:txnpb.ServerError.code)
}

// string msg = 2;
inline void ServerError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerError::msg() const {
  // @@protoc_insertion_point(field_get:txnpb.ServerError.msg)
  return msg_.GetNoArena();
}
inline void ServerError::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.ServerError.msg)
}
#if LANG_CXX11
inline void ServerError::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.ServerError.msg)
}
#endif
inline void ServerError::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.ServerError.msg)
}
inline void ServerError::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.ServerError.msg)
}
inline ::std::string* ServerError::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.ServerError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerError::release_msg() {
  // @@protoc_insertion_point(field_release:txnpb.ServerError.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:txnpb.ServerError.msg)
}

// -------------------------------------------------------------------

// TxnError

// .txnpb.TxnError.ErrType err_type = 1;
inline void TxnError::clear_err_type() {
  err_type_ = 0;
}
inline ::txnpb::TxnError_ErrType TxnError::err_type() const {
  // @@protoc_insertion_point(field_get:txnpb.TxnError.err_type)
  return static_cast< ::txnpb::TxnError_ErrType >(err_type_);
}
inline void TxnError::set_err_type(::txnpb::TxnError_ErrType value) {
  
  err_type_ = value;
  // @@protoc_insertion_point(field_set:txnpb.TxnError.err_type)
}

// .txnpb.ServerError server_err = 2;
inline bool TxnError::has_server_err() const {
  return this != internal_default_instance() && server_err_ != NULL;
}
inline void TxnError::clear_server_err() {
  if (GetArenaNoVirtual() == NULL && server_err_ != NULL) delete server_err_;
  server_err_ = NULL;
}
inline const ::txnpb::ServerError& TxnError::server_err() const {
  const ::txnpb::ServerError* p = server_err_;
  // @@protoc_insertion_point(field_get:txnpb.TxnError.server_err)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::ServerError*>(
      &::txnpb::_ServerError_default_instance_);
}
inline ::txnpb::ServerError* TxnError::mutable_server_err() {
  
  if (server_err_ == NULL) {
    server_err_ = new ::txnpb::ServerError;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.TxnError.server_err)
  return server_err_;
}
inline ::txnpb::ServerError* TxnError::release_server_err() {
  // @@protoc_insertion_point(field_release:txnpb.TxnError.server_err)
  
  ::txnpb::ServerError* temp = server_err_;
  server_err_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_server_err(::txnpb::ServerError* server_err) {
  delete server_err_;
  server_err_ = server_err;
  if (server_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnError.server_err)
}

// .txnpb.LockError lock_err = 3;
inline bool TxnError::has_lock_err() const {
  return this != internal_default_instance() && lock_err_ != NULL;
}
inline void TxnError::clear_lock_err() {
  if (GetArenaNoVirtual() == NULL && lock_err_ != NULL) delete lock_err_;
  lock_err_ = NULL;
}
inline const ::txnpb::LockError& TxnError::lock_err() const {
  const ::txnpb::LockError* p = lock_err_;
  // @@protoc_insertion_point(field_get:txnpb.TxnError.lock_err)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::LockError*>(
      &::txnpb::_LockError_default_instance_);
}
inline ::txnpb::LockError* TxnError::mutable_lock_err() {
  
  if (lock_err_ == NULL) {
    lock_err_ = new ::txnpb::LockError;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.TxnError.lock_err)
  return lock_err_;
}
inline ::txnpb::LockError* TxnError::release_lock_err() {
  // @@protoc_insertion_point(field_release:txnpb.TxnError.lock_err)
  
  ::txnpb::LockError* temp = lock_err_;
  lock_err_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_lock_err(::txnpb::LockError* lock_err) {
  delete lock_err_;
  lock_err_ = lock_err;
  if (lock_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnError.lock_err)
}

// .txnpb.UnexpectedVer unexpected_ver = 4;
inline bool TxnError::has_unexpected_ver() const {
  return this != internal_default_instance() && unexpected_ver_ != NULL;
}
inline void TxnError::clear_unexpected_ver() {
  if (GetArenaNoVirtual() == NULL && unexpected_ver_ != NULL) delete unexpected_ver_;
  unexpected_ver_ = NULL;
}
inline const ::txnpb::UnexpectedVer& TxnError::unexpected_ver() const {
  const ::txnpb::UnexpectedVer* p = unexpected_ver_;
  // @@protoc_insertion_point(field_get:txnpb.TxnError.unexpected_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::UnexpectedVer*>(
      &::txnpb::_UnexpectedVer_default_instance_);
}
inline ::txnpb::UnexpectedVer* TxnError::mutable_unexpected_ver() {
  
  if (unexpected_ver_ == NULL) {
    unexpected_ver_ = new ::txnpb::UnexpectedVer;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.TxnError.unexpected_ver)
  return unexpected_ver_;
}
inline ::txnpb::UnexpectedVer* TxnError::release_unexpected_ver() {
  // @@protoc_insertion_point(field_release:txnpb.TxnError.unexpected_ver)
  
  ::txnpb::UnexpectedVer* temp = unexpected_ver_;
  unexpected_ver_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_unexpected_ver(::txnpb::UnexpectedVer* unexpected_ver) {
  delete unexpected_ver_;
  unexpected_ver_ = unexpected_ver;
  if (unexpected_ver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnError.unexpected_ver)
}

// .txnpb.StatusConflict status_conflict = 5;
inline bool TxnError::has_status_conflict() const {
  return this != internal_default_instance() && status_conflict_ != NULL;
}
inline void TxnError::clear_status_conflict() {
  if (GetArenaNoVirtual() == NULL && status_conflict_ != NULL) delete status_conflict_;
  status_conflict_ = NULL;
}
inline const ::txnpb::StatusConflict& TxnError::status_conflict() const {
  const ::txnpb::StatusConflict* p = status_conflict_;
  // @@protoc_insertion_point(field_get:txnpb.TxnError.status_conflict)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::StatusConflict*>(
      &::txnpb::_StatusConflict_default_instance_);
}
inline ::txnpb::StatusConflict* TxnError::mutable_status_conflict() {
  
  if (status_conflict_ == NULL) {
    status_conflict_ = new ::txnpb::StatusConflict;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.TxnError.status_conflict)
  return status_conflict_;
}
inline ::txnpb::StatusConflict* TxnError::release_status_conflict() {
  // @@protoc_insertion_point(field_release:txnpb.TxnError.status_conflict)
  
  ::txnpb::StatusConflict* temp = status_conflict_;
  status_conflict_ = NULL;
  return temp;
}
inline void TxnError::set_allocated_status_conflict(::txnpb::StatusConflict* status_conflict) {
  delete status_conflict_;
  status_conflict_ = status_conflict;
  if (status_conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.TxnError.status_conflict)
}

// -------------------------------------------------------------------

// PrepareRequest

// string txn_id = 1;
inline void PrepareRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void PrepareRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.txn_id)
}
#if LANG_CXX11
inline void PrepareRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.PrepareRequest.txn_id)
}
#endif
inline void PrepareRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.PrepareRequest.txn_id)
}
inline void PrepareRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.PrepareRequest.txn_id)
}
inline ::std::string* PrepareRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.PrepareRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.PrepareRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.PrepareRequest.txn_id)
}

// bool local = 2;
inline void PrepareRequest::clear_local() {
  local_ = false;
}
inline bool PrepareRequest::local() const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.local)
  return local_;
}
inline void PrepareRequest::set_local(bool value) {
  
  local_ = value;
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.local)
}

// repeated .txnpb.TxnIntent intents = 3;
inline int PrepareRequest::intents_size() const {
  return intents_.size();
}
inline void PrepareRequest::clear_intents() {
  intents_.Clear();
}
inline const ::txnpb::TxnIntent& PrepareRequest::intents(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.intents)
  return intents_.Get(index);
}
inline ::txnpb::TxnIntent* PrepareRequest::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.PrepareRequest.intents)
  return intents_.Mutable(index);
}
inline ::txnpb::TxnIntent* PrepareRequest::add_intents() {
  // @@protoc_insertion_point(field_add:txnpb.PrepareRequest.intents)
  return intents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::txnpb::TxnIntent >*
PrepareRequest::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.PrepareRequest.intents)
  return &intents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::txnpb::TxnIntent >&
PrepareRequest::intents() const {
  // @@protoc_insertion_point(field_list:txnpb.PrepareRequest.intents)
  return intents_;
}

// bytes primary_key = 4;
inline void PrepareRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.primary_key)
  return primary_key_.GetNoArena();
}
inline void PrepareRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.primary_key)
}
#if LANG_CXX11
inline void PrepareRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.PrepareRequest.primary_key)
}
#endif
inline void PrepareRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.PrepareRequest.primary_key)
}
inline void PrepareRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.PrepareRequest.primary_key)
}
inline ::std::string* PrepareRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.PrepareRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:txnpb.PrepareRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.PrepareRequest.primary_key)
}

// uint64 lock_ttl = 5;
inline void PrepareRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.lock_ttl)
  return lock_ttl_;
}
inline void PrepareRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.lock_ttl)
}

// repeated bytes secondary_keys = 6;
inline int PrepareRequest::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void PrepareRequest::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& PrepareRequest::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* PrepareRequest::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.PrepareRequest.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void PrepareRequest::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PrepareRequest::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PrepareRequest::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txnpb.PrepareRequest.secondary_keys)
}
inline void PrepareRequest::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txnpb.PrepareRequest.secondary_keys)
}
inline ::std::string* PrepareRequest::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txnpb.PrepareRequest.secondary_keys)
  return secondary_keys_.Add();
}
inline void PrepareRequest::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txnpb.PrepareRequest.secondary_keys)
}
#if LANG_CXX11
inline void PrepareRequest::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txnpb.PrepareRequest.secondary_keys)
}
#endif
inline void PrepareRequest::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txnpb.PrepareRequest.secondary_keys)
}
inline void PrepareRequest::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txnpb.PrepareRequest.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PrepareRequest::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txnpb.PrepareRequest.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PrepareRequest::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.PrepareRequest.secondary_keys)
  return &secondary_keys_;
}

// bool strict_check = 16;
inline void PrepareRequest::clear_strict_check() {
  strict_check_ = false;
}
inline bool PrepareRequest::strict_check() const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareRequest.strict_check)
  return strict_check_;
}
inline void PrepareRequest::set_strict_check(bool value) {
  
  strict_check_ = value;
  // @@protoc_insertion_point(field_set:txnpb.PrepareRequest.strict_check)
}

// -------------------------------------------------------------------

// PrepareResponse

// repeated .txnpb.TxnError errors = 1;
inline int PrepareResponse::errors_size() const {
  return errors_.size();
}
inline void PrepareResponse::clear_errors() {
  errors_.Clear();
}
inline const ::txnpb::TxnError& PrepareResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.PrepareResponse.errors)
  return errors_.Get(index);
}
inline ::txnpb::TxnError* PrepareResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.PrepareResponse.errors)
  return errors_.Mutable(index);
}
inline ::txnpb::TxnError* PrepareResponse::add_errors() {
  // @@protoc_insertion_point(field_add:txnpb.PrepareResponse.errors)
  return errors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::txnpb::TxnError >*
PrepareResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.PrepareResponse.errors)
  return &errors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::txnpb::TxnError >&
PrepareResponse::errors() const {
  // @@protoc_insertion_point(field_list:txnpb.PrepareResponse.errors)
  return errors_;
}

// -------------------------------------------------------------------

// DsPrepareRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsPrepareRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsPrepareRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsPrepareRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsPrepareRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsPrepareRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsPrepareRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsPrepareRequest::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsPrepareRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsPrepareRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsPrepareRequest.header)
}

// .txnpb.PrepareRequest req = 2;
inline bool DsPrepareRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsPrepareRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::txnpb::PrepareRequest& DsPrepareRequest::req() const {
  const ::txnpb::PrepareRequest* p = req_;
  // @@protoc_insertion_point(field_get:txnpb.DsPrepareRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::PrepareRequest*>(
      &::txnpb::_PrepareRequest_default_instance_);
}
inline ::txnpb::PrepareRequest* DsPrepareRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txnpb::PrepareRequest;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsPrepareRequest.req)
  return req_;
}
inline ::txnpb::PrepareRequest* DsPrepareRequest::release_req() {
  // @@protoc_insertion_point(field_release:txnpb.DsPrepareRequest.req)
  
  ::txnpb::PrepareRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsPrepareRequest::set_allocated_req(::txnpb::PrepareRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsPrepareRequest.req)
}

// -------------------------------------------------------------------

// DsPrepareResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsPrepareResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsPrepareResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsPrepareResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsPrepareResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsPrepareResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsPrepareResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsPrepareResponse::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsPrepareResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsPrepareResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsPrepareResponse.header)
}

// .txnpb.PrepareResponse resp = 2;
inline bool DsPrepareResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsPrepareResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::txnpb::PrepareResponse& DsPrepareResponse::resp() const {
  const ::txnpb::PrepareResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txnpb.DsPrepareResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::PrepareResponse*>(
      &::txnpb::_PrepareResponse_default_instance_);
}
inline ::txnpb::PrepareResponse* DsPrepareResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txnpb::PrepareResponse;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsPrepareResponse.resp)
  return resp_;
}
inline ::txnpb::PrepareResponse* DsPrepareResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txnpb.DsPrepareResponse.resp)
  
  ::txnpb::PrepareResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsPrepareResponse::set_allocated_resp(::txnpb::PrepareResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsPrepareResponse.resp)
}

// -------------------------------------------------------------------

// DecideRequest

// string txn_id = 1;
inline void DecideRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecideRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.DecideRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void DecideRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.DecideRequest.txn_id)
}
#if LANG_CXX11
inline void DecideRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.DecideRequest.txn_id)
}
#endif
inline void DecideRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.DecideRequest.txn_id)
}
inline void DecideRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.DecideRequest.txn_id)
}
inline ::std::string* DecideRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.DecideRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecideRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.DecideRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecideRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.DecideRequest.txn_id)
}

// .txnpb.TxnStatus status = 2;
inline void DecideRequest::clear_status() {
  status_ = 0;
}
inline ::txnpb::TxnStatus DecideRequest::status() const {
  // @@protoc_insertion_point(field_get:txnpb.DecideRequest.status)
  return static_cast< ::txnpb::TxnStatus >(status_);
}
inline void DecideRequest::set_status(::txnpb::TxnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:txnpb.DecideRequest.status)
}

// repeated bytes keys = 3;
inline int DecideRequest::keys_size() const {
  return keys_.size();
}
inline void DecideRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& DecideRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.DecideRequest.keys)
  return keys_.Get(index);
}
inline ::std::string* DecideRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.DecideRequest.keys)
  return keys_.Mutable(index);
}
inline void DecideRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txnpb.DecideRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DecideRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txnpb.DecideRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DecideRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txnpb.DecideRequest.keys)
}
inline void DecideRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txnpb.DecideRequest.keys)
}
inline ::std::string* DecideRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:txnpb.DecideRequest.keys)
  return keys_.Add();
}
inline void DecideRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txnpb.DecideRequest.keys)
}
#if LANG_CXX11
inline void DecideRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txnpb.DecideRequest.keys)
}
#endif
inline void DecideRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txnpb.DecideRequest.keys)
}
inline void DecideRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txnpb.DecideRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideRequest::keys() const {
  // @@protoc_insertion_point(field_list:txnpb.DecideRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecideRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.DecideRequest.keys)
  return &keys_;
}

// bool recover = 4;
inline void DecideRequest::clear_recover() {
  recover_ = false;
}
inline bool DecideRequest::recover() const {
  // @@protoc_insertion_point(field_get:txnpb.DecideRequest.recover)
  return recover_;
}
inline void DecideRequest::set_recover(bool value) {
  
  recover_ = value;
  // @@protoc_insertion_point(field_set:txnpb.DecideRequest.recover)
}

// -------------------------------------------------------------------

// DecideResponse

// .txnpb.TxnError err = 1;
inline bool DecideResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline void DecideResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
inline const ::txnpb::TxnError& DecideResponse::err() const {
  const ::txnpb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:txnpb.DecideResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::TxnError*>(
      &::txnpb::_TxnError_default_instance_);
}
inline ::txnpb::TxnError* DecideResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::txnpb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DecideResponse.err)
  return err_;
}
inline ::txnpb::TxnError* DecideResponse::release_err() {
  // @@protoc_insertion_point(field_release:txnpb.DecideResponse.err)
  
  ::txnpb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
inline void DecideResponse::set_allocated_err(::txnpb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DecideResponse.err)
}

// repeated bytes secondary_keys = 2;
inline int DecideResponse::secondary_keys_size() const {
  return secondary_keys_.size();
}
inline void DecideResponse::clear_secondary_keys() {
  secondary_keys_.Clear();
}
inline const ::std::string& DecideResponse::secondary_keys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.DecideResponse.secondary_keys)
  return secondary_keys_.Get(index);
}
inline ::std::string* DecideResponse::mutable_secondary_keys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.DecideResponse.secondary_keys)
  return secondary_keys_.Mutable(index);
}
inline void DecideResponse::set_secondary_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:txnpb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DecideResponse::set_secondary_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:txnpb.DecideResponse.secondary_keys)
  secondary_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DecideResponse::set_secondary_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:txnpb.DecideResponse.secondary_keys)
}
inline void DecideResponse::set_secondary_keys(int index, const void* value, size_t size) {
  secondary_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:txnpb.DecideResponse.secondary_keys)
}
inline ::std::string* DecideResponse::add_secondary_keys() {
  // @@protoc_insertion_point(field_add_mutable:txnpb.DecideResponse.secondary_keys)
  return secondary_keys_.Add();
}
inline void DecideResponse::add_secondary_keys(const ::std::string& value) {
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:txnpb.DecideResponse.secondary_keys)
}
#if LANG_CXX11
inline void DecideResponse::add_secondary_keys(::std::string&& value) {
  secondary_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:txnpb.DecideResponse.secondary_keys)
}
#endif
inline void DecideResponse::add_secondary_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  secondary_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:txnpb.DecideResponse.secondary_keys)
}
inline void DecideResponse::add_secondary_keys(const void* value, size_t size) {
  secondary_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:txnpb.DecideResponse.secondary_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecideResponse::secondary_keys() const {
  // @@protoc_insertion_point(field_list:txnpb.DecideResponse.secondary_keys)
  return secondary_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecideResponse::mutable_secondary_keys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.DecideResponse.secondary_keys)
  return &secondary_keys_;
}

// -------------------------------------------------------------------

// DsDecideRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsDecideRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsDecideRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsDecideRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsDecideRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsDecideRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsDecideRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsDecideRequest::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsDecideRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsDecideRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsDecideRequest.header)
}

// .txnpb.DecideRequest req = 2;
inline bool DsDecideRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsDecideRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::txnpb::DecideRequest& DsDecideRequest::req() const {
  const ::txnpb::DecideRequest* p = req_;
  // @@protoc_insertion_point(field_get:txnpb.DsDecideRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::DecideRequest*>(
      &::txnpb::_DecideRequest_default_instance_);
}
inline ::txnpb::DecideRequest* DsDecideRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txnpb::DecideRequest;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsDecideRequest.req)
  return req_;
}
inline ::txnpb::DecideRequest* DsDecideRequest::release_req() {
  // @@protoc_insertion_point(field_release:txnpb.DsDecideRequest.req)
  
  ::txnpb::DecideRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsDecideRequest::set_allocated_req(::txnpb::DecideRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsDecideRequest.req)
}

// -------------------------------------------------------------------

// DsDecideResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsDecideResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsDecideResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsDecideResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsDecideResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsDecideResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsDecideResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsDecideResponse::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsDecideResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsDecideResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsDecideResponse.header)
}

// .txnpb.DecideResponse resp = 2;
inline bool DsDecideResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsDecideResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::txnpb::DecideResponse& DsDecideResponse::resp() const {
  const ::txnpb::DecideResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txnpb.DsDecideResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::DecideResponse*>(
      &::txnpb::_DecideResponse_default_instance_);
}
inline ::txnpb::DecideResponse* DsDecideResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txnpb::DecideResponse;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsDecideResponse.resp)
  return resp_;
}
inline ::txnpb::DecideResponse* DsDecideResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txnpb.DsDecideResponse.resp)
  
  ::txnpb::DecideResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsDecideResponse::set_allocated_resp(::txnpb::DecideResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsDecideResponse.resp)
}

// -------------------------------------------------------------------

// ClearupRequest

// string txn_id = 1;
inline void ClearupRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearupRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.ClearupRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void ClearupRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.ClearupRequest.txn_id)
}
#if LANG_CXX11
inline void ClearupRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.ClearupRequest.txn_id)
}
#endif
inline void ClearupRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.ClearupRequest.txn_id)
}
inline void ClearupRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.ClearupRequest.txn_id)
}
inline ::std::string* ClearupRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.ClearupRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearupRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.ClearupRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearupRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.ClearupRequest.txn_id)
}

// bytes primary_key = 2;
inline void ClearupRequest::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearupRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:txnpb.ClearupRequest.primary_key)
  return primary_key_.GetNoArena();
}
inline void ClearupRequest::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.ClearupRequest.primary_key)
}
#if LANG_CXX11
inline void ClearupRequest::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.ClearupRequest.primary_key)
}
#endif
inline void ClearupRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.ClearupRequest.primary_key)
}
inline void ClearupRequest::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.ClearupRequest.primary_key)
}
inline ::std::string* ClearupRequest::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.ClearupRequest.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearupRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:txnpb.ClearupRequest.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearupRequest::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.ClearupRequest.primary_key)
}

// -------------------------------------------------------------------

// ClearupResponse

// .txnpb.TxnError err = 1;
inline bool ClearupResponse::has_err() const {
  return this != internal_default_instance() && err_ != NULL;
}
inline void ClearupResponse::clear_err() {
  if (GetArenaNoVirtual() == NULL && err_ != NULL) delete err_;
  err_ = NULL;
}
inline const ::txnpb::TxnError& ClearupResponse::err() const {
  const ::txnpb::TxnError* p = err_;
  // @@protoc_insertion_point(field_get:txnpb.ClearupResponse.err)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::TxnError*>(
      &::txnpb::_TxnError_default_instance_);
}
inline ::txnpb::TxnError* ClearupResponse::mutable_err() {
  
  if (err_ == NULL) {
    err_ = new ::txnpb::TxnError;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.ClearupResponse.err)
  return err_;
}
inline ::txnpb::TxnError* ClearupResponse::release_err() {
  // @@protoc_insertion_point(field_release:txnpb.ClearupResponse.err)
  
  ::txnpb::TxnError* temp = err_;
  err_ = NULL;
  return temp;
}
inline void ClearupResponse::set_allocated_err(::txnpb::TxnError* err) {
  delete err_;
  err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.ClearupResponse.err)
}

// -------------------------------------------------------------------

// DsClearupRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsClearupRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsClearupRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsClearupRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsClearupRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsClearupRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsClearupRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsClearupRequest::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsClearupRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsClearupRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsClearupRequest.header)
}

// .txnpb.ClearupRequest req = 2;
inline bool DsClearupRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsClearupRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::txnpb::ClearupRequest& DsClearupRequest::req() const {
  const ::txnpb::ClearupRequest* p = req_;
  // @@protoc_insertion_point(field_get:txnpb.DsClearupRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::ClearupRequest*>(
      &::txnpb::_ClearupRequest_default_instance_);
}
inline ::txnpb::ClearupRequest* DsClearupRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txnpb::ClearupRequest;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsClearupRequest.req)
  return req_;
}
inline ::txnpb::ClearupRequest* DsClearupRequest::release_req() {
  // @@protoc_insertion_point(field_release:txnpb.DsClearupRequest.req)
  
  ::txnpb::ClearupRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsClearupRequest::set_allocated_req(::txnpb::ClearupRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsClearupRequest.req)
}

// -------------------------------------------------------------------

// DsClearupResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsClearupResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsClearupResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsClearupResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsClearupResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsClearupResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsClearupResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsClearupResponse::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsClearupResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsClearupResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsClearupResponse.header)
}

// .txnpb.ClearupResponse resp = 2;
inline bool DsClearupResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsClearupResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::txnpb::ClearupResponse& DsClearupResponse::resp() const {
  const ::txnpb::ClearupResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txnpb.DsClearupResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::ClearupResponse*>(
      &::txnpb::_ClearupResponse_default_instance_);
}
inline ::txnpb::ClearupResponse* DsClearupResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txnpb::ClearupResponse;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsClearupResponse.resp)
  return resp_;
}
inline ::txnpb::ClearupResponse* DsClearupResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txnpb.DsClearupResponse.resp)
  
  ::txnpb::ClearupResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsClearupResponse::set_allocated_resp(::txnpb::ClearupResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsClearupResponse.resp)
}

// -------------------------------------------------------------------

// GetLockInfoRequest

// bytes key = 1;
inline void GetLockInfoRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLockInfoRequest::key() const {
  // @@protoc_insertion_point(field_get:txnpb.GetLockInfoRequest.key)
  return key_.GetNoArena();
}
inline void GetLockInfoRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.GetLockInfoRequest.key)
}
#if LANG_CXX11
inline void GetLockInfoRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.GetLockInfoRequest.key)
}
#endif
inline void GetLockInfoRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.GetLockInfoRequest.key)
}
inline void GetLockInfoRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.GetLockInfoRequest.key)
}
inline ::std::string* GetLockInfoRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.GetLockInfoRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLockInfoRequest::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.GetLockInfoRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLockInfoRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.GetLockInfoRequest.key)
}

// string txn_id = 2;
inline void GetLockInfoRequest::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLockInfoRequest::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.GetLockInfoRequest.txn_id)
  return txn_id_.GetNoArena();
}
inline void GetLockInfoRequest::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.GetLockInfoRequest.txn_id)
}
#if LANG_CXX11
inline void GetLockInfoRequest::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.GetLockInfoRequest.txn_id)
}
#endif
inline void GetLockInfoRequest::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.GetLockInfoRequest.txn_id)
}
inline void GetLockInfoRequest::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.GetLockInfoRequest.txn_id)
}
inline ::std::string* GetLockInfoRequest::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.GetLockInfoRequest.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLockInfoRequest::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.GetLockInfoRequest.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLockInfoRequest::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.GetLockInfoRequest.txn_id)
}

// -------------------------------------------------------------------

// GetLockInfoResponse

// .txnpb.LockInfo info = 1;
inline bool GetLockInfoResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void GetLockInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::txnpb::LockInfo& GetLockInfoResponse::info() const {
  const ::txnpb::LockInfo* p = info_;
  // @@protoc_insertion_point(field_get:txnpb.GetLockInfoResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::LockInfo*>(
      &::txnpb::_LockInfo_default_instance_);
}
inline ::txnpb::LockInfo* GetLockInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::txnpb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.GetLockInfoResponse.info)
  return info_;
}
inline ::txnpb::LockInfo* GetLockInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:txnpb.GetLockInfoResponse.info)
  
  ::txnpb::LockInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetLockInfoResponse::set_allocated_info(::txnpb::LockInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.GetLockInfoResponse.info)
}

// -------------------------------------------------------------------

// DsGetLockInfoRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsGetLockInfoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsGetLockInfoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsGetLockInfoRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsGetLockInfoRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsGetLockInfoRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsGetLockInfoRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsGetLockInfoRequest::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsGetLockInfoRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsGetLockInfoRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsGetLockInfoRequest.header)
}

// .txnpb.GetLockInfoRequest req = 2;
inline bool DsGetLockInfoRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsGetLockInfoRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::txnpb::GetLockInfoRequest& DsGetLockInfoRequest::req() const {
  const ::txnpb::GetLockInfoRequest* p = req_;
  // @@protoc_insertion_point(field_get:txnpb.DsGetLockInfoRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::GetLockInfoRequest*>(
      &::txnpb::_GetLockInfoRequest_default_instance_);
}
inline ::txnpb::GetLockInfoRequest* DsGetLockInfoRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txnpb::GetLockInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsGetLockInfoRequest.req)
  return req_;
}
inline ::txnpb::GetLockInfoRequest* DsGetLockInfoRequest::release_req() {
  // @@protoc_insertion_point(field_release:txnpb.DsGetLockInfoRequest.req)
  
  ::txnpb::GetLockInfoRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsGetLockInfoRequest::set_allocated_req(::txnpb::GetLockInfoRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsGetLockInfoRequest.req)
}

// -------------------------------------------------------------------

// DsGetLockInfoResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsGetLockInfoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsGetLockInfoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsGetLockInfoResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsGetLockInfoResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsGetLockInfoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsGetLockInfoResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsGetLockInfoResponse::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsGetLockInfoResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsGetLockInfoResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsGetLockInfoResponse.header)
}

// .txnpb.GetLockInfoResponse resp = 2;
inline bool DsGetLockInfoResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsGetLockInfoResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::txnpb::GetLockInfoResponse& DsGetLockInfoResponse::resp() const {
  const ::txnpb::GetLockInfoResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txnpb.DsGetLockInfoResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::GetLockInfoResponse*>(
      &::txnpb::_GetLockInfoResponse_default_instance_);
}
inline ::txnpb::GetLockInfoResponse* DsGetLockInfoResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txnpb::GetLockInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsGetLockInfoResponse.resp)
  return resp_;
}
inline ::txnpb::GetLockInfoResponse* DsGetLockInfoResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txnpb.DsGetLockInfoResponse.resp)
  
  ::txnpb::GetLockInfoResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsGetLockInfoResponse::set_allocated_resp(::txnpb::GetLockInfoResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsGetLockInfoResponse.resp)
}

// -------------------------------------------------------------------

// SelectRequest

// bytes key = 1;
inline void SelectRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectRequest::key() const {
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.key)
  return key_.GetNoArena();
}
inline void SelectRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.SelectRequest.key)
}
#if LANG_CXX11
inline void SelectRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.SelectRequest.key)
}
#endif
inline void SelectRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.SelectRequest.key)
}
inline void SelectRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.SelectRequest.key)
}
inline ::std::string* SelectRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectRequest::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.SelectRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.SelectRequest.key)
}

// .kvrpcpb.Scope scope = 2;
inline bool SelectRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
inline void SelectRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
inline const ::kvrpcpb::Scope& SelectRequest::scope() const {
  const ::kvrpcpb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Scope*>(
      &::kvrpcpb::_Scope_default_instance_);
}
inline ::kvrpcpb::Scope* SelectRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::kvrpcpb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.scope)
  return scope_;
}
inline ::kvrpcpb::Scope* SelectRequest::release_scope() {
  // @@protoc_insertion_point(field_release:txnpb.SelectRequest.scope)
  
  ::kvrpcpb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
inline void SelectRequest::set_allocated_scope(::kvrpcpb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.SelectRequest.scope)
}

// repeated .kvrpcpb.SelectField field_list = 3;
inline int SelectRequest::field_list_size() const {
  return field_list_.size();
}
inline void SelectRequest::clear_field_list() {
  field_list_.Clear();
}
inline const ::kvrpcpb::SelectField& SelectRequest::field_list(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.field_list)
  return field_list_.Get(index);
}
inline ::kvrpcpb::SelectField* SelectRequest::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.field_list)
  return field_list_.Mutable(index);
}
inline ::kvrpcpb::SelectField* SelectRequest::add_field_list() {
  // @@protoc_insertion_point(field_add:txnpb.SelectRequest.field_list)
  return field_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >*
SelectRequest::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.SelectRequest.field_list)
  return &field_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >&
SelectRequest::field_list() const {
  // @@protoc_insertion_point(field_list:txnpb.SelectRequest.field_list)
  return field_list_;
}

// repeated .kvrpcpb.Match where_filters = 4;
inline int SelectRequest::where_filters_size() const {
  return where_filters_.size();
}
inline void SelectRequest::clear_where_filters() {
  where_filters_.Clear();
}
inline const ::kvrpcpb::Match& SelectRequest::where_filters(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.where_filters)
  return where_filters_.Get(index);
}
inline ::kvrpcpb::Match* SelectRequest::mutable_where_filters(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.where_filters)
  return where_filters_.Mutable(index);
}
inline ::kvrpcpb::Match* SelectRequest::add_where_filters() {
  // @@protoc_insertion_point(field_add:txnpb.SelectRequest.where_filters)
  return where_filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >*
SelectRequest::mutable_where_filters() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.SelectRequest.where_filters)
  return &where_filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >&
SelectRequest::where_filters() const {
  // @@protoc_insertion_point(field_list:txnpb.SelectRequest.where_filters)
  return where_filters_;
}

// repeated .metapb.Column group_bys = 5;
inline int SelectRequest::group_bys_size() const {
  return group_bys_.size();
}
inline void SelectRequest::clear_group_bys() {
  group_bys_.Clear();
}
inline const ::metapb::Column& SelectRequest::group_bys(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.group_bys)
  return group_bys_.Get(index);
}
inline ::metapb::Column* SelectRequest::mutable_group_bys(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.group_bys)
  return group_bys_.Mutable(index);
}
inline ::metapb::Column* SelectRequest::add_group_bys() {
  // @@protoc_insertion_point(field_add:txnpb.SelectRequest.group_bys)
  return group_bys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Column >*
SelectRequest::mutable_group_bys() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.SelectRequest.group_bys)
  return &group_bys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
SelectRequest::group_bys() const {
  // @@protoc_insertion_point(field_list:txnpb.SelectRequest.group_bys)
  return group_bys_;
}

// .kvrpcpb.Limit limit = 6;
inline bool SelectRequest::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
inline void SelectRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
inline const ::kvrpcpb::Limit& SelectRequest::limit() const {
  const ::kvrpcpb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:txnpb.SelectRequest.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Limit*>(
      &::kvrpcpb::_Limit_default_instance_);
}
inline ::kvrpcpb::Limit* SelectRequest::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::kvrpcpb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.SelectRequest.limit)
  return limit_;
}
inline ::kvrpcpb::Limit* SelectRequest::release_limit() {
  // @@protoc_insertion_point(field_release:txnpb.SelectRequest.limit)
  
  ::kvrpcpb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline void SelectRequest::set_allocated_limit(::kvrpcpb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.SelectRequest.limit)
}

// -------------------------------------------------------------------

// RowValue

// bytes fields = 1;
inline void RowValue::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowValue::fields() const {
  // @@protoc_insertion_point(field_get:txnpb.RowValue.fields)
  return fields_.GetNoArena();
}
inline void RowValue::set_fields(const ::std::string& value) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.RowValue.fields)
}
#if LANG_CXX11
inline void RowValue::set_fields(::std::string&& value) {
  
  fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.RowValue.fields)
}
#endif
inline void RowValue::set_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.RowValue.fields)
}
inline void RowValue::set_fields(const void* value, size_t size) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.RowValue.fields)
}
inline ::std::string* RowValue::mutable_fields() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.RowValue.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowValue::release_fields() {
  // @@protoc_insertion_point(field_release:txnpb.RowValue.fields)
  
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowValue::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    
  } else {
    
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:txnpb.RowValue.fields)
}

// repeated int64 aggred_counts = 2;
inline int RowValue::aggred_counts_size() const {
  return aggred_counts_.size();
}
inline void RowValue::clear_aggred_counts() {
  aggred_counts_.Clear();
}
inline ::google::protobuf::int64 RowValue::aggred_counts(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.RowValue.aggred_counts)
  return aggred_counts_.Get(index);
}
inline void RowValue::set_aggred_counts(int index, ::google::protobuf::int64 value) {
  aggred_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:txnpb.RowValue.aggred_counts)
}
inline void RowValue::add_aggred_counts(::google::protobuf::int64 value) {
  aggred_counts_.Add(value);
  // @@protoc_insertion_point(field_add:txnpb.RowValue.aggred_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RowValue::aggred_counts() const {
  // @@protoc_insertion_point(field_list:txnpb.RowValue.aggred_counts)
  return aggred_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RowValue::mutable_aggred_counts() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.RowValue.aggred_counts)
  return &aggred_counts_;
}

// uint64 version = 3;
inline void RowValue::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RowValue::version() const {
  // @@protoc_insertion_point(field_get:txnpb.RowValue.version)
  return version_;
}
inline void RowValue::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:txnpb.RowValue.version)
}

// -------------------------------------------------------------------

// RowIntent

// string txn_id = 1;
inline void RowIntent::clear_txn_id() {
  txn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowIntent::txn_id() const {
  // @@protoc_insertion_point(field_get:txnpb.RowIntent.txn_id)
  return txn_id_.GetNoArena();
}
inline void RowIntent::set_txn_id(const ::std::string& value) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.RowIntent.txn_id)
}
#if LANG_CXX11
inline void RowIntent::set_txn_id(::std::string&& value) {
  
  txn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.RowIntent.txn_id)
}
#endif
inline void RowIntent::set_txn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.RowIntent.txn_id)
}
inline void RowIntent::set_txn_id(const char* value, size_t size) {
  
  txn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.RowIntent.txn_id)
}
inline ::std::string* RowIntent::mutable_txn_id() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.RowIntent.txn_id)
  return txn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowIntent::release_txn_id() {
  // @@protoc_insertion_point(field_release:txnpb.RowIntent.txn_id)
  
  return txn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowIntent::set_allocated_txn_id(::std::string* txn_id) {
  if (txn_id != NULL) {
    
  } else {
    
  }
  txn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_id);
  // @@protoc_insertion_point(field_set_allocated:txnpb.RowIntent.txn_id)
}

// bytes primary_key = 2;
inline void RowIntent::clear_primary_key() {
  primary_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowIntent::primary_key() const {
  // @@protoc_insertion_point(field_get:txnpb.RowIntent.primary_key)
  return primary_key_.GetNoArena();
}
inline void RowIntent::set_primary_key(const ::std::string& value) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.RowIntent.primary_key)
}
#if LANG_CXX11
inline void RowIntent::set_primary_key(::std::string&& value) {
  
  primary_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.RowIntent.primary_key)
}
#endif
inline void RowIntent::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.RowIntent.primary_key)
}
inline void RowIntent::set_primary_key(const void* value, size_t size) {
  
  primary_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.RowIntent.primary_key)
}
inline ::std::string* RowIntent::mutable_primary_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.RowIntent.primary_key)
  return primary_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowIntent::release_primary_key() {
  // @@protoc_insertion_point(field_release:txnpb.RowIntent.primary_key)
  
  return primary_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowIntent::set_allocated_primary_key(::std::string* primary_key) {
  if (primary_key != NULL) {
    
  } else {
    
  }
  primary_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.RowIntent.primary_key)
}

// bool timeout = 3;
inline void RowIntent::clear_timeout() {
  timeout_ = false;
}
inline bool RowIntent::timeout() const {
  // @@protoc_insertion_point(field_get:txnpb.RowIntent.timeout)
  return timeout_;
}
inline void RowIntent::set_timeout(bool value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:txnpb.RowIntent.timeout)
}

// .txnpb.RowValue value = 10;
inline bool RowIntent::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void RowIntent::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::txnpb::RowValue& RowIntent::value() const {
  const ::txnpb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:txnpb.RowIntent.value)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::RowValue*>(
      &::txnpb::_RowValue_default_instance_);
}
inline ::txnpb::RowValue* RowIntent::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::txnpb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.RowIntent.value)
  return value_;
}
inline ::txnpb::RowValue* RowIntent::release_value() {
  // @@protoc_insertion_point(field_release:txnpb.RowIntent.value)
  
  ::txnpb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void RowIntent::set_allocated_value(::txnpb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.RowIntent.value)
}

// -------------------------------------------------------------------

// Row

// bytes key = 1;
inline void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:txnpb.Row.key)
  return key_.GetNoArena();
}
inline void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:txnpb.Row.key)
}
#if LANG_CXX11
inline void Row::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:txnpb.Row.key)
}
#endif
inline void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:txnpb.Row.key)
}
inline void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:txnpb.Row.key)
}
inline ::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:txnpb.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:txnpb.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:txnpb.Row.key)
}

// .txnpb.RowValue value = 2;
inline bool Row::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Row::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::txnpb::RowValue& Row::value() const {
  const ::txnpb::RowValue* p = value_;
  // @@protoc_insertion_point(field_get:txnpb.Row.value)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::RowValue*>(
      &::txnpb::_RowValue_default_instance_);
}
inline ::txnpb::RowValue* Row::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::txnpb::RowValue;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.Row.value)
  return value_;
}
inline ::txnpb::RowValue* Row::release_value() {
  // @@protoc_insertion_point(field_release:txnpb.Row.value)
  
  ::txnpb::RowValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Row::set_allocated_value(::txnpb::RowValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.Row.value)
}

// .txnpb.RowIntent intent = 3;
inline bool Row::has_intent() const {
  return this != internal_default_instance() && intent_ != NULL;
}
inline void Row::clear_intent() {
  if (GetArenaNoVirtual() == NULL && intent_ != NULL) delete intent_;
  intent_ = NULL;
}
inline const ::txnpb::RowIntent& Row::intent() const {
  const ::txnpb::RowIntent* p = intent_;
  // @@protoc_insertion_point(field_get:txnpb.Row.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::RowIntent*>(
      &::txnpb::_RowIntent_default_instance_);
}
inline ::txnpb::RowIntent* Row::mutable_intent() {
  
  if (intent_ == NULL) {
    intent_ = new ::txnpb::RowIntent;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.Row.intent)
  return intent_;
}
inline ::txnpb::RowIntent* Row::release_intent() {
  // @@protoc_insertion_point(field_release:txnpb.Row.intent)
  
  ::txnpb::RowIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline void Row::set_allocated_intent(::txnpb::RowIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.Row.intent)
}

// -------------------------------------------------------------------

// SelectResponse

// int32 code = 1;
inline void SelectResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 SelectResponse::code() const {
  // @@protoc_insertion_point(field_get:txnpb.SelectResponse.code)
  return code_;
}
inline void SelectResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:txnpb.SelectResponse.code)
}

// repeated .txnpb.Row rows = 2;
inline int SelectResponse::rows_size() const {
  return rows_.size();
}
inline void SelectResponse::clear_rows() {
  rows_.Clear();
}
inline const ::txnpb::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:txnpb.SelectResponse.rows)
  return rows_.Get(index);
}
inline ::txnpb::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:txnpb.SelectResponse.rows)
  return rows_.Mutable(index);
}
inline ::txnpb::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:txnpb.SelectResponse.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::txnpb::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:txnpb.SelectResponse.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::txnpb::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:txnpb.SelectResponse.rows)
  return rows_;
}

// uint64 offset = 3;
inline void SelectResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SelectResponse::offset() const {
  // @@protoc_insertion_point(field_get:txnpb.SelectResponse.offset)
  return offset_;
}
inline void SelectResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:txnpb.SelectResponse.offset)
}

// -------------------------------------------------------------------

// DsSelectRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsSelectRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsSelectRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsSelectRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsSelectRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsSelectRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsSelectRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsSelectRequest::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsSelectRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsSelectRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsSelectRequest.header)
}

// .txnpb.SelectRequest req = 2;
inline bool DsSelectRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsSelectRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::txnpb::SelectRequest& DsSelectRequest::req() const {
  const ::txnpb::SelectRequest* p = req_;
  // @@protoc_insertion_point(field_get:txnpb.DsSelectRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::SelectRequest*>(
      &::txnpb::_SelectRequest_default_instance_);
}
inline ::txnpb::SelectRequest* DsSelectRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::txnpb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsSelectRequest.req)
  return req_;
}
inline ::txnpb::SelectRequest* DsSelectRequest::release_req() {
  // @@protoc_insertion_point(field_release:txnpb.DsSelectRequest.req)
  
  ::txnpb::SelectRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsSelectRequest::set_allocated_req(::txnpb::SelectRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsSelectRequest.req)
}

// -------------------------------------------------------------------

// DsSelectResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsSelectResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsSelectResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsSelectResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:txnpb.DsSelectResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsSelectResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsSelectResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsSelectResponse::release_header() {
  // @@protoc_insertion_point(field_release:txnpb.DsSelectResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsSelectResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsSelectResponse.header)
}

// .txnpb.SelectResponse resp = 2;
inline bool DsSelectResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsSelectResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::txnpb::SelectResponse& DsSelectResponse::resp() const {
  const ::txnpb::SelectResponse* p = resp_;
  // @@protoc_insertion_point(field_get:txnpb.DsSelectResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::txnpb::SelectResponse*>(
      &::txnpb::_SelectResponse_default_instance_);
}
inline ::txnpb::SelectResponse* DsSelectResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::txnpb::SelectResponse;
  }
  // @@protoc_insertion_point(field_mutable:txnpb.DsSelectResponse.resp)
  return resp_;
}
inline ::txnpb::SelectResponse* DsSelectResponse::release_resp() {
  // @@protoc_insertion_point(field_release:txnpb.DsSelectResponse.resp)
  
  ::txnpb::SelectResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsSelectResponse::set_allocated_resp(::txnpb::SelectResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:txnpb.DsSelectResponse.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace txnpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::txnpb::TxnError_ErrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txnpb::TxnError_ErrType>() {
  return ::txnpb::TxnError_ErrType_descriptor();
}
template <> struct is_proto_enum< ::txnpb::OpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txnpb::OpType>() {
  return ::txnpb::OpType_descriptor();
}
template <> struct is_proto_enum< ::txnpb::TxnStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::txnpb::TxnStatus>() {
  return ::txnpb::TxnStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_txn_2eproto__INCLUDED
