// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statspb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "statspb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace statspb {
class ClusterStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClusterStats>
     _instance;
} _ClusterStats_default_instance_;
class DatabaseStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DatabaseStats>
     _instance;
} _DatabaseStats_default_instance_;
class TableStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TableStats>
     _instance;
} _TableStats_default_instance_;
class TaskInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskInfo>
     _instance;
} _TaskInfo_default_instance_;
class HotSpotStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HotSpotStats>
     _instance;
} _HotSpotStats_default_instance_;
class ScheduleCountDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScheduleCount>
     _instance;
} _ScheduleCount_default_instance_;
class DiskStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DiskStats>
     _instance;
} _DiskStats_default_instance_;
class NetStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetStats>
     _instance;
} _NetStats_default_instance_;
class MemStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MemStats>
     _instance;
} _MemStats_default_instance_;
class TpStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TpStats>
     _instance;
} _TpStats_default_instance_;
class SlowLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SlowLog>
     _instance;
} _SlowLog_default_instance_;
class SlowLogStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SlowLogStats>
     _instance;
} _SlowLogStats_default_instance_;
class DsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsInfo>
     _instance;
} _DsInfo_default_instance_;
class ProcessStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProcessStats>
     _instance;
} _ProcessStats_default_instance_;
class MacStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MacStats>
     _instance;
} _MacStats_default_instance_;
class RangeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeStats>
     _instance;
} _RangeStats_default_instance_;
class ReplicaStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReplicaStatus>
     _instance;
} _ReplicaStatus_default_instance_;
class RaftStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RaftStatus>
     _instance;
} _RaftStatus_default_instance_;
class SqlStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SqlStats>
     _instance;
} _SqlStats_default_instance_;
class SqlSlowlogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SqlSlowlog>
     _instance;
} _SqlSlowlog_default_instance_;
class SqlSlowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SqlSlow>
     _instance;
} _SqlSlow_default_instance_;
class SqlTpDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SqlTp>
     _instance;
} _SqlTp_default_instance_;
class RangeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeInfo>
     _instance;
} _RangeInfo_default_instance_;

namespace protobuf_statspb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, capacity_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, size_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, range_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, db_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, table_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, task_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, node_up_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, node_down_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, node_offline_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, node_tombstone_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, leader_balance_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStats, region_balance_ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseStats, table_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStats, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStats, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStats, range_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableStats, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, used_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, describe_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, node_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, total_written_bytes_as_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, hot_write_region_as_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, total_written_bytes_as_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSpotStats, hot_write_region_as_leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleCount, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleCount, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleCount, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_proc_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_read_byte_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_write_byte_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_read_count_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskStats, disk_write_count_per_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_io_in_byte_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_io_out_byte_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_io_in_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_io_out_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_active_opens_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_ip_recv_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_ip_send_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_ip_drop_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_recv_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_send_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_err_package_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStats, net_tcp_retransfer_package_per_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, memory_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, memory_used_rss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, memory_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, memory_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, memory_used_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, swap_memory_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, swap_memory_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, swap_memory_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemStats, swap_memory_used_percent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, tps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, tp_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, tp_90_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, tp_99_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, tp_999_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, total_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TpStats, err_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowLog, slow_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowLog, lats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowLogStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowLogStats, slow_logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, range_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, range_split_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, sending_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, receiving_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, applying_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, range_leader_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInfo, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, cpu_proc_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, memory_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, memory_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, connect_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, disk_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, tp_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, ds_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, thread_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, handle_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStats, start_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, cpu_proc_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, cpu_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, load1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, load5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, load15_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, mem_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, net_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, disk_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, process_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, thread_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MacStats, handle_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, bytes_in_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, bytes_out_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, total_commands_processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeStats, keyspace_misses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, snapshoting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, paused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, lastactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, inflight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaStatus, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, applied_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, vote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, pendqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, recvqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, appqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, stopped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, restoringsnapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftStatus, replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlStats, ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlStats, delay_avg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlStats, tp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlowlog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlowlog, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlowlog, than_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlowlog, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlowlog, log_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlow, time_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlow, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlow, total_usec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlSlow, call_usec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlTp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlTp, calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlTp, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SqlTp, delay_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, node_adder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeInfo, stats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ClusterStats)},
  { 17, -1, sizeof(DatabaseStats)},
  { 24, -1, sizeof(TableStats)},
  { 33, -1, sizeof(TaskInfo)},
  { 47, -1, sizeof(HotSpotStats)},
  { 58, -1, sizeof(ScheduleCount)},
  { 66, -1, sizeof(DiskStats)},
  { 80, -1, sizeof(NetStats)},
  { 98, -1, sizeof(MemStats)},
  { 112, -1, sizeof(TpStats)},
  { 127, -1, sizeof(SlowLog)},
  { 134, -1, sizeof(SlowLogStats)},
  { 140, -1, sizeof(DsInfo)},
  { 152, -1, sizeof(ProcessStats)},
  { 167, -1, sizeof(MacStats)},
  { 183, -1, sizeof(RangeStats)},
  { 194, -1, sizeof(ReplicaStatus)},
  { 209, -1, sizeof(RaftStatus)},
  { 229, -1, sizeof(SqlStats)},
  { 237, -1, sizeof(SqlSlowlog)},
  { 246, -1, sizeof(SqlSlow)},
  { 255, -1, sizeof(SqlTp)},
  { 263, -1, sizeof(RangeInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatabaseStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HotSpotStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScheduleCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TpStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlowLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SlowLogStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MacStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplicaStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RaftStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SqlStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SqlSlowlog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SqlSlow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SqlTp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "statspb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::mspb::protobuf_mspb_2eproto::InitDefaults();
  _ClusterStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClusterStats_default_instance_);_DatabaseStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DatabaseStats_default_instance_);_TableStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TableStats_default_instance_);_TaskInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskInfo_default_instance_);_HotSpotStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HotSpotStats_default_instance_);_ScheduleCount_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScheduleCount_default_instance_);_DiskStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DiskStats_default_instance_);_NetStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetStats_default_instance_);_MemStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MemStats_default_instance_);_TpStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TpStats_default_instance_);_SlowLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SlowLog_default_instance_);_SlowLogStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SlowLogStats_default_instance_);_DsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsInfo_default_instance_);_ProcessStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProcessStats_default_instance_);_MacStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MacStats_default_instance_);_RangeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeStats_default_instance_);_ReplicaStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReplicaStatus_default_instance_);_RaftStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RaftStatus_default_instance_);_SqlStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SqlStats_default_instance_);_SqlSlowlog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SqlSlowlog_default_instance_);_SqlSlow_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SqlSlow_default_instance_);_SqlTp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SqlTp_default_instance_);_RangeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeInfo_default_instance_);_ProcessStats_default_instance_._instance.get_mutable()->disk_stats_ = const_cast< ::statspb::DiskStats*>(
      ::statspb::DiskStats::internal_default_instance());
  _ProcessStats_default_instance_._instance.get_mutable()->tp_stats_ = const_cast< ::statspb::TpStats*>(
      ::statspb::TpStats::internal_default_instance());
  _ProcessStats_default_instance_._instance.get_mutable()->ds_info_ = const_cast< ::statspb::DsInfo*>(
      ::statspb::DsInfo::internal_default_instance());
  _MacStats_default_instance_._instance.get_mutable()->mem_stats_ = const_cast< ::statspb::MemStats*>(
      ::statspb::MemStats::internal_default_instance());
  _MacStats_default_instance_._instance.get_mutable()->net_stats_ = const_cast< ::statspb::NetStats*>(
      ::statspb::NetStats::internal_default_instance());
  _RangeInfo_default_instance_._instance.get_mutable()->stats_ = const_cast< ::mspb::RangeStats*>(
      ::mspb::RangeStats::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rstatspb.proto\022\007statspb\032\nmspb.proto\"\247\002\n"
      "\014ClusterStats\022\026\n\016capacity_total\030\001 \001(\004\022\021\n"
      "\tsize_used\030\002 \001(\004\022\021\n\trange_num\030\003 \001(\004\022\016\n\006d"
      "b_num\030\004 \001(\004\022\021\n\ttable_num\030\005 \001(\004\022\020\n\010task_n"
      "um\030\006 \001(\004\022\025\n\rnode_up_count\030\007 \001(\004\022\027\n\017node_"
      "down_count\030\010 \001(\004\022\032\n\022node_offline_count\030\t"
      " \001(\004\022\034\n\024node_tombstone_count\030\n \001(\004\022\034\n\024le"
      "ader_balance_ratio\030\013 \001(\001\022\034\n\024region_balan"
      "ce_ratio\030\014 \001(\001\"0\n\rDatabaseStats\022\014\n\004name\030"
      "\001 \001(\t\022\021\n\ttable_num\030\002 \001(\r\"R\n\nTableStats\022\017"
      "\n\007db_name\030\001 \001(\t\022\022\n\ntable_name\030\002 \001(\t\022\021\n\tr"
      "ange_num\030\003 \001(\004\022\014\n\004size\030\004 \001(\004\"\231\001\n\010TaskInf"
      "o\022\017\n\007task_id\030\001 \001(\004\022\020\n\010range_id\030\002 \001(\004\022\014\n\004"
      "kind\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\r\n\005state\030\005 \001(\t\022"
      "\r\n\005start\030\006 \001(\003\022\013\n\003end\030\007 \001(\003\022\021\n\tused_time"
      "\030\010 \001(\001\022\020\n\010describe\030\t \001(\t\"\304\001\n\014HotSpotStat"
      "s\022\017\n\007node_id\030\001 \001(\004\022\021\n\tnode_addr\030\002 \001(\t\022#\n"
      "\033total_written_bytes_as_peer\030\003 \001(\001\022 \n\030ho"
      "t_write_region_as_peer\030\004 \001(\004\022%\n\035total_wr"
      "itten_bytes_as_leader\030\005 \001(\001\022\"\n\032hot_write"
      "_region_as_leader\030\006 \001(\004\";\n\rScheduleCount"
      "\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\r\n\005count\030\003"
      " \001(\004\"\364\001\n\tDiskStats\022\021\n\tdisk_path\030\001 \001(\t\022\022\n"
      "\ndisk_total\030\002 \001(\004\022\021\n\tdisk_used\030\003 \001(\004\022\021\n\t"
      "disk_free\030\004 \001(\004\022\026\n\016disk_proc_rate\030\005 \001(\001\022"
      "\036\n\026disk_read_byte_per_sec\030\006 \001(\004\022\037\n\027disk_"
      "write_byte_per_sec\030\007 \001(\004\022\037\n\027disk_read_co"
      "unt_per_sec\030\010 \001(\004\022 \n\030disk_write_count_pe"
      "r_sec\030\t \001(\004\"\341\003\n\010NetStats\022\036\n\026net_io_in_by"
      "te_per_sec\030\001 \001(\004\022\037\n\027net_io_out_byte_per_"
      "sec\030\002 \001(\004\022!\n\031net_io_in_package_per_sec\030\003"
      " \001(\004\022\"\n\032net_io_out_package_per_sec\030\004 \001(\004"
      "\022\033\n\023net_tcp_connections\030\005 \001(\r\022$\n\034net_tcp"
      "_active_opens_per_sec\030\006 \001(\004\022#\n\033net_ip_re"
      "cv_package_per_sec\030\007 \001(\004\022#\n\033net_ip_send_"
      "package_per_sec\030\010 \001(\004\022#\n\033net_ip_drop_pac"
      "kage_per_sec\030\t \001(\004\022$\n\034net_tcp_recv_packa"
      "ge_per_sec\030\n \001(\004\022$\n\034net_tcp_send_package"
      "_per_sec\030\013 \001(\004\022#\n\033net_tcp_err_package_pe"
      "r_sec\030\014 \001(\004\022*\n\"net_tcp_retransfer_packag"
      "e_per_sec\030\r \001(\004\"\361\001\n\010MemStats\022\024\n\014memory_t"
      "otal\030\001 \001(\004\022\027\n\017memory_used_rss\030\002 \001(\004\022\023\n\013m"
      "emory_used\030\003 \001(\004\022\023\n\013memory_free\030\004 \001(\004\022\033\n"
      "\023memory_used_percent\030\005 \001(\001\022\031\n\021swap_memor"
      "y_total\030\006 \001(\004\022\030\n\020swap_memory_used\030\007 \001(\004\022"
      "\030\n\020swap_memory_free\030\010 \001(\004\022 \n\030swap_memory"
      "_used_percent\030\t \001(\001\"\244\001\n\007TpStats\022\013\n\003tps\030\001"
      " \001(\004\022\013\n\003min\030\002 \001(\001\022\013\n\003max\030\003 \001(\001\022\013\n\003avg\030\004 "
      "\001(\001\022\r\n\005tp_50\030\005 \001(\001\022\r\n\005tp_90\030\006 \001(\001\022\r\n\005tp_"
      "99\030\007 \001(\001\022\016\n\006tp_999\030\010 \001(\001\022\024\n\014total_number"
      "\030\t \001(\004\022\022\n\nerr_number\030\n \001(\004\")\n\007SlowLog\022\020\n"
      "\010slow_log\030\001 \001(\t\022\014\n\004lats\030\002 \001(\001\"3\n\014SlowLog"
      "Stats\022#\n\tslow_logs\030\001 \003(\0132\020.statspb.SlowL"
      "og\"\274\001\n\006DsInfo\022\023\n\013range_count\030\001 \001(\004\022\031\n\021ra"
      "nge_split_count\030\002 \001(\r\022\032\n\022sending_snap_co"
      "unt\030\003 \001(\r\022\034\n\024receiving_snap_count\030\004 \001(\r\022"
      "\033\n\023applying_snap_count\030\005 \001(\r\022\032\n\022range_le"
      "ader_count\030\006 \001(\r\022\017\n\007version\030\007 \001(\t\"\221\002\n\014Pr"
      "ocessStats\022\025\n\rcpu_proc_rate\030\001 \001(\001\022\024\n\014mem"
      "ory_total\030\002 \001(\004\022\023\n\013memory_used\030\003 \001(\004\022\025\n\r"
      "connect_count\030\004 \001(\004\022&\n\ndisk_stats\030\010 \001(\0132"
      "\022.statspb.DiskStats\022\"\n\010tp_stats\030\t \001(\0132\020."
      "statspb.TpStats\022 \n\007ds_info\030\n \001(\0132\017.stats"
      "pb.DsInfo\022\022\n\nthread_num\030\013 \001(\r\022\022\n\nhandle_"
      "num\030\014 \001(\r\022\022\n\nstart_time\030\r \001(\003\"\223\002\n\010MacSta"
      "ts\022\025\n\rcpu_proc_rate\030\001 \001(\001\022\021\n\tcpu_count\030\002"
      " \001(\r\022\r\n\005load1\030\003 \001(\001\022\r\n\005load5\030\004 \001(\001\022\016\n\006lo"
      "ad15\030\005 \001(\001\022$\n\tmem_stats\030\006 \001(\0132\021.statspb."
      "MemStats\022$\n\tnet_stats\030\007 \001(\0132\021.statspb.Ne"
      "tStats\022&\n\ndisk_stats\030\010 \003(\0132\022.statspb.Dis"
      "kStats\022\023\n\013process_num\030\t \001(\r\022\022\n\nthread_nu"
      "m\030\n \001(\r\022\022\n\nhandle_num\030\013 \001(\r\"\227\001\n\nRangeSta"
      "ts\022\014\n\004size\030\001 \001(\004\022\013\n\003ops\030\002 \001(\004\022\030\n\020bytes_i"
      "n_per_sec\030\003 \001(\004\022\031\n\021bytes_out_per_sec\030\004 \001"
      "(\004\022 \n\030total_commands_processed\030\005 \001(\004\022\027\n\017"
      "keyspace_misses\030\006 \001(\004\"\262\001\n\rReplicaStatus\022"
      "\r\n\005Match\030\001 \001(\004\022\016\n\006Commit\030\002 \001(\004\022\014\n\004Next\030\003"
      " \001(\004\022\r\n\005State\030\004 \001(\t\022\023\n\013Snapshoting\030\005 \001(\010"
      "\022\016\n\006Paused\030\006 \001(\010\022\016\n\006Active\030\007 \001(\010\022\022\n\nLast"
      "Active\030\010 \001(\003\022\020\n\010Inflight\030\t \001(\005\022\n\n\002ID\030\n \001"
      "(\004\"\241\002\n\nRaftStatus\022\n\n\002ID\030\001 \001(\004\022\016\n\006NodeID\030"
      "\002 \001(\004\022\016\n\006Leader\030\003 \001(\004\022\014\n\004Term\030\004 \001(\004\022\r\n\005I"
      "ndex\030\005 \001(\004\022\016\n\006Commit\030\006 \001(\004\022\017\n\007Applied\030\007 "
      "\001(\004\022\014\n\004Vote\030\010 \001(\004\022\021\n\tPendQueue\030\t \001(\005\022\021\n\t"
      "RecvQueue\030\n \001(\005\022\020\n\010AppQueue\030\013 \001(\005\022\017\n\007Sto"
      "pped\030\014 \001(\010\022\031\n\021RestoringSnapshot\030\r \001(\010\022\r\n"
      "\005State\030\016 \001(\t\022(\n\010Replicas\030\017 \003(\0132\026.statspb"
      ".ReplicaStatus\"6\n\010SqlStats\022\013\n\003ops\030\001 \001(\003\022"
      "\021\n\tdelay_avg\030\002 \001(\003\022\n\n\002tp\030\003 \001(\014\"S\n\nSqlSlo"
      "wlog\022\013\n\003len\030\001 \001(\r\022\014\n\004than\030\002 \001(\005\022\013\n\003idx\030\003"
      " \001(\r\022\035\n\003log\030\004 \003(\0132\020.statspb.SqlSlow\"O\n\007S"
      "qlSlow\022\020\n\010time_sec\030\001 \001(\003\022\013\n\003sql\030\002 \001(\t\022\022\n"
      "\ntotal_usec\030\003 \001(\003\022\021\n\tcall_usec\030\004 \001(\003\"5\n\005"
      "SqlTp\022\r\n\005calls\030\001 \001(\003\022\n\n\002tp\030\002 \003(\003\022\021\n\tdela"
      "y_max\030\003 \001(\003\"e\n\tRangeInfo\022\020\n\010range_id\030\001 \001"
      "(\004\022\021\n\tleader_id\030\002 \001(\004\022\022\n\nnode_adder\030\003 \001("
      "\t\022\037\n\005stats\030\004 \001(\0132\020.mspb.RangeStats*F\n\006Tp"
      "Args\022\013\n\007invalid\020\000\022\017\n\nmsec_index\020\350\007\022\016\n\tse"
      "c_index\020\244\010\022\016\n\tmin_index\020\245\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3954);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "statspb.proto", &protobuf_RegisterTypes);
  ::mspb::protobuf_mspb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_statspb_2eproto

const ::google::protobuf::EnumDescriptor* TpArgs_descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_enum_descriptors[0];
}
bool TpArgs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1060:
    case 1061:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterStats::kCapacityTotalFieldNumber;
const int ClusterStats::kSizeUsedFieldNumber;
const int ClusterStats::kRangeNumFieldNumber;
const int ClusterStats::kDbNumFieldNumber;
const int ClusterStats::kTableNumFieldNumber;
const int ClusterStats::kTaskNumFieldNumber;
const int ClusterStats::kNodeUpCountFieldNumber;
const int ClusterStats::kNodeDownCountFieldNumber;
const int ClusterStats::kNodeOfflineCountFieldNumber;
const int ClusterStats::kNodeTombstoneCountFieldNumber;
const int ClusterStats::kLeaderBalanceRatioFieldNumber;
const int ClusterStats::kRegionBalanceRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterStats::ClusterStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.ClusterStats)
}
ClusterStats::ClusterStats(const ClusterStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capacity_total_, &from.capacity_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_balance_ratio_) -
    reinterpret_cast<char*>(&capacity_total_)) + sizeof(region_balance_ratio_));
  // @@protoc_insertion_point(copy_constructor:statspb.ClusterStats)
}

void ClusterStats::SharedCtor() {
  ::memset(&capacity_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_balance_ratio_) -
      reinterpret_cast<char*>(&capacity_total_)) + sizeof(region_balance_ratio_));
  _cached_size_ = 0;
}

ClusterStats::~ClusterStats() {
  // @@protoc_insertion_point(destructor:statspb.ClusterStats)
  SharedDtor();
}

void ClusterStats::SharedDtor() {
}

void ClusterStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterStats& ClusterStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterStats* ClusterStats::New(::google::protobuf::Arena* arena) const {
  ClusterStats* n = new ClusterStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.ClusterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&capacity_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_balance_ratio_) -
      reinterpret_cast<char*>(&capacity_total_)) + sizeof(region_balance_ratio_));
  _internal_metadata_.Clear();
}

bool ClusterStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.ClusterStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 capacity_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size_used = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 db_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 table_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 task_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_up_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_up_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_down_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_down_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_offline_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_offline_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_tombstone_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_tombstone_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double leader_balance_ratio = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leader_balance_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double region_balance_ratio = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &region_balance_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.ClusterStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.ClusterStats)
  return false;
#undef DO_
}

void ClusterStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.ClusterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity_total = 1;
  if (this->capacity_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->capacity_total(), output);
  }

  // uint64 size_used = 2;
  if (this->size_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_used(), output);
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->range_num(), output);
  }

  // uint64 db_num = 4;
  if (this->db_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->db_num(), output);
  }

  // uint64 table_num = 5;
  if (this->table_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->table_num(), output);
  }

  // uint64 task_num = 6;
  if (this->task_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->task_num(), output);
  }

  // uint64 node_up_count = 7;
  if (this->node_up_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->node_up_count(), output);
  }

  // uint64 node_down_count = 8;
  if (this->node_down_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->node_down_count(), output);
  }

  // uint64 node_offline_count = 9;
  if (this->node_offline_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->node_offline_count(), output);
  }

  // uint64 node_tombstone_count = 10;
  if (this->node_tombstone_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->node_tombstone_count(), output);
  }

  // double leader_balance_ratio = 11;
  if (this->leader_balance_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->leader_balance_ratio(), output);
  }

  // double region_balance_ratio = 12;
  if (this->region_balance_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->region_balance_ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.ClusterStats)
}

::google::protobuf::uint8* ClusterStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.ClusterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity_total = 1;
  if (this->capacity_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->capacity_total(), target);
  }

  // uint64 size_used = 2;
  if (this->size_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size_used(), target);
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->range_num(), target);
  }

  // uint64 db_num = 4;
  if (this->db_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->db_num(), target);
  }

  // uint64 table_num = 5;
  if (this->table_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->table_num(), target);
  }

  // uint64 task_num = 6;
  if (this->task_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->task_num(), target);
  }

  // uint64 node_up_count = 7;
  if (this->node_up_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->node_up_count(), target);
  }

  // uint64 node_down_count = 8;
  if (this->node_down_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->node_down_count(), target);
  }

  // uint64 node_offline_count = 9;
  if (this->node_offline_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->node_offline_count(), target);
  }

  // uint64 node_tombstone_count = 10;
  if (this->node_tombstone_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->node_tombstone_count(), target);
  }

  // double leader_balance_ratio = 11;
  if (this->leader_balance_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->leader_balance_ratio(), target);
  }

  // double region_balance_ratio = 12;
  if (this->region_balance_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->region_balance_ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.ClusterStats)
  return target;
}

size_t ClusterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.ClusterStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 capacity_total = 1;
  if (this->capacity_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->capacity_total());
  }

  // uint64 size_used = 2;
  if (this->size_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_used());
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_num());
  }

  // uint64 db_num = 4;
  if (this->db_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->db_num());
  }

  // uint64 table_num = 5;
  if (this->table_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->table_num());
  }

  // uint64 task_num = 6;
  if (this->task_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_num());
  }

  // uint64 node_up_count = 7;
  if (this->node_up_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_up_count());
  }

  // uint64 node_down_count = 8;
  if (this->node_down_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_down_count());
  }

  // uint64 node_offline_count = 9;
  if (this->node_offline_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_offline_count());
  }

  // uint64 node_tombstone_count = 10;
  if (this->node_tombstone_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_tombstone_count());
  }

  // double leader_balance_ratio = 11;
  if (this->leader_balance_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double region_balance_ratio = 12;
  if (this->region_balance_ratio() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.ClusterStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.ClusterStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.ClusterStats)
    MergeFrom(*source);
  }
}

void ClusterStats::MergeFrom(const ClusterStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.ClusterStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity_total() != 0) {
    set_capacity_total(from.capacity_total());
  }
  if (from.size_used() != 0) {
    set_size_used(from.size_used());
  }
  if (from.range_num() != 0) {
    set_range_num(from.range_num());
  }
  if (from.db_num() != 0) {
    set_db_num(from.db_num());
  }
  if (from.table_num() != 0) {
    set_table_num(from.table_num());
  }
  if (from.task_num() != 0) {
    set_task_num(from.task_num());
  }
  if (from.node_up_count() != 0) {
    set_node_up_count(from.node_up_count());
  }
  if (from.node_down_count() != 0) {
    set_node_down_count(from.node_down_count());
  }
  if (from.node_offline_count() != 0) {
    set_node_offline_count(from.node_offline_count());
  }
  if (from.node_tombstone_count() != 0) {
    set_node_tombstone_count(from.node_tombstone_count());
  }
  if (from.leader_balance_ratio() != 0) {
    set_leader_balance_ratio(from.leader_balance_ratio());
  }
  if (from.region_balance_ratio() != 0) {
    set_region_balance_ratio(from.region_balance_ratio());
  }
}

void ClusterStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.ClusterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStats::CopyFrom(const ClusterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.ClusterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStats::IsInitialized() const {
  return true;
}

void ClusterStats::Swap(ClusterStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterStats::InternalSwap(ClusterStats* other) {
  using std::swap;
  swap(capacity_total_, other->capacity_total_);
  swap(size_used_, other->size_used_);
  swap(range_num_, other->range_num_);
  swap(db_num_, other->db_num_);
  swap(table_num_, other->table_num_);
  swap(task_num_, other->task_num_);
  swap(node_up_count_, other->node_up_count_);
  swap(node_down_count_, other->node_down_count_);
  swap(node_offline_count_, other->node_offline_count_);
  swap(node_tombstone_count_, other->node_tombstone_count_);
  swap(leader_balance_ratio_, other->leader_balance_ratio_);
  swap(region_balance_ratio_, other->region_balance_ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterStats

// uint64 capacity_total = 1;
void ClusterStats::clear_capacity_total() {
  capacity_total_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::capacity_total() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.capacity_total)
  return capacity_total_;
}
void ClusterStats::set_capacity_total(::google::protobuf::uint64 value) {
  
  capacity_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.capacity_total)
}

// uint64 size_used = 2;
void ClusterStats::clear_size_used() {
  size_used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::size_used() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.size_used)
  return size_used_;
}
void ClusterStats::set_size_used(::google::protobuf::uint64 value) {
  
  size_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.size_used)
}

// uint64 range_num = 3;
void ClusterStats::clear_range_num() {
  range_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::range_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.range_num)
  return range_num_;
}
void ClusterStats::set_range_num(::google::protobuf::uint64 value) {
  
  range_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.range_num)
}

// uint64 db_num = 4;
void ClusterStats::clear_db_num() {
  db_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::db_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.db_num)
  return db_num_;
}
void ClusterStats::set_db_num(::google::protobuf::uint64 value) {
  
  db_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.db_num)
}

// uint64 table_num = 5;
void ClusterStats::clear_table_num() {
  table_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::table_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.table_num)
  return table_num_;
}
void ClusterStats::set_table_num(::google::protobuf::uint64 value) {
  
  table_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.table_num)
}

// uint64 task_num = 6;
void ClusterStats::clear_task_num() {
  task_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::task_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.task_num)
  return task_num_;
}
void ClusterStats::set_task_num(::google::protobuf::uint64 value) {
  
  task_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.task_num)
}

// uint64 node_up_count = 7;
void ClusterStats::clear_node_up_count() {
  node_up_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::node_up_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_up_count)
  return node_up_count_;
}
void ClusterStats::set_node_up_count(::google::protobuf::uint64 value) {
  
  node_up_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_up_count)
}

// uint64 node_down_count = 8;
void ClusterStats::clear_node_down_count() {
  node_down_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::node_down_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_down_count)
  return node_down_count_;
}
void ClusterStats::set_node_down_count(::google::protobuf::uint64 value) {
  
  node_down_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_down_count)
}

// uint64 node_offline_count = 9;
void ClusterStats::clear_node_offline_count() {
  node_offline_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::node_offline_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_offline_count)
  return node_offline_count_;
}
void ClusterStats::set_node_offline_count(::google::protobuf::uint64 value) {
  
  node_offline_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_offline_count)
}

// uint64 node_tombstone_count = 10;
void ClusterStats::clear_node_tombstone_count() {
  node_tombstone_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClusterStats::node_tombstone_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_tombstone_count)
  return node_tombstone_count_;
}
void ClusterStats::set_node_tombstone_count(::google::protobuf::uint64 value) {
  
  node_tombstone_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_tombstone_count)
}

// double leader_balance_ratio = 11;
void ClusterStats::clear_leader_balance_ratio() {
  leader_balance_ratio_ = 0;
}
double ClusterStats::leader_balance_ratio() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.leader_balance_ratio)
  return leader_balance_ratio_;
}
void ClusterStats::set_leader_balance_ratio(double value) {
  
  leader_balance_ratio_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.leader_balance_ratio)
}

// double region_balance_ratio = 12;
void ClusterStats::clear_region_balance_ratio() {
  region_balance_ratio_ = 0;
}
double ClusterStats::region_balance_ratio() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.region_balance_ratio)
  return region_balance_ratio_;
}
void ClusterStats::set_region_balance_ratio(double value) {
  
  region_balance_ratio_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.region_balance_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseStats::kNameFieldNumber;
const int DatabaseStats::kTableNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseStats::DatabaseStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.DatabaseStats)
}
DatabaseStats::DatabaseStats(const DatabaseStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  table_num_ = from.table_num_;
  // @@protoc_insertion_point(copy_constructor:statspb.DatabaseStats)
}

void DatabaseStats::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_num_ = 0u;
  _cached_size_ = 0;
}

DatabaseStats::~DatabaseStats() {
  // @@protoc_insertion_point(destructor:statspb.DatabaseStats)
  SharedDtor();
}

void DatabaseStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatabaseStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabaseStats& DatabaseStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabaseStats* DatabaseStats::New(::google::protobuf::Arena* arena) const {
  DatabaseStats* n = new DatabaseStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.DatabaseStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_num_ = 0u;
  _internal_metadata_.Clear();
}

bool DatabaseStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.DatabaseStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.DatabaseStats.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 table_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.DatabaseStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.DatabaseStats)
  return false;
#undef DO_
}

void DatabaseStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.DatabaseStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DatabaseStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 table_num = 2;
  if (this->table_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.DatabaseStats)
}

::google::protobuf::uint8* DatabaseStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.DatabaseStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DatabaseStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 table_num = 2;
  if (this->table_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.DatabaseStats)
  return target;
}

size_t DatabaseStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.DatabaseStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 table_num = 2;
  if (this->table_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.DatabaseStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.DatabaseStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.DatabaseStats)
    MergeFrom(*source);
  }
}

void DatabaseStats::MergeFrom(const DatabaseStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.DatabaseStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.table_num() != 0) {
    set_table_num(from.table_num());
  }
}

void DatabaseStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.DatabaseStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseStats::CopyFrom(const DatabaseStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.DatabaseStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseStats::IsInitialized() const {
  return true;
}

void DatabaseStats::Swap(DatabaseStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseStats::InternalSwap(DatabaseStats* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(table_num_, other->table_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatabaseStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseStats

// string name = 1;
void DatabaseStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatabaseStats::name() const {
  // @@protoc_insertion_point(field_get:statspb.DatabaseStats.name)
  return name_.GetNoArena();
}
void DatabaseStats::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DatabaseStats.name)
}
#if LANG_CXX11
void DatabaseStats::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DatabaseStats.name)
}
#endif
void DatabaseStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DatabaseStats.name)
}
void DatabaseStats::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DatabaseStats.name)
}
::std::string* DatabaseStats::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DatabaseStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatabaseStats::release_name() {
  // @@protoc_insertion_point(field_release:statspb.DatabaseStats.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatabaseStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.DatabaseStats.name)
}

// uint32 table_num = 2;
void DatabaseStats::clear_table_num() {
  table_num_ = 0u;
}
::google::protobuf::uint32 DatabaseStats::table_num() const {
  // @@protoc_insertion_point(field_get:statspb.DatabaseStats.table_num)
  return table_num_;
}
void DatabaseStats::set_table_num(::google::protobuf::uint32 value) {
  
  table_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.DatabaseStats.table_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableStats::kDbNameFieldNumber;
const int TableStats::kTableNameFieldNumber;
const int TableStats::kRangeNumFieldNumber;
const int TableStats::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableStats::TableStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.TableStats)
}
TableStats::TableStats(const TableStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  ::memcpy(&range_num_, &from.range_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&range_num_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:statspb.TableStats)
}

void TableStats::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&range_num_)) + sizeof(size_));
  _cached_size_ = 0;
}

TableStats::~TableStats() {
  // @@protoc_insertion_point(destructor:statspb.TableStats)
  SharedDtor();
}

void TableStats::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableStats& TableStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableStats* TableStats::New(::google::protobuf::Arena* arena) const {
  TableStats* n = new TableStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.TableStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&range_num_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool TableStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.TableStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TableStats.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TableStats.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.TableStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.TableStats)
  return false;
#undef DO_
}

void TableStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.TableStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TableStats.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TableStats.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->range_num(), output);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.TableStats)
}

::google::protobuf::uint8* TableStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.TableStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TableStats.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TableStats.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->range_num(), target);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.TableStats)
  return target;
}

size_t TableStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.TableStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // uint64 range_num = 3;
  if (this->range_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_num());
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.TableStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TableStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.TableStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.TableStats)
    MergeFrom(*source);
  }
}

void TableStats::MergeFrom(const TableStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.TableStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.range_num() != 0) {
    set_range_num(from.range_num());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void TableStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.TableStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableStats::CopyFrom(const TableStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.TableStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStats::IsInitialized() const {
  return true;
}

void TableStats::Swap(TableStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableStats::InternalSwap(TableStats* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  swap(range_num_, other->range_num_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableStats

// string db_name = 1;
void TableStats::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableStats::db_name() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.db_name)
  return db_name_.GetNoArena();
}
void TableStats::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TableStats.db_name)
}
#if LANG_CXX11
void TableStats::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TableStats.db_name)
}
#endif
void TableStats::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TableStats.db_name)
}
void TableStats::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TableStats.db_name)
}
::std::string* TableStats::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TableStats.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableStats::release_db_name() {
  // @@protoc_insertion_point(field_release:statspb.TableStats.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableStats::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TableStats.db_name)
}

// string table_name = 2;
void TableStats::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableStats::table_name() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.table_name)
  return table_name_.GetNoArena();
}
void TableStats::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TableStats.table_name)
}
#if LANG_CXX11
void TableStats::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TableStats.table_name)
}
#endif
void TableStats::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TableStats.table_name)
}
void TableStats::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TableStats.table_name)
}
::std::string* TableStats::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TableStats.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableStats::release_table_name() {
  // @@protoc_insertion_point(field_release:statspb.TableStats.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableStats::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TableStats.table_name)
}

// uint64 range_num = 3;
void TableStats::clear_range_num() {
  range_num_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableStats::range_num() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.range_num)
  return range_num_;
}
void TableStats::set_range_num(::google::protobuf::uint64 value) {
  
  range_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.TableStats.range_num)
}

// uint64 size = 4;
void TableStats::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableStats::size() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.size)
  return size_;
}
void TableStats::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:statspb.TableStats.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kRangeIdFieldNumber;
const int TaskInfo::kKindFieldNumber;
const int TaskInfo::kNameFieldNumber;
const int TaskInfo::kStateFieldNumber;
const int TaskInfo::kStartFieldNumber;
const int TaskInfo::kEndFieldNumber;
const int TaskInfo::kUsedTimeFieldNumber;
const int TaskInfo::kDescribeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfo::TaskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.describe().size() > 0) {
    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_time_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(used_time_));
  // @@protoc_insertion_point(copy_constructor:statspb.TaskInfo)
}

void TaskInfo::SharedCtor() {
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(used_time_));
  _cached_size_ = 0;
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:statspb.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  describe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskInfo& TaskInfo::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskInfo* TaskInfo::New(::google::protobuf::Arena* arena) const {
  TaskInfo* n = new TaskInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(used_time_));
  _internal_metadata_.Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.TaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TaskInfo.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TaskInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TaskInfo.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double used_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &used_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string describe = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->describe().data(), static_cast<int>(this->describe().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.TaskInfo.describe"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kind(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string state = 5;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->state(), output);
  }

  // int64 start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->start(), output);
  }

  // int64 end = 7;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->end(), output);
  }

  // double used_time = 8;
  if (this->used_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->used_time(), output);
  }

  // string describe = 9;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->describe(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.TaskInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kind(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string state = 5;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->state(), target);
  }

  // int64 start = 6;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->start(), target);
  }

  // int64 end = 7;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->end(), target);
  }

  // double used_time = 8;
  if (this->used_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->used_time(), target);
  }

  // string describe = 9;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.TaskInfo.describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->describe(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.TaskInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string kind = 3;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string state = 5;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string describe = 9;
  if (this->describe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());
  }

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // int64 start = 6;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 7;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // double used_time = 8;
  if (this->used_time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.TaskInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.describe().size() > 0) {

    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.used_time() != 0) {
    set_used_time(from.used_time());
  }
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  kind_.Swap(&other->kind_);
  name_.Swap(&other->name_);
  state_.Swap(&other->state_);
  describe_.Swap(&other->describe_);
  swap(task_id_, other->task_id_);
  swap(range_id_, other->range_id_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(used_time_, other->used_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfo

// uint64 task_id = 1;
void TaskInfo::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.task_id)
  return task_id_;
}
void TaskInfo::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.task_id)
}

// uint64 range_id = 2;
void TaskInfo::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskInfo::range_id() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.range_id)
  return range_id_;
}
void TaskInfo::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.range_id)
}

// string kind = 3;
void TaskInfo::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::kind() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.kind)
  return kind_.GetNoArena();
}
void TaskInfo::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.kind)
}
#if LANG_CXX11
void TaskInfo::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.kind)
}
#endif
void TaskInfo::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.kind)
}
void TaskInfo::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.kind)
}
::std::string* TaskInfo::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_kind() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.kind)
}

// string name = 4;
void TaskInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::name() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.name)
  return name_.GetNoArena();
}
void TaskInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.name)
}
#if LANG_CXX11
void TaskInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.name)
}
#endif
void TaskInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.name)
}
void TaskInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.name)
}
::std::string* TaskInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_name() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.name)
}

// string state = 5;
void TaskInfo::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::state() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.state)
  return state_.GetNoArena();
}
void TaskInfo::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.state)
}
#if LANG_CXX11
void TaskInfo::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.state)
}
#endif
void TaskInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.state)
}
void TaskInfo::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.state)
}
::std::string* TaskInfo::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_state() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.state)
}

// int64 start = 6;
void TaskInfo::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskInfo::start() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.start)
  return start_;
}
void TaskInfo::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.start)
}

// int64 end = 7;
void TaskInfo::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskInfo::end() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.end)
  return end_;
}
void TaskInfo::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.end)
}

// double used_time = 8;
void TaskInfo::clear_used_time() {
  used_time_ = 0;
}
double TaskInfo::used_time() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.used_time)
  return used_time_;
}
void TaskInfo::set_used_time(double value) {
  
  used_time_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.used_time)
}

// string describe = 9;
void TaskInfo::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfo::describe() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.describe)
  return describe_.GetNoArena();
}
void TaskInfo::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.describe)
}
#if LANG_CXX11
void TaskInfo::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.describe)
}
#endif
void TaskInfo::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.describe)
}
void TaskInfo::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.describe)
}
::std::string* TaskInfo::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfo::release_describe() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfo::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.describe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HotSpotStats::kNodeIdFieldNumber;
const int HotSpotStats::kNodeAddrFieldNumber;
const int HotSpotStats::kTotalWrittenBytesAsPeerFieldNumber;
const int HotSpotStats::kHotWriteRegionAsPeerFieldNumber;
const int HotSpotStats::kTotalWrittenBytesAsLeaderFieldNumber;
const int HotSpotStats::kHotWriteRegionAsLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HotSpotStats::HotSpotStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.HotSpotStats)
}
HotSpotStats::HotSpotStats(const HotSpotStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_addr().size() > 0) {
    node_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_addr_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hot_write_region_as_leader_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(hot_write_region_as_leader_));
  // @@protoc_insertion_point(copy_constructor:statspb.HotSpotStats)
}

void HotSpotStats::SharedCtor() {
  node_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hot_write_region_as_leader_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(hot_write_region_as_leader_));
  _cached_size_ = 0;
}

HotSpotStats::~HotSpotStats() {
  // @@protoc_insertion_point(destructor:statspb.HotSpotStats)
  SharedDtor();
}

void HotSpotStats::SharedDtor() {
  node_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HotSpotStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotSpotStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HotSpotStats& HotSpotStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

HotSpotStats* HotSpotStats::New(::google::protobuf::Arena* arena) const {
  HotSpotStats* n = new HotSpotStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HotSpotStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.HotSpotStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hot_write_region_as_leader_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(hot_write_region_as_leader_));
  _internal_metadata_.Clear();
}

bool HotSpotStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.HotSpotStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_addr().data(), static_cast<int>(this->node_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.HotSpotStats.node_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_written_bytes_as_peer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_written_bytes_as_peer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hot_write_region_as_peer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hot_write_region_as_peer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_written_bytes_as_leader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_written_bytes_as_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hot_write_region_as_leader = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hot_write_region_as_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.HotSpotStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.HotSpotStats)
  return false;
#undef DO_
}

void HotSpotStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.HotSpotStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // string node_addr = 2;
  if (this->node_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_addr().data(), static_cast<int>(this->node_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.HotSpotStats.node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_addr(), output);
  }

  // double total_written_bytes_as_peer = 3;
  if (this->total_written_bytes_as_peer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_written_bytes_as_peer(), output);
  }

  // uint64 hot_write_region_as_peer = 4;
  if (this->hot_write_region_as_peer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hot_write_region_as_peer(), output);
  }

  // double total_written_bytes_as_leader = 5;
  if (this->total_written_bytes_as_leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->total_written_bytes_as_leader(), output);
  }

  // uint64 hot_write_region_as_leader = 6;
  if (this->hot_write_region_as_leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->hot_write_region_as_leader(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.HotSpotStats)
}

::google::protobuf::uint8* HotSpotStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.HotSpotStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // string node_addr = 2;
  if (this->node_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_addr().data(), static_cast<int>(this->node_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.HotSpotStats.node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_addr(), target);
  }

  // double total_written_bytes_as_peer = 3;
  if (this->total_written_bytes_as_peer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_written_bytes_as_peer(), target);
  }

  // uint64 hot_write_region_as_peer = 4;
  if (this->hot_write_region_as_peer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hot_write_region_as_peer(), target);
  }

  // double total_written_bytes_as_leader = 5;
  if (this->total_written_bytes_as_leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->total_written_bytes_as_leader(), target);
  }

  // uint64 hot_write_region_as_leader = 6;
  if (this->hot_write_region_as_leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->hot_write_region_as_leader(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.HotSpotStats)
  return target;
}

size_t HotSpotStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.HotSpotStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_addr = 2;
  if (this->node_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_addr());
  }

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // double total_written_bytes_as_peer = 3;
  if (this->total_written_bytes_as_peer() != 0) {
    total_size += 1 + 8;
  }

  // uint64 hot_write_region_as_peer = 4;
  if (this->hot_write_region_as_peer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hot_write_region_as_peer());
  }

  // double total_written_bytes_as_leader = 5;
  if (this->total_written_bytes_as_leader() != 0) {
    total_size += 1 + 8;
  }

  // uint64 hot_write_region_as_leader = 6;
  if (this->hot_write_region_as_leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hot_write_region_as_leader());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotSpotStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.HotSpotStats)
  GOOGLE_DCHECK_NE(&from, this);
  const HotSpotStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HotSpotStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.HotSpotStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.HotSpotStats)
    MergeFrom(*source);
  }
}

void HotSpotStats::MergeFrom(const HotSpotStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.HotSpotStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_addr().size() > 0) {

    node_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_addr_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.total_written_bytes_as_peer() != 0) {
    set_total_written_bytes_as_peer(from.total_written_bytes_as_peer());
  }
  if (from.hot_write_region_as_peer() != 0) {
    set_hot_write_region_as_peer(from.hot_write_region_as_peer());
  }
  if (from.total_written_bytes_as_leader() != 0) {
    set_total_written_bytes_as_leader(from.total_written_bytes_as_leader());
  }
  if (from.hot_write_region_as_leader() != 0) {
    set_hot_write_region_as_leader(from.hot_write_region_as_leader());
  }
}

void HotSpotStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.HotSpotStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotSpotStats::CopyFrom(const HotSpotStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.HotSpotStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotSpotStats::IsInitialized() const {
  return true;
}

void HotSpotStats::Swap(HotSpotStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HotSpotStats::InternalSwap(HotSpotStats* other) {
  using std::swap;
  node_addr_.Swap(&other->node_addr_);
  swap(node_id_, other->node_id_);
  swap(total_written_bytes_as_peer_, other->total_written_bytes_as_peer_);
  swap(hot_write_region_as_peer_, other->hot_write_region_as_peer_);
  swap(total_written_bytes_as_leader_, other->total_written_bytes_as_leader_);
  swap(hot_write_region_as_leader_, other->hot_write_region_as_leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HotSpotStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HotSpotStats

// uint64 node_id = 1;
void HotSpotStats::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HotSpotStats::node_id() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.node_id)
  return node_id_;
}
void HotSpotStats::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.node_id)
}

// string node_addr = 2;
void HotSpotStats::clear_node_addr() {
  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HotSpotStats::node_addr() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.node_addr)
  return node_addr_.GetNoArena();
}
void HotSpotStats::set_node_addr(const ::std::string& value) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.node_addr)
}
#if LANG_CXX11
void HotSpotStats::set_node_addr(::std::string&& value) {
  
  node_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.HotSpotStats.node_addr)
}
#endif
void HotSpotStats::set_node_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.HotSpotStats.node_addr)
}
void HotSpotStats::set_node_addr(const char* value, size_t size) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.HotSpotStats.node_addr)
}
::std::string* HotSpotStats::mutable_node_addr() {
  
  // @@protoc_insertion_point(field_mutable:statspb.HotSpotStats.node_addr)
  return node_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HotSpotStats::release_node_addr() {
  // @@protoc_insertion_point(field_release:statspb.HotSpotStats.node_addr)
  
  return node_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HotSpotStats::set_allocated_node_addr(::std::string* node_addr) {
  if (node_addr != NULL) {
    
  } else {
    
  }
  node_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_addr);
  // @@protoc_insertion_point(field_set_allocated:statspb.HotSpotStats.node_addr)
}

// double total_written_bytes_as_peer = 3;
void HotSpotStats::clear_total_written_bytes_as_peer() {
  total_written_bytes_as_peer_ = 0;
}
double HotSpotStats::total_written_bytes_as_peer() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.total_written_bytes_as_peer)
  return total_written_bytes_as_peer_;
}
void HotSpotStats::set_total_written_bytes_as_peer(double value) {
  
  total_written_bytes_as_peer_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.total_written_bytes_as_peer)
}

// uint64 hot_write_region_as_peer = 4;
void HotSpotStats::clear_hot_write_region_as_peer() {
  hot_write_region_as_peer_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HotSpotStats::hot_write_region_as_peer() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.hot_write_region_as_peer)
  return hot_write_region_as_peer_;
}
void HotSpotStats::set_hot_write_region_as_peer(::google::protobuf::uint64 value) {
  
  hot_write_region_as_peer_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.hot_write_region_as_peer)
}

// double total_written_bytes_as_leader = 5;
void HotSpotStats::clear_total_written_bytes_as_leader() {
  total_written_bytes_as_leader_ = 0;
}
double HotSpotStats::total_written_bytes_as_leader() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.total_written_bytes_as_leader)
  return total_written_bytes_as_leader_;
}
void HotSpotStats::set_total_written_bytes_as_leader(double value) {
  
  total_written_bytes_as_leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.total_written_bytes_as_leader)
}

// uint64 hot_write_region_as_leader = 6;
void HotSpotStats::clear_hot_write_region_as_leader() {
  hot_write_region_as_leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HotSpotStats::hot_write_region_as_leader() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.hot_write_region_as_leader)
  return hot_write_region_as_leader_;
}
void HotSpotStats::set_hot_write_region_as_leader(::google::protobuf::uint64 value) {
  
  hot_write_region_as_leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.hot_write_region_as_leader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScheduleCount::kNameFieldNumber;
const int ScheduleCount::kLabelFieldNumber;
const int ScheduleCount::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScheduleCount::ScheduleCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.ScheduleCount)
}
ScheduleCount::ScheduleCount(const ScheduleCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:statspb.ScheduleCount)
}

void ScheduleCount::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ScheduleCount::~ScheduleCount() {
  // @@protoc_insertion_point(destructor:statspb.ScheduleCount)
  SharedDtor();
}

void ScheduleCount::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScheduleCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleCount::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScheduleCount& ScheduleCount::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScheduleCount* ScheduleCount::New(::google::protobuf::Arena* arena) const {
  ScheduleCount* n = new ScheduleCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScheduleCount::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.ScheduleCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ScheduleCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.ScheduleCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.ScheduleCount.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.ScheduleCount.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.ScheduleCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.ScheduleCount)
  return false;
#undef DO_
}

void ScheduleCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.ScheduleCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ScheduleCount.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ScheduleCount.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.ScheduleCount)
}

::google::protobuf::uint8* ScheduleCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.ScheduleCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ScheduleCount.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ScheduleCount.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.ScheduleCount)
  return target;
}

size_t ScheduleCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.ScheduleCount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.ScheduleCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ScheduleCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScheduleCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.ScheduleCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.ScheduleCount)
    MergeFrom(*source);
  }
}

void ScheduleCount::MergeFrom(const ScheduleCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.ScheduleCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ScheduleCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.ScheduleCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleCount::CopyFrom(const ScheduleCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.ScheduleCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleCount::IsInitialized() const {
  return true;
}

void ScheduleCount::Swap(ScheduleCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScheduleCount::InternalSwap(ScheduleCount* other) {
  using std::swap;
  name_.Swap(&other->name_);
  label_.Swap(&other->label_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScheduleCount::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScheduleCount

// string name = 1;
void ScheduleCount::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScheduleCount::name() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.name)
  return name_.GetNoArena();
}
void ScheduleCount::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.name)
}
#if LANG_CXX11
void ScheduleCount::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ScheduleCount.name)
}
#endif
void ScheduleCount::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ScheduleCount.name)
}
void ScheduleCount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ScheduleCount.name)
}
::std::string* ScheduleCount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ScheduleCount.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScheduleCount::release_name() {
  // @@protoc_insertion_point(field_release:statspb.ScheduleCount.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScheduleCount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.ScheduleCount.name)
}

// string label = 2;
void ScheduleCount::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScheduleCount::label() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.label)
  return label_.GetNoArena();
}
void ScheduleCount::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.label)
}
#if LANG_CXX11
void ScheduleCount::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ScheduleCount.label)
}
#endif
void ScheduleCount::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ScheduleCount.label)
}
void ScheduleCount::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ScheduleCount.label)
}
::std::string* ScheduleCount::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ScheduleCount.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScheduleCount::release_label() {
  // @@protoc_insertion_point(field_release:statspb.ScheduleCount.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScheduleCount::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:statspb.ScheduleCount.label)
}

// uint64 count = 3;
void ScheduleCount::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ScheduleCount::count() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.count)
  return count_;
}
void ScheduleCount::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiskStats::kDiskPathFieldNumber;
const int DiskStats::kDiskTotalFieldNumber;
const int DiskStats::kDiskUsedFieldNumber;
const int DiskStats::kDiskFreeFieldNumber;
const int DiskStats::kDiskProcRateFieldNumber;
const int DiskStats::kDiskReadBytePerSecFieldNumber;
const int DiskStats::kDiskWriteBytePerSecFieldNumber;
const int DiskStats::kDiskReadCountPerSecFieldNumber;
const int DiskStats::kDiskWriteCountPerSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiskStats::DiskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.DiskStats)
}
DiskStats::DiskStats(const DiskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disk_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.disk_path().size() > 0) {
    disk_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disk_path_);
  }
  ::memcpy(&disk_total_, &from.disk_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&disk_write_count_per_sec_) -
    reinterpret_cast<char*>(&disk_total_)) + sizeof(disk_write_count_per_sec_));
  // @@protoc_insertion_point(copy_constructor:statspb.DiskStats)
}

void DiskStats::SharedCtor() {
  disk_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disk_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disk_write_count_per_sec_) -
      reinterpret_cast<char*>(&disk_total_)) + sizeof(disk_write_count_per_sec_));
  _cached_size_ = 0;
}

DiskStats::~DiskStats() {
  // @@protoc_insertion_point(destructor:statspb.DiskStats)
  SharedDtor();
}

void DiskStats::SharedDtor() {
  disk_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DiskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiskStats& DiskStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiskStats* DiskStats::New(::google::protobuf::Arena* arena) const {
  DiskStats* n = new DiskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.DiskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disk_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disk_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disk_write_count_per_sec_) -
      reinterpret_cast<char*>(&disk_total_)) + sizeof(disk_write_count_per_sec_));
  _internal_metadata_.Clear();
}

bool DiskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.DiskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string disk_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disk_path().data(), static_cast<int>(this->disk_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.DiskStats.disk_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double disk_proc_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &disk_proc_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_read_byte_per_sec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_read_byte_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_write_byte_per_sec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_write_byte_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_read_count_per_sec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_read_count_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 disk_write_count_per_sec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_write_count_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.DiskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.DiskStats)
  return false;
#undef DO_
}

void DiskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.DiskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string disk_path = 1;
  if (this->disk_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk_path().data(), static_cast<int>(this->disk_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DiskStats.disk_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->disk_path(), output);
  }

  // uint64 disk_total = 2;
  if (this->disk_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->disk_total(), output);
  }

  // uint64 disk_used = 3;
  if (this->disk_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->disk_used(), output);
  }

  // uint64 disk_free = 4;
  if (this->disk_free() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->disk_free(), output);
  }

  // double disk_proc_rate = 5;
  if (this->disk_proc_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->disk_proc_rate(), output);
  }

  // uint64 disk_read_byte_per_sec = 6;
  if (this->disk_read_byte_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->disk_read_byte_per_sec(), output);
  }

  // uint64 disk_write_byte_per_sec = 7;
  if (this->disk_write_byte_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->disk_write_byte_per_sec(), output);
  }

  // uint64 disk_read_count_per_sec = 8;
  if (this->disk_read_count_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->disk_read_count_per_sec(), output);
  }

  // uint64 disk_write_count_per_sec = 9;
  if (this->disk_write_count_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->disk_write_count_per_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.DiskStats)
}

::google::protobuf::uint8* DiskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.DiskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string disk_path = 1;
  if (this->disk_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disk_path().data(), static_cast<int>(this->disk_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DiskStats.disk_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->disk_path(), target);
  }

  // uint64 disk_total = 2;
  if (this->disk_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->disk_total(), target);
  }

  // uint64 disk_used = 3;
  if (this->disk_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->disk_used(), target);
  }

  // uint64 disk_free = 4;
  if (this->disk_free() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->disk_free(), target);
  }

  // double disk_proc_rate = 5;
  if (this->disk_proc_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->disk_proc_rate(), target);
  }

  // uint64 disk_read_byte_per_sec = 6;
  if (this->disk_read_byte_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->disk_read_byte_per_sec(), target);
  }

  // uint64 disk_write_byte_per_sec = 7;
  if (this->disk_write_byte_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->disk_write_byte_per_sec(), target);
  }

  // uint64 disk_read_count_per_sec = 8;
  if (this->disk_read_count_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->disk_read_count_per_sec(), target);
  }

  // uint64 disk_write_count_per_sec = 9;
  if (this->disk_write_count_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->disk_write_count_per_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.DiskStats)
  return target;
}

size_t DiskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.DiskStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string disk_path = 1;
  if (this->disk_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disk_path());
  }

  // uint64 disk_total = 2;
  if (this->disk_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_total());
  }

  // uint64 disk_used = 3;
  if (this->disk_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_used());
  }

  // uint64 disk_free = 4;
  if (this->disk_free() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_free());
  }

  // double disk_proc_rate = 5;
  if (this->disk_proc_rate() != 0) {
    total_size += 1 + 8;
  }

  // uint64 disk_read_byte_per_sec = 6;
  if (this->disk_read_byte_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_read_byte_per_sec());
  }

  // uint64 disk_write_byte_per_sec = 7;
  if (this->disk_write_byte_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_write_byte_per_sec());
  }

  // uint64 disk_read_count_per_sec = 8;
  if (this->disk_read_count_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_read_count_per_sec());
  }

  // uint64 disk_write_count_per_sec = 9;
  if (this->disk_write_count_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->disk_write_count_per_sec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.DiskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.DiskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.DiskStats)
    MergeFrom(*source);
  }
}

void DiskStats::MergeFrom(const DiskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.DiskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disk_path().size() > 0) {

    disk_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disk_path_);
  }
  if (from.disk_total() != 0) {
    set_disk_total(from.disk_total());
  }
  if (from.disk_used() != 0) {
    set_disk_used(from.disk_used());
  }
  if (from.disk_free() != 0) {
    set_disk_free(from.disk_free());
  }
  if (from.disk_proc_rate() != 0) {
    set_disk_proc_rate(from.disk_proc_rate());
  }
  if (from.disk_read_byte_per_sec() != 0) {
    set_disk_read_byte_per_sec(from.disk_read_byte_per_sec());
  }
  if (from.disk_write_byte_per_sec() != 0) {
    set_disk_write_byte_per_sec(from.disk_write_byte_per_sec());
  }
  if (from.disk_read_count_per_sec() != 0) {
    set_disk_read_count_per_sec(from.disk_read_count_per_sec());
  }
  if (from.disk_write_count_per_sec() != 0) {
    set_disk_write_count_per_sec(from.disk_write_count_per_sec());
  }
}

void DiskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.DiskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskStats::CopyFrom(const DiskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.DiskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskStats::IsInitialized() const {
  return true;
}

void DiskStats::Swap(DiskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiskStats::InternalSwap(DiskStats* other) {
  using std::swap;
  disk_path_.Swap(&other->disk_path_);
  swap(disk_total_, other->disk_total_);
  swap(disk_used_, other->disk_used_);
  swap(disk_free_, other->disk_free_);
  swap(disk_proc_rate_, other->disk_proc_rate_);
  swap(disk_read_byte_per_sec_, other->disk_read_byte_per_sec_);
  swap(disk_write_byte_per_sec_, other->disk_write_byte_per_sec_);
  swap(disk_read_count_per_sec_, other->disk_read_count_per_sec_);
  swap(disk_write_count_per_sec_, other->disk_write_count_per_sec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiskStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiskStats

// string disk_path = 1;
void DiskStats::clear_disk_path() {
  disk_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DiskStats::disk_path() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_path)
  return disk_path_.GetNoArena();
}
void DiskStats::set_disk_path(const ::std::string& value) {
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_path)
}
#if LANG_CXX11
void DiskStats::set_disk_path(::std::string&& value) {
  
  disk_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DiskStats.disk_path)
}
#endif
void DiskStats::set_disk_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DiskStats.disk_path)
}
void DiskStats::set_disk_path(const char* value, size_t size) {
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DiskStats.disk_path)
}
::std::string* DiskStats::mutable_disk_path() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DiskStats.disk_path)
  return disk_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiskStats::release_disk_path() {
  // @@protoc_insertion_point(field_release:statspb.DiskStats.disk_path)
  
  return disk_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiskStats::set_allocated_disk_path(::std::string* disk_path) {
  if (disk_path != NULL) {
    
  } else {
    
  }
  disk_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_path);
  // @@protoc_insertion_point(field_set_allocated:statspb.DiskStats.disk_path)
}

// uint64 disk_total = 2;
void DiskStats::clear_disk_total() {
  disk_total_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_total() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_total)
  return disk_total_;
}
void DiskStats::set_disk_total(::google::protobuf::uint64 value) {
  
  disk_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_total)
}

// uint64 disk_used = 3;
void DiskStats::clear_disk_used() {
  disk_used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_used() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_used)
  return disk_used_;
}
void DiskStats::set_disk_used(::google::protobuf::uint64 value) {
  
  disk_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_used)
}

// uint64 disk_free = 4;
void DiskStats::clear_disk_free() {
  disk_free_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_free() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_free)
  return disk_free_;
}
void DiskStats::set_disk_free(::google::protobuf::uint64 value) {
  
  disk_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_free)
}

// double disk_proc_rate = 5;
void DiskStats::clear_disk_proc_rate() {
  disk_proc_rate_ = 0;
}
double DiskStats::disk_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_proc_rate)
  return disk_proc_rate_;
}
void DiskStats::set_disk_proc_rate(double value) {
  
  disk_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_proc_rate)
}

// uint64 disk_read_byte_per_sec = 6;
void DiskStats::clear_disk_read_byte_per_sec() {
  disk_read_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_read_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_read_byte_per_sec)
  return disk_read_byte_per_sec_;
}
void DiskStats::set_disk_read_byte_per_sec(::google::protobuf::uint64 value) {
  
  disk_read_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_read_byte_per_sec)
}

// uint64 disk_write_byte_per_sec = 7;
void DiskStats::clear_disk_write_byte_per_sec() {
  disk_write_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_write_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_write_byte_per_sec)
  return disk_write_byte_per_sec_;
}
void DiskStats::set_disk_write_byte_per_sec(::google::protobuf::uint64 value) {
  
  disk_write_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_write_byte_per_sec)
}

// uint64 disk_read_count_per_sec = 8;
void DiskStats::clear_disk_read_count_per_sec() {
  disk_read_count_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_read_count_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_read_count_per_sec)
  return disk_read_count_per_sec_;
}
void DiskStats::set_disk_read_count_per_sec(::google::protobuf::uint64 value) {
  
  disk_read_count_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_read_count_per_sec)
}

// uint64 disk_write_count_per_sec = 9;
void DiskStats::clear_disk_write_count_per_sec() {
  disk_write_count_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DiskStats::disk_write_count_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_write_count_per_sec)
  return disk_write_count_per_sec_;
}
void DiskStats::set_disk_write_count_per_sec(::google::protobuf::uint64 value) {
  
  disk_write_count_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_write_count_per_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStats::kNetIoInBytePerSecFieldNumber;
const int NetStats::kNetIoOutBytePerSecFieldNumber;
const int NetStats::kNetIoInPackagePerSecFieldNumber;
const int NetStats::kNetIoOutPackagePerSecFieldNumber;
const int NetStats::kNetTcpConnectionsFieldNumber;
const int NetStats::kNetTcpActiveOpensPerSecFieldNumber;
const int NetStats::kNetIpRecvPackagePerSecFieldNumber;
const int NetStats::kNetIpSendPackagePerSecFieldNumber;
const int NetStats::kNetIpDropPackagePerSecFieldNumber;
const int NetStats::kNetTcpRecvPackagePerSecFieldNumber;
const int NetStats::kNetTcpSendPackagePerSecFieldNumber;
const int NetStats::kNetTcpErrPackagePerSecFieldNumber;
const int NetStats::kNetTcpRetransferPackagePerSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStats::NetStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.NetStats)
}
NetStats::NetStats(const NetStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&net_io_in_byte_per_sec_, &from.net_io_in_byte_per_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_tcp_connections_) -
    reinterpret_cast<char*>(&net_io_in_byte_per_sec_)) + sizeof(net_tcp_connections_));
  // @@protoc_insertion_point(copy_constructor:statspb.NetStats)
}

void NetStats::SharedCtor() {
  ::memset(&net_io_in_byte_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_tcp_connections_) -
      reinterpret_cast<char*>(&net_io_in_byte_per_sec_)) + sizeof(net_tcp_connections_));
  _cached_size_ = 0;
}

NetStats::~NetStats() {
  // @@protoc_insertion_point(destructor:statspb.NetStats)
  SharedDtor();
}

void NetStats::SharedDtor() {
}

void NetStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetStats& NetStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetStats* NetStats::New(::google::protobuf::Arena* arena) const {
  NetStats* n = new NetStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.NetStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&net_io_in_byte_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_tcp_connections_) -
      reinterpret_cast<char*>(&net_io_in_byte_per_sec_)) + sizeof(net_tcp_connections_));
  _internal_metadata_.Clear();
}

bool NetStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.NetStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 net_io_in_byte_per_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_io_in_byte_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_io_out_byte_per_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_io_out_byte_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_io_in_package_per_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_io_in_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_io_out_package_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_io_out_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 net_tcp_connections = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_tcp_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_tcp_active_opens_per_sec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tcp_active_opens_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_ip_recv_package_per_sec = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_ip_recv_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_ip_send_package_per_sec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_ip_send_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_ip_drop_package_per_sec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_ip_drop_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_tcp_recv_package_per_sec = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tcp_recv_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_tcp_send_package_per_sec = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tcp_send_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_tcp_err_package_per_sec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tcp_err_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 net_tcp_retransfer_package_per_sec = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tcp_retransfer_package_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.NetStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.NetStats)
  return false;
#undef DO_
}

void NetStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.NetStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 net_io_in_byte_per_sec = 1;
  if (this->net_io_in_byte_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->net_io_in_byte_per_sec(), output);
  }

  // uint64 net_io_out_byte_per_sec = 2;
  if (this->net_io_out_byte_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->net_io_out_byte_per_sec(), output);
  }

  // uint64 net_io_in_package_per_sec = 3;
  if (this->net_io_in_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->net_io_in_package_per_sec(), output);
  }

  // uint64 net_io_out_package_per_sec = 4;
  if (this->net_io_out_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->net_io_out_package_per_sec(), output);
  }

  // uint32 net_tcp_connections = 5;
  if (this->net_tcp_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->net_tcp_connections(), output);
  }

  // uint64 net_tcp_active_opens_per_sec = 6;
  if (this->net_tcp_active_opens_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->net_tcp_active_opens_per_sec(), output);
  }

  // uint64 net_ip_recv_package_per_sec = 7;
  if (this->net_ip_recv_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->net_ip_recv_package_per_sec(), output);
  }

  // uint64 net_ip_send_package_per_sec = 8;
  if (this->net_ip_send_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->net_ip_send_package_per_sec(), output);
  }

  // uint64 net_ip_drop_package_per_sec = 9;
  if (this->net_ip_drop_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->net_ip_drop_package_per_sec(), output);
  }

  // uint64 net_tcp_recv_package_per_sec = 10;
  if (this->net_tcp_recv_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->net_tcp_recv_package_per_sec(), output);
  }

  // uint64 net_tcp_send_package_per_sec = 11;
  if (this->net_tcp_send_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->net_tcp_send_package_per_sec(), output);
  }

  // uint64 net_tcp_err_package_per_sec = 12;
  if (this->net_tcp_err_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->net_tcp_err_package_per_sec(), output);
  }

  // uint64 net_tcp_retransfer_package_per_sec = 13;
  if (this->net_tcp_retransfer_package_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->net_tcp_retransfer_package_per_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.NetStats)
}

::google::protobuf::uint8* NetStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.NetStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 net_io_in_byte_per_sec = 1;
  if (this->net_io_in_byte_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->net_io_in_byte_per_sec(), target);
  }

  // uint64 net_io_out_byte_per_sec = 2;
  if (this->net_io_out_byte_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->net_io_out_byte_per_sec(), target);
  }

  // uint64 net_io_in_package_per_sec = 3;
  if (this->net_io_in_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->net_io_in_package_per_sec(), target);
  }

  // uint64 net_io_out_package_per_sec = 4;
  if (this->net_io_out_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->net_io_out_package_per_sec(), target);
  }

  // uint32 net_tcp_connections = 5;
  if (this->net_tcp_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->net_tcp_connections(), target);
  }

  // uint64 net_tcp_active_opens_per_sec = 6;
  if (this->net_tcp_active_opens_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->net_tcp_active_opens_per_sec(), target);
  }

  // uint64 net_ip_recv_package_per_sec = 7;
  if (this->net_ip_recv_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->net_ip_recv_package_per_sec(), target);
  }

  // uint64 net_ip_send_package_per_sec = 8;
  if (this->net_ip_send_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->net_ip_send_package_per_sec(), target);
  }

  // uint64 net_ip_drop_package_per_sec = 9;
  if (this->net_ip_drop_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->net_ip_drop_package_per_sec(), target);
  }

  // uint64 net_tcp_recv_package_per_sec = 10;
  if (this->net_tcp_recv_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->net_tcp_recv_package_per_sec(), target);
  }

  // uint64 net_tcp_send_package_per_sec = 11;
  if (this->net_tcp_send_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->net_tcp_send_package_per_sec(), target);
  }

  // uint64 net_tcp_err_package_per_sec = 12;
  if (this->net_tcp_err_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->net_tcp_err_package_per_sec(), target);
  }

  // uint64 net_tcp_retransfer_package_per_sec = 13;
  if (this->net_tcp_retransfer_package_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->net_tcp_retransfer_package_per_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.NetStats)
  return target;
}

size_t NetStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.NetStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 net_io_in_byte_per_sec = 1;
  if (this->net_io_in_byte_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_io_in_byte_per_sec());
  }

  // uint64 net_io_out_byte_per_sec = 2;
  if (this->net_io_out_byte_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_io_out_byte_per_sec());
  }

  // uint64 net_io_in_package_per_sec = 3;
  if (this->net_io_in_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_io_in_package_per_sec());
  }

  // uint64 net_io_out_package_per_sec = 4;
  if (this->net_io_out_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_io_out_package_per_sec());
  }

  // uint64 net_tcp_active_opens_per_sec = 6;
  if (this->net_tcp_active_opens_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_tcp_active_opens_per_sec());
  }

  // uint64 net_ip_recv_package_per_sec = 7;
  if (this->net_ip_recv_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_ip_recv_package_per_sec());
  }

  // uint64 net_ip_send_package_per_sec = 8;
  if (this->net_ip_send_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_ip_send_package_per_sec());
  }

  // uint64 net_ip_drop_package_per_sec = 9;
  if (this->net_ip_drop_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_ip_drop_package_per_sec());
  }

  // uint64 net_tcp_recv_package_per_sec = 10;
  if (this->net_tcp_recv_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_tcp_recv_package_per_sec());
  }

  // uint64 net_tcp_send_package_per_sec = 11;
  if (this->net_tcp_send_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_tcp_send_package_per_sec());
  }

  // uint64 net_tcp_err_package_per_sec = 12;
  if (this->net_tcp_err_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_tcp_err_package_per_sec());
  }

  // uint64 net_tcp_retransfer_package_per_sec = 13;
  if (this->net_tcp_retransfer_package_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->net_tcp_retransfer_package_per_sec());
  }

  // uint32 net_tcp_connections = 5;
  if (this->net_tcp_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->net_tcp_connections());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.NetStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NetStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.NetStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.NetStats)
    MergeFrom(*source);
  }
}

void NetStats::MergeFrom(const NetStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.NetStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net_io_in_byte_per_sec() != 0) {
    set_net_io_in_byte_per_sec(from.net_io_in_byte_per_sec());
  }
  if (from.net_io_out_byte_per_sec() != 0) {
    set_net_io_out_byte_per_sec(from.net_io_out_byte_per_sec());
  }
  if (from.net_io_in_package_per_sec() != 0) {
    set_net_io_in_package_per_sec(from.net_io_in_package_per_sec());
  }
  if (from.net_io_out_package_per_sec() != 0) {
    set_net_io_out_package_per_sec(from.net_io_out_package_per_sec());
  }
  if (from.net_tcp_active_opens_per_sec() != 0) {
    set_net_tcp_active_opens_per_sec(from.net_tcp_active_opens_per_sec());
  }
  if (from.net_ip_recv_package_per_sec() != 0) {
    set_net_ip_recv_package_per_sec(from.net_ip_recv_package_per_sec());
  }
  if (from.net_ip_send_package_per_sec() != 0) {
    set_net_ip_send_package_per_sec(from.net_ip_send_package_per_sec());
  }
  if (from.net_ip_drop_package_per_sec() != 0) {
    set_net_ip_drop_package_per_sec(from.net_ip_drop_package_per_sec());
  }
  if (from.net_tcp_recv_package_per_sec() != 0) {
    set_net_tcp_recv_package_per_sec(from.net_tcp_recv_package_per_sec());
  }
  if (from.net_tcp_send_package_per_sec() != 0) {
    set_net_tcp_send_package_per_sec(from.net_tcp_send_package_per_sec());
  }
  if (from.net_tcp_err_package_per_sec() != 0) {
    set_net_tcp_err_package_per_sec(from.net_tcp_err_package_per_sec());
  }
  if (from.net_tcp_retransfer_package_per_sec() != 0) {
    set_net_tcp_retransfer_package_per_sec(from.net_tcp_retransfer_package_per_sec());
  }
  if (from.net_tcp_connections() != 0) {
    set_net_tcp_connections(from.net_tcp_connections());
  }
}

void NetStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.NetStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStats::CopyFrom(const NetStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.NetStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStats::IsInitialized() const {
  return true;
}

void NetStats::Swap(NetStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetStats::InternalSwap(NetStats* other) {
  using std::swap;
  swap(net_io_in_byte_per_sec_, other->net_io_in_byte_per_sec_);
  swap(net_io_out_byte_per_sec_, other->net_io_out_byte_per_sec_);
  swap(net_io_in_package_per_sec_, other->net_io_in_package_per_sec_);
  swap(net_io_out_package_per_sec_, other->net_io_out_package_per_sec_);
  swap(net_tcp_active_opens_per_sec_, other->net_tcp_active_opens_per_sec_);
  swap(net_ip_recv_package_per_sec_, other->net_ip_recv_package_per_sec_);
  swap(net_ip_send_package_per_sec_, other->net_ip_send_package_per_sec_);
  swap(net_ip_drop_package_per_sec_, other->net_ip_drop_package_per_sec_);
  swap(net_tcp_recv_package_per_sec_, other->net_tcp_recv_package_per_sec_);
  swap(net_tcp_send_package_per_sec_, other->net_tcp_send_package_per_sec_);
  swap(net_tcp_err_package_per_sec_, other->net_tcp_err_package_per_sec_);
  swap(net_tcp_retransfer_package_per_sec_, other->net_tcp_retransfer_package_per_sec_);
  swap(net_tcp_connections_, other->net_tcp_connections_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetStats

// uint64 net_io_in_byte_per_sec = 1;
void NetStats::clear_net_io_in_byte_per_sec() {
  net_io_in_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_io_in_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_in_byte_per_sec)
  return net_io_in_byte_per_sec_;
}
void NetStats::set_net_io_in_byte_per_sec(::google::protobuf::uint64 value) {
  
  net_io_in_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_in_byte_per_sec)
}

// uint64 net_io_out_byte_per_sec = 2;
void NetStats::clear_net_io_out_byte_per_sec() {
  net_io_out_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_io_out_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_out_byte_per_sec)
  return net_io_out_byte_per_sec_;
}
void NetStats::set_net_io_out_byte_per_sec(::google::protobuf::uint64 value) {
  
  net_io_out_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_out_byte_per_sec)
}

// uint64 net_io_in_package_per_sec = 3;
void NetStats::clear_net_io_in_package_per_sec() {
  net_io_in_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_io_in_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_in_package_per_sec)
  return net_io_in_package_per_sec_;
}
void NetStats::set_net_io_in_package_per_sec(::google::protobuf::uint64 value) {
  
  net_io_in_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_in_package_per_sec)
}

// uint64 net_io_out_package_per_sec = 4;
void NetStats::clear_net_io_out_package_per_sec() {
  net_io_out_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_io_out_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_out_package_per_sec)
  return net_io_out_package_per_sec_;
}
void NetStats::set_net_io_out_package_per_sec(::google::protobuf::uint64 value) {
  
  net_io_out_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_out_package_per_sec)
}

// uint32 net_tcp_connections = 5;
void NetStats::clear_net_tcp_connections() {
  net_tcp_connections_ = 0u;
}
::google::protobuf::uint32 NetStats::net_tcp_connections() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_connections)
  return net_tcp_connections_;
}
void NetStats::set_net_tcp_connections(::google::protobuf::uint32 value) {
  
  net_tcp_connections_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_connections)
}

// uint64 net_tcp_active_opens_per_sec = 6;
void NetStats::clear_net_tcp_active_opens_per_sec() {
  net_tcp_active_opens_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_tcp_active_opens_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_active_opens_per_sec)
  return net_tcp_active_opens_per_sec_;
}
void NetStats::set_net_tcp_active_opens_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_active_opens_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_active_opens_per_sec)
}

// uint64 net_ip_recv_package_per_sec = 7;
void NetStats::clear_net_ip_recv_package_per_sec() {
  net_ip_recv_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_ip_recv_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_recv_package_per_sec)
  return net_ip_recv_package_per_sec_;
}
void NetStats::set_net_ip_recv_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_recv_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_recv_package_per_sec)
}

// uint64 net_ip_send_package_per_sec = 8;
void NetStats::clear_net_ip_send_package_per_sec() {
  net_ip_send_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_ip_send_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_send_package_per_sec)
  return net_ip_send_package_per_sec_;
}
void NetStats::set_net_ip_send_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_send_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_send_package_per_sec)
}

// uint64 net_ip_drop_package_per_sec = 9;
void NetStats::clear_net_ip_drop_package_per_sec() {
  net_ip_drop_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_ip_drop_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_drop_package_per_sec)
  return net_ip_drop_package_per_sec_;
}
void NetStats::set_net_ip_drop_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_drop_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_drop_package_per_sec)
}

// uint64 net_tcp_recv_package_per_sec = 10;
void NetStats::clear_net_tcp_recv_package_per_sec() {
  net_tcp_recv_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_tcp_recv_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_recv_package_per_sec)
  return net_tcp_recv_package_per_sec_;
}
void NetStats::set_net_tcp_recv_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_recv_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_recv_package_per_sec)
}

// uint64 net_tcp_send_package_per_sec = 11;
void NetStats::clear_net_tcp_send_package_per_sec() {
  net_tcp_send_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_tcp_send_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_send_package_per_sec)
  return net_tcp_send_package_per_sec_;
}
void NetStats::set_net_tcp_send_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_send_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_send_package_per_sec)
}

// uint64 net_tcp_err_package_per_sec = 12;
void NetStats::clear_net_tcp_err_package_per_sec() {
  net_tcp_err_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_tcp_err_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_err_package_per_sec)
  return net_tcp_err_package_per_sec_;
}
void NetStats::set_net_tcp_err_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_err_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_err_package_per_sec)
}

// uint64 net_tcp_retransfer_package_per_sec = 13;
void NetStats::clear_net_tcp_retransfer_package_per_sec() {
  net_tcp_retransfer_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetStats::net_tcp_retransfer_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_retransfer_package_per_sec)
  return net_tcp_retransfer_package_per_sec_;
}
void NetStats::set_net_tcp_retransfer_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_retransfer_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_retransfer_package_per_sec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemStats::kMemoryTotalFieldNumber;
const int MemStats::kMemoryUsedRssFieldNumber;
const int MemStats::kMemoryUsedFieldNumber;
const int MemStats::kMemoryFreeFieldNumber;
const int MemStats::kMemoryUsedPercentFieldNumber;
const int MemStats::kSwapMemoryTotalFieldNumber;
const int MemStats::kSwapMemoryUsedFieldNumber;
const int MemStats::kSwapMemoryFreeFieldNumber;
const int MemStats::kSwapMemoryUsedPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemStats::MemStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.MemStats)
}
MemStats::MemStats(const MemStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memory_total_, &from.memory_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_memory_used_percent_) -
    reinterpret_cast<char*>(&memory_total_)) + sizeof(swap_memory_used_percent_));
  // @@protoc_insertion_point(copy_constructor:statspb.MemStats)
}

void MemStats::SharedCtor() {
  ::memset(&memory_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_memory_used_percent_) -
      reinterpret_cast<char*>(&memory_total_)) + sizeof(swap_memory_used_percent_));
  _cached_size_ = 0;
}

MemStats::~MemStats() {
  // @@protoc_insertion_point(destructor:statspb.MemStats)
  SharedDtor();
}

void MemStats::SharedDtor() {
}

void MemStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemStats& MemStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemStats* MemStats::New(::google::protobuf::Arena* arena) const {
  MemStats* n = new MemStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.MemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memory_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_memory_used_percent_) -
      reinterpret_cast<char*>(&memory_total_)) + sizeof(swap_memory_used_percent_));
  _internal_metadata_.Clear();
}

bool MemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.MemStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 memory_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_used_rss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_used_rss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double memory_used_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memory_used_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 swap_memory_total = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swap_memory_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 swap_memory_used = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swap_memory_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 swap_memory_free = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &swap_memory_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double swap_memory_used_percent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &swap_memory_used_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.MemStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.MemStats)
  return false;
#undef DO_
}

void MemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.MemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memory_total = 1;
  if (this->memory_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->memory_total(), output);
  }

  // uint64 memory_used_rss = 2;
  if (this->memory_used_rss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memory_used_rss(), output);
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memory_used(), output);
  }

  // uint64 memory_free = 4;
  if (this->memory_free() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->memory_free(), output);
  }

  // double memory_used_percent = 5;
  if (this->memory_used_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->memory_used_percent(), output);
  }

  // uint64 swap_memory_total = 6;
  if (this->swap_memory_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->swap_memory_total(), output);
  }

  // uint64 swap_memory_used = 7;
  if (this->swap_memory_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->swap_memory_used(), output);
  }

  // uint64 swap_memory_free = 8;
  if (this->swap_memory_free() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->swap_memory_free(), output);
  }

  // double swap_memory_used_percent = 9;
  if (this->swap_memory_used_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->swap_memory_used_percent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.MemStats)
}

::google::protobuf::uint8* MemStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.MemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memory_total = 1;
  if (this->memory_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->memory_total(), target);
  }

  // uint64 memory_used_rss = 2;
  if (this->memory_used_rss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memory_used_rss(), target);
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memory_used(), target);
  }

  // uint64 memory_free = 4;
  if (this->memory_free() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->memory_free(), target);
  }

  // double memory_used_percent = 5;
  if (this->memory_used_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->memory_used_percent(), target);
  }

  // uint64 swap_memory_total = 6;
  if (this->swap_memory_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->swap_memory_total(), target);
  }

  // uint64 swap_memory_used = 7;
  if (this->swap_memory_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->swap_memory_used(), target);
  }

  // uint64 swap_memory_free = 8;
  if (this->swap_memory_free() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->swap_memory_free(), target);
  }

  // double swap_memory_used_percent = 9;
  if (this->swap_memory_used_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->swap_memory_used_percent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.MemStats)
  return target;
}

size_t MemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.MemStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 memory_total = 1;
  if (this->memory_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_total());
  }

  // uint64 memory_used_rss = 2;
  if (this->memory_used_rss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_used_rss());
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_used());
  }

  // uint64 memory_free = 4;
  if (this->memory_free() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_free());
  }

  // double memory_used_percent = 5;
  if (this->memory_used_percent() != 0) {
    total_size += 1 + 8;
  }

  // uint64 swap_memory_total = 6;
  if (this->swap_memory_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->swap_memory_total());
  }

  // uint64 swap_memory_used = 7;
  if (this->swap_memory_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->swap_memory_used());
  }

  // uint64 swap_memory_free = 8;
  if (this->swap_memory_free() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->swap_memory_free());
  }

  // double swap_memory_used_percent = 9;
  if (this->swap_memory_used_percent() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.MemStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.MemStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.MemStats)
    MergeFrom(*source);
  }
}

void MemStats::MergeFrom(const MemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.MemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memory_total() != 0) {
    set_memory_total(from.memory_total());
  }
  if (from.memory_used_rss() != 0) {
    set_memory_used_rss(from.memory_used_rss());
  }
  if (from.memory_used() != 0) {
    set_memory_used(from.memory_used());
  }
  if (from.memory_free() != 0) {
    set_memory_free(from.memory_free());
  }
  if (from.memory_used_percent() != 0) {
    set_memory_used_percent(from.memory_used_percent());
  }
  if (from.swap_memory_total() != 0) {
    set_swap_memory_total(from.swap_memory_total());
  }
  if (from.swap_memory_used() != 0) {
    set_swap_memory_used(from.swap_memory_used());
  }
  if (from.swap_memory_free() != 0) {
    set_swap_memory_free(from.swap_memory_free());
  }
  if (from.swap_memory_used_percent() != 0) {
    set_swap_memory_used_percent(from.swap_memory_used_percent());
  }
}

void MemStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.MemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemStats::CopyFrom(const MemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.MemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemStats::IsInitialized() const {
  return true;
}

void MemStats::Swap(MemStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemStats::InternalSwap(MemStats* other) {
  using std::swap;
  swap(memory_total_, other->memory_total_);
  swap(memory_used_rss_, other->memory_used_rss_);
  swap(memory_used_, other->memory_used_);
  swap(memory_free_, other->memory_free_);
  swap(memory_used_percent_, other->memory_used_percent_);
  swap(swap_memory_total_, other->swap_memory_total_);
  swap(swap_memory_used_, other->swap_memory_used_);
  swap(swap_memory_free_, other->swap_memory_free_);
  swap(swap_memory_used_percent_, other->swap_memory_used_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemStats

// uint64 memory_total = 1;
void MemStats::clear_memory_total() {
  memory_total_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_total)
  return memory_total_;
}
void MemStats::set_memory_total(::google::protobuf::uint64 value) {
  
  memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_total)
}

// uint64 memory_used_rss = 2;
void MemStats::clear_memory_used_rss() {
  memory_used_rss_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::memory_used_rss() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used_rss)
  return memory_used_rss_;
}
void MemStats::set_memory_used_rss(::google::protobuf::uint64 value) {
  
  memory_used_rss_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used_rss)
}

// uint64 memory_used = 3;
void MemStats::clear_memory_used() {
  memory_used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used)
  return memory_used_;
}
void MemStats::set_memory_used(::google::protobuf::uint64 value) {
  
  memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used)
}

// uint64 memory_free = 4;
void MemStats::clear_memory_free() {
  memory_free_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::memory_free() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_free)
  return memory_free_;
}
void MemStats::set_memory_free(::google::protobuf::uint64 value) {
  
  memory_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_free)
}

// double memory_used_percent = 5;
void MemStats::clear_memory_used_percent() {
  memory_used_percent_ = 0;
}
double MemStats::memory_used_percent() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used_percent)
  return memory_used_percent_;
}
void MemStats::set_memory_used_percent(double value) {
  
  memory_used_percent_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used_percent)
}

// uint64 swap_memory_total = 6;
void MemStats::clear_swap_memory_total() {
  swap_memory_total_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::swap_memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_total)
  return swap_memory_total_;
}
void MemStats::set_swap_memory_total(::google::protobuf::uint64 value) {
  
  swap_memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_total)
}

// uint64 swap_memory_used = 7;
void MemStats::clear_swap_memory_used() {
  swap_memory_used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::swap_memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_used)
  return swap_memory_used_;
}
void MemStats::set_swap_memory_used(::google::protobuf::uint64 value) {
  
  swap_memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_used)
}

// uint64 swap_memory_free = 8;
void MemStats::clear_swap_memory_free() {
  swap_memory_free_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MemStats::swap_memory_free() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_free)
  return swap_memory_free_;
}
void MemStats::set_swap_memory_free(::google::protobuf::uint64 value) {
  
  swap_memory_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_free)
}

// double swap_memory_used_percent = 9;
void MemStats::clear_swap_memory_used_percent() {
  swap_memory_used_percent_ = 0;
}
double MemStats::swap_memory_used_percent() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_used_percent)
  return swap_memory_used_percent_;
}
void MemStats::set_swap_memory_used_percent(double value) {
  
  swap_memory_used_percent_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_used_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TpStats::kTpsFieldNumber;
const int TpStats::kMinFieldNumber;
const int TpStats::kMaxFieldNumber;
const int TpStats::kAvgFieldNumber;
const int TpStats::kTp50FieldNumber;
const int TpStats::kTp90FieldNumber;
const int TpStats::kTp99FieldNumber;
const int TpStats::kTp999FieldNumber;
const int TpStats::kTotalNumberFieldNumber;
const int TpStats::kErrNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TpStats::TpStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.TpStats)
}
TpStats::TpStats(const TpStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tps_, &from.tps_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_number_) -
    reinterpret_cast<char*>(&tps_)) + sizeof(err_number_));
  // @@protoc_insertion_point(copy_constructor:statspb.TpStats)
}

void TpStats::SharedCtor() {
  ::memset(&tps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_number_) -
      reinterpret_cast<char*>(&tps_)) + sizeof(err_number_));
  _cached_size_ = 0;
}

TpStats::~TpStats() {
  // @@protoc_insertion_point(destructor:statspb.TpStats)
  SharedDtor();
}

void TpStats::SharedDtor() {
}

void TpStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TpStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TpStats& TpStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TpStats* TpStats::New(::google::protobuf::Arena* arena) const {
  TpStats* n = new TpStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TpStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.TpStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_number_) -
      reinterpret_cast<char*>(&tps_)) + sizeof(err_number_));
  _internal_metadata_.Clear();
}

bool TpStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.TpStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 tps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double avg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tp_50 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tp_90 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tp_99 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_99_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tp_999 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tp_999_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_number = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 err_number = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &err_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.TpStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.TpStats)
  return false;
#undef DO_
}

void TpStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.TpStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tps = 1;
  if (this->tps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tps(), output);
  }

  // double min = 2;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min(), output);
  }

  // double max = 3;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max(), output);
  }

  // double avg = 4;
  if (this->avg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->avg(), output);
  }

  // double tp_50 = 5;
  if (this->tp_50() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tp_50(), output);
  }

  // double tp_90 = 6;
  if (this->tp_90() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tp_90(), output);
  }

  // double tp_99 = 7;
  if (this->tp_99() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->tp_99(), output);
  }

  // double tp_999 = 8;
  if (this->tp_999() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tp_999(), output);
  }

  // uint64 total_number = 9;
  if (this->total_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->total_number(), output);
  }

  // uint64 err_number = 10;
  if (this->err_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->err_number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.TpStats)
}

::google::protobuf::uint8* TpStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.TpStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tps = 1;
  if (this->tps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tps(), target);
  }

  // double min = 2;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min(), target);
  }

  // double max = 3;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max(), target);
  }

  // double avg = 4;
  if (this->avg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->avg(), target);
  }

  // double tp_50 = 5;
  if (this->tp_50() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tp_50(), target);
  }

  // double tp_90 = 6;
  if (this->tp_90() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tp_90(), target);
  }

  // double tp_99 = 7;
  if (this->tp_99() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->tp_99(), target);
  }

  // double tp_999 = 8;
  if (this->tp_999() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tp_999(), target);
  }

  // uint64 total_number = 9;
  if (this->total_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->total_number(), target);
  }

  // uint64 err_number = 10;
  if (this->err_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->err_number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.TpStats)
  return target;
}

size_t TpStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.TpStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 tps = 1;
  if (this->tps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tps());
  }

  // double min = 2;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // double max = 3;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  // double avg = 4;
  if (this->avg() != 0) {
    total_size += 1 + 8;
  }

  // double tp_50 = 5;
  if (this->tp_50() != 0) {
    total_size += 1 + 8;
  }

  // double tp_90 = 6;
  if (this->tp_90() != 0) {
    total_size += 1 + 8;
  }

  // double tp_99 = 7;
  if (this->tp_99() != 0) {
    total_size += 1 + 8;
  }

  // double tp_999 = 8;
  if (this->tp_999() != 0) {
    total_size += 1 + 8;
  }

  // uint64 total_number = 9;
  if (this->total_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_number());
  }

  // uint64 err_number = 10;
  if (this->err_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->err_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TpStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.TpStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TpStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TpStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.TpStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.TpStats)
    MergeFrom(*source);
  }
}

void TpStats::MergeFrom(const TpStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.TpStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tps() != 0) {
    set_tps(from.tps());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.avg() != 0) {
    set_avg(from.avg());
  }
  if (from.tp_50() != 0) {
    set_tp_50(from.tp_50());
  }
  if (from.tp_90() != 0) {
    set_tp_90(from.tp_90());
  }
  if (from.tp_99() != 0) {
    set_tp_99(from.tp_99());
  }
  if (from.tp_999() != 0) {
    set_tp_999(from.tp_999());
  }
  if (from.total_number() != 0) {
    set_total_number(from.total_number());
  }
  if (from.err_number() != 0) {
    set_err_number(from.err_number());
  }
}

void TpStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.TpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TpStats::CopyFrom(const TpStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.TpStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpStats::IsInitialized() const {
  return true;
}

void TpStats::Swap(TpStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TpStats::InternalSwap(TpStats* other) {
  using std::swap;
  swap(tps_, other->tps_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(avg_, other->avg_);
  swap(tp_50_, other->tp_50_);
  swap(tp_90_, other->tp_90_);
  swap(tp_99_, other->tp_99_);
  swap(tp_999_, other->tp_999_);
  swap(total_number_, other->total_number_);
  swap(err_number_, other->err_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TpStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TpStats

// uint64 tps = 1;
void TpStats::clear_tps() {
  tps_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TpStats::tps() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tps)
  return tps_;
}
void TpStats::set_tps(::google::protobuf::uint64 value) {
  
  tps_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tps)
}

// double min = 2;
void TpStats::clear_min() {
  min_ = 0;
}
double TpStats::min() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.min)
  return min_;
}
void TpStats::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.min)
}

// double max = 3;
void TpStats::clear_max() {
  max_ = 0;
}
double TpStats::max() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.max)
  return max_;
}
void TpStats::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.max)
}

// double avg = 4;
void TpStats::clear_avg() {
  avg_ = 0;
}
double TpStats::avg() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.avg)
  return avg_;
}
void TpStats::set_avg(double value) {
  
  avg_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.avg)
}

// double tp_50 = 5;
void TpStats::clear_tp_50() {
  tp_50_ = 0;
}
double TpStats::tp_50() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_50)
  return tp_50_;
}
void TpStats::set_tp_50(double value) {
  
  tp_50_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_50)
}

// double tp_90 = 6;
void TpStats::clear_tp_90() {
  tp_90_ = 0;
}
double TpStats::tp_90() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_90)
  return tp_90_;
}
void TpStats::set_tp_90(double value) {
  
  tp_90_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_90)
}

// double tp_99 = 7;
void TpStats::clear_tp_99() {
  tp_99_ = 0;
}
double TpStats::tp_99() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_99)
  return tp_99_;
}
void TpStats::set_tp_99(double value) {
  
  tp_99_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_99)
}

// double tp_999 = 8;
void TpStats::clear_tp_999() {
  tp_999_ = 0;
}
double TpStats::tp_999() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_999)
  return tp_999_;
}
void TpStats::set_tp_999(double value) {
  
  tp_999_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_999)
}

// uint64 total_number = 9;
void TpStats::clear_total_number() {
  total_number_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TpStats::total_number() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.total_number)
  return total_number_;
}
void TpStats::set_total_number(::google::protobuf::uint64 value) {
  
  total_number_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.total_number)
}

// uint64 err_number = 10;
void TpStats::clear_err_number() {
  err_number_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TpStats::err_number() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.err_number)
  return err_number_;
}
void TpStats::set_err_number(::google::protobuf::uint64 value) {
  
  err_number_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.err_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlowLog::kSlowLogFieldNumber;
const int SlowLog::kLatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlowLog::SlowLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SlowLog)
}
SlowLog::SlowLog(const SlowLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slow_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slow_log().size() > 0) {
    slow_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slow_log_);
  }
  lats_ = from.lats_;
  // @@protoc_insertion_point(copy_constructor:statspb.SlowLog)
}

void SlowLog::SharedCtor() {
  slow_log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lats_ = 0;
  _cached_size_ = 0;
}

SlowLog::~SlowLog() {
  // @@protoc_insertion_point(destructor:statspb.SlowLog)
  SharedDtor();
}

void SlowLog::SharedDtor() {
  slow_log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SlowLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowLog::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SlowLog& SlowLog::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlowLog* SlowLog::New(::google::protobuf::Arena* arena) const {
  SlowLog* n = new SlowLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlowLog::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SlowLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slow_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lats_ = 0;
  _internal_metadata_.Clear();
}

bool SlowLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SlowLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string slow_log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slow_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slow_log().data(), static_cast<int>(this->slow_log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.SlowLog.slow_log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SlowLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SlowLog)
  return false;
#undef DO_
}

void SlowLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SlowLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slow_log = 1;
  if (this->slow_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slow_log().data(), static_cast<int>(this->slow_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.SlowLog.slow_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slow_log(), output);
  }

  // double lats = 2;
  if (this->lats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lats(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SlowLog)
}

::google::protobuf::uint8* SlowLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SlowLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slow_log = 1;
  if (this->slow_log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slow_log().data(), static_cast<int>(this->slow_log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.SlowLog.slow_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slow_log(), target);
  }

  // double lats = 2;
  if (this->lats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lats(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SlowLog)
  return target;
}

size_t SlowLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SlowLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string slow_log = 1;
  if (this->slow_log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slow_log());
  }

  // double lats = 2;
  if (this->lats() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SlowLog)
  GOOGLE_DCHECK_NE(&from, this);
  const SlowLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlowLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SlowLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SlowLog)
    MergeFrom(*source);
  }
}

void SlowLog::MergeFrom(const SlowLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SlowLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slow_log().size() > 0) {

    slow_log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slow_log_);
  }
  if (from.lats() != 0) {
    set_lats(from.lats());
  }
}

void SlowLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SlowLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowLog::CopyFrom(const SlowLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SlowLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowLog::IsInitialized() const {
  return true;
}

void SlowLog::Swap(SlowLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlowLog::InternalSwap(SlowLog* other) {
  using std::swap;
  slow_log_.Swap(&other->slow_log_);
  swap(lats_, other->lats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlowLog::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlowLog

// string slow_log = 1;
void SlowLog::clear_slow_log() {
  slow_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SlowLog::slow_log() const {
  // @@protoc_insertion_point(field_get:statspb.SlowLog.slow_log)
  return slow_log_.GetNoArena();
}
void SlowLog::set_slow_log(const ::std::string& value) {
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SlowLog.slow_log)
}
#if LANG_CXX11
void SlowLog::set_slow_log(::std::string&& value) {
  
  slow_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SlowLog.slow_log)
}
#endif
void SlowLog::set_slow_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SlowLog.slow_log)
}
void SlowLog::set_slow_log(const char* value, size_t size) {
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SlowLog.slow_log)
}
::std::string* SlowLog::mutable_slow_log() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SlowLog.slow_log)
  return slow_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SlowLog::release_slow_log() {
  // @@protoc_insertion_point(field_release:statspb.SlowLog.slow_log)
  
  return slow_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SlowLog::set_allocated_slow_log(::std::string* slow_log) {
  if (slow_log != NULL) {
    
  } else {
    
  }
  slow_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slow_log);
  // @@protoc_insertion_point(field_set_allocated:statspb.SlowLog.slow_log)
}

// double lats = 2;
void SlowLog::clear_lats() {
  lats_ = 0;
}
double SlowLog::lats() const {
  // @@protoc_insertion_point(field_get:statspb.SlowLog.lats)
  return lats_;
}
void SlowLog::set_lats(double value) {
  
  lats_ = value;
  // @@protoc_insertion_point(field_set:statspb.SlowLog.lats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlowLogStats::kSlowLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlowLogStats::SlowLogStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SlowLogStats)
}
SlowLogStats::SlowLogStats(const SlowLogStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slow_logs_(from.slow_logs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:statspb.SlowLogStats)
}

void SlowLogStats::SharedCtor() {
  _cached_size_ = 0;
}

SlowLogStats::~SlowLogStats() {
  // @@protoc_insertion_point(destructor:statspb.SlowLogStats)
  SharedDtor();
}

void SlowLogStats::SharedDtor() {
}

void SlowLogStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowLogStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SlowLogStats& SlowLogStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SlowLogStats* SlowLogStats::New(::google::protobuf::Arena* arena) const {
  SlowLogStats* n = new SlowLogStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlowLogStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SlowLogStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slow_logs_.Clear();
  _internal_metadata_.Clear();
}

bool SlowLogStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SlowLogStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .statspb.SlowLog slow_logs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slow_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SlowLogStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SlowLogStats)
  return false;
#undef DO_
}

void SlowLogStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SlowLogStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .statspb.SlowLog slow_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slow_logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slow_logs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SlowLogStats)
}

::google::protobuf::uint8* SlowLogStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SlowLogStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .statspb.SlowLog slow_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slow_logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->slow_logs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SlowLogStats)
  return target;
}

size_t SlowLogStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SlowLogStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .statspb.SlowLog slow_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->slow_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slow_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowLogStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SlowLogStats)
  GOOGLE_DCHECK_NE(&from, this);
  const SlowLogStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SlowLogStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SlowLogStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SlowLogStats)
    MergeFrom(*source);
  }
}

void SlowLogStats::MergeFrom(const SlowLogStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SlowLogStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slow_logs_.MergeFrom(from.slow_logs_);
}

void SlowLogStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SlowLogStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowLogStats::CopyFrom(const SlowLogStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SlowLogStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowLogStats::IsInitialized() const {
  return true;
}

void SlowLogStats::Swap(SlowLogStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlowLogStats::InternalSwap(SlowLogStats* other) {
  using std::swap;
  slow_logs_.InternalSwap(&other->slow_logs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlowLogStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlowLogStats

// repeated .statspb.SlowLog slow_logs = 1;
int SlowLogStats::slow_logs_size() const {
  return slow_logs_.size();
}
void SlowLogStats::clear_slow_logs() {
  slow_logs_.Clear();
}
const ::statspb::SlowLog& SlowLogStats::slow_logs(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Get(index);
}
::statspb::SlowLog* SlowLogStats::mutable_slow_logs(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Mutable(index);
}
::statspb::SlowLog* SlowLogStats::add_slow_logs() {
  // @@protoc_insertion_point(field_add:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Add();
}
::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >*
SlowLogStats::mutable_slow_logs() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SlowLogStats.slow_logs)
  return &slow_logs_;
}
const ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >&
SlowLogStats::slow_logs() const {
  // @@protoc_insertion_point(field_list:statspb.SlowLogStats.slow_logs)
  return slow_logs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsInfo::kRangeCountFieldNumber;
const int DsInfo::kRangeSplitCountFieldNumber;
const int DsInfo::kSendingSnapCountFieldNumber;
const int DsInfo::kReceivingSnapCountFieldNumber;
const int DsInfo::kApplyingSnapCountFieldNumber;
const int DsInfo::kRangeLeaderCountFieldNumber;
const int DsInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsInfo::DsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.DsInfo)
}
DsInfo::DsInfo(const DsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&range_count_, &from.range_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_leader_count_) -
    reinterpret_cast<char*>(&range_count_)) + sizeof(range_leader_count_));
  // @@protoc_insertion_point(copy_constructor:statspb.DsInfo)
}

void DsInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_leader_count_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(range_leader_count_));
  _cached_size_ = 0;
}

DsInfo::~DsInfo() {
  // @@protoc_insertion_point(destructor:statspb.DsInfo)
  SharedDtor();
}

void DsInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsInfo::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsInfo& DsInfo::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsInfo* DsInfo::New(::google::protobuf::Arena* arena) const {
  DsInfo* n = new DsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.DsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_leader_count_) -
      reinterpret_cast<char*>(&range_count_)) + sizeof(range_leader_count_));
  _internal_metadata_.Clear();
}

bool DsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.DsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_split_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_split_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sending_snap_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiving_snap_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 applying_snap_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 range_leader_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_leader_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.DsInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.DsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.DsInfo)
  return false;
#undef DO_
}

void DsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.DsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_count = 1;
  if (this->range_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_count(), output);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range_split_count(), output);
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sending_snap_count(), output);
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receiving_snap_count(), output);
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->applying_snap_count(), output);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->range_leader_count(), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DsInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.DsInfo)
}

::google::protobuf::uint8* DsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.DsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_count = 1;
  if (this->range_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_count(), target);
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range_split_count(), target);
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sending_snap_count(), target);
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receiving_snap_count(), target);
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->applying_snap_count(), target);
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->range_leader_count(), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.DsInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.DsInfo)
  return target;
}

size_t DsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.DsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint64 range_count = 1;
  if (this->range_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_count());
  }

  // uint32 range_split_count = 2;
  if (this->range_split_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_split_count());
  }

  // uint32 sending_snap_count = 3;
  if (this->sending_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sending_snap_count());
  }

  // uint32 receiving_snap_count = 4;
  if (this->receiving_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiving_snap_count());
  }

  // uint32 applying_snap_count = 5;
  if (this->applying_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->applying_snap_count());
  }

  // uint32 range_leader_count = 6;
  if (this->range_leader_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range_leader_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.DsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.DsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.DsInfo)
    MergeFrom(*source);
  }
}

void DsInfo::MergeFrom(const DsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.DsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.range_count() != 0) {
    set_range_count(from.range_count());
  }
  if (from.range_split_count() != 0) {
    set_range_split_count(from.range_split_count());
  }
  if (from.sending_snap_count() != 0) {
    set_sending_snap_count(from.sending_snap_count());
  }
  if (from.receiving_snap_count() != 0) {
    set_receiving_snap_count(from.receiving_snap_count());
  }
  if (from.applying_snap_count() != 0) {
    set_applying_snap_count(from.applying_snap_count());
  }
  if (from.range_leader_count() != 0) {
    set_range_leader_count(from.range_leader_count());
  }
}

void DsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.DsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsInfo::CopyFrom(const DsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.DsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsInfo::IsInitialized() const {
  return true;
}

void DsInfo::Swap(DsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsInfo::InternalSwap(DsInfo* other) {
  using std::swap;
  version_.Swap(&other->version_);
  swap(range_count_, other->range_count_);
  swap(range_split_count_, other->range_split_count_);
  swap(sending_snap_count_, other->sending_snap_count_);
  swap(receiving_snap_count_, other->receiving_snap_count_);
  swap(applying_snap_count_, other->applying_snap_count_);
  swap(range_leader_count_, other->range_leader_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsInfo::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsInfo

// uint64 range_count = 1;
void DsInfo::clear_range_count() {
  range_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DsInfo::range_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_count)
  return range_count_;
}
void DsInfo::set_range_count(::google::protobuf::uint64 value) {
  
  range_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_count)
}

// uint32 range_split_count = 2;
void DsInfo::clear_range_split_count() {
  range_split_count_ = 0u;
}
::google::protobuf::uint32 DsInfo::range_split_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_split_count)
  return range_split_count_;
}
void DsInfo::set_range_split_count(::google::protobuf::uint32 value) {
  
  range_split_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_split_count)
}

// uint32 sending_snap_count = 3;
void DsInfo::clear_sending_snap_count() {
  sending_snap_count_ = 0u;
}
::google::protobuf::uint32 DsInfo::sending_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.sending_snap_count)
  return sending_snap_count_;
}
void DsInfo::set_sending_snap_count(::google::protobuf::uint32 value) {
  
  sending_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.sending_snap_count)
}

// uint32 receiving_snap_count = 4;
void DsInfo::clear_receiving_snap_count() {
  receiving_snap_count_ = 0u;
}
::google::protobuf::uint32 DsInfo::receiving_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.receiving_snap_count)
  return receiving_snap_count_;
}
void DsInfo::set_receiving_snap_count(::google::protobuf::uint32 value) {
  
  receiving_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.receiving_snap_count)
}

// uint32 applying_snap_count = 5;
void DsInfo::clear_applying_snap_count() {
  applying_snap_count_ = 0u;
}
::google::protobuf::uint32 DsInfo::applying_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.applying_snap_count)
  return applying_snap_count_;
}
void DsInfo::set_applying_snap_count(::google::protobuf::uint32 value) {
  
  applying_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.applying_snap_count)
}

// uint32 range_leader_count = 6;
void DsInfo::clear_range_leader_count() {
  range_leader_count_ = 0u;
}
::google::protobuf::uint32 DsInfo::range_leader_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_leader_count)
  return range_leader_count_;
}
void DsInfo::set_range_leader_count(::google::protobuf::uint32 value) {
  
  range_leader_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_leader_count)
}

// string version = 7;
void DsInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DsInfo::version() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.version)
  return version_.GetNoArena();
}
void DsInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DsInfo.version)
}
#if LANG_CXX11
void DsInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DsInfo.version)
}
#endif
void DsInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DsInfo.version)
}
void DsInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DsInfo.version)
}
::std::string* DsInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DsInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DsInfo::release_version() {
  // @@protoc_insertion_point(field_release:statspb.DsInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DsInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:statspb.DsInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessStats::kCpuProcRateFieldNumber;
const int ProcessStats::kMemoryTotalFieldNumber;
const int ProcessStats::kMemoryUsedFieldNumber;
const int ProcessStats::kConnectCountFieldNumber;
const int ProcessStats::kDiskStatsFieldNumber;
const int ProcessStats::kTpStatsFieldNumber;
const int ProcessStats::kDsInfoFieldNumber;
const int ProcessStats::kThreadNumFieldNumber;
const int ProcessStats::kHandleNumFieldNumber;
const int ProcessStats::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessStats::ProcessStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.ProcessStats)
}
ProcessStats::ProcessStats(const ProcessStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_disk_stats()) {
    disk_stats_ = new ::statspb::DiskStats(*from.disk_stats_);
  } else {
    disk_stats_ = NULL;
  }
  if (from.has_tp_stats()) {
    tp_stats_ = new ::statspb::TpStats(*from.tp_stats_);
  } else {
    tp_stats_ = NULL;
  }
  if (from.has_ds_info()) {
    ds_info_ = new ::statspb::DsInfo(*from.ds_info_);
  } else {
    ds_info_ = NULL;
  }
  ::memcpy(&cpu_proc_rate_, &from.cpu_proc_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&cpu_proc_rate_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:statspb.ProcessStats)
}

void ProcessStats::SharedCtor() {
  ::memset(&disk_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&disk_stats_)) + sizeof(start_time_));
  _cached_size_ = 0;
}

ProcessStats::~ProcessStats() {
  // @@protoc_insertion_point(destructor:statspb.ProcessStats)
  SharedDtor();
}

void ProcessStats::SharedDtor() {
  if (this != internal_default_instance()) delete disk_stats_;
  if (this != internal_default_instance()) delete tp_stats_;
  if (this != internal_default_instance()) delete ds_info_;
}

void ProcessStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessStats& ProcessStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessStats* ProcessStats::New(::google::protobuf::Arena* arena) const {
  ProcessStats* n = new ProcessStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.ProcessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && disk_stats_ != NULL) {
    delete disk_stats_;
  }
  disk_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && tp_stats_ != NULL) {
    delete tp_stats_;
  }
  tp_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && ds_info_ != NULL) {
    delete ds_info_;
  }
  ds_info_ = NULL;
  ::memset(&cpu_proc_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&cpu_proc_rate_)) + sizeof(start_time_));
  _internal_metadata_.Clear();
}

bool ProcessStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.ProcessStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double cpu_proc_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_proc_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 memory_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 connect_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .statspb.DiskStats disk_stats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .statspb.TpStats tp_stats = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tp_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .statspb.DsInfo ds_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ds_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 handle_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.ProcessStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.ProcessStats)
  return false;
#undef DO_
}

void ProcessStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.ProcessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_proc_rate(), output);
  }

  // uint64 memory_total = 2;
  if (this->memory_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memory_total(), output);
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memory_used(), output);
  }

  // uint64 connect_count = 4;
  if (this->connect_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->connect_count(), output);
  }

  // .statspb.DiskStats disk_stats = 8;
  if (this->has_disk_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->disk_stats_, output);
  }

  // .statspb.TpStats tp_stats = 9;
  if (this->has_tp_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->tp_stats_, output);
  }

  // .statspb.DsInfo ds_info = 10;
  if (this->has_ds_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ds_info_, output);
  }

  // uint32 thread_num = 11;
  if (this->thread_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->thread_num(), output);
  }

  // uint32 handle_num = 12;
  if (this->handle_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->handle_num(), output);
  }

  // int64 start_time = 13;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->start_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.ProcessStats)
}

::google::protobuf::uint8* ProcessStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.ProcessStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_proc_rate(), target);
  }

  // uint64 memory_total = 2;
  if (this->memory_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memory_total(), target);
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memory_used(), target);
  }

  // uint64 connect_count = 4;
  if (this->connect_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->connect_count(), target);
  }

  // .statspb.DiskStats disk_stats = 8;
  if (this->has_disk_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->disk_stats_, deterministic, target);
  }

  // .statspb.TpStats tp_stats = 9;
  if (this->has_tp_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->tp_stats_, deterministic, target);
  }

  // .statspb.DsInfo ds_info = 10;
  if (this->has_ds_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->ds_info_, deterministic, target);
  }

  // uint32 thread_num = 11;
  if (this->thread_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->thread_num(), target);
  }

  // uint32 handle_num = 12;
  if (this->handle_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->handle_num(), target);
  }

  // int64 start_time = 13;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->start_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.ProcessStats)
  return target;
}

size_t ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.ProcessStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .statspb.DiskStats disk_stats = 8;
  if (this->has_disk_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->disk_stats_);
  }

  // .statspb.TpStats tp_stats = 9;
  if (this->has_tp_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tp_stats_);
  }

  // .statspb.DsInfo ds_info = 10;
  if (this->has_ds_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ds_info_);
  }

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    total_size += 1 + 8;
  }

  // uint64 memory_total = 2;
  if (this->memory_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_total());
  }

  // uint64 memory_used = 3;
  if (this->memory_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->memory_used());
  }

  // uint64 connect_count = 4;
  if (this->connect_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connect_count());
  }

  // uint32 thread_num = 11;
  if (this->thread_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_num());
  }

  // uint32 handle_num = 12;
  if (this->handle_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handle_num());
  }

  // int64 start_time = 13;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.ProcessStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.ProcessStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.ProcessStats)
    MergeFrom(*source);
  }
}

void ProcessStats::MergeFrom(const ProcessStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.ProcessStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disk_stats()) {
    mutable_disk_stats()->::statspb::DiskStats::MergeFrom(from.disk_stats());
  }
  if (from.has_tp_stats()) {
    mutable_tp_stats()->::statspb::TpStats::MergeFrom(from.tp_stats());
  }
  if (from.has_ds_info()) {
    mutable_ds_info()->::statspb::DsInfo::MergeFrom(from.ds_info());
  }
  if (from.cpu_proc_rate() != 0) {
    set_cpu_proc_rate(from.cpu_proc_rate());
  }
  if (from.memory_total() != 0) {
    set_memory_total(from.memory_total());
  }
  if (from.memory_used() != 0) {
    set_memory_used(from.memory_used());
  }
  if (from.connect_count() != 0) {
    set_connect_count(from.connect_count());
  }
  if (from.thread_num() != 0) {
    set_thread_num(from.thread_num());
  }
  if (from.handle_num() != 0) {
    set_handle_num(from.handle_num());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
}

void ProcessStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessStats::CopyFrom(const ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats::IsInitialized() const {
  return true;
}

void ProcessStats::Swap(ProcessStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessStats::InternalSwap(ProcessStats* other) {
  using std::swap;
  swap(disk_stats_, other->disk_stats_);
  swap(tp_stats_, other->tp_stats_);
  swap(ds_info_, other->ds_info_);
  swap(cpu_proc_rate_, other->cpu_proc_rate_);
  swap(memory_total_, other->memory_total_);
  swap(memory_used_, other->memory_used_);
  swap(connect_count_, other->connect_count_);
  swap(thread_num_, other->thread_num_);
  swap(handle_num_, other->handle_num_);
  swap(start_time_, other->start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessStats

// double cpu_proc_rate = 1;
void ProcessStats::clear_cpu_proc_rate() {
  cpu_proc_rate_ = 0;
}
double ProcessStats::cpu_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.cpu_proc_rate)
  return cpu_proc_rate_;
}
void ProcessStats::set_cpu_proc_rate(double value) {
  
  cpu_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.cpu_proc_rate)
}

// uint64 memory_total = 2;
void ProcessStats::clear_memory_total() {
  memory_total_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProcessStats::memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.memory_total)
  return memory_total_;
}
void ProcessStats::set_memory_total(::google::protobuf::uint64 value) {
  
  memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.memory_total)
}

// uint64 memory_used = 3;
void ProcessStats::clear_memory_used() {
  memory_used_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProcessStats::memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.memory_used)
  return memory_used_;
}
void ProcessStats::set_memory_used(::google::protobuf::uint64 value) {
  
  memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.memory_used)
}

// uint64 connect_count = 4;
void ProcessStats::clear_connect_count() {
  connect_count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ProcessStats::connect_count() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.connect_count)
  return connect_count_;
}
void ProcessStats::set_connect_count(::google::protobuf::uint64 value) {
  
  connect_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.connect_count)
}

// .statspb.DiskStats disk_stats = 8;
bool ProcessStats::has_disk_stats() const {
  return this != internal_default_instance() && disk_stats_ != NULL;
}
void ProcessStats::clear_disk_stats() {
  if (GetArenaNoVirtual() == NULL && disk_stats_ != NULL) delete disk_stats_;
  disk_stats_ = NULL;
}
const ::statspb::DiskStats& ProcessStats::disk_stats() const {
  const ::statspb::DiskStats* p = disk_stats_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.disk_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::DiskStats*>(
      &::statspb::_DiskStats_default_instance_);
}
::statspb::DiskStats* ProcessStats::mutable_disk_stats() {
  
  if (disk_stats_ == NULL) {
    disk_stats_ = new ::statspb::DiskStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.disk_stats)
  return disk_stats_;
}
::statspb::DiskStats* ProcessStats::release_disk_stats() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.disk_stats)
  
  ::statspb::DiskStats* temp = disk_stats_;
  disk_stats_ = NULL;
  return temp;
}
void ProcessStats::set_allocated_disk_stats(::statspb::DiskStats* disk_stats) {
  delete disk_stats_;
  disk_stats_ = disk_stats;
  if (disk_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.disk_stats)
}

// .statspb.TpStats tp_stats = 9;
bool ProcessStats::has_tp_stats() const {
  return this != internal_default_instance() && tp_stats_ != NULL;
}
void ProcessStats::clear_tp_stats() {
  if (GetArenaNoVirtual() == NULL && tp_stats_ != NULL) delete tp_stats_;
  tp_stats_ = NULL;
}
const ::statspb::TpStats& ProcessStats::tp_stats() const {
  const ::statspb::TpStats* p = tp_stats_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.tp_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::TpStats*>(
      &::statspb::_TpStats_default_instance_);
}
::statspb::TpStats* ProcessStats::mutable_tp_stats() {
  
  if (tp_stats_ == NULL) {
    tp_stats_ = new ::statspb::TpStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.tp_stats)
  return tp_stats_;
}
::statspb::TpStats* ProcessStats::release_tp_stats() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.tp_stats)
  
  ::statspb::TpStats* temp = tp_stats_;
  tp_stats_ = NULL;
  return temp;
}
void ProcessStats::set_allocated_tp_stats(::statspb::TpStats* tp_stats) {
  delete tp_stats_;
  tp_stats_ = tp_stats;
  if (tp_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.tp_stats)
}

// .statspb.DsInfo ds_info = 10;
bool ProcessStats::has_ds_info() const {
  return this != internal_default_instance() && ds_info_ != NULL;
}
void ProcessStats::clear_ds_info() {
  if (GetArenaNoVirtual() == NULL && ds_info_ != NULL) delete ds_info_;
  ds_info_ = NULL;
}
const ::statspb::DsInfo& ProcessStats::ds_info() const {
  const ::statspb::DsInfo* p = ds_info_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.ds_info)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::DsInfo*>(
      &::statspb::_DsInfo_default_instance_);
}
::statspb::DsInfo* ProcessStats::mutable_ds_info() {
  
  if (ds_info_ == NULL) {
    ds_info_ = new ::statspb::DsInfo;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.ds_info)
  return ds_info_;
}
::statspb::DsInfo* ProcessStats::release_ds_info() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.ds_info)
  
  ::statspb::DsInfo* temp = ds_info_;
  ds_info_ = NULL;
  return temp;
}
void ProcessStats::set_allocated_ds_info(::statspb::DsInfo* ds_info) {
  delete ds_info_;
  ds_info_ = ds_info;
  if (ds_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.ds_info)
}

// uint32 thread_num = 11;
void ProcessStats::clear_thread_num() {
  thread_num_ = 0u;
}
::google::protobuf::uint32 ProcessStats::thread_num() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.thread_num)
  return thread_num_;
}
void ProcessStats::set_thread_num(::google::protobuf::uint32 value) {
  
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.thread_num)
}

// uint32 handle_num = 12;
void ProcessStats::clear_handle_num() {
  handle_num_ = 0u;
}
::google::protobuf::uint32 ProcessStats::handle_num() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.handle_num)
  return handle_num_;
}
void ProcessStats::set_handle_num(::google::protobuf::uint32 value) {
  
  handle_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.handle_num)
}

// int64 start_time = 13;
void ProcessStats::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProcessStats::start_time() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.start_time)
  return start_time_;
}
void ProcessStats::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MacStats::kCpuProcRateFieldNumber;
const int MacStats::kCpuCountFieldNumber;
const int MacStats::kLoad1FieldNumber;
const int MacStats::kLoad5FieldNumber;
const int MacStats::kLoad15FieldNumber;
const int MacStats::kMemStatsFieldNumber;
const int MacStats::kNetStatsFieldNumber;
const int MacStats::kDiskStatsFieldNumber;
const int MacStats::kProcessNumFieldNumber;
const int MacStats::kThreadNumFieldNumber;
const int MacStats::kHandleNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MacStats::MacStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.MacStats)
}
MacStats::MacStats(const MacStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      disk_stats_(from.disk_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mem_stats()) {
    mem_stats_ = new ::statspb::MemStats(*from.mem_stats_);
  } else {
    mem_stats_ = NULL;
  }
  if (from.has_net_stats()) {
    net_stats_ = new ::statspb::NetStats(*from.net_stats_);
  } else {
    net_stats_ = NULL;
  }
  ::memcpy(&cpu_proc_rate_, &from.cpu_proc_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_num_) -
    reinterpret_cast<char*>(&cpu_proc_rate_)) + sizeof(handle_num_));
  // @@protoc_insertion_point(copy_constructor:statspb.MacStats)
}

void MacStats::SharedCtor() {
  ::memset(&mem_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_num_) -
      reinterpret_cast<char*>(&mem_stats_)) + sizeof(handle_num_));
  _cached_size_ = 0;
}

MacStats::~MacStats() {
  // @@protoc_insertion_point(destructor:statspb.MacStats)
  SharedDtor();
}

void MacStats::SharedDtor() {
  if (this != internal_default_instance()) delete mem_stats_;
  if (this != internal_default_instance()) delete net_stats_;
}

void MacStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MacStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MacStats& MacStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

MacStats* MacStats::New(::google::protobuf::Arena* arena) const {
  MacStats* n = new MacStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MacStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.MacStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disk_stats_.Clear();
  if (GetArenaNoVirtual() == NULL && mem_stats_ != NULL) {
    delete mem_stats_;
  }
  mem_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && net_stats_ != NULL) {
    delete net_stats_;
  }
  net_stats_ = NULL;
  ::memset(&cpu_proc_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_num_) -
      reinterpret_cast<char*>(&cpu_proc_rate_)) + sizeof(handle_num_));
  _internal_metadata_.Clear();
}

bool MacStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.MacStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double cpu_proc_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_proc_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cpu_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double load1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &load1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double load5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &load5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double load15 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &load15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .statspb.MemStats mem_stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .statspb.NetStats net_stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .statspb.DiskStats disk_stats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 process_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 handle_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.MacStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.MacStats)
  return false;
#undef DO_
}

void MacStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.MacStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_proc_rate(), output);
  }

  // uint32 cpu_count = 2;
  if (this->cpu_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_count(), output);
  }

  // double load1 = 3;
  if (this->load1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->load1(), output);
  }

  // double load5 = 4;
  if (this->load5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->load5(), output);
  }

  // double load15 = 5;
  if (this->load15() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->load15(), output);
  }

  // .statspb.MemStats mem_stats = 6;
  if (this->has_mem_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->mem_stats_, output);
  }

  // .statspb.NetStats net_stats = 7;
  if (this->has_net_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->net_stats_, output);
  }

  // repeated .statspb.DiskStats disk_stats = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disk_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->disk_stats(static_cast<int>(i)), output);
  }

  // uint32 process_num = 9;
  if (this->process_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->process_num(), output);
  }

  // uint32 thread_num = 10;
  if (this->thread_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->thread_num(), output);
  }

  // uint32 handle_num = 11;
  if (this->handle_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->handle_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.MacStats)
}

::google::protobuf::uint8* MacStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.MacStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_proc_rate(), target);
  }

  // uint32 cpu_count = 2;
  if (this->cpu_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_count(), target);
  }

  // double load1 = 3;
  if (this->load1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->load1(), target);
  }

  // double load5 = 4;
  if (this->load5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->load5(), target);
  }

  // double load15 = 5;
  if (this->load15() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->load15(), target);
  }

  // .statspb.MemStats mem_stats = 6;
  if (this->has_mem_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->mem_stats_, deterministic, target);
  }

  // .statspb.NetStats net_stats = 7;
  if (this->has_net_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->net_stats_, deterministic, target);
  }

  // repeated .statspb.DiskStats disk_stats = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disk_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->disk_stats(static_cast<int>(i)), deterministic, target);
  }

  // uint32 process_num = 9;
  if (this->process_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->process_num(), target);
  }

  // uint32 thread_num = 10;
  if (this->thread_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->thread_num(), target);
  }

  // uint32 handle_num = 11;
  if (this->handle_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->handle_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.MacStats)
  return target;
}

size_t MacStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.MacStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .statspb.DiskStats disk_stats = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->disk_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk_stats(static_cast<int>(i)));
    }
  }

  // .statspb.MemStats mem_stats = 6;
  if (this->has_mem_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mem_stats_);
  }

  // .statspb.NetStats net_stats = 7;
  if (this->has_net_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->net_stats_);
  }

  // double cpu_proc_rate = 1;
  if (this->cpu_proc_rate() != 0) {
    total_size += 1 + 8;
  }

  // double load1 = 3;
  if (this->load1() != 0) {
    total_size += 1 + 8;
  }

  // double load5 = 4;
  if (this->load5() != 0) {
    total_size += 1 + 8;
  }

  // double load15 = 5;
  if (this->load15() != 0) {
    total_size += 1 + 8;
  }

  // uint32 cpu_count = 2;
  if (this->cpu_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cpu_count());
  }

  // uint32 process_num = 9;
  if (this->process_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->process_num());
  }

  // uint32 thread_num = 10;
  if (this->thread_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_num());
  }

  // uint32 handle_num = 11;
  if (this->handle_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handle_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MacStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.MacStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MacStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MacStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.MacStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.MacStats)
    MergeFrom(*source);
  }
}

void MacStats::MergeFrom(const MacStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.MacStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disk_stats_.MergeFrom(from.disk_stats_);
  if (from.has_mem_stats()) {
    mutable_mem_stats()->::statspb::MemStats::MergeFrom(from.mem_stats());
  }
  if (from.has_net_stats()) {
    mutable_net_stats()->::statspb::NetStats::MergeFrom(from.net_stats());
  }
  if (from.cpu_proc_rate() != 0) {
    set_cpu_proc_rate(from.cpu_proc_rate());
  }
  if (from.load1() != 0) {
    set_load1(from.load1());
  }
  if (from.load5() != 0) {
    set_load5(from.load5());
  }
  if (from.load15() != 0) {
    set_load15(from.load15());
  }
  if (from.cpu_count() != 0) {
    set_cpu_count(from.cpu_count());
  }
  if (from.process_num() != 0) {
    set_process_num(from.process_num());
  }
  if (from.thread_num() != 0) {
    set_thread_num(from.thread_num());
  }
  if (from.handle_num() != 0) {
    set_handle_num(from.handle_num());
  }
}

void MacStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.MacStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacStats::CopyFrom(const MacStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.MacStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacStats::IsInitialized() const {
  return true;
}

void MacStats::Swap(MacStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MacStats::InternalSwap(MacStats* other) {
  using std::swap;
  disk_stats_.InternalSwap(&other->disk_stats_);
  swap(mem_stats_, other->mem_stats_);
  swap(net_stats_, other->net_stats_);
  swap(cpu_proc_rate_, other->cpu_proc_rate_);
  swap(load1_, other->load1_);
  swap(load5_, other->load5_);
  swap(load15_, other->load15_);
  swap(cpu_count_, other->cpu_count_);
  swap(process_num_, other->process_num_);
  swap(thread_num_, other->thread_num_);
  swap(handle_num_, other->handle_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MacStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MacStats

// double cpu_proc_rate = 1;
void MacStats::clear_cpu_proc_rate() {
  cpu_proc_rate_ = 0;
}
double MacStats::cpu_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.cpu_proc_rate)
  return cpu_proc_rate_;
}
void MacStats::set_cpu_proc_rate(double value) {
  
  cpu_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.cpu_proc_rate)
}

// uint32 cpu_count = 2;
void MacStats::clear_cpu_count() {
  cpu_count_ = 0u;
}
::google::protobuf::uint32 MacStats::cpu_count() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.cpu_count)
  return cpu_count_;
}
void MacStats::set_cpu_count(::google::protobuf::uint32 value) {
  
  cpu_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.cpu_count)
}

// double load1 = 3;
void MacStats::clear_load1() {
  load1_ = 0;
}
double MacStats::load1() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load1)
  return load1_;
}
void MacStats::set_load1(double value) {
  
  load1_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load1)
}

// double load5 = 4;
void MacStats::clear_load5() {
  load5_ = 0;
}
double MacStats::load5() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load5)
  return load5_;
}
void MacStats::set_load5(double value) {
  
  load5_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load5)
}

// double load15 = 5;
void MacStats::clear_load15() {
  load15_ = 0;
}
double MacStats::load15() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load15)
  return load15_;
}
void MacStats::set_load15(double value) {
  
  load15_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load15)
}

// .statspb.MemStats mem_stats = 6;
bool MacStats::has_mem_stats() const {
  return this != internal_default_instance() && mem_stats_ != NULL;
}
void MacStats::clear_mem_stats() {
  if (GetArenaNoVirtual() == NULL && mem_stats_ != NULL) delete mem_stats_;
  mem_stats_ = NULL;
}
const ::statspb::MemStats& MacStats::mem_stats() const {
  const ::statspb::MemStats* p = mem_stats_;
  // @@protoc_insertion_point(field_get:statspb.MacStats.mem_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::MemStats*>(
      &::statspb::_MemStats_default_instance_);
}
::statspb::MemStats* MacStats::mutable_mem_stats() {
  
  if (mem_stats_ == NULL) {
    mem_stats_ = new ::statspb::MemStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.mem_stats)
  return mem_stats_;
}
::statspb::MemStats* MacStats::release_mem_stats() {
  // @@protoc_insertion_point(field_release:statspb.MacStats.mem_stats)
  
  ::statspb::MemStats* temp = mem_stats_;
  mem_stats_ = NULL;
  return temp;
}
void MacStats::set_allocated_mem_stats(::statspb::MemStats* mem_stats) {
  delete mem_stats_;
  mem_stats_ = mem_stats;
  if (mem_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.MacStats.mem_stats)
}

// .statspb.NetStats net_stats = 7;
bool MacStats::has_net_stats() const {
  return this != internal_default_instance() && net_stats_ != NULL;
}
void MacStats::clear_net_stats() {
  if (GetArenaNoVirtual() == NULL && net_stats_ != NULL) delete net_stats_;
  net_stats_ = NULL;
}
const ::statspb::NetStats& MacStats::net_stats() const {
  const ::statspb::NetStats* p = net_stats_;
  // @@protoc_insertion_point(field_get:statspb.MacStats.net_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::NetStats*>(
      &::statspb::_NetStats_default_instance_);
}
::statspb::NetStats* MacStats::mutable_net_stats() {
  
  if (net_stats_ == NULL) {
    net_stats_ = new ::statspb::NetStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.net_stats)
  return net_stats_;
}
::statspb::NetStats* MacStats::release_net_stats() {
  // @@protoc_insertion_point(field_release:statspb.MacStats.net_stats)
  
  ::statspb::NetStats* temp = net_stats_;
  net_stats_ = NULL;
  return temp;
}
void MacStats::set_allocated_net_stats(::statspb::NetStats* net_stats) {
  delete net_stats_;
  net_stats_ = net_stats;
  if (net_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.MacStats.net_stats)
}

// repeated .statspb.DiskStats disk_stats = 8;
int MacStats::disk_stats_size() const {
  return disk_stats_.size();
}
void MacStats::clear_disk_stats() {
  disk_stats_.Clear();
}
const ::statspb::DiskStats& MacStats::disk_stats(int index) const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.disk_stats)
  return disk_stats_.Get(index);
}
::statspb::DiskStats* MacStats::mutable_disk_stats(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.disk_stats)
  return disk_stats_.Mutable(index);
}
::statspb::DiskStats* MacStats::add_disk_stats() {
  // @@protoc_insertion_point(field_add:statspb.MacStats.disk_stats)
  return disk_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >*
MacStats::mutable_disk_stats() {
  // @@protoc_insertion_point(field_mutable_list:statspb.MacStats.disk_stats)
  return &disk_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >&
MacStats::disk_stats() const {
  // @@protoc_insertion_point(field_list:statspb.MacStats.disk_stats)
  return disk_stats_;
}

// uint32 process_num = 9;
void MacStats::clear_process_num() {
  process_num_ = 0u;
}
::google::protobuf::uint32 MacStats::process_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.process_num)
  return process_num_;
}
void MacStats::set_process_num(::google::protobuf::uint32 value) {
  
  process_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.process_num)
}

// uint32 thread_num = 10;
void MacStats::clear_thread_num() {
  thread_num_ = 0u;
}
::google::protobuf::uint32 MacStats::thread_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.thread_num)
  return thread_num_;
}
void MacStats::set_thread_num(::google::protobuf::uint32 value) {
  
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.thread_num)
}

// uint32 handle_num = 11;
void MacStats::clear_handle_num() {
  handle_num_ = 0u;
}
::google::protobuf::uint32 MacStats::handle_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.handle_num)
  return handle_num_;
}
void MacStats::set_handle_num(::google::protobuf::uint32 value) {
  
  handle_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.handle_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeStats::kSizeFieldNumber;
const int RangeStats::kOpsFieldNumber;
const int RangeStats::kBytesInPerSecFieldNumber;
const int RangeStats::kBytesOutPerSecFieldNumber;
const int RangeStats::kTotalCommandsProcessedFieldNumber;
const int RangeStats::kKeyspaceMissesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeStats::RangeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.RangeStats)
}
RangeStats::RangeStats(const RangeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyspace_misses_) -
    reinterpret_cast<char*>(&size_)) + sizeof(keyspace_misses_));
  // @@protoc_insertion_point(copy_constructor:statspb.RangeStats)
}

void RangeStats::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyspace_misses_) -
      reinterpret_cast<char*>(&size_)) + sizeof(keyspace_misses_));
  _cached_size_ = 0;
}

RangeStats::~RangeStats() {
  // @@protoc_insertion_point(destructor:statspb.RangeStats)
  SharedDtor();
}

void RangeStats::SharedDtor() {
}

void RangeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeStats& RangeStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeStats* RangeStats::New(::google::protobuf::Arena* arena) const {
  RangeStats* n = new RangeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyspace_misses_) -
      reinterpret_cast<char*>(&size_)) + sizeof(keyspace_misses_));
  _internal_metadata_.Clear();
}

bool RangeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.RangeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ops = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_in_per_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_in_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_out_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_out_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_commands_processed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_commands_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keyspace_misses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keyspace_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.RangeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.RangeStats)
  return false;
#undef DO_
}

void RangeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // uint64 ops = 2;
  if (this->ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ops(), output);
  }

  // uint64 bytes_in_per_sec = 3;
  if (this->bytes_in_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_in_per_sec(), output);
  }

  // uint64 bytes_out_per_sec = 4;
  if (this->bytes_out_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes_out_per_sec(), output);
  }

  // uint64 total_commands_processed = 5;
  if (this->total_commands_processed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->total_commands_processed(), output);
  }

  // uint64 keyspace_misses = 6;
  if (this->keyspace_misses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->keyspace_misses(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.RangeStats)
}

::google::protobuf::uint8* RangeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.RangeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // uint64 ops = 2;
  if (this->ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ops(), target);
  }

  // uint64 bytes_in_per_sec = 3;
  if (this->bytes_in_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_in_per_sec(), target);
  }

  // uint64 bytes_out_per_sec = 4;
  if (this->bytes_out_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes_out_per_sec(), target);
  }

  // uint64 total_commands_processed = 5;
  if (this->total_commands_processed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->total_commands_processed(), target);
  }

  // uint64 keyspace_misses = 6;
  if (this->keyspace_misses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->keyspace_misses(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.RangeStats)
  return target;
}

size_t RangeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.RangeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // uint64 ops = 2;
  if (this->ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ops());
  }

  // uint64 bytes_in_per_sec = 3;
  if (this->bytes_in_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_in_per_sec());
  }

  // uint64 bytes_out_per_sec = 4;
  if (this->bytes_out_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_out_per_sec());
  }

  // uint64 total_commands_processed = 5;
  if (this->total_commands_processed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_commands_processed());
  }

  // uint64 keyspace_misses = 6;
  if (this->keyspace_misses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keyspace_misses());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.RangeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.RangeStats)
    MergeFrom(*source);
  }
}

void RangeStats::MergeFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.RangeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.ops() != 0) {
    set_ops(from.ops());
  }
  if (from.bytes_in_per_sec() != 0) {
    set_bytes_in_per_sec(from.bytes_in_per_sec());
  }
  if (from.bytes_out_per_sec() != 0) {
    set_bytes_out_per_sec(from.bytes_out_per_sec());
  }
  if (from.total_commands_processed() != 0) {
    set_total_commands_processed(from.total_commands_processed());
  }
  if (from.keyspace_misses() != 0) {
    set_keyspace_misses(from.keyspace_misses());
  }
}

void RangeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeStats::CopyFrom(const RangeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.RangeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeStats::IsInitialized() const {
  return true;
}

void RangeStats::Swap(RangeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeStats::InternalSwap(RangeStats* other) {
  using std::swap;
  swap(size_, other->size_);
  swap(ops_, other->ops_);
  swap(bytes_in_per_sec_, other->bytes_in_per_sec_);
  swap(bytes_out_per_sec_, other->bytes_out_per_sec_);
  swap(total_commands_processed_, other->total_commands_processed_);
  swap(keyspace_misses_, other->keyspace_misses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeStats

// uint64 size = 1;
void RangeStats::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::size() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.size)
  return size_;
}
void RangeStats::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.size)
}

// uint64 ops = 2;
void RangeStats::clear_ops() {
  ops_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::ops() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.ops)
  return ops_;
}
void RangeStats::set_ops(::google::protobuf::uint64 value) {
  
  ops_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.ops)
}

// uint64 bytes_in_per_sec = 3;
void RangeStats::clear_bytes_in_per_sec() {
  bytes_in_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::bytes_in_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.bytes_in_per_sec)
  return bytes_in_per_sec_;
}
void RangeStats::set_bytes_in_per_sec(::google::protobuf::uint64 value) {
  
  bytes_in_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.bytes_in_per_sec)
}

// uint64 bytes_out_per_sec = 4;
void RangeStats::clear_bytes_out_per_sec() {
  bytes_out_per_sec_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::bytes_out_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.bytes_out_per_sec)
  return bytes_out_per_sec_;
}
void RangeStats::set_bytes_out_per_sec(::google::protobuf::uint64 value) {
  
  bytes_out_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.bytes_out_per_sec)
}

// uint64 total_commands_processed = 5;
void RangeStats::clear_total_commands_processed() {
  total_commands_processed_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::total_commands_processed() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.total_commands_processed)
  return total_commands_processed_;
}
void RangeStats::set_total_commands_processed(::google::protobuf::uint64 value) {
  
  total_commands_processed_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.total_commands_processed)
}

// uint64 keyspace_misses = 6;
void RangeStats::clear_keyspace_misses() {
  keyspace_misses_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeStats::keyspace_misses() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.keyspace_misses)
  return keyspace_misses_;
}
void RangeStats::set_keyspace_misses(::google::protobuf::uint64 value) {
  
  keyspace_misses_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.keyspace_misses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaStatus::kMatchFieldNumber;
const int ReplicaStatus::kCommitFieldNumber;
const int ReplicaStatus::kNextFieldNumber;
const int ReplicaStatus::kStateFieldNumber;
const int ReplicaStatus::kSnapshotingFieldNumber;
const int ReplicaStatus::kPausedFieldNumber;
const int ReplicaStatus::kActiveFieldNumber;
const int ReplicaStatus::kLastActiveFieldNumber;
const int ReplicaStatus::kInflightFieldNumber;
const int ReplicaStatus::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaStatus::ReplicaStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.ReplicaStatus)
}
ReplicaStatus::ReplicaStatus(const ReplicaStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&match_, &from.match_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&match_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:statspb.ReplicaStatus)
}

void ReplicaStatus::SharedCtor() {
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&match_)) + sizeof(id_));
  _cached_size_ = 0;
}

ReplicaStatus::~ReplicaStatus() {
  // @@protoc_insertion_point(destructor:statspb.ReplicaStatus)
  SharedDtor();
}

void ReplicaStatus::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplicaStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicaStatus::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplicaStatus& ReplicaStatus::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplicaStatus* ReplicaStatus::New(::google::protobuf::Arena* arena) const {
  ReplicaStatus* n = new ReplicaStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.ReplicaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&match_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool ReplicaStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.ReplicaStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Next = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string State = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.ReplicaStatus.State"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Snapshoting = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshoting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Paused = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Active = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 LastActive = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Inflight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inflight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.ReplicaStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.ReplicaStatus)
  return false;
#undef DO_
}

void ReplicaStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.ReplicaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Match = 1;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match(), output);
  }

  // uint64 Commit = 2;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit(), output);
  }

  // uint64 Next = 3;
  if (this->next() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next(), output);
  }

  // string State = 4;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ReplicaStatus.State");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // bool Snapshoting = 5;
  if (this->snapshoting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->snapshoting(), output);
  }

  // bool Paused = 6;
  if (this->paused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->paused(), output);
  }

  // bool Active = 7;
  if (this->active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->active(), output);
  }

  // int64 LastActive = 8;
  if (this->lastactive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->lastactive(), output);
  }

  // int32 Inflight = 9;
  if (this->inflight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->inflight(), output);
  }

  // uint64 ID = 10;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.ReplicaStatus)
}

::google::protobuf::uint8* ReplicaStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.ReplicaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Match = 1;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match(), target);
  }

  // uint64 Commit = 2;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit(), target);
  }

  // uint64 Next = 3;
  if (this->next() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next(), target);
  }

  // string State = 4;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.ReplicaStatus.State");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // bool Snapshoting = 5;
  if (this->snapshoting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->snapshoting(), target);
  }

  // bool Paused = 6;
  if (this->paused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->paused(), target);
  }

  // bool Active = 7;
  if (this->active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->active(), target);
  }

  // int64 LastActive = 8;
  if (this->lastactive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->lastactive(), target);
  }

  // int32 Inflight = 9;
  if (this->inflight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->inflight(), target);
  }

  // uint64 ID = 10;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.ReplicaStatus)
  return target;
}

size_t ReplicaStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.ReplicaStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string State = 4;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // uint64 Match = 1;
  if (this->match() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match());
  }

  // uint64 Commit = 2;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 Next = 3;
  if (this->next() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->next());
  }

  // bool Snapshoting = 5;
  if (this->snapshoting() != 0) {
    total_size += 1 + 1;
  }

  // bool Paused = 6;
  if (this->paused() != 0) {
    total_size += 1 + 1;
  }

  // bool Active = 7;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int32 Inflight = 9;
  if (this->inflight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inflight());
  }

  // int64 LastActive = 8;
  if (this->lastactive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lastactive());
  }

  // uint64 ID = 10;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.ReplicaStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicaStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.ReplicaStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.ReplicaStatus)
    MergeFrom(*source);
  }
}

void ReplicaStatus::MergeFrom(const ReplicaStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.ReplicaStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.next() != 0) {
    set_next(from.next());
  }
  if (from.snapshoting() != 0) {
    set_snapshoting(from.snapshoting());
  }
  if (from.paused() != 0) {
    set_paused(from.paused());
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
  if (from.inflight() != 0) {
    set_inflight(from.inflight());
  }
  if (from.lastactive() != 0) {
    set_lastactive(from.lastactive());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ReplicaStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.ReplicaStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaStatus::CopyFrom(const ReplicaStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.ReplicaStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaStatus::IsInitialized() const {
  return true;
}

void ReplicaStatus::Swap(ReplicaStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaStatus::InternalSwap(ReplicaStatus* other) {
  using std::swap;
  state_.Swap(&other->state_);
  swap(match_, other->match_);
  swap(commit_, other->commit_);
  swap(next_, other->next_);
  swap(snapshoting_, other->snapshoting_);
  swap(paused_, other->paused_);
  swap(active_, other->active_);
  swap(inflight_, other->inflight_);
  swap(lastactive_, other->lastactive_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicaStatus::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaStatus

// uint64 Match = 1;
void ReplicaStatus::clear_match() {
  match_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReplicaStatus::match() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Match)
  return match_;
}
void ReplicaStatus::set_match(::google::protobuf::uint64 value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Match)
}

// uint64 Commit = 2;
void ReplicaStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReplicaStatus::commit() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Commit)
  return commit_;
}
void ReplicaStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Commit)
}

// uint64 Next = 3;
void ReplicaStatus::clear_next() {
  next_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReplicaStatus::next() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Next)
  return next_;
}
void ReplicaStatus::set_next(::google::protobuf::uint64 value) {
  
  next_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Next)
}

// string State = 4;
void ReplicaStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReplicaStatus::state() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.State)
  return state_.GetNoArena();
}
void ReplicaStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.State)
}
#if LANG_CXX11
void ReplicaStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ReplicaStatus.State)
}
#endif
void ReplicaStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ReplicaStatus.State)
}
void ReplicaStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ReplicaStatus.State)
}
::std::string* ReplicaStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ReplicaStatus.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReplicaStatus::release_state() {
  // @@protoc_insertion_point(field_release:statspb.ReplicaStatus.State)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReplicaStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.ReplicaStatus.State)
}

// bool Snapshoting = 5;
void ReplicaStatus::clear_snapshoting() {
  snapshoting_ = false;
}
bool ReplicaStatus::snapshoting() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Snapshoting)
  return snapshoting_;
}
void ReplicaStatus::set_snapshoting(bool value) {
  
  snapshoting_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Snapshoting)
}

// bool Paused = 6;
void ReplicaStatus::clear_paused() {
  paused_ = false;
}
bool ReplicaStatus::paused() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Paused)
  return paused_;
}
void ReplicaStatus::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Paused)
}

// bool Active = 7;
void ReplicaStatus::clear_active() {
  active_ = false;
}
bool ReplicaStatus::active() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Active)
  return active_;
}
void ReplicaStatus::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Active)
}

// int64 LastActive = 8;
void ReplicaStatus::clear_lastactive() {
  lastactive_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReplicaStatus::lastactive() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.LastActive)
  return lastactive_;
}
void ReplicaStatus::set_lastactive(::google::protobuf::int64 value) {
  
  lastactive_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.LastActive)
}

// int32 Inflight = 9;
void ReplicaStatus::clear_inflight() {
  inflight_ = 0;
}
::google::protobuf::int32 ReplicaStatus::inflight() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Inflight)
  return inflight_;
}
void ReplicaStatus::set_inflight(::google::protobuf::int32 value) {
  
  inflight_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Inflight)
}

// uint64 ID = 10;
void ReplicaStatus::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReplicaStatus::id() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.ID)
  return id_;
}
void ReplicaStatus::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftStatus::kIDFieldNumber;
const int RaftStatus::kNodeIDFieldNumber;
const int RaftStatus::kLeaderFieldNumber;
const int RaftStatus::kTermFieldNumber;
const int RaftStatus::kIndexFieldNumber;
const int RaftStatus::kCommitFieldNumber;
const int RaftStatus::kAppliedFieldNumber;
const int RaftStatus::kVoteFieldNumber;
const int RaftStatus::kPendQueueFieldNumber;
const int RaftStatus::kRecvQueueFieldNumber;
const int RaftStatus::kAppQueueFieldNumber;
const int RaftStatus::kStoppedFieldNumber;
const int RaftStatus::kRestoringSnapshotFieldNumber;
const int RaftStatus::kStateFieldNumber;
const int RaftStatus::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftStatus::RaftStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.RaftStatus)
}
RaftStatus::RaftStatus(const RaftStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      replicas_(from.replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&restoringsnapshot_) -
    reinterpret_cast<char*>(&id_)) + sizeof(restoringsnapshot_));
  // @@protoc_insertion_point(copy_constructor:statspb.RaftStatus)
}

void RaftStatus::SharedCtor() {
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restoringsnapshot_) -
      reinterpret_cast<char*>(&id_)) + sizeof(restoringsnapshot_));
  _cached_size_ = 0;
}

RaftStatus::~RaftStatus() {
  // @@protoc_insertion_point(destructor:statspb.RaftStatus)
  SharedDtor();
}

void RaftStatus::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RaftStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftStatus::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaftStatus& RaftStatus::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RaftStatus* RaftStatus::New(::google::protobuf::Arena* arena) const {
  RaftStatus* n = new RaftStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.RaftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restoringsnapshot_) -
      reinterpret_cast<char*>(&id_)) + sizeof(restoringsnapshot_));
  _internal_metadata_.Clear();
}

bool RaftStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.RaftStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Applied = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Vote = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PendQueue = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pendqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RecvQueue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AppQueue = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Stopped = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RestoringSnapshot = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restoringsnapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string State = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.RaftStatus.State"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .statspb.ReplicaStatus Replicas = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.RaftStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.RaftStatus)
  return false;
#undef DO_
}

void RaftStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.RaftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // uint64 Leader = 3;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leader(), output);
  }

  // uint64 Term = 4;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->term(), output);
  }

  // uint64 Index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->index(), output);
  }

  // uint64 Commit = 6;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commit(), output);
  }

  // uint64 Applied = 7;
  if (this->applied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->applied(), output);
  }

  // uint64 Vote = 8;
  if (this->vote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->vote(), output);
  }

  // int32 PendQueue = 9;
  if (this->pendqueue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pendqueue(), output);
  }

  // int32 RecvQueue = 10;
  if (this->recvqueue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recvqueue(), output);
  }

  // int32 AppQueue = 11;
  if (this->appqueue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->appqueue(), output);
  }

  // bool Stopped = 12;
  if (this->stopped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->stopped(), output);
  }

  // bool RestoringSnapshot = 13;
  if (this->restoringsnapshot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->restoringsnapshot(), output);
  }

  // string State = 14;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.RaftStatus.State");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->state(), output);
  }

  // repeated .statspb.ReplicaStatus Replicas = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->replicas(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.RaftStatus)
}

::google::protobuf::uint8* RaftStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.RaftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // uint64 Leader = 3;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leader(), target);
  }

  // uint64 Term = 4;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->term(), target);
  }

  // uint64 Index = 5;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->index(), target);
  }

  // uint64 Commit = 6;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commit(), target);
  }

  // uint64 Applied = 7;
  if (this->applied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->applied(), target);
  }

  // uint64 Vote = 8;
  if (this->vote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->vote(), target);
  }

  // int32 PendQueue = 9;
  if (this->pendqueue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pendqueue(), target);
  }

  // int32 RecvQueue = 10;
  if (this->recvqueue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recvqueue(), target);
  }

  // int32 AppQueue = 11;
  if (this->appqueue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->appqueue(), target);
  }

  // bool Stopped = 12;
  if (this->stopped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->stopped(), target);
  }

  // bool RestoringSnapshot = 13;
  if (this->restoringsnapshot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->restoringsnapshot(), target);
  }

  // string State = 14;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.RaftStatus.State");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->state(), target);
  }

  // repeated .statspb.ReplicaStatus Replicas = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->replicas(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.RaftStatus)
  return target;
}

size_t RaftStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.RaftStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .statspb.ReplicaStatus Replicas = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(static_cast<int>(i)));
    }
  }

  // string State = 14;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 Leader = 3;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  // uint64 Term = 4;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 Index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 Commit = 6;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 Applied = 7;
  if (this->applied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applied());
  }

  // uint64 Vote = 8;
  if (this->vote() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vote());
  }

  // int32 PendQueue = 9;
  if (this->pendqueue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pendqueue());
  }

  // int32 RecvQueue = 10;
  if (this->recvqueue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recvqueue());
  }

  // int32 AppQueue = 11;
  if (this->appqueue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->appqueue());
  }

  // bool Stopped = 12;
  if (this->stopped() != 0) {
    total_size += 1 + 1;
  }

  // bool RestoringSnapshot = 13;
  if (this->restoringsnapshot() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.RaftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.RaftStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.RaftStatus)
    MergeFrom(*source);
  }
}

void RaftStatus::MergeFrom(const RaftStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.RaftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.applied() != 0) {
    set_applied(from.applied());
  }
  if (from.vote() != 0) {
    set_vote(from.vote());
  }
  if (from.pendqueue() != 0) {
    set_pendqueue(from.pendqueue());
  }
  if (from.recvqueue() != 0) {
    set_recvqueue(from.recvqueue());
  }
  if (from.appqueue() != 0) {
    set_appqueue(from.appqueue());
  }
  if (from.stopped() != 0) {
    set_stopped(from.stopped());
  }
  if (from.restoringsnapshot() != 0) {
    set_restoringsnapshot(from.restoringsnapshot());
  }
}

void RaftStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.RaftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftStatus::CopyFrom(const RaftStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.RaftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftStatus::IsInitialized() const {
  return true;
}

void RaftStatus::Swap(RaftStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftStatus::InternalSwap(RaftStatus* other) {
  using std::swap;
  replicas_.InternalSwap(&other->replicas_);
  state_.Swap(&other->state_);
  swap(id_, other->id_);
  swap(nodeid_, other->nodeid_);
  swap(leader_, other->leader_);
  swap(term_, other->term_);
  swap(index_, other->index_);
  swap(commit_, other->commit_);
  swap(applied_, other->applied_);
  swap(vote_, other->vote_);
  swap(pendqueue_, other->pendqueue_);
  swap(recvqueue_, other->recvqueue_);
  swap(appqueue_, other->appqueue_);
  swap(stopped_, other->stopped_);
  swap(restoringsnapshot_, other->restoringsnapshot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftStatus::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftStatus

// uint64 ID = 1;
void RaftStatus::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::id() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.ID)
  return id_;
}
void RaftStatus::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.ID)
}

// uint64 NodeID = 2;
void RaftStatus::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::nodeid() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.NodeID)
  return nodeid_;
}
void RaftStatus::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.NodeID)
}

// uint64 Leader = 3;
void RaftStatus::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::leader() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Leader)
  return leader_;
}
void RaftStatus::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Leader)
}

// uint64 Term = 4;
void RaftStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::term() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Term)
  return term_;
}
void RaftStatus::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Term)
}

// uint64 Index = 5;
void RaftStatus::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::index() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Index)
  return index_;
}
void RaftStatus::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Index)
}

// uint64 Commit = 6;
void RaftStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::commit() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Commit)
  return commit_;
}
void RaftStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Commit)
}

// uint64 Applied = 7;
void RaftStatus::clear_applied() {
  applied_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::applied() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Applied)
  return applied_;
}
void RaftStatus::set_applied(::google::protobuf::uint64 value) {
  
  applied_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Applied)
}

// uint64 Vote = 8;
void RaftStatus::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftStatus::vote() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Vote)
  return vote_;
}
void RaftStatus::set_vote(::google::protobuf::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Vote)
}

// int32 PendQueue = 9;
void RaftStatus::clear_pendqueue() {
  pendqueue_ = 0;
}
::google::protobuf::int32 RaftStatus::pendqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.PendQueue)
  return pendqueue_;
}
void RaftStatus::set_pendqueue(::google::protobuf::int32 value) {
  
  pendqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.PendQueue)
}

// int32 RecvQueue = 10;
void RaftStatus::clear_recvqueue() {
  recvqueue_ = 0;
}
::google::protobuf::int32 RaftStatus::recvqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.RecvQueue)
  return recvqueue_;
}
void RaftStatus::set_recvqueue(::google::protobuf::int32 value) {
  
  recvqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.RecvQueue)
}

// int32 AppQueue = 11;
void RaftStatus::clear_appqueue() {
  appqueue_ = 0;
}
::google::protobuf::int32 RaftStatus::appqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.AppQueue)
  return appqueue_;
}
void RaftStatus::set_appqueue(::google::protobuf::int32 value) {
  
  appqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.AppQueue)
}

// bool Stopped = 12;
void RaftStatus::clear_stopped() {
  stopped_ = false;
}
bool RaftStatus::stopped() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Stopped)
  return stopped_;
}
void RaftStatus::set_stopped(bool value) {
  
  stopped_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Stopped)
}

// bool RestoringSnapshot = 13;
void RaftStatus::clear_restoringsnapshot() {
  restoringsnapshot_ = false;
}
bool RaftStatus::restoringsnapshot() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.RestoringSnapshot)
  return restoringsnapshot_;
}
void RaftStatus::set_restoringsnapshot(bool value) {
  
  restoringsnapshot_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.RestoringSnapshot)
}

// string State = 14;
void RaftStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RaftStatus::state() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.State)
  return state_.GetNoArena();
}
void RaftStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.State)
}
#if LANG_CXX11
void RaftStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.RaftStatus.State)
}
#endif
void RaftStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.RaftStatus.State)
}
void RaftStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.RaftStatus.State)
}
::std::string* RaftStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.RaftStatus.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftStatus::release_state() {
  // @@protoc_insertion_point(field_release:statspb.RaftStatus.State)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.RaftStatus.State)
}

// repeated .statspb.ReplicaStatus Replicas = 15;
int RaftStatus::replicas_size() const {
  return replicas_.size();
}
void RaftStatus::clear_replicas() {
  replicas_.Clear();
}
const ::statspb::ReplicaStatus& RaftStatus::replicas(int index) const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Replicas)
  return replicas_.Get(index);
}
::statspb::ReplicaStatus* RaftStatus::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.RaftStatus.Replicas)
  return replicas_.Mutable(index);
}
::statspb::ReplicaStatus* RaftStatus::add_replicas() {
  // @@protoc_insertion_point(field_add:statspb.RaftStatus.Replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >*
RaftStatus::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:statspb.RaftStatus.Replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >&
RaftStatus::replicas() const {
  // @@protoc_insertion_point(field_list:statspb.RaftStatus.Replicas)
  return replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqlStats::kOpsFieldNumber;
const int SqlStats::kDelayAvgFieldNumber;
const int SqlStats::kTpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqlStats::SqlStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SqlStats)
}
SqlStats::SqlStats(const SqlStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tp().size() > 0) {
    tp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tp_);
  }
  ::memcpy(&ops_, &from.ops_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_avg_) -
    reinterpret_cast<char*>(&ops_)) + sizeof(delay_avg_));
  // @@protoc_insertion_point(copy_constructor:statspb.SqlStats)
}

void SqlStats::SharedCtor() {
  tp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_avg_) -
      reinterpret_cast<char*>(&ops_)) + sizeof(delay_avg_));
  _cached_size_ = 0;
}

SqlStats::~SqlStats() {
  // @@protoc_insertion_point(destructor:statspb.SqlStats)
  SharedDtor();
}

void SqlStats::SharedDtor() {
  tp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SqlStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlStats::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqlStats& SqlStats::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SqlStats* SqlStats::New(::google::protobuf::Arena* arena) const {
  SqlStats* n = new SqlStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqlStats::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SqlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_avg_) -
      reinterpret_cast<char*>(&ops_)) + sizeof(delay_avg_));
  _internal_metadata_.Clear();
}

bool SqlStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SqlStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delay_avg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_avg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SqlStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SqlStats)
  return false;
#undef DO_
}

void SqlStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SqlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ops = 1;
  if (this->ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ops(), output);
  }

  // int64 delay_avg = 2;
  if (this->delay_avg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->delay_avg(), output);
  }

  // bytes tp = 3;
  if (this->tp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SqlStats)
}

::google::protobuf::uint8* SqlStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SqlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ops = 1;
  if (this->ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ops(), target);
  }

  // int64 delay_avg = 2;
  if (this->delay_avg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->delay_avg(), target);
  }

  // bytes tp = 3;
  if (this->tp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SqlStats)
  return target;
}

size_t SqlStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SqlStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes tp = 3;
  if (this->tp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tp());
  }

  // int64 ops = 1;
  if (this->ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ops());
  }

  // int64 delay_avg = 2;
  if (this->delay_avg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->delay_avg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SqlStats)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqlStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SqlStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SqlStats)
    MergeFrom(*source);
  }
}

void SqlStats::MergeFrom(const SqlStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SqlStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tp().size() > 0) {

    tp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tp_);
  }
  if (from.ops() != 0) {
    set_ops(from.ops());
  }
  if (from.delay_avg() != 0) {
    set_delay_avg(from.delay_avg());
  }
}

void SqlStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SqlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlStats::CopyFrom(const SqlStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SqlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlStats::IsInitialized() const {
  return true;
}

void SqlStats::Swap(SqlStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqlStats::InternalSwap(SqlStats* other) {
  using std::swap;
  tp_.Swap(&other->tp_);
  swap(ops_, other->ops_);
  swap(delay_avg_, other->delay_avg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqlStats::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SqlStats

// int64 ops = 1;
void SqlStats::clear_ops() {
  ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlStats::ops() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.ops)
  return ops_;
}
void SqlStats::set_ops(::google::protobuf::int64 value) {
  
  ops_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlStats.ops)
}

// int64 delay_avg = 2;
void SqlStats::clear_delay_avg() {
  delay_avg_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlStats::delay_avg() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.delay_avg)
  return delay_avg_;
}
void SqlStats::set_delay_avg(::google::protobuf::int64 value) {
  
  delay_avg_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlStats.delay_avg)
}

// bytes tp = 3;
void SqlStats::clear_tp() {
  tp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SqlStats::tp() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.tp)
  return tp_.GetNoArena();
}
void SqlStats::set_tp(const ::std::string& value) {
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SqlStats.tp)
}
#if LANG_CXX11
void SqlStats::set_tp(::std::string&& value) {
  
  tp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SqlStats.tp)
}
#endif
void SqlStats::set_tp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SqlStats.tp)
}
void SqlStats::set_tp(const void* value, size_t size) {
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SqlStats.tp)
}
::std::string* SqlStats::mutable_tp() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SqlStats.tp)
  return tp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqlStats::release_tp() {
  // @@protoc_insertion_point(field_release:statspb.SqlStats.tp)
  
  return tp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqlStats::set_allocated_tp(::std::string* tp) {
  if (tp != NULL) {
    
  } else {
    
  }
  tp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tp);
  // @@protoc_insertion_point(field_set_allocated:statspb.SqlStats.tp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqlSlowlog::kLenFieldNumber;
const int SqlSlowlog::kThanFieldNumber;
const int SqlSlowlog::kIdxFieldNumber;
const int SqlSlowlog::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqlSlowlog::SqlSlowlog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SqlSlowlog)
}
SqlSlowlog::SqlSlowlog(const SqlSlowlog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      log_(from.log_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&len_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:statspb.SqlSlowlog)
}

void SqlSlowlog::SharedCtor() {
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&len_)) + sizeof(idx_));
  _cached_size_ = 0;
}

SqlSlowlog::~SqlSlowlog() {
  // @@protoc_insertion_point(destructor:statspb.SqlSlowlog)
  SharedDtor();
}

void SqlSlowlog::SharedDtor() {
}

void SqlSlowlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlSlowlog::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqlSlowlog& SqlSlowlog::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SqlSlowlog* SqlSlowlog::New(::google::protobuf::Arena* arena) const {
  SqlSlowlog* n = new SqlSlowlog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqlSlowlog::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SqlSlowlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&len_)) + sizeof(idx_));
  _internal_metadata_.Clear();
}

bool SqlSlowlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SqlSlowlog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 than = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &than_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .statspb.SqlSlow log = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SqlSlowlog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SqlSlowlog)
  return false;
#undef DO_
}

void SqlSlowlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SqlSlowlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->len(), output);
  }

  // int32 than = 2;
  if (this->than() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->than(), output);
  }

  // uint32 idx = 3;
  if (this->idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  // repeated .statspb.SqlSlow log = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->log(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SqlSlowlog)
}

::google::protobuf::uint8* SqlSlowlog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SqlSlowlog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->len(), target);
  }

  // int32 than = 2;
  if (this->than() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->than(), target);
  }

  // uint32 idx = 3;
  if (this->idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  // repeated .statspb.SqlSlow log = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->log(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SqlSlowlog)
  return target;
}

size_t SqlSlowlog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SqlSlowlog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .statspb.SqlSlow log = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log(static_cast<int>(i)));
    }
  }

  // uint32 len = 1;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->len());
  }

  // int32 than = 2;
  if (this->than() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->than());
  }

  // uint32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlSlowlog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SqlSlowlog)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlSlowlog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqlSlowlog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SqlSlowlog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SqlSlowlog)
    MergeFrom(*source);
  }
}

void SqlSlowlog::MergeFrom(const SqlSlowlog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SqlSlowlog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
  if (from.len() != 0) {
    set_len(from.len());
  }
  if (from.than() != 0) {
    set_than(from.than());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void SqlSlowlog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SqlSlowlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlSlowlog::CopyFrom(const SqlSlowlog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SqlSlowlog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlSlowlog::IsInitialized() const {
  return true;
}

void SqlSlowlog::Swap(SqlSlowlog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqlSlowlog::InternalSwap(SqlSlowlog* other) {
  using std::swap;
  log_.InternalSwap(&other->log_);
  swap(len_, other->len_);
  swap(than_, other->than_);
  swap(idx_, other->idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqlSlowlog::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SqlSlowlog

// uint32 len = 1;
void SqlSlowlog::clear_len() {
  len_ = 0u;
}
::google::protobuf::uint32 SqlSlowlog::len() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.len)
  return len_;
}
void SqlSlowlog::set_len(::google::protobuf::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.len)
}

// int32 than = 2;
void SqlSlowlog::clear_than() {
  than_ = 0;
}
::google::protobuf::int32 SqlSlowlog::than() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.than)
  return than_;
}
void SqlSlowlog::set_than(::google::protobuf::int32 value) {
  
  than_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.than)
}

// uint32 idx = 3;
void SqlSlowlog::clear_idx() {
  idx_ = 0u;
}
::google::protobuf::uint32 SqlSlowlog::idx() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.idx)
  return idx_;
}
void SqlSlowlog::set_idx(::google::protobuf::uint32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.idx)
}

// repeated .statspb.SqlSlow log = 4;
int SqlSlowlog::log_size() const {
  return log_.size();
}
void SqlSlowlog::clear_log() {
  log_.Clear();
}
const ::statspb::SqlSlow& SqlSlowlog::log(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.log)
  return log_.Get(index);
}
::statspb::SqlSlow* SqlSlowlog::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.SqlSlowlog.log)
  return log_.Mutable(index);
}
::statspb::SqlSlow* SqlSlowlog::add_log() {
  // @@protoc_insertion_point(field_add:statspb.SqlSlowlog.log)
  return log_.Add();
}
::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >*
SqlSlowlog::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SqlSlowlog.log)
  return &log_;
}
const ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >&
SqlSlowlog::log() const {
  // @@protoc_insertion_point(field_list:statspb.SqlSlowlog.log)
  return log_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqlSlow::kTimeSecFieldNumber;
const int SqlSlow::kSqlFieldNumber;
const int SqlSlow::kTotalUsecFieldNumber;
const int SqlSlow::kCallUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqlSlow::SqlSlow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SqlSlow)
}
SqlSlow::SqlSlow(const SqlSlow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  ::memcpy(&time_sec_, &from.time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&call_usec_) -
    reinterpret_cast<char*>(&time_sec_)) + sizeof(call_usec_));
  // @@protoc_insertion_point(copy_constructor:statspb.SqlSlow)
}

void SqlSlow::SharedCtor() {
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_usec_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(call_usec_));
  _cached_size_ = 0;
}

SqlSlow::~SqlSlow() {
  // @@protoc_insertion_point(destructor:statspb.SqlSlow)
  SharedDtor();
}

void SqlSlow::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SqlSlow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlSlow::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqlSlow& SqlSlow::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SqlSlow* SqlSlow::New(::google::protobuf::Arena* arena) const {
  SqlSlow* n = new SqlSlow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqlSlow::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SqlSlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_usec_) -
      reinterpret_cast<char*>(&time_sec_)) + sizeof(call_usec_));
  _internal_metadata_.Clear();
}

bool SqlSlow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SqlSlow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.SqlSlow.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_usec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 call_usec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &call_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SqlSlow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SqlSlow)
  return false;
#undef DO_
}

void SqlSlow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SqlSlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_sec = 1;
  if (this->time_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_sec(), output);
  }

  // string sql = 2;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.SqlSlow.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql(), output);
  }

  // int64 total_usec = 3;
  if (this->total_usec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_usec(), output);
  }

  // int64 call_usec = 4;
  if (this->call_usec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->call_usec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SqlSlow)
}

::google::protobuf::uint8* SqlSlow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SqlSlow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_sec = 1;
  if (this->time_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_sec(), target);
  }

  // string sql = 2;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.SqlSlow.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql(), target);
  }

  // int64 total_usec = 3;
  if (this->total_usec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_usec(), target);
  }

  // int64 call_usec = 4;
  if (this->call_usec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->call_usec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SqlSlow)
  return target;
}

size_t SqlSlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SqlSlow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sql = 2;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // int64 time_sec = 1;
  if (this->time_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_sec());
  }

  // int64 total_usec = 3;
  if (this->total_usec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_usec());
  }

  // int64 call_usec = 4;
  if (this->call_usec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->call_usec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlSlow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SqlSlow)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlSlow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqlSlow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SqlSlow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SqlSlow)
    MergeFrom(*source);
  }
}

void SqlSlow::MergeFrom(const SqlSlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SqlSlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.time_sec() != 0) {
    set_time_sec(from.time_sec());
  }
  if (from.total_usec() != 0) {
    set_total_usec(from.total_usec());
  }
  if (from.call_usec() != 0) {
    set_call_usec(from.call_usec());
  }
}

void SqlSlow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SqlSlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlSlow::CopyFrom(const SqlSlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SqlSlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlSlow::IsInitialized() const {
  return true;
}

void SqlSlow::Swap(SqlSlow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqlSlow::InternalSwap(SqlSlow* other) {
  using std::swap;
  sql_.Swap(&other->sql_);
  swap(time_sec_, other->time_sec_);
  swap(total_usec_, other->total_usec_);
  swap(call_usec_, other->call_usec_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqlSlow::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SqlSlow

// int64 time_sec = 1;
void SqlSlow::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlSlow::time_sec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.time_sec)
  return time_sec_;
}
void SqlSlow::set_time_sec(::google::protobuf::int64 value) {
  
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.time_sec)
}

// string sql = 2;
void SqlSlow::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SqlSlow::sql() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.sql)
  return sql_.GetNoArena();
}
void SqlSlow::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.sql)
}
#if LANG_CXX11
void SqlSlow::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SqlSlow.sql)
}
#endif
void SqlSlow::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SqlSlow.sql)
}
void SqlSlow::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SqlSlow.sql)
}
::std::string* SqlSlow::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SqlSlow.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SqlSlow::release_sql() {
  // @@protoc_insertion_point(field_release:statspb.SqlSlow.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SqlSlow::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:statspb.SqlSlow.sql)
}

// int64 total_usec = 3;
void SqlSlow::clear_total_usec() {
  total_usec_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlSlow::total_usec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.total_usec)
  return total_usec_;
}
void SqlSlow::set_total_usec(::google::protobuf::int64 value) {
  
  total_usec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.total_usec)
}

// int64 call_usec = 4;
void SqlSlow::clear_call_usec() {
  call_usec_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlSlow::call_usec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.call_usec)
  return call_usec_;
}
void SqlSlow::set_call_usec(::google::protobuf::int64 value) {
  
  call_usec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.call_usec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SqlTp::kCallsFieldNumber;
const int SqlTp::kTpFieldNumber;
const int SqlTp::kDelayMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SqlTp::SqlTp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.SqlTp)
}
SqlTp::SqlTp(const SqlTp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tp_(from.tp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&calls_, &from.calls_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_max_) -
    reinterpret_cast<char*>(&calls_)) + sizeof(delay_max_));
  // @@protoc_insertion_point(copy_constructor:statspb.SqlTp)
}

void SqlTp::SharedCtor() {
  ::memset(&calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_max_) -
      reinterpret_cast<char*>(&calls_)) + sizeof(delay_max_));
  _cached_size_ = 0;
}

SqlTp::~SqlTp() {
  // @@protoc_insertion_point(destructor:statspb.SqlTp)
  SharedDtor();
}

void SqlTp::SharedDtor() {
}

void SqlTp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SqlTp::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SqlTp& SqlTp::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SqlTp* SqlTp::New(::google::protobuf::Arena* arena) const {
  SqlTp* n = new SqlTp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SqlTp::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.SqlTp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tp_.Clear();
  ::memset(&calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_max_) -
      reinterpret_cast<char*>(&calls_)) + sizeof(delay_max_));
  _internal_metadata_.Clear();
}

bool SqlTp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.SqlTp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 calls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 tp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_tp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_tp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delay_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.SqlTp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.SqlTp)
  return false;
#undef DO_
}

void SqlTp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.SqlTp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 calls = 1;
  if (this->calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->calls(), output);
  }

  // repeated int64 tp = 2;
  if (this->tp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tp_cached_byte_size_));
  }
  for (int i = 0, n = this->tp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->tp(i), output);
  }

  // int64 delay_max = 3;
  if (this->delay_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->delay_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.SqlTp)
}

::google::protobuf::uint8* SqlTp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.SqlTp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 calls = 1;
  if (this->calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->calls(), target);
  }

  // repeated int64 tp = 2;
  if (this->tp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->tp_, target);
  }

  // int64 delay_max = 3;
  if (this->delay_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->delay_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.SqlTp)
  return target;
}

size_t SqlTp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.SqlTp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 tp = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->tp_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 calls = 1;
  if (this->calls() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calls());
  }

  // int64 delay_max = 3;
  if (this->delay_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->delay_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SqlTp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.SqlTp)
  GOOGLE_DCHECK_NE(&from, this);
  const SqlTp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SqlTp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.SqlTp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.SqlTp)
    MergeFrom(*source);
  }
}

void SqlTp::MergeFrom(const SqlTp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.SqlTp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tp_.MergeFrom(from.tp_);
  if (from.calls() != 0) {
    set_calls(from.calls());
  }
  if (from.delay_max() != 0) {
    set_delay_max(from.delay_max());
  }
}

void SqlTp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.SqlTp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SqlTp::CopyFrom(const SqlTp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.SqlTp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SqlTp::IsInitialized() const {
  return true;
}

void SqlTp::Swap(SqlTp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SqlTp::InternalSwap(SqlTp* other) {
  using std::swap;
  tp_.InternalSwap(&other->tp_);
  swap(calls_, other->calls_);
  swap(delay_max_, other->delay_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SqlTp::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SqlTp

// int64 calls = 1;
void SqlTp::clear_calls() {
  calls_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlTp::calls() const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.calls)
  return calls_;
}
void SqlTp::set_calls(::google::protobuf::int64 value) {
  
  calls_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlTp.calls)
}

// repeated int64 tp = 2;
int SqlTp::tp_size() const {
  return tp_.size();
}
void SqlTp::clear_tp() {
  tp_.Clear();
}
::google::protobuf::int64 SqlTp::tp(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.tp)
  return tp_.Get(index);
}
void SqlTp::set_tp(int index, ::google::protobuf::int64 value) {
  tp_.Set(index, value);
  // @@protoc_insertion_point(field_set:statspb.SqlTp.tp)
}
void SqlTp::add_tp(::google::protobuf::int64 value) {
  tp_.Add(value);
  // @@protoc_insertion_point(field_add:statspb.SqlTp.tp)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SqlTp::tp() const {
  // @@protoc_insertion_point(field_list:statspb.SqlTp.tp)
  return tp_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SqlTp::mutable_tp() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SqlTp.tp)
  return &tp_;
}

// int64 delay_max = 3;
void SqlTp::clear_delay_max() {
  delay_max_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SqlTp::delay_max() const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.delay_max)
  return delay_max_;
}
void SqlTp::set_delay_max(::google::protobuf::int64 value) {
  
  delay_max_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlTp.delay_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeInfo::kRangeIdFieldNumber;
const int RangeInfo::kLeaderIdFieldNumber;
const int RangeInfo::kNodeAdderFieldNumber;
const int RangeInfo::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeInfo::RangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_statspb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:statspb.RangeInfo)
}
RangeInfo::RangeInfo(const RangeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_adder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_adder().size() > 0) {
    node_adder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_adder_);
  }
  if (from.has_stats()) {
    stats_ = new ::mspb::RangeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_id_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(leader_id_));
  // @@protoc_insertion_point(copy_constructor:statspb.RangeInfo)
}

void RangeInfo::SharedCtor() {
  node_adder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(leader_id_));
  _cached_size_ = 0;
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:statspb.RangeInfo)
  SharedDtor();
}

void RangeInfo::SharedDtor() {
  node_adder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void RangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeInfo::descriptor() {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeInfo& RangeInfo::default_instance() {
  protobuf_statspb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeInfo* RangeInfo::New(::google::protobuf::Arena* arena) const {
  RangeInfo* n = new RangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:statspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_adder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(leader_id_));
  _internal_metadata_.Clear();
}

bool RangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:statspb.RangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 range_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_adder = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_adder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_adder().data(), static_cast<int>(this->node_adder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "statspb.RangeInfo.node_adder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mspb.RangeStats stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:statspb.RangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:statspb.RangeInfo)
  return false;
#undef DO_
}

void RangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:statspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->range_id(), output);
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leader_id(), output);
  }

  // string node_adder = 3;
  if (this->node_adder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_adder().data(), static_cast<int>(this->node_adder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.RangeInfo.node_adder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_adder(), output);
  }

  // .mspb.RangeStats stats = 4;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stats_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:statspb.RangeInfo)
}

::google::protobuf::uint8* RangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:statspb.RangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->range_id(), target);
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leader_id(), target);
  }

  // string node_adder = 3;
  if (this->node_adder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_adder().data(), static_cast<int>(this->node_adder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "statspb.RangeInfo.node_adder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_adder(), target);
  }

  // .mspb.RangeStats stats = 4;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stats_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statspb.RangeInfo)
  return target;
}

size_t RangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statspb.RangeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_adder = 3;
  if (this->node_adder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_adder());
  }

  // .mspb.RangeStats stats = 4;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 range_id = 1;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:statspb.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:statspb.RangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:statspb.RangeInfo)
    MergeFrom(*source);
  }
}

void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statspb.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_adder().size() > 0) {

    node_adder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_adder_);
  }
  if (from.has_stats()) {
    mutable_stats()->::mspb::RangeStats::MergeFrom(from.stats());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.leader_id() != 0) {
    set_leader_id(from.leader_id());
  }
}

void RangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:statspb.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statspb.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {
  return true;
}

void RangeInfo::Swap(RangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeInfo::InternalSwap(RangeInfo* other) {
  using std::swap;
  node_adder_.Swap(&other->node_adder_);
  swap(stats_, other->stats_);
  swap(range_id_, other->range_id_);
  swap(leader_id_, other->leader_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeInfo::GetMetadata() const {
  protobuf_statspb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_statspb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeInfo

// uint64 range_id = 1;
void RangeInfo::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeInfo::range_id() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.range_id)
  return range_id_;
}
void RangeInfo::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.range_id)
}

// uint64 leader_id = 2;
void RangeInfo::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RangeInfo::leader_id() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.leader_id)
  return leader_id_;
}
void RangeInfo::set_leader_id(::google::protobuf::uint64 value) {
  
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.leader_id)
}

// string node_adder = 3;
void RangeInfo::clear_node_adder() {
  node_adder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeInfo::node_adder() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.node_adder)
  return node_adder_.GetNoArena();
}
void RangeInfo::set_node_adder(const ::std::string& value) {
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.node_adder)
}
#if LANG_CXX11
void RangeInfo::set_node_adder(::std::string&& value) {
  
  node_adder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.RangeInfo.node_adder)
}
#endif
void RangeInfo::set_node_adder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.RangeInfo.node_adder)
}
void RangeInfo::set_node_adder(const char* value, size_t size) {
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.RangeInfo.node_adder)
}
::std::string* RangeInfo::mutable_node_adder() {
  
  // @@protoc_insertion_point(field_mutable:statspb.RangeInfo.node_adder)
  return node_adder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeInfo::release_node_adder() {
  // @@protoc_insertion_point(field_release:statspb.RangeInfo.node_adder)
  
  return node_adder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeInfo::set_allocated_node_adder(::std::string* node_adder) {
  if (node_adder != NULL) {
    
  } else {
    
  }
  node_adder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_adder);
  // @@protoc_insertion_point(field_set_allocated:statspb.RangeInfo.node_adder)
}

// .mspb.RangeStats stats = 4;
bool RangeInfo::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void RangeInfo::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::mspb::RangeStats& RangeInfo::stats() const {
  const ::mspb::RangeStats* p = stats_;
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RangeStats*>(
      &::mspb::_RangeStats_default_instance_);
}
::mspb::RangeStats* RangeInfo::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::mspb::RangeStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.RangeInfo.stats)
  return stats_;
}
::mspb::RangeStats* RangeInfo::release_stats() {
  // @@protoc_insertion_point(field_release:statspb.RangeInfo.stats)
  
  ::mspb::RangeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void RangeInfo::set_allocated_stats(::mspb::RangeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.RangeInfo.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace statspb

// @@protoc_insertion_point(global_scope)
