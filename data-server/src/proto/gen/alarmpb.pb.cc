// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarmpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alarmpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace alarmpb {
class RequestHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
     _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
     _instance;
} _ResponseHeader_default_instance_;
class SimpleAlarmRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimpleAlarmRequest>
     _instance;
} _SimpleAlarmRequest_default_instance_;
class SimpleAlarmResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimpleAlarmResponse>
     _instance;
} _SimpleAlarmResponse_default_instance_;
class TaskAlarmRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskAlarmRequest>
     _instance;
} _TaskAlarmRequest_default_instance_;
class TaskTimeoutDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskTimeout>
     _instance;
} _TaskTimeout_default_instance_;
class TaskLongTimeRunningDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskLongTimeRunning>
     _instance;
} _TaskLongTimeRunning_default_instance_;
class TaskAlarmResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskAlarmResponse>
     _instance;
} _TaskAlarmResponse_default_instance_;
class NodeRangeAlarmRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeRangeAlarmRequest>
     _instance;
} _NodeRangeAlarmRequest_default_instance_;
class RangeNoHeartbeatAlarmDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeNoHeartbeatAlarm>
     _instance;
} _RangeNoHeartbeatAlarm_default_instance_;
class NodeNoHeartbeatAlarmDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeNoHeartbeatAlarm>
     _instance;
} _NodeNoHeartbeatAlarm_default_instance_;
class NodeDiskSizeAlarmDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeDiskSizeAlarm>
     _instance;
} _NodeDiskSizeAlarm_default_instance_;
class NodeLeaderCountAlarmDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeLeaderCountAlarm>
     _instance;
} _NodeLeaderCountAlarm_default_instance_;
class NodeRangeAlarmResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeRangeAlarmResponse>
     _instance;
} _NodeRangeAlarmResponse_default_instance_;
class AliveRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AliveRequest>
     _instance;
} _AliveRequest_default_instance_;
class AliveResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AliveResponse>
     _instance;
} _AliveResponse_default_instance_;
class SimpleRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimpleRequest>
     _instance;
} _SimpleRequest_default_instance_;
class SimpleResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SimpleResponse>
     _instance;
} _SimpleResponse_default_instance_;

namespace protobuf_alarmpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAlarmRequest, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAlarmRequest, describe_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAlarmResponse, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, task_timeout_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, task_long_time_running_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, describe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmRequest, sample_json_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTimeout, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskTimeout, takes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskLongTimeRunning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskLongTimeRunning, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskLongTimeRunning, takes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskAlarmResponse, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, range_no_hb_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, node_no_hb_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, node_disk_size_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, node_leader_count_alarm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, describe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmRequest, sample_json_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNoHeartbeatAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNoHeartbeatAlarm, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNoHeartbeatAlarm, last_heartbeat_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeNoHeartbeatAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeNoHeartbeatAlarm, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeNoHeartbeatAlarm, last_heartbeat_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDiskSizeAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDiskSizeAlarm, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDiskSizeAlarm, disk_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLeaderCountAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLeaderCountAlarm, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLeaderCountAlarm, leader_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRangeAlarmResponse, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveRequest, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveRequest, sample_json_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AliveResponse, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRequest, sample_json_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleResponse, head_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RequestHeader)},
  { 6, -1, sizeof(ResponseHeader)},
  { 13, -1, sizeof(SimpleAlarmRequest)},
  { 20, -1, sizeof(SimpleAlarmResponse)},
  { 26, -1, sizeof(TaskAlarmRequest)},
  { 38, -1, sizeof(TaskTimeout)},
  { 45, -1, sizeof(TaskLongTimeRunning)},
  { 52, -1, sizeof(TaskAlarmResponse)},
  { 58, -1, sizeof(NodeRangeAlarmRequest)},
  { 71, -1, sizeof(RangeNoHeartbeatAlarm)},
  { 78, -1, sizeof(NodeNoHeartbeatAlarm)},
  { 85, -1, sizeof(NodeDiskSizeAlarm)},
  { 92, -1, sizeof(NodeLeaderCountAlarm)},
  { 99, -1, sizeof(NodeRangeAlarmResponse)},
  { 105, -1, sizeof(AliveRequest)},
  { 112, -1, sizeof(AliveResponse)},
  { 118, -1, sizeof(SimpleRequest)},
  { 127, -1, sizeof(SimpleResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleAlarmRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleAlarmResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskAlarmRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskLongTimeRunning_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskAlarmResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeRangeAlarmRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeNoHeartbeatAlarm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeNoHeartbeatAlarm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeDiskSizeAlarm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeLeaderCountAlarm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeRangeAlarmResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimpleResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "alarmpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::taskpb::protobuf_taskpb_2eproto::InitDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  _RequestHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestHeader_default_instance_);_ResponseHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseHeader_default_instance_);_SimpleAlarmRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimpleAlarmRequest_default_instance_);_SimpleAlarmResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimpleAlarmResponse_default_instance_);_TaskAlarmRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskAlarmRequest_default_instance_);_TaskTimeout_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskTimeout_default_instance_);_TaskLongTimeRunning_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskLongTimeRunning_default_instance_);_TaskAlarmResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskAlarmResponse_default_instance_);_NodeRangeAlarmRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeRangeAlarmRequest_default_instance_);_RangeNoHeartbeatAlarm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeNoHeartbeatAlarm_default_instance_);_NodeNoHeartbeatAlarm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeNoHeartbeatAlarm_default_instance_);_NodeDiskSizeAlarm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeDiskSizeAlarm_default_instance_);_NodeLeaderCountAlarm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeLeaderCountAlarm_default_instance_);_NodeRangeAlarmResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeRangeAlarmResponse_default_instance_);_AliveRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AliveRequest_default_instance_);_AliveResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AliveResponse_default_instance_);_SimpleRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimpleRequest_default_instance_);_SimpleResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SimpleResponse_default_instance_);_SimpleAlarmRequest_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::RequestHeader*>(
      ::alarmpb::RequestHeader::internal_default_instance());
  _SimpleAlarmResponse_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::ResponseHeader*>(
      ::alarmpb::ResponseHeader::internal_default_instance());
  _TaskAlarmRequest_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::RequestHeader*>(
      ::alarmpb::RequestHeader::internal_default_instance());
  _TaskAlarmRequest_default_instance_._instance.get_mutable()->task_ = const_cast< ::taskpb::Task*>(
      ::taskpb::Task::internal_default_instance());
  _TaskAlarmRequest_default_instance_._instance.get_mutable()->task_timeout_alarm_ = const_cast< ::alarmpb::TaskTimeout*>(
      ::alarmpb::TaskTimeout::internal_default_instance());
  _TaskAlarmRequest_default_instance_._instance.get_mutable()->task_long_time_running_alarm_ = const_cast< ::alarmpb::TaskLongTimeRunning*>(
      ::alarmpb::TaskLongTimeRunning::internal_default_instance());
  _TaskAlarmResponse_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::ResponseHeader*>(
      ::alarmpb::ResponseHeader::internal_default_instance());
  _NodeRangeAlarmRequest_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::RequestHeader*>(
      ::alarmpb::RequestHeader::internal_default_instance());
  _NodeRangeAlarmRequest_default_instance_._instance.get_mutable()->range_no_hb_alarm_ = const_cast< ::alarmpb::RangeNoHeartbeatAlarm*>(
      ::alarmpb::RangeNoHeartbeatAlarm::internal_default_instance());
  _NodeRangeAlarmRequest_default_instance_._instance.get_mutable()->node_no_hb_alarm_ = const_cast< ::alarmpb::NodeNoHeartbeatAlarm*>(
      ::alarmpb::NodeNoHeartbeatAlarm::internal_default_instance());
  _NodeRangeAlarmRequest_default_instance_._instance.get_mutable()->node_disk_size_alarm_ = const_cast< ::alarmpb::NodeDiskSizeAlarm*>(
      ::alarmpb::NodeDiskSizeAlarm::internal_default_instance());
  _NodeRangeAlarmRequest_default_instance_._instance.get_mutable()->node_leader_count_alarm_ = const_cast< ::alarmpb::NodeLeaderCountAlarm*>(
      ::alarmpb::NodeLeaderCountAlarm::internal_default_instance());
  _RangeNoHeartbeatAlarm_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _NodeNoHeartbeatAlarm_default_instance_._instance.get_mutable()->node_ = const_cast< ::metapb::Node*>(
      ::metapb::Node::internal_default_instance());
  _NodeDiskSizeAlarm_default_instance_._instance.get_mutable()->node_ = const_cast< ::metapb::Node*>(
      ::metapb::Node::internal_default_instance());
  _NodeLeaderCountAlarm_default_instance_._instance.get_mutable()->node_ = const_cast< ::metapb::Node*>(
      ::metapb::Node::internal_default_instance());
  _NodeRangeAlarmResponse_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::ResponseHeader*>(
      ::alarmpb::ResponseHeader::internal_default_instance());
  _AliveRequest_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::RequestHeader*>(
      ::alarmpb::RequestHeader::internal_default_instance());
  _AliveResponse_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::ResponseHeader*>(
      ::alarmpb::ResponseHeader::internal_default_instance());
  _SimpleRequest_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::RequestHeader*>(
      ::alarmpb::RequestHeader::internal_default_instance());
  _SimpleResponse_default_instance_._instance.get_mutable()->head_ = const_cast< ::alarmpb::ResponseHeader*>(
      ::alarmpb::ResponseHeader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ralarmpb.proto\022\007alarmpb\032\014taskpb.proto\032\014"
      "metapb.proto\"#\n\rRequestHeader\022\022\n\ncluster"
      "_id\030\001 \001(\003\"-\n\016ResponseHeader\022\014\n\004code\030\001 \001("
      "\005\022\r\n\005error\030\002 \001(\t\"L\n\022SimpleAlarmRequest\022$"
      "\n\004head\030\001 \001(\0132\026.alarmpb.RequestHeader\022\020\n\010"
      "Describe\030\002 \001(\t\"<\n\023SimpleAlarmResponse\022%\n"
      "\004head\030\001 \001(\0132\027.alarmpb.ResponseHeader\"\227\002\n"
      "\020TaskAlarmRequest\022$\n\004head\030\001 \001(\0132\026.alarmp"
      "b.RequestHeader\022$\n\004type\030\002 \001(\0162\026.alarmpb."
      "TaskAlarmType\022\032\n\004task\030\003 \001(\0132\014.taskpb.Tas"
      "k\0220\n\022task_timeout_alarm\030\004 \001(\0132\024.alarmpb."
      "TaskTimeout\022B\n\034task_long_time_running_al"
      "arm\030\005 \001(\0132\034.alarmpb.TaskLongTimeRunning\022"
      "\020\n\010Describe\030\006 \001(\t\022\023\n\013sample_json\030\n \003(\t\"+"
      "\n\013TaskTimeout\022\r\n\005start\030\002 \001(\t\022\r\n\005takes\030\003 "
      "\001(\003\"3\n\023TaskLongTimeRunning\022\r\n\005start\030\002 \001("
      "\t\022\r\n\005takes\030\003 \001(\003\":\n\021TaskAlarmResponse\022%\n"
      "\004head\030\001 \001(\0132\027.alarmpb.ResponseHeader\"\375\002\n"
      "\025NodeRangeAlarmRequest\022$\n\004head\030\001 \001(\0132\026.a"
      "larmpb.RequestHeader\022)\n\004type\030\002 \001(\0162\033.ala"
      "rmpb.NodeRangeAlarmType\0229\n\021range_no_hb_a"
      "larm\030\003 \001(\0132\036.alarmpb.RangeNoHeartbeatAla"
      "rm\0227\n\020node_no_hb_alarm\030\004 \001(\0132\035.alarmpb.N"
      "odeNoHeartbeatAlarm\0228\n\024node_disk_size_al"
      "arm\030\005 \001(\0132\032.alarmpb.NodeDiskSizeAlarm\022>\n"
      "\027node_leader_count_alarm\030\006 \001(\0132\035.alarmpb"
      ".NodeLeaderCountAlarm\022\020\n\010Describe\030\007 \001(\t\022"
      "\023\n\013sample_json\030\n \003(\t\"R\n\025RangeNoHeartbeat"
      "Alarm\022\034\n\005range\030\001 \001(\0132\r.metapb.Range\022\033\n\023l"
      "ast_heartbeat_time\030\002 \001(\t\"O\n\024NodeNoHeartb"
      "eatAlarm\022\032\n\004node\030\001 \001(\0132\014.metapb.Node\022\033\n\023"
      "last_heartbeat_time\030\002 \001(\t\"B\n\021NodeDiskSiz"
      "eAlarm\022\032\n\004node\030\001 \001(\0132\014.metapb.Node\022\021\n\tdi"
      "sk_size\030\002 \001(\003\"H\n\024NodeLeaderCountAlarm\022\032\n"
      "\004node\030\001 \001(\0132\014.metapb.Node\022\024\n\014leader_coun"
      "t\030\002 \001(\003\"\?\n\026NodeRangeAlarmResponse\022%\n\004hea"
      "d\030\001 \001(\0132\027.alarmpb.ResponseHeader\"I\n\014Aliv"
      "eRequest\022$\n\004head\030\001 \001(\0132\026.alarmpb.Request"
      "Header\022\023\n\013sample_json\030\n \003(\t\"6\n\rAliveResp"
      "onse\022%\n\004head\030\001 \001(\0132\027.alarmpb.ResponseHea"
      "der\"j\n\rSimpleRequest\022$\n\004head\030\001 \001(\0132\026.ala"
      "rmpb.RequestHeader\022\r\n\005title\030\002 \001(\t\022\017\n\007con"
      "tent\030\003 \001(\t\022\023\n\013sample_json\030\n \003(\t\"7\n\016Simpl"
      "eResponse\022%\n\004head\030\001 \001(\0132\027.alarmpb.Respon"
      "seHeader*3\n\rTaskAlarmType\022\013\n\007TIMEOUT\020\000\022\025"
      "\n\021LONG_TIME_RUNNING\020\001*n\n\022NodeRangeAlarmT"
      "ype\022\026\n\022RANGE_NO_HEARTBEAT\020\000\022\025\n\021NODE_NO_H"
      "EARTBEAT\020\001\022\022\n\016NODE_DISK_SIZE\020\002\022\025\n\021NODE_L"
      "EADER_COUNT\020\0032\243\002\n\005Alarm\022D\n\tTaskAlarm\022\031.a"
      "larmpb.TaskAlarmRequest\032\032.alarmpb.TaskAl"
      "armResponse\"\000\022S\n\016NodeRangeAlarm\022\036.alarmp"
      "b.NodeRangeAlarmRequest\032\037.alarmpb.NodeRa"
      "ngeAlarmResponse\"\000\022=\n\nAliveAlarm\022\025.alarm"
      "pb.AliveRequest\032\026.alarmpb.AliveResponse\""
      "\000\022@\n\013SimpleAlarm\022\026.alarmpb.SimpleRequest"
      "\032\027.alarmpb.SimpleResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alarmpb.proto", &protobuf_RegisterTypes);
  ::taskpb::protobuf_taskpb_2eproto::AddDescriptors();
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_alarmpb_2eproto

const ::google::protobuf::EnumDescriptor* TaskAlarmType_descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_enum_descriptors[0];
}
bool TaskAlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeRangeAlarmType_descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_enum_descriptors[1];
}
bool NodeRangeAlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:alarmpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cluster_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cluster_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.RequestHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// int64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:alarmpb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::int64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.RequestHeader.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kCodeFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:alarmpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.ResponseHeader.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.ResponseHeader.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.ResponseHeader.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.ResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// int32 code = 1;
void ResponseHeader::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ResponseHeader::code() const {
  // @@protoc_insertion_point(field_get:alarmpb.ResponseHeader.code)
  return code_;
}
void ResponseHeader::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.ResponseHeader.code)
}

// string error = 2;
void ResponseHeader::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:alarmpb.ResponseHeader.error)
  return error_.GetNoArena();
}
void ResponseHeader::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.ResponseHeader.error)
}
#if LANG_CXX11
void ResponseHeader::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.ResponseHeader.error)
}
#endif
void ResponseHeader::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.ResponseHeader.error)
}
void ResponseHeader::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.ResponseHeader.error)
}
::std::string* ResponseHeader::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.ResponseHeader.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:alarmpb.ResponseHeader.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResponseHeader::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.ResponseHeader.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleAlarmRequest::kHeadFieldNumber;
const int SimpleAlarmRequest::kDescribeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleAlarmRequest::SimpleAlarmRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.SimpleAlarmRequest)
}
SimpleAlarmRequest::SimpleAlarmRequest(const SimpleAlarmRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.describe().size() > 0) {
    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    head_ = new ::alarmpb::RequestHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.SimpleAlarmRequest)
}

void SimpleAlarmRequest::SharedCtor() {
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  _cached_size_ = 0;
}

SimpleAlarmRequest::~SimpleAlarmRequest() {
  // @@protoc_insertion_point(destructor:alarmpb.SimpleAlarmRequest)
  SharedDtor();
}

void SimpleAlarmRequest::SharedDtor() {
  describe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void SimpleAlarmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleAlarmRequest::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleAlarmRequest& SimpleAlarmRequest::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleAlarmRequest* SimpleAlarmRequest::New(::google::protobuf::Arena* arena) const {
  SimpleAlarmRequest* n = new SimpleAlarmRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleAlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.SimpleAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool SimpleAlarmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.SimpleAlarmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.RequestHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Describe = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->describe().data(), static_cast<int>(this->describe().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.SimpleAlarmRequest.Describe"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.SimpleAlarmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.SimpleAlarmRequest)
  return false;
#undef DO_
}

void SimpleAlarmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.SimpleAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string Describe = 2;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleAlarmRequest.Describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->describe(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.SimpleAlarmRequest)
}

::google::protobuf::uint8* SimpleAlarmRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.SimpleAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string Describe = 2;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleAlarmRequest.Describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->describe(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.SimpleAlarmRequest)
  return target;
}

size_t SimpleAlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.SimpleAlarmRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Describe = 2;
  if (this->describe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());
  }

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleAlarmRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.SimpleAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleAlarmRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleAlarmRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.SimpleAlarmRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.SimpleAlarmRequest)
    MergeFrom(*source);
  }
}

void SimpleAlarmRequest::MergeFrom(const SimpleAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.SimpleAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.describe().size() > 0) {

    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    mutable_head()->::alarmpb::RequestHeader::MergeFrom(from.head());
  }
}

void SimpleAlarmRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.SimpleAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAlarmRequest::CopyFrom(const SimpleAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.SimpleAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAlarmRequest::IsInitialized() const {
  return true;
}

void SimpleAlarmRequest::Swap(SimpleAlarmRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleAlarmRequest::InternalSwap(SimpleAlarmRequest* other) {
  using std::swap;
  describe_.Swap(&other->describe_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleAlarmRequest::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleAlarmRequest

// .alarmpb.RequestHeader head = 1;
bool SimpleAlarmRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void SimpleAlarmRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::RequestHeader& SimpleAlarmRequest::head() const {
  const ::alarmpb::RequestHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.SimpleAlarmRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RequestHeader*>(
      &::alarmpb::_RequestHeader_default_instance_);
}
::alarmpb::RequestHeader* SimpleAlarmRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleAlarmRequest.head)
  return head_;
}
::alarmpb::RequestHeader* SimpleAlarmRequest::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleAlarmRequest.head)
  
  ::alarmpb::RequestHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void SimpleAlarmRequest::set_allocated_head(::alarmpb::RequestHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleAlarmRequest.head)
}

// string Describe = 2;
void SimpleAlarmRequest::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimpleAlarmRequest::describe() const {
  // @@protoc_insertion_point(field_get:alarmpb.SimpleAlarmRequest.Describe)
  return describe_.GetNoArena();
}
void SimpleAlarmRequest::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.SimpleAlarmRequest.Describe)
}
#if LANG_CXX11
void SimpleAlarmRequest::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.SimpleAlarmRequest.Describe)
}
#endif
void SimpleAlarmRequest::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.SimpleAlarmRequest.Describe)
}
void SimpleAlarmRequest::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.SimpleAlarmRequest.Describe)
}
::std::string* SimpleAlarmRequest::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleAlarmRequest.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimpleAlarmRequest::release_describe() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleAlarmRequest.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimpleAlarmRequest::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleAlarmRequest.Describe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleAlarmResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleAlarmResponse::SimpleAlarmResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.SimpleAlarmResponse)
}
SimpleAlarmResponse::SimpleAlarmResponse(const SimpleAlarmResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::ResponseHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.SimpleAlarmResponse)
}

void SimpleAlarmResponse::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

SimpleAlarmResponse::~SimpleAlarmResponse() {
  // @@protoc_insertion_point(destructor:alarmpb.SimpleAlarmResponse)
  SharedDtor();
}

void SimpleAlarmResponse::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void SimpleAlarmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleAlarmResponse::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleAlarmResponse& SimpleAlarmResponse::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleAlarmResponse* SimpleAlarmResponse::New(::google::protobuf::Arena* arena) const {
  SimpleAlarmResponse* n = new SimpleAlarmResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleAlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.SimpleAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool SimpleAlarmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.SimpleAlarmResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.ResponseHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.SimpleAlarmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.SimpleAlarmResponse)
  return false;
#undef DO_
}

void SimpleAlarmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.SimpleAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.SimpleAlarmResponse)
}

::google::protobuf::uint8* SimpleAlarmResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.SimpleAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.SimpleAlarmResponse)
  return target;
}

size_t SimpleAlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.SimpleAlarmResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleAlarmResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.SimpleAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleAlarmResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleAlarmResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.SimpleAlarmResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.SimpleAlarmResponse)
    MergeFrom(*source);
  }
}

void SimpleAlarmResponse::MergeFrom(const SimpleAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.SimpleAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::alarmpb::ResponseHeader::MergeFrom(from.head());
  }
}

void SimpleAlarmResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.SimpleAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAlarmResponse::CopyFrom(const SimpleAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.SimpleAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAlarmResponse::IsInitialized() const {
  return true;
}

void SimpleAlarmResponse::Swap(SimpleAlarmResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleAlarmResponse::InternalSwap(SimpleAlarmResponse* other) {
  using std::swap;
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleAlarmResponse::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleAlarmResponse

// .alarmpb.ResponseHeader head = 1;
bool SimpleAlarmResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void SimpleAlarmResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::ResponseHeader& SimpleAlarmResponse::head() const {
  const ::alarmpb::ResponseHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.SimpleAlarmResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::ResponseHeader*>(
      &::alarmpb::_ResponseHeader_default_instance_);
}
::alarmpb::ResponseHeader* SimpleAlarmResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleAlarmResponse.head)
  return head_;
}
::alarmpb::ResponseHeader* SimpleAlarmResponse::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleAlarmResponse.head)
  
  ::alarmpb::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void SimpleAlarmResponse::set_allocated_head(::alarmpb::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleAlarmResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskAlarmRequest::kHeadFieldNumber;
const int TaskAlarmRequest::kTypeFieldNumber;
const int TaskAlarmRequest::kTaskFieldNumber;
const int TaskAlarmRequest::kTaskTimeoutAlarmFieldNumber;
const int TaskAlarmRequest::kTaskLongTimeRunningAlarmFieldNumber;
const int TaskAlarmRequest::kDescribeFieldNumber;
const int TaskAlarmRequest::kSampleJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskAlarmRequest::TaskAlarmRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.TaskAlarmRequest)
}
TaskAlarmRequest::TaskAlarmRequest(const TaskAlarmRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sample_json_(from.sample_json_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.describe().size() > 0) {
    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    head_ = new ::alarmpb::RequestHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_task()) {
    task_ = new ::taskpb::Task(*from.task_);
  } else {
    task_ = NULL;
  }
  if (from.has_task_timeout_alarm()) {
    task_timeout_alarm_ = new ::alarmpb::TaskTimeout(*from.task_timeout_alarm_);
  } else {
    task_timeout_alarm_ = NULL;
  }
  if (from.has_task_long_time_running_alarm()) {
    task_long_time_running_alarm_ = new ::alarmpb::TaskLongTimeRunning(*from.task_long_time_running_alarm_);
  } else {
    task_long_time_running_alarm_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.TaskAlarmRequest)
}

void TaskAlarmRequest::SharedCtor() {
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&head_)) + sizeof(type_));
  _cached_size_ = 0;
}

TaskAlarmRequest::~TaskAlarmRequest() {
  // @@protoc_insertion_point(destructor:alarmpb.TaskAlarmRequest)
  SharedDtor();
}

void TaskAlarmRequest::SharedDtor() {
  describe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete task_timeout_alarm_;
  if (this != internal_default_instance()) delete task_long_time_running_alarm_;
}

void TaskAlarmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskAlarmRequest::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskAlarmRequest& TaskAlarmRequest::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskAlarmRequest* TaskAlarmRequest::New(::google::protobuf::Arena* arena) const {
  TaskAlarmRequest* n = new TaskAlarmRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskAlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.TaskAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_json_.Clear();
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_ != NULL) {
    delete task_;
  }
  task_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_timeout_alarm_ != NULL) {
    delete task_timeout_alarm_;
  }
  task_timeout_alarm_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_long_time_running_alarm_ != NULL) {
    delete task_long_time_running_alarm_;
  }
  task_long_time_running_alarm_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TaskAlarmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.TaskAlarmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.RequestHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.TaskAlarmType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::alarmpb::TaskAlarmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .taskpb.Task task = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.TaskTimeout task_timeout_alarm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_timeout_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.TaskLongTimeRunning task_long_time_running_alarm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_long_time_running_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Describe = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->describe().data(), static_cast<int>(this->describe().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.TaskAlarmRequest.Describe"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sample_json = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sample_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_json(this->sample_json_size() - 1).data(),
            static_cast<int>(this->sample_json(this->sample_json_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.TaskAlarmRequest.sample_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.TaskAlarmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.TaskAlarmRequest)
  return false;
#undef DO_
}

void TaskAlarmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.TaskAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .alarmpb.TaskAlarmType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .taskpb.Task task = 3;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->task_, output);
  }

  // .alarmpb.TaskTimeout task_timeout_alarm = 4;
  if (this->has_task_timeout_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->task_timeout_alarm_, output);
  }

  // .alarmpb.TaskLongTimeRunning task_long_time_running_alarm = 5;
  if (this->has_task_long_time_running_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->task_long_time_running_alarm_, output);
  }

  // string Describe = 6;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskAlarmRequest.Describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->describe(), output);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskAlarmRequest.sample_json");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sample_json(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.TaskAlarmRequest)
}

::google::protobuf::uint8* TaskAlarmRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.TaskAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .alarmpb.TaskAlarmType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .taskpb.Task task = 3;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->task_, deterministic, target);
  }

  // .alarmpb.TaskTimeout task_timeout_alarm = 4;
  if (this->has_task_timeout_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->task_timeout_alarm_, deterministic, target);
  }

  // .alarmpb.TaskLongTimeRunning task_long_time_running_alarm = 5;
  if (this->has_task_long_time_running_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->task_long_time_running_alarm_, deterministic, target);
  }

  // string Describe = 6;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskAlarmRequest.Describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->describe(), target);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskAlarmRequest.sample_json");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->sample_json(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.TaskAlarmRequest)
  return target;
}

size_t TaskAlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.TaskAlarmRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sample_json = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sample_json_size());
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sample_json(i));
  }

  // string Describe = 6;
  if (this->describe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());
  }

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .taskpb.Task task = 3;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_);
  }

  // .alarmpb.TaskTimeout task_timeout_alarm = 4;
  if (this->has_task_timeout_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_timeout_alarm_);
  }

  // .alarmpb.TaskLongTimeRunning task_long_time_running_alarm = 5;
  if (this->has_task_long_time_running_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_long_time_running_alarm_);
  }

  // .alarmpb.TaskAlarmType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskAlarmRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.TaskAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskAlarmRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskAlarmRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.TaskAlarmRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.TaskAlarmRequest)
    MergeFrom(*source);
  }
}

void TaskAlarmRequest::MergeFrom(const TaskAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.TaskAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_json_.MergeFrom(from.sample_json_);
  if (from.describe().size() > 0) {

    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    mutable_head()->::alarmpb::RequestHeader::MergeFrom(from.head());
  }
  if (from.has_task()) {
    mutable_task()->::taskpb::Task::MergeFrom(from.task());
  }
  if (from.has_task_timeout_alarm()) {
    mutable_task_timeout_alarm()->::alarmpb::TaskTimeout::MergeFrom(from.task_timeout_alarm());
  }
  if (from.has_task_long_time_running_alarm()) {
    mutable_task_long_time_running_alarm()->::alarmpb::TaskLongTimeRunning::MergeFrom(from.task_long_time_running_alarm());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TaskAlarmRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.TaskAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAlarmRequest::CopyFrom(const TaskAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.TaskAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAlarmRequest::IsInitialized() const {
  return true;
}

void TaskAlarmRequest::Swap(TaskAlarmRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskAlarmRequest::InternalSwap(TaskAlarmRequest* other) {
  using std::swap;
  sample_json_.InternalSwap(&other->sample_json_);
  describe_.Swap(&other->describe_);
  swap(head_, other->head_);
  swap(task_, other->task_);
  swap(task_timeout_alarm_, other->task_timeout_alarm_);
  swap(task_long_time_running_alarm_, other->task_long_time_running_alarm_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskAlarmRequest::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskAlarmRequest

// .alarmpb.RequestHeader head = 1;
bool TaskAlarmRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void TaskAlarmRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::RequestHeader& TaskAlarmRequest::head() const {
  const ::alarmpb::RequestHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RequestHeader*>(
      &::alarmpb::_RequestHeader_default_instance_);
}
::alarmpb::RequestHeader* TaskAlarmRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.head)
  return head_;
}
::alarmpb::RequestHeader* TaskAlarmRequest::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmRequest.head)
  
  ::alarmpb::RequestHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void TaskAlarmRequest::set_allocated_head(::alarmpb::RequestHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmRequest.head)
}

// .alarmpb.TaskAlarmType type = 2;
void TaskAlarmRequest::clear_type() {
  type_ = 0;
}
::alarmpb::TaskAlarmType TaskAlarmRequest::type() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.type)
  return static_cast< ::alarmpb::TaskAlarmType >(type_);
}
void TaskAlarmRequest::set_type(::alarmpb::TaskAlarmType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.TaskAlarmRequest.type)
}

// .taskpb.Task task = 3;
bool TaskAlarmRequest::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
void TaskAlarmRequest::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}
const ::taskpb::Task& TaskAlarmRequest::task() const {
  const ::taskpb::Task* p = task_;
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.task)
  return p != NULL ? *p : *reinterpret_cast<const ::taskpb::Task*>(
      &::taskpb::_Task_default_instance_);
}
::taskpb::Task* TaskAlarmRequest::mutable_task() {
  
  if (task_ == NULL) {
    task_ = new ::taskpb::Task;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.task)
  return task_;
}
::taskpb::Task* TaskAlarmRequest::release_task() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmRequest.task)
  
  ::taskpb::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void TaskAlarmRequest::set_allocated_task(::taskpb::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmRequest.task)
}

// .alarmpb.TaskTimeout task_timeout_alarm = 4;
bool TaskAlarmRequest::has_task_timeout_alarm() const {
  return this != internal_default_instance() && task_timeout_alarm_ != NULL;
}
void TaskAlarmRequest::clear_task_timeout_alarm() {
  if (GetArenaNoVirtual() == NULL && task_timeout_alarm_ != NULL) delete task_timeout_alarm_;
  task_timeout_alarm_ = NULL;
}
const ::alarmpb::TaskTimeout& TaskAlarmRequest::task_timeout_alarm() const {
  const ::alarmpb::TaskTimeout* p = task_timeout_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.task_timeout_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::TaskTimeout*>(
      &::alarmpb::_TaskTimeout_default_instance_);
}
::alarmpb::TaskTimeout* TaskAlarmRequest::mutable_task_timeout_alarm() {
  
  if (task_timeout_alarm_ == NULL) {
    task_timeout_alarm_ = new ::alarmpb::TaskTimeout;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.task_timeout_alarm)
  return task_timeout_alarm_;
}
::alarmpb::TaskTimeout* TaskAlarmRequest::release_task_timeout_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmRequest.task_timeout_alarm)
  
  ::alarmpb::TaskTimeout* temp = task_timeout_alarm_;
  task_timeout_alarm_ = NULL;
  return temp;
}
void TaskAlarmRequest::set_allocated_task_timeout_alarm(::alarmpb::TaskTimeout* task_timeout_alarm) {
  delete task_timeout_alarm_;
  task_timeout_alarm_ = task_timeout_alarm;
  if (task_timeout_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmRequest.task_timeout_alarm)
}

// .alarmpb.TaskLongTimeRunning task_long_time_running_alarm = 5;
bool TaskAlarmRequest::has_task_long_time_running_alarm() const {
  return this != internal_default_instance() && task_long_time_running_alarm_ != NULL;
}
void TaskAlarmRequest::clear_task_long_time_running_alarm() {
  if (GetArenaNoVirtual() == NULL && task_long_time_running_alarm_ != NULL) delete task_long_time_running_alarm_;
  task_long_time_running_alarm_ = NULL;
}
const ::alarmpb::TaskLongTimeRunning& TaskAlarmRequest::task_long_time_running_alarm() const {
  const ::alarmpb::TaskLongTimeRunning* p = task_long_time_running_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.task_long_time_running_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::TaskLongTimeRunning*>(
      &::alarmpb::_TaskLongTimeRunning_default_instance_);
}
::alarmpb::TaskLongTimeRunning* TaskAlarmRequest::mutable_task_long_time_running_alarm() {
  
  if (task_long_time_running_alarm_ == NULL) {
    task_long_time_running_alarm_ = new ::alarmpb::TaskLongTimeRunning;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.task_long_time_running_alarm)
  return task_long_time_running_alarm_;
}
::alarmpb::TaskLongTimeRunning* TaskAlarmRequest::release_task_long_time_running_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmRequest.task_long_time_running_alarm)
  
  ::alarmpb::TaskLongTimeRunning* temp = task_long_time_running_alarm_;
  task_long_time_running_alarm_ = NULL;
  return temp;
}
void TaskAlarmRequest::set_allocated_task_long_time_running_alarm(::alarmpb::TaskLongTimeRunning* task_long_time_running_alarm) {
  delete task_long_time_running_alarm_;
  task_long_time_running_alarm_ = task_long_time_running_alarm;
  if (task_long_time_running_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmRequest.task_long_time_running_alarm)
}

// string Describe = 6;
void TaskAlarmRequest::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskAlarmRequest::describe() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.Describe)
  return describe_.GetNoArena();
}
void TaskAlarmRequest::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.TaskAlarmRequest.Describe)
}
#if LANG_CXX11
void TaskAlarmRequest::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.TaskAlarmRequest.Describe)
}
#endif
void TaskAlarmRequest::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.TaskAlarmRequest.Describe)
}
void TaskAlarmRequest::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.TaskAlarmRequest.Describe)
}
::std::string* TaskAlarmRequest::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskAlarmRequest::release_describe() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmRequest.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskAlarmRequest::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmRequest.Describe)
}

// repeated string sample_json = 10;
int TaskAlarmRequest::sample_json_size() const {
  return sample_json_.size();
}
void TaskAlarmRequest::clear_sample_json() {
  sample_json_.Clear();
}
const ::std::string& TaskAlarmRequest::sample_json(int index) const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmRequest.sample_json)
  return sample_json_.Get(index);
}
::std::string* TaskAlarmRequest::mutable_sample_json(int index) {
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmRequest.sample_json)
  return sample_json_.Mutable(index);
}
void TaskAlarmRequest::set_sample_json(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:alarmpb.TaskAlarmRequest.sample_json)
  sample_json_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TaskAlarmRequest::set_sample_json(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:alarmpb.TaskAlarmRequest.sample_json)
  sample_json_.Mutable(index)->assign(std::move(value));
}
#endif
void TaskAlarmRequest::set_sample_json(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alarmpb.TaskAlarmRequest.sample_json)
}
void TaskAlarmRequest::set_sample_json(int index, const char* value, size_t size) {
  sample_json_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alarmpb.TaskAlarmRequest.sample_json)
}
::std::string* TaskAlarmRequest::add_sample_json() {
  // @@protoc_insertion_point(field_add_mutable:alarmpb.TaskAlarmRequest.sample_json)
  return sample_json_.Add();
}
void TaskAlarmRequest::add_sample_json(const ::std::string& value) {
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alarmpb.TaskAlarmRequest.sample_json)
}
#if LANG_CXX11
void TaskAlarmRequest::add_sample_json(::std::string&& value) {
  sample_json_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alarmpb.TaskAlarmRequest.sample_json)
}
#endif
void TaskAlarmRequest::add_sample_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alarmpb.TaskAlarmRequest.sample_json)
}
void TaskAlarmRequest::add_sample_json(const char* value, size_t size) {
  sample_json_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alarmpb.TaskAlarmRequest.sample_json)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskAlarmRequest::sample_json() const {
  // @@protoc_insertion_point(field_list:alarmpb.TaskAlarmRequest.sample_json)
  return sample_json_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TaskAlarmRequest::mutable_sample_json() {
  // @@protoc_insertion_point(field_mutable_list:alarmpb.TaskAlarmRequest.sample_json)
  return &sample_json_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskTimeout::kStartFieldNumber;
const int TaskTimeout::kTakesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskTimeout::TaskTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.TaskTimeout)
}
TaskTimeout::TaskTimeout(const TaskTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  takes_ = from.takes_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.TaskTimeout)
}

void TaskTimeout::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  takes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TaskTimeout::~TaskTimeout() {
  // @@protoc_insertion_point(destructor:alarmpb.TaskTimeout)
  SharedDtor();
}

void TaskTimeout::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskTimeout::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskTimeout& TaskTimeout::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskTimeout* TaskTimeout::New(::google::protobuf::Arena* arena) const {
  TaskTimeout* n = new TaskTimeout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.TaskTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  takes_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TaskTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.TaskTimeout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start().data(), static_cast<int>(this->start().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.TaskTimeout.start"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 takes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &takes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.TaskTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.TaskTimeout)
  return false;
#undef DO_
}

void TaskTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.TaskTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 2;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskTimeout.start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start(), output);
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->takes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.TaskTimeout)
}

::google::protobuf::uint8* TaskTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.TaskTimeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 2;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskTimeout.start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start(), target);
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->takes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.TaskTimeout)
  return target;
}

size_t TaskTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.TaskTimeout)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string start = 2;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start());
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->takes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.TaskTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.TaskTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.TaskTimeout)
    MergeFrom(*source);
  }
}

void TaskTimeout::MergeFrom(const TaskTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.TaskTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.takes() != 0) {
    set_takes(from.takes());
  }
}

void TaskTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.TaskTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskTimeout::CopyFrom(const TaskTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.TaskTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTimeout::IsInitialized() const {
  return true;
}

void TaskTimeout::Swap(TaskTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskTimeout::InternalSwap(TaskTimeout* other) {
  using std::swap;
  start_.Swap(&other->start_);
  swap(takes_, other->takes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskTimeout::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskTimeout

// string start = 2;
void TaskTimeout::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskTimeout::start() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskTimeout.start)
  return start_.GetNoArena();
}
void TaskTimeout::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.TaskTimeout.start)
}
#if LANG_CXX11
void TaskTimeout::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.TaskTimeout.start)
}
#endif
void TaskTimeout::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.TaskTimeout.start)
}
void TaskTimeout::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.TaskTimeout.start)
}
::std::string* TaskTimeout::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskTimeout.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskTimeout::release_start() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskTimeout.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskTimeout::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskTimeout.start)
}

// int64 takes = 3;
void TaskTimeout::clear_takes() {
  takes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskTimeout::takes() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskTimeout.takes)
  return takes_;
}
void TaskTimeout::set_takes(::google::protobuf::int64 value) {
  
  takes_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.TaskTimeout.takes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskLongTimeRunning::kStartFieldNumber;
const int TaskLongTimeRunning::kTakesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskLongTimeRunning::TaskLongTimeRunning()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.TaskLongTimeRunning)
}
TaskLongTimeRunning::TaskLongTimeRunning(const TaskLongTimeRunning& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  takes_ = from.takes_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.TaskLongTimeRunning)
}

void TaskLongTimeRunning::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  takes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TaskLongTimeRunning::~TaskLongTimeRunning() {
  // @@protoc_insertion_point(destructor:alarmpb.TaskLongTimeRunning)
  SharedDtor();
}

void TaskLongTimeRunning::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskLongTimeRunning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskLongTimeRunning::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskLongTimeRunning& TaskLongTimeRunning::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskLongTimeRunning* TaskLongTimeRunning::New(::google::protobuf::Arena* arena) const {
  TaskLongTimeRunning* n = new TaskLongTimeRunning;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskLongTimeRunning::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.TaskLongTimeRunning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  takes_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TaskLongTimeRunning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.TaskLongTimeRunning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start().data(), static_cast<int>(this->start().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.TaskLongTimeRunning.start"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 takes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &takes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.TaskLongTimeRunning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.TaskLongTimeRunning)
  return false;
#undef DO_
}

void TaskLongTimeRunning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.TaskLongTimeRunning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 2;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskLongTimeRunning.start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start(), output);
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->takes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.TaskLongTimeRunning)
}

::google::protobuf::uint8* TaskLongTimeRunning::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.TaskLongTimeRunning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 2;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start().data(), static_cast<int>(this->start().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.TaskLongTimeRunning.start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start(), target);
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->takes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.TaskLongTimeRunning)
  return target;
}

size_t TaskLongTimeRunning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.TaskLongTimeRunning)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string start = 2;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start());
  }

  // int64 takes = 3;
  if (this->takes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->takes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskLongTimeRunning::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.TaskLongTimeRunning)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskLongTimeRunning* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskLongTimeRunning>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.TaskLongTimeRunning)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.TaskLongTimeRunning)
    MergeFrom(*source);
  }
}

void TaskLongTimeRunning::MergeFrom(const TaskLongTimeRunning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.TaskLongTimeRunning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.takes() != 0) {
    set_takes(from.takes());
  }
}

void TaskLongTimeRunning::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.TaskLongTimeRunning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskLongTimeRunning::CopyFrom(const TaskLongTimeRunning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.TaskLongTimeRunning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskLongTimeRunning::IsInitialized() const {
  return true;
}

void TaskLongTimeRunning::Swap(TaskLongTimeRunning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskLongTimeRunning::InternalSwap(TaskLongTimeRunning* other) {
  using std::swap;
  start_.Swap(&other->start_);
  swap(takes_, other->takes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskLongTimeRunning::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskLongTimeRunning

// string start = 2;
void TaskLongTimeRunning::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskLongTimeRunning::start() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskLongTimeRunning.start)
  return start_.GetNoArena();
}
void TaskLongTimeRunning::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.TaskLongTimeRunning.start)
}
#if LANG_CXX11
void TaskLongTimeRunning::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.TaskLongTimeRunning.start)
}
#endif
void TaskLongTimeRunning::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.TaskLongTimeRunning.start)
}
void TaskLongTimeRunning::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.TaskLongTimeRunning.start)
}
::std::string* TaskLongTimeRunning::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskLongTimeRunning.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskLongTimeRunning::release_start() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskLongTimeRunning.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskLongTimeRunning::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskLongTimeRunning.start)
}

// int64 takes = 3;
void TaskLongTimeRunning::clear_takes() {
  takes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskLongTimeRunning::takes() const {
  // @@protoc_insertion_point(field_get:alarmpb.TaskLongTimeRunning.takes)
  return takes_;
}
void TaskLongTimeRunning::set_takes(::google::protobuf::int64 value) {
  
  takes_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.TaskLongTimeRunning.takes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskAlarmResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskAlarmResponse::TaskAlarmResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.TaskAlarmResponse)
}
TaskAlarmResponse::TaskAlarmResponse(const TaskAlarmResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::ResponseHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.TaskAlarmResponse)
}

void TaskAlarmResponse::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

TaskAlarmResponse::~TaskAlarmResponse() {
  // @@protoc_insertion_point(destructor:alarmpb.TaskAlarmResponse)
  SharedDtor();
}

void TaskAlarmResponse::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void TaskAlarmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskAlarmResponse::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskAlarmResponse& TaskAlarmResponse::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskAlarmResponse* TaskAlarmResponse::New(::google::protobuf::Arena* arena) const {
  TaskAlarmResponse* n = new TaskAlarmResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskAlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.TaskAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool TaskAlarmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.TaskAlarmResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.ResponseHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.TaskAlarmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.TaskAlarmResponse)
  return false;
#undef DO_
}

void TaskAlarmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.TaskAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.TaskAlarmResponse)
}

::google::protobuf::uint8* TaskAlarmResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.TaskAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.TaskAlarmResponse)
  return target;
}

size_t TaskAlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.TaskAlarmResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskAlarmResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.TaskAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskAlarmResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskAlarmResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.TaskAlarmResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.TaskAlarmResponse)
    MergeFrom(*source);
  }
}

void TaskAlarmResponse::MergeFrom(const TaskAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.TaskAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::alarmpb::ResponseHeader::MergeFrom(from.head());
  }
}

void TaskAlarmResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.TaskAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskAlarmResponse::CopyFrom(const TaskAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.TaskAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAlarmResponse::IsInitialized() const {
  return true;
}

void TaskAlarmResponse::Swap(TaskAlarmResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskAlarmResponse::InternalSwap(TaskAlarmResponse* other) {
  using std::swap;
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskAlarmResponse::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskAlarmResponse

// .alarmpb.ResponseHeader head = 1;
bool TaskAlarmResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void TaskAlarmResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::ResponseHeader& TaskAlarmResponse::head() const {
  const ::alarmpb::ResponseHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.TaskAlarmResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::ResponseHeader*>(
      &::alarmpb::_ResponseHeader_default_instance_);
}
::alarmpb::ResponseHeader* TaskAlarmResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.TaskAlarmResponse.head)
  return head_;
}
::alarmpb::ResponseHeader* TaskAlarmResponse::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.TaskAlarmResponse.head)
  
  ::alarmpb::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void TaskAlarmResponse::set_allocated_head(::alarmpb::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.TaskAlarmResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRangeAlarmRequest::kHeadFieldNumber;
const int NodeRangeAlarmRequest::kTypeFieldNumber;
const int NodeRangeAlarmRequest::kRangeNoHbAlarmFieldNumber;
const int NodeRangeAlarmRequest::kNodeNoHbAlarmFieldNumber;
const int NodeRangeAlarmRequest::kNodeDiskSizeAlarmFieldNumber;
const int NodeRangeAlarmRequest::kNodeLeaderCountAlarmFieldNumber;
const int NodeRangeAlarmRequest::kDescribeFieldNumber;
const int NodeRangeAlarmRequest::kSampleJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRangeAlarmRequest::NodeRangeAlarmRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.NodeRangeAlarmRequest)
}
NodeRangeAlarmRequest::NodeRangeAlarmRequest(const NodeRangeAlarmRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sample_json_(from.sample_json_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.describe().size() > 0) {
    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    head_ = new ::alarmpb::RequestHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_range_no_hb_alarm()) {
    range_no_hb_alarm_ = new ::alarmpb::RangeNoHeartbeatAlarm(*from.range_no_hb_alarm_);
  } else {
    range_no_hb_alarm_ = NULL;
  }
  if (from.has_node_no_hb_alarm()) {
    node_no_hb_alarm_ = new ::alarmpb::NodeNoHeartbeatAlarm(*from.node_no_hb_alarm_);
  } else {
    node_no_hb_alarm_ = NULL;
  }
  if (from.has_node_disk_size_alarm()) {
    node_disk_size_alarm_ = new ::alarmpb::NodeDiskSizeAlarm(*from.node_disk_size_alarm_);
  } else {
    node_disk_size_alarm_ = NULL;
  }
  if (from.has_node_leader_count_alarm()) {
    node_leader_count_alarm_ = new ::alarmpb::NodeLeaderCountAlarm(*from.node_leader_count_alarm_);
  } else {
    node_leader_count_alarm_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.NodeRangeAlarmRequest)
}

void NodeRangeAlarmRequest::SharedCtor() {
  describe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&head_)) + sizeof(type_));
  _cached_size_ = 0;
}

NodeRangeAlarmRequest::~NodeRangeAlarmRequest() {
  // @@protoc_insertion_point(destructor:alarmpb.NodeRangeAlarmRequest)
  SharedDtor();
}

void NodeRangeAlarmRequest::SharedDtor() {
  describe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete range_no_hb_alarm_;
  if (this != internal_default_instance()) delete node_no_hb_alarm_;
  if (this != internal_default_instance()) delete node_disk_size_alarm_;
  if (this != internal_default_instance()) delete node_leader_count_alarm_;
}

void NodeRangeAlarmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRangeAlarmRequest::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeRangeAlarmRequest& NodeRangeAlarmRequest::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeRangeAlarmRequest* NodeRangeAlarmRequest::New(::google::protobuf::Arena* arena) const {
  NodeRangeAlarmRequest* n = new NodeRangeAlarmRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeRangeAlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.NodeRangeAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_json_.Clear();
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_no_hb_alarm_ != NULL) {
    delete range_no_hb_alarm_;
  }
  range_no_hb_alarm_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_no_hb_alarm_ != NULL) {
    delete node_no_hb_alarm_;
  }
  node_no_hb_alarm_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_disk_size_alarm_ != NULL) {
    delete node_disk_size_alarm_;
  }
  node_disk_size_alarm_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_leader_count_alarm_ != NULL) {
    delete node_leader_count_alarm_;
  }
  node_leader_count_alarm_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool NodeRangeAlarmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.NodeRangeAlarmRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.RequestHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.NodeRangeAlarmType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::alarmpb::NodeRangeAlarmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.RangeNoHeartbeatAlarm range_no_hb_alarm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_no_hb_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.NodeNoHeartbeatAlarm node_no_hb_alarm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_no_hb_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.NodeDiskSizeAlarm node_disk_size_alarm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_disk_size_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .alarmpb.NodeLeaderCountAlarm node_leader_count_alarm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_leader_count_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Describe = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->describe().data(), static_cast<int>(this->describe().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.NodeRangeAlarmRequest.Describe"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sample_json = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sample_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_json(this->sample_json_size() - 1).data(),
            static_cast<int>(this->sample_json(this->sample_json_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.NodeRangeAlarmRequest.sample_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.NodeRangeAlarmRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.NodeRangeAlarmRequest)
  return false;
#undef DO_
}

void NodeRangeAlarmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.NodeRangeAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .alarmpb.NodeRangeAlarmType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .alarmpb.RangeNoHeartbeatAlarm range_no_hb_alarm = 3;
  if (this->has_range_no_hb_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_no_hb_alarm_, output);
  }

  // .alarmpb.NodeNoHeartbeatAlarm node_no_hb_alarm = 4;
  if (this->has_node_no_hb_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->node_no_hb_alarm_, output);
  }

  // .alarmpb.NodeDiskSizeAlarm node_disk_size_alarm = 5;
  if (this->has_node_disk_size_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->node_disk_size_alarm_, output);
  }

  // .alarmpb.NodeLeaderCountAlarm node_leader_count_alarm = 6;
  if (this->has_node_leader_count_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->node_leader_count_alarm_, output);
  }

  // string Describe = 7;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeRangeAlarmRequest.Describe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->describe(), output);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeRangeAlarmRequest.sample_json");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sample_json(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.NodeRangeAlarmRequest)
}

::google::protobuf::uint8* NodeRangeAlarmRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.NodeRangeAlarmRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .alarmpb.NodeRangeAlarmType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .alarmpb.RangeNoHeartbeatAlarm range_no_hb_alarm = 3;
  if (this->has_range_no_hb_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_no_hb_alarm_, deterministic, target);
  }

  // .alarmpb.NodeNoHeartbeatAlarm node_no_hb_alarm = 4;
  if (this->has_node_no_hb_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->node_no_hb_alarm_, deterministic, target);
  }

  // .alarmpb.NodeDiskSizeAlarm node_disk_size_alarm = 5;
  if (this->has_node_disk_size_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->node_disk_size_alarm_, deterministic, target);
  }

  // .alarmpb.NodeLeaderCountAlarm node_leader_count_alarm = 6;
  if (this->has_node_leader_count_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->node_leader_count_alarm_, deterministic, target);
  }

  // string Describe = 7;
  if (this->describe().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->describe().data(), static_cast<int>(this->describe().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeRangeAlarmRequest.Describe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->describe(), target);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeRangeAlarmRequest.sample_json");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->sample_json(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.NodeRangeAlarmRequest)
  return target;
}

size_t NodeRangeAlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.NodeRangeAlarmRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sample_json = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sample_json_size());
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sample_json(i));
  }

  // string Describe = 7;
  if (this->describe().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->describe());
  }

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .alarmpb.RangeNoHeartbeatAlarm range_no_hb_alarm = 3;
  if (this->has_range_no_hb_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_no_hb_alarm_);
  }

  // .alarmpb.NodeNoHeartbeatAlarm node_no_hb_alarm = 4;
  if (this->has_node_no_hb_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_no_hb_alarm_);
  }

  // .alarmpb.NodeDiskSizeAlarm node_disk_size_alarm = 5;
  if (this->has_node_disk_size_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_disk_size_alarm_);
  }

  // .alarmpb.NodeLeaderCountAlarm node_leader_count_alarm = 6;
  if (this->has_node_leader_count_alarm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_leader_count_alarm_);
  }

  // .alarmpb.NodeRangeAlarmType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRangeAlarmRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.NodeRangeAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRangeAlarmRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRangeAlarmRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.NodeRangeAlarmRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.NodeRangeAlarmRequest)
    MergeFrom(*source);
  }
}

void NodeRangeAlarmRequest::MergeFrom(const NodeRangeAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.NodeRangeAlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_json_.MergeFrom(from.sample_json_);
  if (from.describe().size() > 0) {

    describe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.describe_);
  }
  if (from.has_head()) {
    mutable_head()->::alarmpb::RequestHeader::MergeFrom(from.head());
  }
  if (from.has_range_no_hb_alarm()) {
    mutable_range_no_hb_alarm()->::alarmpb::RangeNoHeartbeatAlarm::MergeFrom(from.range_no_hb_alarm());
  }
  if (from.has_node_no_hb_alarm()) {
    mutable_node_no_hb_alarm()->::alarmpb::NodeNoHeartbeatAlarm::MergeFrom(from.node_no_hb_alarm());
  }
  if (from.has_node_disk_size_alarm()) {
    mutable_node_disk_size_alarm()->::alarmpb::NodeDiskSizeAlarm::MergeFrom(from.node_disk_size_alarm());
  }
  if (from.has_node_leader_count_alarm()) {
    mutable_node_leader_count_alarm()->::alarmpb::NodeLeaderCountAlarm::MergeFrom(from.node_leader_count_alarm());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void NodeRangeAlarmRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.NodeRangeAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRangeAlarmRequest::CopyFrom(const NodeRangeAlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.NodeRangeAlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRangeAlarmRequest::IsInitialized() const {
  return true;
}

void NodeRangeAlarmRequest::Swap(NodeRangeAlarmRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRangeAlarmRequest::InternalSwap(NodeRangeAlarmRequest* other) {
  using std::swap;
  sample_json_.InternalSwap(&other->sample_json_);
  describe_.Swap(&other->describe_);
  swap(head_, other->head_);
  swap(range_no_hb_alarm_, other->range_no_hb_alarm_);
  swap(node_no_hb_alarm_, other->node_no_hb_alarm_);
  swap(node_disk_size_alarm_, other->node_disk_size_alarm_);
  swap(node_leader_count_alarm_, other->node_leader_count_alarm_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeRangeAlarmRequest::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeRangeAlarmRequest

// .alarmpb.RequestHeader head = 1;
bool NodeRangeAlarmRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void NodeRangeAlarmRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::RequestHeader& NodeRangeAlarmRequest::head() const {
  const ::alarmpb::RequestHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RequestHeader*>(
      &::alarmpb::_RequestHeader_default_instance_);
}
::alarmpb::RequestHeader* NodeRangeAlarmRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.head)
  return head_;
}
::alarmpb::RequestHeader* NodeRangeAlarmRequest::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.head)
  
  ::alarmpb::RequestHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void NodeRangeAlarmRequest::set_allocated_head(::alarmpb::RequestHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.head)
}

// .alarmpb.NodeRangeAlarmType type = 2;
void NodeRangeAlarmRequest::clear_type() {
  type_ = 0;
}
::alarmpb::NodeRangeAlarmType NodeRangeAlarmRequest::type() const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.type)
  return static_cast< ::alarmpb::NodeRangeAlarmType >(type_);
}
void NodeRangeAlarmRequest::set_type(::alarmpb::NodeRangeAlarmType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.NodeRangeAlarmRequest.type)
}

// .alarmpb.RangeNoHeartbeatAlarm range_no_hb_alarm = 3;
bool NodeRangeAlarmRequest::has_range_no_hb_alarm() const {
  return this != internal_default_instance() && range_no_hb_alarm_ != NULL;
}
void NodeRangeAlarmRequest::clear_range_no_hb_alarm() {
  if (GetArenaNoVirtual() == NULL && range_no_hb_alarm_ != NULL) delete range_no_hb_alarm_;
  range_no_hb_alarm_ = NULL;
}
const ::alarmpb::RangeNoHeartbeatAlarm& NodeRangeAlarmRequest::range_no_hb_alarm() const {
  const ::alarmpb::RangeNoHeartbeatAlarm* p = range_no_hb_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.range_no_hb_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RangeNoHeartbeatAlarm*>(
      &::alarmpb::_RangeNoHeartbeatAlarm_default_instance_);
}
::alarmpb::RangeNoHeartbeatAlarm* NodeRangeAlarmRequest::mutable_range_no_hb_alarm() {
  
  if (range_no_hb_alarm_ == NULL) {
    range_no_hb_alarm_ = new ::alarmpb::RangeNoHeartbeatAlarm;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.range_no_hb_alarm)
  return range_no_hb_alarm_;
}
::alarmpb::RangeNoHeartbeatAlarm* NodeRangeAlarmRequest::release_range_no_hb_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.range_no_hb_alarm)
  
  ::alarmpb::RangeNoHeartbeatAlarm* temp = range_no_hb_alarm_;
  range_no_hb_alarm_ = NULL;
  return temp;
}
void NodeRangeAlarmRequest::set_allocated_range_no_hb_alarm(::alarmpb::RangeNoHeartbeatAlarm* range_no_hb_alarm) {
  delete range_no_hb_alarm_;
  range_no_hb_alarm_ = range_no_hb_alarm;
  if (range_no_hb_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.range_no_hb_alarm)
}

// .alarmpb.NodeNoHeartbeatAlarm node_no_hb_alarm = 4;
bool NodeRangeAlarmRequest::has_node_no_hb_alarm() const {
  return this != internal_default_instance() && node_no_hb_alarm_ != NULL;
}
void NodeRangeAlarmRequest::clear_node_no_hb_alarm() {
  if (GetArenaNoVirtual() == NULL && node_no_hb_alarm_ != NULL) delete node_no_hb_alarm_;
  node_no_hb_alarm_ = NULL;
}
const ::alarmpb::NodeNoHeartbeatAlarm& NodeRangeAlarmRequest::node_no_hb_alarm() const {
  const ::alarmpb::NodeNoHeartbeatAlarm* p = node_no_hb_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.node_no_hb_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::NodeNoHeartbeatAlarm*>(
      &::alarmpb::_NodeNoHeartbeatAlarm_default_instance_);
}
::alarmpb::NodeNoHeartbeatAlarm* NodeRangeAlarmRequest::mutable_node_no_hb_alarm() {
  
  if (node_no_hb_alarm_ == NULL) {
    node_no_hb_alarm_ = new ::alarmpb::NodeNoHeartbeatAlarm;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.node_no_hb_alarm)
  return node_no_hb_alarm_;
}
::alarmpb::NodeNoHeartbeatAlarm* NodeRangeAlarmRequest::release_node_no_hb_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.node_no_hb_alarm)
  
  ::alarmpb::NodeNoHeartbeatAlarm* temp = node_no_hb_alarm_;
  node_no_hb_alarm_ = NULL;
  return temp;
}
void NodeRangeAlarmRequest::set_allocated_node_no_hb_alarm(::alarmpb::NodeNoHeartbeatAlarm* node_no_hb_alarm) {
  delete node_no_hb_alarm_;
  node_no_hb_alarm_ = node_no_hb_alarm;
  if (node_no_hb_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.node_no_hb_alarm)
}

// .alarmpb.NodeDiskSizeAlarm node_disk_size_alarm = 5;
bool NodeRangeAlarmRequest::has_node_disk_size_alarm() const {
  return this != internal_default_instance() && node_disk_size_alarm_ != NULL;
}
void NodeRangeAlarmRequest::clear_node_disk_size_alarm() {
  if (GetArenaNoVirtual() == NULL && node_disk_size_alarm_ != NULL) delete node_disk_size_alarm_;
  node_disk_size_alarm_ = NULL;
}
const ::alarmpb::NodeDiskSizeAlarm& NodeRangeAlarmRequest::node_disk_size_alarm() const {
  const ::alarmpb::NodeDiskSizeAlarm* p = node_disk_size_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.node_disk_size_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::NodeDiskSizeAlarm*>(
      &::alarmpb::_NodeDiskSizeAlarm_default_instance_);
}
::alarmpb::NodeDiskSizeAlarm* NodeRangeAlarmRequest::mutable_node_disk_size_alarm() {
  
  if (node_disk_size_alarm_ == NULL) {
    node_disk_size_alarm_ = new ::alarmpb::NodeDiskSizeAlarm;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.node_disk_size_alarm)
  return node_disk_size_alarm_;
}
::alarmpb::NodeDiskSizeAlarm* NodeRangeAlarmRequest::release_node_disk_size_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.node_disk_size_alarm)
  
  ::alarmpb::NodeDiskSizeAlarm* temp = node_disk_size_alarm_;
  node_disk_size_alarm_ = NULL;
  return temp;
}
void NodeRangeAlarmRequest::set_allocated_node_disk_size_alarm(::alarmpb::NodeDiskSizeAlarm* node_disk_size_alarm) {
  delete node_disk_size_alarm_;
  node_disk_size_alarm_ = node_disk_size_alarm;
  if (node_disk_size_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.node_disk_size_alarm)
}

// .alarmpb.NodeLeaderCountAlarm node_leader_count_alarm = 6;
bool NodeRangeAlarmRequest::has_node_leader_count_alarm() const {
  return this != internal_default_instance() && node_leader_count_alarm_ != NULL;
}
void NodeRangeAlarmRequest::clear_node_leader_count_alarm() {
  if (GetArenaNoVirtual() == NULL && node_leader_count_alarm_ != NULL) delete node_leader_count_alarm_;
  node_leader_count_alarm_ = NULL;
}
const ::alarmpb::NodeLeaderCountAlarm& NodeRangeAlarmRequest::node_leader_count_alarm() const {
  const ::alarmpb::NodeLeaderCountAlarm* p = node_leader_count_alarm_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.node_leader_count_alarm)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::NodeLeaderCountAlarm*>(
      &::alarmpb::_NodeLeaderCountAlarm_default_instance_);
}
::alarmpb::NodeLeaderCountAlarm* NodeRangeAlarmRequest::mutable_node_leader_count_alarm() {
  
  if (node_leader_count_alarm_ == NULL) {
    node_leader_count_alarm_ = new ::alarmpb::NodeLeaderCountAlarm;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.node_leader_count_alarm)
  return node_leader_count_alarm_;
}
::alarmpb::NodeLeaderCountAlarm* NodeRangeAlarmRequest::release_node_leader_count_alarm() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.node_leader_count_alarm)
  
  ::alarmpb::NodeLeaderCountAlarm* temp = node_leader_count_alarm_;
  node_leader_count_alarm_ = NULL;
  return temp;
}
void NodeRangeAlarmRequest::set_allocated_node_leader_count_alarm(::alarmpb::NodeLeaderCountAlarm* node_leader_count_alarm) {
  delete node_leader_count_alarm_;
  node_leader_count_alarm_ = node_leader_count_alarm;
  if (node_leader_count_alarm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.node_leader_count_alarm)
}

// string Describe = 7;
void NodeRangeAlarmRequest::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeRangeAlarmRequest::describe() const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.Describe)
  return describe_.GetNoArena();
}
void NodeRangeAlarmRequest::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.NodeRangeAlarmRequest.Describe)
}
#if LANG_CXX11
void NodeRangeAlarmRequest::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.NodeRangeAlarmRequest.Describe)
}
#endif
void NodeRangeAlarmRequest::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.NodeRangeAlarmRequest.Describe)
}
void NodeRangeAlarmRequest::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.NodeRangeAlarmRequest.Describe)
}
::std::string* NodeRangeAlarmRequest::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.Describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeRangeAlarmRequest::release_describe() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmRequest.Describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeRangeAlarmRequest::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmRequest.Describe)
}

// repeated string sample_json = 10;
int NodeRangeAlarmRequest::sample_json_size() const {
  return sample_json_.size();
}
void NodeRangeAlarmRequest::clear_sample_json() {
  sample_json_.Clear();
}
const ::std::string& NodeRangeAlarmRequest::sample_json(int index) const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmRequest.sample_json)
  return sample_json_.Get(index);
}
::std::string* NodeRangeAlarmRequest::mutable_sample_json(int index) {
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmRequest.sample_json)
  return sample_json_.Mutable(index);
}
void NodeRangeAlarmRequest::set_sample_json(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:alarmpb.NodeRangeAlarmRequest.sample_json)
  sample_json_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeRangeAlarmRequest::set_sample_json(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:alarmpb.NodeRangeAlarmRequest.sample_json)
  sample_json_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeRangeAlarmRequest::set_sample_json(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alarmpb.NodeRangeAlarmRequest.sample_json)
}
void NodeRangeAlarmRequest::set_sample_json(int index, const char* value, size_t size) {
  sample_json_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alarmpb.NodeRangeAlarmRequest.sample_json)
}
::std::string* NodeRangeAlarmRequest::add_sample_json() {
  // @@protoc_insertion_point(field_add_mutable:alarmpb.NodeRangeAlarmRequest.sample_json)
  return sample_json_.Add();
}
void NodeRangeAlarmRequest::add_sample_json(const ::std::string& value) {
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alarmpb.NodeRangeAlarmRequest.sample_json)
}
#if LANG_CXX11
void NodeRangeAlarmRequest::add_sample_json(::std::string&& value) {
  sample_json_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alarmpb.NodeRangeAlarmRequest.sample_json)
}
#endif
void NodeRangeAlarmRequest::add_sample_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alarmpb.NodeRangeAlarmRequest.sample_json)
}
void NodeRangeAlarmRequest::add_sample_json(const char* value, size_t size) {
  sample_json_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alarmpb.NodeRangeAlarmRequest.sample_json)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeRangeAlarmRequest::sample_json() const {
  // @@protoc_insertion_point(field_list:alarmpb.NodeRangeAlarmRequest.sample_json)
  return sample_json_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeRangeAlarmRequest::mutable_sample_json() {
  // @@protoc_insertion_point(field_mutable_list:alarmpb.NodeRangeAlarmRequest.sample_json)
  return &sample_json_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeNoHeartbeatAlarm::kRangeFieldNumber;
const int RangeNoHeartbeatAlarm::kLastHeartbeatTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeNoHeartbeatAlarm::RangeNoHeartbeatAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.RangeNoHeartbeatAlarm)
}
RangeNoHeartbeatAlarm::RangeNoHeartbeatAlarm(const RangeNoHeartbeatAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_heartbeat_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_heartbeat_time().size() > 0) {
    last_heartbeat_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_heartbeat_time_);
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.RangeNoHeartbeatAlarm)
}

void RangeNoHeartbeatAlarm::SharedCtor() {
  last_heartbeat_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_ = NULL;
  _cached_size_ = 0;
}

RangeNoHeartbeatAlarm::~RangeNoHeartbeatAlarm() {
  // @@protoc_insertion_point(destructor:alarmpb.RangeNoHeartbeatAlarm)
  SharedDtor();
}

void RangeNoHeartbeatAlarm::SharedDtor() {
  last_heartbeat_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void RangeNoHeartbeatAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeNoHeartbeatAlarm::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeNoHeartbeatAlarm& RangeNoHeartbeatAlarm::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeNoHeartbeatAlarm* RangeNoHeartbeatAlarm::New(::google::protobuf::Arena* arena) const {
  RangeNoHeartbeatAlarm* n = new RangeNoHeartbeatAlarm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeNoHeartbeatAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.RangeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_heartbeat_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeNoHeartbeatAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.RangeNoHeartbeatAlarm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Range range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_heartbeat_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_heartbeat_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.RangeNoHeartbeatAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.RangeNoHeartbeatAlarm)
  return false;
#undef DO_
}

void RangeNoHeartbeatAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.RangeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range range = 1;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_, output);
  }

  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_heartbeat_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.RangeNoHeartbeatAlarm)
}

::google::protobuf::uint8* RangeNoHeartbeatAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.RangeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Range range = 1;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->range_, deterministic, target);
  }

  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_heartbeat_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.RangeNoHeartbeatAlarm)
  return target;
}

size_t RangeNoHeartbeatAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.RangeNoHeartbeatAlarm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_heartbeat_time());
  }

  // .metapb.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeNoHeartbeatAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.RangeNoHeartbeatAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeNoHeartbeatAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeNoHeartbeatAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.RangeNoHeartbeatAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.RangeNoHeartbeatAlarm)
    MergeFrom(*source);
  }
}

void RangeNoHeartbeatAlarm::MergeFrom(const RangeNoHeartbeatAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.RangeNoHeartbeatAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_heartbeat_time().size() > 0) {

    last_heartbeat_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_heartbeat_time_);
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
}

void RangeNoHeartbeatAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.RangeNoHeartbeatAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeNoHeartbeatAlarm::CopyFrom(const RangeNoHeartbeatAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.RangeNoHeartbeatAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeNoHeartbeatAlarm::IsInitialized() const {
  return true;
}

void RangeNoHeartbeatAlarm::Swap(RangeNoHeartbeatAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeNoHeartbeatAlarm::InternalSwap(RangeNoHeartbeatAlarm* other) {
  using std::swap;
  last_heartbeat_time_.Swap(&other->last_heartbeat_time_);
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeNoHeartbeatAlarm::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeNoHeartbeatAlarm

// .metapb.Range range = 1;
bool RangeNoHeartbeatAlarm::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void RangeNoHeartbeatAlarm::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& RangeNoHeartbeatAlarm::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:alarmpb.RangeNoHeartbeatAlarm.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* RangeNoHeartbeatAlarm::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.RangeNoHeartbeatAlarm.range)
  return range_;
}
::metapb::Range* RangeNoHeartbeatAlarm::release_range() {
  // @@protoc_insertion_point(field_release:alarmpb.RangeNoHeartbeatAlarm.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void RangeNoHeartbeatAlarm::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.RangeNoHeartbeatAlarm.range)
}

// string last_heartbeat_time = 2;
void RangeNoHeartbeatAlarm::clear_last_heartbeat_time() {
  last_heartbeat_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeNoHeartbeatAlarm::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
  return last_heartbeat_time_.GetNoArena();
}
void RangeNoHeartbeatAlarm::set_last_heartbeat_time(const ::std::string& value) {
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
}
#if LANG_CXX11
void RangeNoHeartbeatAlarm::set_last_heartbeat_time(::std::string&& value) {
  
  last_heartbeat_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
}
#endif
void RangeNoHeartbeatAlarm::set_last_heartbeat_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
}
void RangeNoHeartbeatAlarm::set_last_heartbeat_time(const char* value, size_t size) {
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
}
::std::string* RangeNoHeartbeatAlarm::mutable_last_heartbeat_time() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
  return last_heartbeat_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeNoHeartbeatAlarm::release_last_heartbeat_time() {
  // @@protoc_insertion_point(field_release:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
  
  return last_heartbeat_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeNoHeartbeatAlarm::set_allocated_last_heartbeat_time(::std::string* last_heartbeat_time) {
  if (last_heartbeat_time != NULL) {
    
  } else {
    
  }
  last_heartbeat_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_heartbeat_time);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.RangeNoHeartbeatAlarm.last_heartbeat_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeNoHeartbeatAlarm::kNodeFieldNumber;
const int NodeNoHeartbeatAlarm::kLastHeartbeatTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeNoHeartbeatAlarm::NodeNoHeartbeatAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.NodeNoHeartbeatAlarm)
}
NodeNoHeartbeatAlarm::NodeNoHeartbeatAlarm(const NodeNoHeartbeatAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_heartbeat_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_heartbeat_time().size() > 0) {
    last_heartbeat_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_heartbeat_time_);
  }
  if (from.has_node()) {
    node_ = new ::metapb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.NodeNoHeartbeatAlarm)
}

void NodeNoHeartbeatAlarm::SharedCtor() {
  last_heartbeat_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ = NULL;
  _cached_size_ = 0;
}

NodeNoHeartbeatAlarm::~NodeNoHeartbeatAlarm() {
  // @@protoc_insertion_point(destructor:alarmpb.NodeNoHeartbeatAlarm)
  SharedDtor();
}

void NodeNoHeartbeatAlarm::SharedDtor() {
  last_heartbeat_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
}

void NodeNoHeartbeatAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeNoHeartbeatAlarm::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeNoHeartbeatAlarm& NodeNoHeartbeatAlarm::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeNoHeartbeatAlarm* NodeNoHeartbeatAlarm::New(::google::protobuf::Arena* arena) const {
  NodeNoHeartbeatAlarm* n = new NodeNoHeartbeatAlarm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeNoHeartbeatAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.NodeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_heartbeat_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  _internal_metadata_.Clear();
}

bool NodeNoHeartbeatAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.NodeNoHeartbeatAlarm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_heartbeat_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_heartbeat_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.NodeNoHeartbeatAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.NodeNoHeartbeatAlarm)
  return false;
#undef DO_
}

void NodeNoHeartbeatAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.NodeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_heartbeat_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.NodeNoHeartbeatAlarm)
}

::google::protobuf::uint8* NodeNoHeartbeatAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.NodeNoHeartbeatAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_, deterministic, target);
  }

  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_time().data(), static_cast<int>(this->last_heartbeat_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_heartbeat_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.NodeNoHeartbeatAlarm)
  return target;
}

size_t NodeNoHeartbeatAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.NodeNoHeartbeatAlarm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string last_heartbeat_time = 2;
  if (this->last_heartbeat_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_heartbeat_time());
  }

  // .metapb.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeNoHeartbeatAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.NodeNoHeartbeatAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeNoHeartbeatAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeNoHeartbeatAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.NodeNoHeartbeatAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.NodeNoHeartbeatAlarm)
    MergeFrom(*source);
  }
}

void NodeNoHeartbeatAlarm::MergeFrom(const NodeNoHeartbeatAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.NodeNoHeartbeatAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_heartbeat_time().size() > 0) {

    last_heartbeat_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_heartbeat_time_);
  }
  if (from.has_node()) {
    mutable_node()->::metapb::Node::MergeFrom(from.node());
  }
}

void NodeNoHeartbeatAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.NodeNoHeartbeatAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeNoHeartbeatAlarm::CopyFrom(const NodeNoHeartbeatAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.NodeNoHeartbeatAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeNoHeartbeatAlarm::IsInitialized() const {
  return true;
}

void NodeNoHeartbeatAlarm::Swap(NodeNoHeartbeatAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeNoHeartbeatAlarm::InternalSwap(NodeNoHeartbeatAlarm* other) {
  using std::swap;
  last_heartbeat_time_.Swap(&other->last_heartbeat_time_);
  swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeNoHeartbeatAlarm::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeNoHeartbeatAlarm

// .metapb.Node node = 1;
bool NodeNoHeartbeatAlarm::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void NodeNoHeartbeatAlarm::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::metapb::Node& NodeNoHeartbeatAlarm::node() const {
  const ::metapb::Node* p = node_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeNoHeartbeatAlarm.node)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Node*>(
      &::metapb::_Node_default_instance_);
}
::metapb::Node* NodeNoHeartbeatAlarm::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::metapb::Node;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeNoHeartbeatAlarm.node)
  return node_;
}
::metapb::Node* NodeNoHeartbeatAlarm::release_node() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeNoHeartbeatAlarm.node)
  
  ::metapb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void NodeNoHeartbeatAlarm::set_allocated_node(::metapb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeNoHeartbeatAlarm.node)
}

// string last_heartbeat_time = 2;
void NodeNoHeartbeatAlarm::clear_last_heartbeat_time() {
  last_heartbeat_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeNoHeartbeatAlarm::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
  return last_heartbeat_time_.GetNoArena();
}
void NodeNoHeartbeatAlarm::set_last_heartbeat_time(const ::std::string& value) {
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
}
#if LANG_CXX11
void NodeNoHeartbeatAlarm::set_last_heartbeat_time(::std::string&& value) {
  
  last_heartbeat_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
}
#endif
void NodeNoHeartbeatAlarm::set_last_heartbeat_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
}
void NodeNoHeartbeatAlarm::set_last_heartbeat_time(const char* value, size_t size) {
  
  last_heartbeat_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
}
::std::string* NodeNoHeartbeatAlarm::mutable_last_heartbeat_time() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
  return last_heartbeat_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeNoHeartbeatAlarm::release_last_heartbeat_time() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
  
  return last_heartbeat_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeNoHeartbeatAlarm::set_allocated_last_heartbeat_time(::std::string* last_heartbeat_time) {
  if (last_heartbeat_time != NULL) {
    
  } else {
    
  }
  last_heartbeat_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_heartbeat_time);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeNoHeartbeatAlarm.last_heartbeat_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDiskSizeAlarm::kNodeFieldNumber;
const int NodeDiskSizeAlarm::kDiskSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDiskSizeAlarm::NodeDiskSizeAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.NodeDiskSizeAlarm)
}
NodeDiskSizeAlarm::NodeDiskSizeAlarm(const NodeDiskSizeAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::metapb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  disk_size_ = from.disk_size_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.NodeDiskSizeAlarm)
}

void NodeDiskSizeAlarm::SharedCtor() {
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disk_size_) -
      reinterpret_cast<char*>(&node_)) + sizeof(disk_size_));
  _cached_size_ = 0;
}

NodeDiskSizeAlarm::~NodeDiskSizeAlarm() {
  // @@protoc_insertion_point(destructor:alarmpb.NodeDiskSizeAlarm)
  SharedDtor();
}

void NodeDiskSizeAlarm::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void NodeDiskSizeAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDiskSizeAlarm::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeDiskSizeAlarm& NodeDiskSizeAlarm::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeDiskSizeAlarm* NodeDiskSizeAlarm::New(::google::protobuf::Arena* arena) const {
  NodeDiskSizeAlarm* n = new NodeDiskSizeAlarm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDiskSizeAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.NodeDiskSizeAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  disk_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeDiskSizeAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.NodeDiskSizeAlarm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 disk_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.NodeDiskSizeAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.NodeDiskSizeAlarm)
  return false;
#undef DO_
}

void NodeDiskSizeAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.NodeDiskSizeAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // int64 disk_size = 2;
  if (this->disk_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->disk_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.NodeDiskSizeAlarm)
}

::google::protobuf::uint8* NodeDiskSizeAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.NodeDiskSizeAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_, deterministic, target);
  }

  // int64 disk_size = 2;
  if (this->disk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->disk_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.NodeDiskSizeAlarm)
  return target;
}

size_t NodeDiskSizeAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.NodeDiskSizeAlarm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // int64 disk_size = 2;
  if (this->disk_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->disk_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDiskSizeAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.NodeDiskSizeAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDiskSizeAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDiskSizeAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.NodeDiskSizeAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.NodeDiskSizeAlarm)
    MergeFrom(*source);
  }
}

void NodeDiskSizeAlarm::MergeFrom(const NodeDiskSizeAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.NodeDiskSizeAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    mutable_node()->::metapb::Node::MergeFrom(from.node());
  }
  if (from.disk_size() != 0) {
    set_disk_size(from.disk_size());
  }
}

void NodeDiskSizeAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.NodeDiskSizeAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDiskSizeAlarm::CopyFrom(const NodeDiskSizeAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.NodeDiskSizeAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDiskSizeAlarm::IsInitialized() const {
  return true;
}

void NodeDiskSizeAlarm::Swap(NodeDiskSizeAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDiskSizeAlarm::InternalSwap(NodeDiskSizeAlarm* other) {
  using std::swap;
  swap(node_, other->node_);
  swap(disk_size_, other->disk_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDiskSizeAlarm::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDiskSizeAlarm

// .metapb.Node node = 1;
bool NodeDiskSizeAlarm::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void NodeDiskSizeAlarm::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::metapb::Node& NodeDiskSizeAlarm::node() const {
  const ::metapb::Node* p = node_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeDiskSizeAlarm.node)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Node*>(
      &::metapb::_Node_default_instance_);
}
::metapb::Node* NodeDiskSizeAlarm::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::metapb::Node;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeDiskSizeAlarm.node)
  return node_;
}
::metapb::Node* NodeDiskSizeAlarm::release_node() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeDiskSizeAlarm.node)
  
  ::metapb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void NodeDiskSizeAlarm::set_allocated_node(::metapb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeDiskSizeAlarm.node)
}

// int64 disk_size = 2;
void NodeDiskSizeAlarm::clear_disk_size() {
  disk_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeDiskSizeAlarm::disk_size() const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeDiskSizeAlarm.disk_size)
  return disk_size_;
}
void NodeDiskSizeAlarm::set_disk_size(::google::protobuf::int64 value) {
  
  disk_size_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.NodeDiskSizeAlarm.disk_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeLeaderCountAlarm::kNodeFieldNumber;
const int NodeLeaderCountAlarm::kLeaderCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeLeaderCountAlarm::NodeLeaderCountAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.NodeLeaderCountAlarm)
}
NodeLeaderCountAlarm::NodeLeaderCountAlarm(const NodeLeaderCountAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::metapb::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  leader_count_ = from.leader_count_;
  // @@protoc_insertion_point(copy_constructor:alarmpb.NodeLeaderCountAlarm)
}

void NodeLeaderCountAlarm::SharedCtor() {
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_count_) -
      reinterpret_cast<char*>(&node_)) + sizeof(leader_count_));
  _cached_size_ = 0;
}

NodeLeaderCountAlarm::~NodeLeaderCountAlarm() {
  // @@protoc_insertion_point(destructor:alarmpb.NodeLeaderCountAlarm)
  SharedDtor();
}

void NodeLeaderCountAlarm::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void NodeLeaderCountAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLeaderCountAlarm::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeLeaderCountAlarm& NodeLeaderCountAlarm::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeLeaderCountAlarm* NodeLeaderCountAlarm::New(::google::protobuf::Arena* arena) const {
  NodeLeaderCountAlarm* n = new NodeLeaderCountAlarm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeLeaderCountAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.NodeLeaderCountAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  leader_count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodeLeaderCountAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.NodeLeaderCountAlarm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 leader_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.NodeLeaderCountAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.NodeLeaderCountAlarm)
  return false;
#undef DO_
}

void NodeLeaderCountAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.NodeLeaderCountAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // int64 leader_count = 2;
  if (this->leader_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->leader_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.NodeLeaderCountAlarm)
}

::google::protobuf::uint8* NodeLeaderCountAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.NodeLeaderCountAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_, deterministic, target);
  }

  // int64 leader_count = 2;
  if (this->leader_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->leader_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.NodeLeaderCountAlarm)
  return target;
}

size_t NodeLeaderCountAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.NodeLeaderCountAlarm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // int64 leader_count = 2;
  if (this->leader_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->leader_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLeaderCountAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.NodeLeaderCountAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeLeaderCountAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeLeaderCountAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.NodeLeaderCountAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.NodeLeaderCountAlarm)
    MergeFrom(*source);
  }
}

void NodeLeaderCountAlarm::MergeFrom(const NodeLeaderCountAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.NodeLeaderCountAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    mutable_node()->::metapb::Node::MergeFrom(from.node());
  }
  if (from.leader_count() != 0) {
    set_leader_count(from.leader_count());
  }
}

void NodeLeaderCountAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.NodeLeaderCountAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLeaderCountAlarm::CopyFrom(const NodeLeaderCountAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.NodeLeaderCountAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLeaderCountAlarm::IsInitialized() const {
  return true;
}

void NodeLeaderCountAlarm::Swap(NodeLeaderCountAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeLeaderCountAlarm::InternalSwap(NodeLeaderCountAlarm* other) {
  using std::swap;
  swap(node_, other->node_);
  swap(leader_count_, other->leader_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeLeaderCountAlarm::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeLeaderCountAlarm

// .metapb.Node node = 1;
bool NodeLeaderCountAlarm::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void NodeLeaderCountAlarm::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::metapb::Node& NodeLeaderCountAlarm::node() const {
  const ::metapb::Node* p = node_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeLeaderCountAlarm.node)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Node*>(
      &::metapb::_Node_default_instance_);
}
::metapb::Node* NodeLeaderCountAlarm::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::metapb::Node;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeLeaderCountAlarm.node)
  return node_;
}
::metapb::Node* NodeLeaderCountAlarm::release_node() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeLeaderCountAlarm.node)
  
  ::metapb::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void NodeLeaderCountAlarm::set_allocated_node(::metapb::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeLeaderCountAlarm.node)
}

// int64 leader_count = 2;
void NodeLeaderCountAlarm::clear_leader_count() {
  leader_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeLeaderCountAlarm::leader_count() const {
  // @@protoc_insertion_point(field_get:alarmpb.NodeLeaderCountAlarm.leader_count)
  return leader_count_;
}
void NodeLeaderCountAlarm::set_leader_count(::google::protobuf::int64 value) {
  
  leader_count_ = value;
  // @@protoc_insertion_point(field_set:alarmpb.NodeLeaderCountAlarm.leader_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRangeAlarmResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRangeAlarmResponse::NodeRangeAlarmResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.NodeRangeAlarmResponse)
}
NodeRangeAlarmResponse::NodeRangeAlarmResponse(const NodeRangeAlarmResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::ResponseHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.NodeRangeAlarmResponse)
}

void NodeRangeAlarmResponse::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

NodeRangeAlarmResponse::~NodeRangeAlarmResponse() {
  // @@protoc_insertion_point(destructor:alarmpb.NodeRangeAlarmResponse)
  SharedDtor();
}

void NodeRangeAlarmResponse::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void NodeRangeAlarmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRangeAlarmResponse::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeRangeAlarmResponse& NodeRangeAlarmResponse::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeRangeAlarmResponse* NodeRangeAlarmResponse::New(::google::protobuf::Arena* arena) const {
  NodeRangeAlarmResponse* n = new NodeRangeAlarmResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeRangeAlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.NodeRangeAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool NodeRangeAlarmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.NodeRangeAlarmResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.ResponseHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.NodeRangeAlarmResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.NodeRangeAlarmResponse)
  return false;
#undef DO_
}

void NodeRangeAlarmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.NodeRangeAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.NodeRangeAlarmResponse)
}

::google::protobuf::uint8* NodeRangeAlarmResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.NodeRangeAlarmResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.NodeRangeAlarmResponse)
  return target;
}

size_t NodeRangeAlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.NodeRangeAlarmResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRangeAlarmResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.NodeRangeAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRangeAlarmResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRangeAlarmResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.NodeRangeAlarmResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.NodeRangeAlarmResponse)
    MergeFrom(*source);
  }
}

void NodeRangeAlarmResponse::MergeFrom(const NodeRangeAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.NodeRangeAlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::alarmpb::ResponseHeader::MergeFrom(from.head());
  }
}

void NodeRangeAlarmResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.NodeRangeAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRangeAlarmResponse::CopyFrom(const NodeRangeAlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.NodeRangeAlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRangeAlarmResponse::IsInitialized() const {
  return true;
}

void NodeRangeAlarmResponse::Swap(NodeRangeAlarmResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRangeAlarmResponse::InternalSwap(NodeRangeAlarmResponse* other) {
  using std::swap;
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeRangeAlarmResponse::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeRangeAlarmResponse

// .alarmpb.ResponseHeader head = 1;
bool NodeRangeAlarmResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void NodeRangeAlarmResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::ResponseHeader& NodeRangeAlarmResponse::head() const {
  const ::alarmpb::ResponseHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.NodeRangeAlarmResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::ResponseHeader*>(
      &::alarmpb::_ResponseHeader_default_instance_);
}
::alarmpb::ResponseHeader* NodeRangeAlarmResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.NodeRangeAlarmResponse.head)
  return head_;
}
::alarmpb::ResponseHeader* NodeRangeAlarmResponse::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.NodeRangeAlarmResponse.head)
  
  ::alarmpb::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void NodeRangeAlarmResponse::set_allocated_head(::alarmpb::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.NodeRangeAlarmResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveRequest::kHeadFieldNumber;
const int AliveRequest::kSampleJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveRequest::AliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.AliveRequest)
}
AliveRequest::AliveRequest(const AliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sample_json_(from.sample_json_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::RequestHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.AliveRequest)
}

void AliveRequest::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

AliveRequest::~AliveRequest() {
  // @@protoc_insertion_point(destructor:alarmpb.AliveRequest)
  SharedDtor();
}

void AliveRequest::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void AliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AliveRequest::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AliveRequest& AliveRequest::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AliveRequest* AliveRequest::New(::google::protobuf::Arena* arena) const {
  AliveRequest* n = new AliveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.AliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_json_.Clear();
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool AliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.AliveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.RequestHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sample_json = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sample_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_json(this->sample_json_size() - 1).data(),
            static_cast<int>(this->sample_json(this->sample_json_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.AliveRequest.sample_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.AliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.AliveRequest)
  return false;
#undef DO_
}

void AliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.AliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.AliveRequest.sample_json");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sample_json(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.AliveRequest)
}

::google::protobuf::uint8* AliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.AliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.AliveRequest.sample_json");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->sample_json(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.AliveRequest)
  return target;
}

size_t AliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.AliveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sample_json = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sample_json_size());
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sample_json(i));
  }

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.AliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AliveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.AliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.AliveRequest)
    MergeFrom(*source);
  }
}

void AliveRequest::MergeFrom(const AliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.AliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_json_.MergeFrom(from.sample_json_);
  if (from.has_head()) {
    mutable_head()->::alarmpb::RequestHeader::MergeFrom(from.head());
  }
}

void AliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.AliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveRequest::CopyFrom(const AliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.AliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveRequest::IsInitialized() const {
  return true;
}

void AliveRequest::Swap(AliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveRequest::InternalSwap(AliveRequest* other) {
  using std::swap;
  sample_json_.InternalSwap(&other->sample_json_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AliveRequest::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AliveRequest

// .alarmpb.RequestHeader head = 1;
bool AliveRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void AliveRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::RequestHeader& AliveRequest::head() const {
  const ::alarmpb::RequestHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.AliveRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RequestHeader*>(
      &::alarmpb::_RequestHeader_default_instance_);
}
::alarmpb::RequestHeader* AliveRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.AliveRequest.head)
  return head_;
}
::alarmpb::RequestHeader* AliveRequest::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.AliveRequest.head)
  
  ::alarmpb::RequestHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void AliveRequest::set_allocated_head(::alarmpb::RequestHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.AliveRequest.head)
}

// repeated string sample_json = 10;
int AliveRequest::sample_json_size() const {
  return sample_json_.size();
}
void AliveRequest::clear_sample_json() {
  sample_json_.Clear();
}
const ::std::string& AliveRequest::sample_json(int index) const {
  // @@protoc_insertion_point(field_get:alarmpb.AliveRequest.sample_json)
  return sample_json_.Get(index);
}
::std::string* AliveRequest::mutable_sample_json(int index) {
  // @@protoc_insertion_point(field_mutable:alarmpb.AliveRequest.sample_json)
  return sample_json_.Mutable(index);
}
void AliveRequest::set_sample_json(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:alarmpb.AliveRequest.sample_json)
  sample_json_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AliveRequest::set_sample_json(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:alarmpb.AliveRequest.sample_json)
  sample_json_.Mutable(index)->assign(std::move(value));
}
#endif
void AliveRequest::set_sample_json(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alarmpb.AliveRequest.sample_json)
}
void AliveRequest::set_sample_json(int index, const char* value, size_t size) {
  sample_json_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alarmpb.AliveRequest.sample_json)
}
::std::string* AliveRequest::add_sample_json() {
  // @@protoc_insertion_point(field_add_mutable:alarmpb.AliveRequest.sample_json)
  return sample_json_.Add();
}
void AliveRequest::add_sample_json(const ::std::string& value) {
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alarmpb.AliveRequest.sample_json)
}
#if LANG_CXX11
void AliveRequest::add_sample_json(::std::string&& value) {
  sample_json_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alarmpb.AliveRequest.sample_json)
}
#endif
void AliveRequest::add_sample_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alarmpb.AliveRequest.sample_json)
}
void AliveRequest::add_sample_json(const char* value, size_t size) {
  sample_json_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alarmpb.AliveRequest.sample_json)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AliveRequest::sample_json() const {
  // @@protoc_insertion_point(field_list:alarmpb.AliveRequest.sample_json)
  return sample_json_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AliveRequest::mutable_sample_json() {
  // @@protoc_insertion_point(field_mutable_list:alarmpb.AliveRequest.sample_json)
  return &sample_json_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveResponse::AliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.AliveResponse)
}
AliveResponse::AliveResponse(const AliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::ResponseHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.AliveResponse)
}

void AliveResponse::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

AliveResponse::~AliveResponse() {
  // @@protoc_insertion_point(destructor:alarmpb.AliveResponse)
  SharedDtor();
}

void AliveResponse::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void AliveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AliveResponse::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AliveResponse& AliveResponse::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

AliveResponse* AliveResponse::New(::google::protobuf::Arena* arena) const {
  AliveResponse* n = new AliveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.AliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool AliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.AliveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.ResponseHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.AliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.AliveResponse)
  return false;
#undef DO_
}

void AliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.AliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.AliveResponse)
}

::google::protobuf::uint8* AliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.AliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.AliveResponse)
  return target;
}

size_t AliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.AliveResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.AliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AliveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.AliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.AliveResponse)
    MergeFrom(*source);
  }
}

void AliveResponse::MergeFrom(const AliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.AliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::alarmpb::ResponseHeader::MergeFrom(from.head());
  }
}

void AliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.AliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveResponse::CopyFrom(const AliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.AliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveResponse::IsInitialized() const {
  return true;
}

void AliveResponse::Swap(AliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveResponse::InternalSwap(AliveResponse* other) {
  using std::swap;
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AliveResponse::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AliveResponse

// .alarmpb.ResponseHeader head = 1;
bool AliveResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void AliveResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::ResponseHeader& AliveResponse::head() const {
  const ::alarmpb::ResponseHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.AliveResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::ResponseHeader*>(
      &::alarmpb::_ResponseHeader_default_instance_);
}
::alarmpb::ResponseHeader* AliveResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.AliveResponse.head)
  return head_;
}
::alarmpb::ResponseHeader* AliveResponse::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.AliveResponse.head)
  
  ::alarmpb::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void AliveResponse::set_allocated_head(::alarmpb::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.AliveResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleRequest::kHeadFieldNumber;
const int SimpleRequest::kTitleFieldNumber;
const int SimpleRequest::kContentFieldNumber;
const int SimpleRequest::kSampleJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleRequest::SimpleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.SimpleRequest)
}
SimpleRequest::SimpleRequest(const SimpleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sample_json_(from.sample_json_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_head()) {
    head_ = new ::alarmpb::RequestHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.SimpleRequest)
}

void SimpleRequest::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  _cached_size_ = 0;
}

SimpleRequest::~SimpleRequest() {
  // @@protoc_insertion_point(destructor:alarmpb.SimpleRequest)
  SharedDtor();
}

void SimpleRequest::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void SimpleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleRequest::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleRequest& SimpleRequest::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleRequest* SimpleRequest::New(::google::protobuf::Arena* arena) const {
  SimpleRequest* n = new SimpleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.SimpleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_json_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool SimpleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.SimpleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.RequestHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.SimpleRequest.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.SimpleRequest.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string sample_json = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sample_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_json(this->sample_json_size() - 1).data(),
            static_cast<int>(this->sample_json(this->sample_json_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "alarmpb.SimpleRequest.sample_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.SimpleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.SimpleRequest)
  return false;
#undef DO_
}

void SimpleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.SimpleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.sample_json");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sample_json(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.SimpleRequest)
}

::google::protobuf::uint8* SimpleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.SimpleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // repeated string sample_json = 10;
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_json(i).data(), static_cast<int>(this->sample_json(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "alarmpb.SimpleRequest.sample_json");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->sample_json(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.SimpleRequest)
  return target;
}

size_t SimpleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.SimpleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string sample_json = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sample_json_size());
  for (int i = 0, n = this->sample_json_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sample_json(i));
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // .alarmpb.RequestHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.SimpleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.SimpleRequest)
    MergeFrom(*source);
  }
}

void SimpleRequest::MergeFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.SimpleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_json_.MergeFrom(from.sample_json_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_head()) {
    mutable_head()->::alarmpb::RequestHeader::MergeFrom(from.head());
  }
}

void SimpleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRequest::CopyFrom(const SimpleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.SimpleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRequest::IsInitialized() const {
  return true;
}

void SimpleRequest::Swap(SimpleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleRequest::InternalSwap(SimpleRequest* other) {
  using std::swap;
  sample_json_.InternalSwap(&other->sample_json_);
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleRequest::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleRequest

// .alarmpb.RequestHeader head = 1;
bool SimpleRequest::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void SimpleRequest::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::RequestHeader& SimpleRequest::head() const {
  const ::alarmpb::RequestHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.SimpleRequest.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::RequestHeader*>(
      &::alarmpb::_RequestHeader_default_instance_);
}
::alarmpb::RequestHeader* SimpleRequest::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleRequest.head)
  return head_;
}
::alarmpb::RequestHeader* SimpleRequest::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleRequest.head)
  
  ::alarmpb::RequestHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void SimpleRequest::set_allocated_head(::alarmpb::RequestHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleRequest.head)
}

// string title = 2;
void SimpleRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimpleRequest::title() const {
  // @@protoc_insertion_point(field_get:alarmpb.SimpleRequest.title)
  return title_.GetNoArena();
}
void SimpleRequest::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.SimpleRequest.title)
}
#if LANG_CXX11
void SimpleRequest::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.SimpleRequest.title)
}
#endif
void SimpleRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.SimpleRequest.title)
}
void SimpleRequest::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.SimpleRequest.title)
}
::std::string* SimpleRequest::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimpleRequest::release_title() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleRequest.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimpleRequest::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleRequest.title)
}

// string content = 3;
void SimpleRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimpleRequest::content() const {
  // @@protoc_insertion_point(field_get:alarmpb.SimpleRequest.content)
  return content_.GetNoArena();
}
void SimpleRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:alarmpb.SimpleRequest.content)
}
#if LANG_CXX11
void SimpleRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:alarmpb.SimpleRequest.content)
}
#endif
void SimpleRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:alarmpb.SimpleRequest.content)
}
void SimpleRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:alarmpb.SimpleRequest.content)
}
::std::string* SimpleRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimpleRequest::release_content() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimpleRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleRequest.content)
}

// repeated string sample_json = 10;
int SimpleRequest::sample_json_size() const {
  return sample_json_.size();
}
void SimpleRequest::clear_sample_json() {
  sample_json_.Clear();
}
const ::std::string& SimpleRequest::sample_json(int index) const {
  // @@protoc_insertion_point(field_get:alarmpb.SimpleRequest.sample_json)
  return sample_json_.Get(index);
}
::std::string* SimpleRequest::mutable_sample_json(int index) {
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleRequest.sample_json)
  return sample_json_.Mutable(index);
}
void SimpleRequest::set_sample_json(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:alarmpb.SimpleRequest.sample_json)
  sample_json_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SimpleRequest::set_sample_json(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:alarmpb.SimpleRequest.sample_json)
  sample_json_.Mutable(index)->assign(std::move(value));
}
#endif
void SimpleRequest::set_sample_json(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:alarmpb.SimpleRequest.sample_json)
}
void SimpleRequest::set_sample_json(int index, const char* value, size_t size) {
  sample_json_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:alarmpb.SimpleRequest.sample_json)
}
::std::string* SimpleRequest::add_sample_json() {
  // @@protoc_insertion_point(field_add_mutable:alarmpb.SimpleRequest.sample_json)
  return sample_json_.Add();
}
void SimpleRequest::add_sample_json(const ::std::string& value) {
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:alarmpb.SimpleRequest.sample_json)
}
#if LANG_CXX11
void SimpleRequest::add_sample_json(::std::string&& value) {
  sample_json_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:alarmpb.SimpleRequest.sample_json)
}
#endif
void SimpleRequest::add_sample_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sample_json_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:alarmpb.SimpleRequest.sample_json)
}
void SimpleRequest::add_sample_json(const char* value, size_t size) {
  sample_json_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:alarmpb.SimpleRequest.sample_json)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleRequest::sample_json() const {
  // @@protoc_insertion_point(field_list:alarmpb.SimpleRequest.sample_json)
  return sample_json_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleRequest::mutable_sample_json() {
  // @@protoc_insertion_point(field_mutable_list:alarmpb.SimpleRequest.sample_json)
  return &sample_json_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleResponse::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleResponse::SimpleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_alarmpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:alarmpb.SimpleResponse)
}
SimpleResponse::SimpleResponse(const SimpleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::alarmpb::ResponseHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:alarmpb.SimpleResponse)
}

void SimpleResponse::SharedCtor() {
  head_ = NULL;
  _cached_size_ = 0;
}

SimpleResponse::~SimpleResponse() {
  // @@protoc_insertion_point(destructor:alarmpb.SimpleResponse)
  SharedDtor();
}

void SimpleResponse::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
}

void SimpleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleResponse::descriptor() {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleResponse& SimpleResponse::default_instance() {
  protobuf_alarmpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimpleResponse* SimpleResponse::New(::google::protobuf::Arena* arena) const {
  SimpleResponse* n = new SimpleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:alarmpb.SimpleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  _internal_metadata_.Clear();
}

bool SimpleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:alarmpb.SimpleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .alarmpb.ResponseHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:alarmpb.SimpleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:alarmpb.SimpleResponse)
  return false;
#undef DO_
}

void SimpleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:alarmpb.SimpleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:alarmpb.SimpleResponse)
}

::google::protobuf::uint8* SimpleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:alarmpb.SimpleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:alarmpb.SimpleResponse)
  return target;
}

size_t SimpleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:alarmpb.SimpleResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .alarmpb.ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:alarmpb.SimpleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:alarmpb.SimpleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:alarmpb.SimpleResponse)
    MergeFrom(*source);
  }
}

void SimpleResponse::MergeFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:alarmpb.SimpleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::alarmpb::ResponseHeader::MergeFrom(from.head());
  }
}

void SimpleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:alarmpb.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleResponse::CopyFrom(const SimpleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:alarmpb.SimpleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleResponse::IsInitialized() const {
  return true;
}

void SimpleResponse::Swap(SimpleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleResponse::InternalSwap(SimpleResponse* other) {
  using std::swap;
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleResponse::GetMetadata() const {
  protobuf_alarmpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_alarmpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleResponse

// .alarmpb.ResponseHeader head = 1;
bool SimpleResponse::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void SimpleResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::alarmpb::ResponseHeader& SimpleResponse::head() const {
  const ::alarmpb::ResponseHeader* p = head_;
  // @@protoc_insertion_point(field_get:alarmpb.SimpleResponse.head)
  return p != NULL ? *p : *reinterpret_cast<const ::alarmpb::ResponseHeader*>(
      &::alarmpb::_ResponseHeader_default_instance_);
}
::alarmpb::ResponseHeader* SimpleResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::alarmpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:alarmpb.SimpleResponse.head)
  return head_;
}
::alarmpb::ResponseHeader* SimpleResponse::release_head() {
  // @@protoc_insertion_point(field_release:alarmpb.SimpleResponse.head)
  
  ::alarmpb::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void SimpleResponse::set_allocated_head(::alarmpb::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:alarmpb.SimpleResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace alarmpb

// @@protoc_insertion_point(global_scope)
