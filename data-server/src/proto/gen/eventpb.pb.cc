// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eventpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eventpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eventpb {
class EventRangeSplitAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventRangeSplitAck>
     _instance;
} _EventRangeSplitAck_default_instance_;
class EventRangeSplitKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventRangeSplitKey>
     _instance;
} _EventRangeSplitKey_default_instance_;
class EventRangeDeleteAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventRangeDeleteAck>
     _instance;
} _EventRangeDeleteAck_default_instance_;
class EventRaftErrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventRaftErr>
     _instance;
} _EventRaftErr_default_instance_;
class EventStoreErrDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventStoreErr>
     _instance;
} _EventStoreErr_default_instance_;
class EventNodeBuildAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventNodeBuildAck>
     _instance;
} _EventNodeBuildAck_default_instance_;
class EventEventStatisticsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EventEventStatistics>
     _instance;
} _EventEventStatistics_default_instance_;
class EventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event>
     _instance;
} _Event_default_instance_;

namespace protobuf_eventpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitAck, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitAck, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitAck, left_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitAck, right_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitKey, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitKey, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeSplitKey, split_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeDeleteAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeDeleteAck, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRangeDeleteAck, range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRaftErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRaftErr, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRaftErr, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRaftErr, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStoreErr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStoreErr, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStoreErr, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStoreErr, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNodeBuildAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNodeBuildAck, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNodeBuildAck, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventNodeBuildAck, err_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventEventStatistics, statisticstype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_range_split_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_raft_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_node_build_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_range_delete_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_event_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_range_split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_store_err_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(EventRangeSplitAck)},
  { 9, -1, sizeof(EventRangeSplitKey)},
  { 17, -1, sizeof(EventRangeDeleteAck)},
  { 24, -1, sizeof(EventRaftErr)},
  { 32, -1, sizeof(EventStoreErr)},
  { 40, -1, sizeof(EventNodeBuildAck)},
  { 48, -1, sizeof(EventEventStatistics)},
  { 60, -1, sizeof(Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventRangeSplitAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventRangeSplitKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventRangeDeleteAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventRaftErr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventStoreErr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventNodeBuildAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventEventStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "eventpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  _EventRangeSplitAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventRangeSplitAck_default_instance_);_EventRangeSplitKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventRangeSplitKey_default_instance_);_EventRangeDeleteAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventRangeDeleteAck_default_instance_);_EventRaftErr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventRaftErr_default_instance_);_EventStoreErr_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventStoreErr_default_instance_);_EventNodeBuildAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventNodeBuildAck_default_instance_);_EventEventStatistics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EventEventStatistics_default_instance_);_Event_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_default_instance_);_EventRangeSplitAck_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _EventRangeSplitAck_default_instance_._instance.get_mutable()->left_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _EventRangeSplitAck_default_instance_._instance.get_mutable()->right_range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _EventRangeSplitKey_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _EventRangeDeleteAck_default_instance_._instance.get_mutable()->range_ = const_cast< ::metapb::Range*>(
      ::metapb::Range::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_range_split_ack_ = const_cast< ::eventpb::EventRangeSplitAck*>(
      ::eventpb::EventRangeSplitAck::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_raft_err_ = const_cast< ::eventpb::EventRaftErr*>(
      ::eventpb::EventRaftErr::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_node_build_ack_ = const_cast< ::eventpb::EventNodeBuildAck*>(
      ::eventpb::EventNodeBuildAck::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_range_delete_ack_ = const_cast< ::eventpb::EventRangeDeleteAck*>(
      ::eventpb::EventRangeDeleteAck::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_event_statistics_ = const_cast< ::eventpb::EventEventStatistics*>(
      ::eventpb::EventEventStatistics::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_range_split_key_ = const_cast< ::eventpb::EventRangeSplitKey*>(
      ::eventpb::EventRangeSplitKey::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->event_store_err_ = const_cast< ::eventpb::EventStoreErr*>(
      ::eventpb::EventStoreErr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\reventpb.proto\022\007eventpb\032\014metapb.proto\"\212"
      "\001\n\022EventRangeSplitAck\022\017\n\007task_id\030\001 \001(\004\022\034"
      "\n\005range\030\002 \001(\0132\r.metapb.Range\022!\n\nleft_ran"
      "ge\030\003 \001(\0132\r.metapb.Range\022\"\n\013right_range\030\004"
      " \001(\0132\r.metapb.Range\"V\n\022EventRangeSplitKe"
      "y\022\017\n\007task_id\030\001 \001(\004\022\034\n\005range\030\002 \001(\0132\r.meta"
      "pb.Range\022\021\n\tsplit_key\030\003 \001(\014\"D\n\023EventRang"
      "eDeleteAck\022\017\n\007task_id\030\001 \001(\004\022\034\n\005range\030\002 \001"
      "(\0132\r.metapb.Range\"@\n\014EventRaftErr\022\017\n\007nod"
      "e_id\030\001 \001(\004\022\020\n\010range_id\030\002 \001(\004\022\r\n\005error\030\003 "
      "\001(\t\"A\n\rEventStoreErr\022\017\n\007node_id\030\001 \001(\004\022\020\n"
      "\010range_id\030\002 \001(\004\022\r\n\005error\030\003 \001(\t\"9\n\021EventN"
      "odeBuildAck\022\n\n\002ip\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\013\n\003"
      "err\030\003 \001(\t\"\263\001\n\024EventEventStatistics\022\017\n\007db"
      "_name\030\001 \001(\t\022\022\n\ntable_name\030\002 \001(\t\022\020\n\010range"
      "_id\030\003 \001(\004\022\017\n\007node_id\030\004 \001(\004\022\021\n\tstartTime\030"
      "\005 \001(\003\022\017\n\007endTime\030\006 \001(\003\022/\n\016statisticsType"
      "\030\007 \001(\0162\027.eventpb.StatisticsType\"\270\003\n\005Even"
      "t\022 \n\004type\030\001 \001(\0162\022.eventpb.EventType\022:\n\025e"
      "vent_range_split_ack\030\002 \001(\0132\033.eventpb.Eve"
      "ntRangeSplitAck\022-\n\016event_raft_err\030\003 \001(\0132"
      "\025.eventpb.EventRaftErr\0228\n\024event_node_bui"
      "ld_ack\030\004 \001(\0132\032.eventpb.EventNodeBuildAck"
      "\022<\n\026event_range_delete_ack\030\005 \001(\0132\034.event"
      "pb.EventRangeDeleteAck\022=\n\026event_event_st"
      "atistics\030\006 \001(\0132\035.eventpb.EventEventStati"
      "stics\022:\n\025event_range_split_key\030\007 \001(\0132\033.e"
      "ventpb.EventRangeSplitKey\022/\n\017event_store"
      "_err\030\010 \001(\0132\026.eventpb.EventStoreErr*\207\001\n\tE"
      "ventType\022\021\n\rRangeSplitAck\020\000\022\013\n\007RaftErr\020\001"
      "\022\020\n\014NodeBuildAck\020\002\022\022\n\016RangeDeleteAck\020\003\022\023"
      "\n\017EventStatistics\020\004\022\021\n\rRangeSplitKey\020\005\022\014"
      "\n\010StoreErr\020\006*p\n\016StatisticsType\022\r\n\tRaftSp"
      "lit\020\000\022\021\n\rApplySnapshot\020\001\022\016\n\nLeaderLose\020\002"
      "\022\013\n\007PeerAdd\020\003\022\016\n\nPeerRemove\020\004\022\017\n\013LeaderR"
      "eign\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eventpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_eventpb_2eproto

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_enum_descriptors[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatisticsType_descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_enum_descriptors[1];
}
bool StatisticsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventRangeSplitAck::kTaskIdFieldNumber;
const int EventRangeSplitAck::kRangeFieldNumber;
const int EventRangeSplitAck::kLeftRangeFieldNumber;
const int EventRangeSplitAck::kRightRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventRangeSplitAck::EventRangeSplitAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventRangeSplitAck)
}
EventRangeSplitAck::EventRangeSplitAck(const EventRangeSplitAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  if (from.has_left_range()) {
    left_range_ = new ::metapb::Range(*from.left_range_);
  } else {
    left_range_ = NULL;
  }
  if (from.has_right_range()) {
    right_range_ = new ::metapb::Range(*from.right_range_);
  } else {
    right_range_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:eventpb.EventRangeSplitAck)
}

void EventRangeSplitAck::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&range_)) + sizeof(task_id_));
  _cached_size_ = 0;
}

EventRangeSplitAck::~EventRangeSplitAck() {
  // @@protoc_insertion_point(destructor:eventpb.EventRangeSplitAck)
  SharedDtor();
}

void EventRangeSplitAck::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete left_range_;
  if (this != internal_default_instance()) delete right_range_;
}

void EventRangeSplitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventRangeSplitAck::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventRangeSplitAck& EventRangeSplitAck::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventRangeSplitAck* EventRangeSplitAck::New(::google::protobuf::Arena* arena) const {
  EventRangeSplitAck* n = new EventRangeSplitAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventRangeSplitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventRangeSplitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_range_ != NULL) {
    delete left_range_;
  }
  left_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_range_ != NULL) {
    delete right_range_;
  }
  right_range_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool EventRangeSplitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventRangeSplitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range left_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range right_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventRangeSplitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventRangeSplitAck)
  return false;
#undef DO_
}

void EventRangeSplitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventRangeSplitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // .metapb.Range left_range = 3;
  if (this->has_left_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->left_range_, output);
  }

  // .metapb.Range right_range = 4;
  if (this->has_right_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->right_range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventRangeSplitAck)
}

::google::protobuf::uint8* EventRangeSplitAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventRangeSplitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // .metapb.Range left_range = 3;
  if (this->has_left_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->left_range_, deterministic, target);
  }

  // .metapb.Range right_range = 4;
  if (this->has_right_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->right_range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventRangeSplitAck)
  return target;
}

size_t EventRangeSplitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventRangeSplitAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // .metapb.Range left_range = 3;
  if (this->has_left_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_range_);
  }

  // .metapb.Range right_range = 4;
  if (this->has_right_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_range_);
  }

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRangeSplitAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventRangeSplitAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRangeSplitAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventRangeSplitAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventRangeSplitAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventRangeSplitAck)
    MergeFrom(*source);
  }
}

void EventRangeSplitAck::MergeFrom(const EventRangeSplitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventRangeSplitAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.has_left_range()) {
    mutable_left_range()->::metapb::Range::MergeFrom(from.left_range());
  }
  if (from.has_right_range()) {
    mutable_right_range()->::metapb::Range::MergeFrom(from.right_range());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void EventRangeSplitAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventRangeSplitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRangeSplitAck::CopyFrom(const EventRangeSplitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventRangeSplitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRangeSplitAck::IsInitialized() const {
  return true;
}

void EventRangeSplitAck::Swap(EventRangeSplitAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventRangeSplitAck::InternalSwap(EventRangeSplitAck* other) {
  using std::swap;
  swap(range_, other->range_);
  swap(left_range_, other->left_range_);
  swap(right_range_, other->right_range_);
  swap(task_id_, other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventRangeSplitAck::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventRangeSplitAck

// uint64 task_id = 1;
void EventRangeSplitAck::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventRangeSplitAck::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.task_id)
  return task_id_;
}
void EventRangeSplitAck::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitAck.task_id)
}

// .metapb.Range range = 2;
bool EventRangeSplitAck::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void EventRangeSplitAck::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& EventRangeSplitAck::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* EventRangeSplitAck::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.range)
  return range_;
}
::metapb::Range* EventRangeSplitAck::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void EventRangeSplitAck::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.range)
}

// .metapb.Range left_range = 3;
bool EventRangeSplitAck::has_left_range() const {
  return this != internal_default_instance() && left_range_ != NULL;
}
void EventRangeSplitAck::clear_left_range() {
  if (GetArenaNoVirtual() == NULL && left_range_ != NULL) delete left_range_;
  left_range_ = NULL;
}
const ::metapb::Range& EventRangeSplitAck::left_range() const {
  const ::metapb::Range* p = left_range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.left_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* EventRangeSplitAck::mutable_left_range() {
  
  if (left_range_ == NULL) {
    left_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.left_range)
  return left_range_;
}
::metapb::Range* EventRangeSplitAck::release_left_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.left_range)
  
  ::metapb::Range* temp = left_range_;
  left_range_ = NULL;
  return temp;
}
void EventRangeSplitAck::set_allocated_left_range(::metapb::Range* left_range) {
  delete left_range_;
  left_range_ = left_range;
  if (left_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.left_range)
}

// .metapb.Range right_range = 4;
bool EventRangeSplitAck::has_right_range() const {
  return this != internal_default_instance() && right_range_ != NULL;
}
void EventRangeSplitAck::clear_right_range() {
  if (GetArenaNoVirtual() == NULL && right_range_ != NULL) delete right_range_;
  right_range_ = NULL;
}
const ::metapb::Range& EventRangeSplitAck::right_range() const {
  const ::metapb::Range* p = right_range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitAck.right_range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* EventRangeSplitAck::mutable_right_range() {
  
  if (right_range_ == NULL) {
    right_range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitAck.right_range)
  return right_range_;
}
::metapb::Range* EventRangeSplitAck::release_right_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitAck.right_range)
  
  ::metapb::Range* temp = right_range_;
  right_range_ = NULL;
  return temp;
}
void EventRangeSplitAck::set_allocated_right_range(::metapb::Range* right_range) {
  delete right_range_;
  right_range_ = right_range;
  if (right_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitAck.right_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventRangeSplitKey::kTaskIdFieldNumber;
const int EventRangeSplitKey::kRangeFieldNumber;
const int EventRangeSplitKey::kSplitKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventRangeSplitKey::EventRangeSplitKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventRangeSplitKey)
}
EventRangeSplitKey::EventRangeSplitKey(const EventRangeSplitKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:eventpb.EventRangeSplitKey)
}

void EventRangeSplitKey::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&range_)) + sizeof(task_id_));
  _cached_size_ = 0;
}

EventRangeSplitKey::~EventRangeSplitKey() {
  // @@protoc_insertion_point(destructor:eventpb.EventRangeSplitKey)
  SharedDtor();
}

void EventRangeSplitKey::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void EventRangeSplitKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventRangeSplitKey::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventRangeSplitKey& EventRangeSplitKey::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventRangeSplitKey* EventRangeSplitKey::New(::google::protobuf::Arena* arena) const {
  EventRangeSplitKey* n = new EventRangeSplitKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventRangeSplitKey::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventRangeSplitKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool EventRangeSplitKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventRangeSplitKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes split_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventRangeSplitKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventRangeSplitKey)
  return false;
#undef DO_
}

void EventRangeSplitKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventRangeSplitKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->split_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventRangeSplitKey)
}

::google::protobuf::uint8* EventRangeSplitKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventRangeSplitKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->split_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventRangeSplitKey)
  return target;
}

size_t EventRangeSplitKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventRangeSplitKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes split_key = 3;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRangeSplitKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventRangeSplitKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRangeSplitKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventRangeSplitKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventRangeSplitKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventRangeSplitKey)
    MergeFrom(*source);
  }
}

void EventRangeSplitKey::MergeFrom(const EventRangeSplitKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventRangeSplitKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void EventRangeSplitKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventRangeSplitKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRangeSplitKey::CopyFrom(const EventRangeSplitKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventRangeSplitKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRangeSplitKey::IsInitialized() const {
  return true;
}

void EventRangeSplitKey::Swap(EventRangeSplitKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventRangeSplitKey::InternalSwap(EventRangeSplitKey* other) {
  using std::swap;
  split_key_.Swap(&other->split_key_);
  swap(range_, other->range_);
  swap(task_id_, other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventRangeSplitKey::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventRangeSplitKey

// uint64 task_id = 1;
void EventRangeSplitKey::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventRangeSplitKey::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.task_id)
  return task_id_;
}
void EventRangeSplitKey::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitKey.task_id)
}

// .metapb.Range range = 2;
bool EventRangeSplitKey::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void EventRangeSplitKey::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& EventRangeSplitKey::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* EventRangeSplitKey::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitKey.range)
  return range_;
}
::metapb::Range* EventRangeSplitKey::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitKey.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void EventRangeSplitKey::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitKey.range)
}

// bytes split_key = 3;
void EventRangeSplitKey::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventRangeSplitKey::split_key() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeSplitKey.split_key)
  return split_key_.GetNoArena();
}
void EventRangeSplitKey::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventRangeSplitKey.split_key)
}
#if LANG_CXX11
void EventRangeSplitKey::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventRangeSplitKey.split_key)
}
#endif
void EventRangeSplitKey::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventRangeSplitKey.split_key)
}
void EventRangeSplitKey::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventRangeSplitKey.split_key)
}
::std::string* EventRangeSplitKey::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeSplitKey.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventRangeSplitKey::release_split_key() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeSplitKey.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventRangeSplitKey::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeSplitKey.split_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventRangeDeleteAck::kTaskIdFieldNumber;
const int EventRangeDeleteAck::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventRangeDeleteAck::EventRangeDeleteAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventRangeDeleteAck)
}
EventRangeDeleteAck::EventRangeDeleteAck(const EventRangeDeleteAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::metapb::Range(*from.range_);
  } else {
    range_ = NULL;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:eventpb.EventRangeDeleteAck)
}

void EventRangeDeleteAck::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&range_)) + sizeof(task_id_));
  _cached_size_ = 0;
}

EventRangeDeleteAck::~EventRangeDeleteAck() {
  // @@protoc_insertion_point(destructor:eventpb.EventRangeDeleteAck)
  SharedDtor();
}

void EventRangeDeleteAck::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
}

void EventRangeDeleteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventRangeDeleteAck::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventRangeDeleteAck& EventRangeDeleteAck::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventRangeDeleteAck* EventRangeDeleteAck::New(::google::protobuf::Arena* arena) const {
  EventRangeDeleteAck* n = new EventRangeDeleteAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventRangeDeleteAck::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventRangeDeleteAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool EventRangeDeleteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventRangeDeleteAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Range range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventRangeDeleteAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventRangeDeleteAck)
  return false;
#undef DO_
}

void EventRangeDeleteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventRangeDeleteAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventRangeDeleteAck)
}

::google::protobuf::uint8* EventRangeDeleteAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventRangeDeleteAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // .metapb.Range range = 2;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->range_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventRangeDeleteAck)
  return target;
}

size_t EventRangeDeleteAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventRangeDeleteAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .metapb.Range range = 2;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRangeDeleteAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventRangeDeleteAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRangeDeleteAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventRangeDeleteAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventRangeDeleteAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventRangeDeleteAck)
    MergeFrom(*source);
  }
}

void EventRangeDeleteAck::MergeFrom(const EventRangeDeleteAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventRangeDeleteAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_range()) {
    mutable_range()->::metapb::Range::MergeFrom(from.range());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
}

void EventRangeDeleteAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventRangeDeleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRangeDeleteAck::CopyFrom(const EventRangeDeleteAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventRangeDeleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRangeDeleteAck::IsInitialized() const {
  return true;
}

void EventRangeDeleteAck::Swap(EventRangeDeleteAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventRangeDeleteAck::InternalSwap(EventRangeDeleteAck* other) {
  using std::swap;
  swap(range_, other->range_);
  swap(task_id_, other->task_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventRangeDeleteAck::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventRangeDeleteAck

// uint64 task_id = 1;
void EventRangeDeleteAck::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventRangeDeleteAck::task_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRangeDeleteAck.task_id)
  return task_id_;
}
void EventRangeDeleteAck::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRangeDeleteAck.task_id)
}

// .metapb.Range range = 2;
bool EventRangeDeleteAck::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void EventRangeDeleteAck::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::metapb::Range& EventRangeDeleteAck::range() const {
  const ::metapb::Range* p = range_;
  // @@protoc_insertion_point(field_get:eventpb.EventRangeDeleteAck.range)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Range*>(
      &::metapb::_Range_default_instance_);
}
::metapb::Range* EventRangeDeleteAck::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::metapb::Range;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.EventRangeDeleteAck.range)
  return range_;
}
::metapb::Range* EventRangeDeleteAck::release_range() {
  // @@protoc_insertion_point(field_release:eventpb.EventRangeDeleteAck.range)
  
  ::metapb::Range* temp = range_;
  range_ = NULL;
  return temp;
}
void EventRangeDeleteAck::set_allocated_range(::metapb::Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRangeDeleteAck.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventRaftErr::kNodeIdFieldNumber;
const int EventRaftErr::kRangeIdFieldNumber;
const int EventRaftErr::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventRaftErr::EventRaftErr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventRaftErr)
}
EventRaftErr::EventRaftErr(const EventRaftErr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  // @@protoc_insertion_point(copy_constructor:eventpb.EventRaftErr)
}

void EventRaftErr::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

EventRaftErr::~EventRaftErr() {
  // @@protoc_insertion_point(destructor:eventpb.EventRaftErr)
  SharedDtor();
}

void EventRaftErr::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventRaftErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventRaftErr::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventRaftErr& EventRaftErr::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventRaftErr* EventRaftErr::New(::google::protobuf::Arena* arena) const {
  EventRaftErr* n = new EventRaftErr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventRaftErr::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventRaftErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  _internal_metadata_.Clear();
}

bool EventRaftErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventRaftErr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventRaftErr.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventRaftErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventRaftErr)
  return false;
#undef DO_
}

void EventRaftErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventRaftErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventRaftErr.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventRaftErr)
}

::google::protobuf::uint8* EventRaftErr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventRaftErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventRaftErr.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventRaftErr)
  return target;
}

size_t EventRaftErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventRaftErr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRaftErr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventRaftErr)
  GOOGLE_DCHECK_NE(&from, this);
  const EventRaftErr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventRaftErr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventRaftErr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventRaftErr)
    MergeFrom(*source);
  }
}

void EventRaftErr::MergeFrom(const EventRaftErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventRaftErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void EventRaftErr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventRaftErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRaftErr::CopyFrom(const EventRaftErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventRaftErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRaftErr::IsInitialized() const {
  return true;
}

void EventRaftErr::Swap(EventRaftErr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventRaftErr::InternalSwap(EventRaftErr* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(node_id_, other->node_id_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventRaftErr::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventRaftErr

// uint64 node_id = 1;
void EventRaftErr::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventRaftErr::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.node_id)
  return node_id_;
}
void EventRaftErr::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.node_id)
}

// uint64 range_id = 2;
void EventRaftErr::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventRaftErr::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.range_id)
  return range_id_;
}
void EventRaftErr::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.range_id)
}

// string error = 3;
void EventRaftErr::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventRaftErr::error() const {
  // @@protoc_insertion_point(field_get:eventpb.EventRaftErr.error)
  return error_.GetNoArena();
}
void EventRaftErr::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventRaftErr.error)
}
#if LANG_CXX11
void EventRaftErr::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventRaftErr.error)
}
#endif
void EventRaftErr::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventRaftErr.error)
}
void EventRaftErr::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventRaftErr.error)
}
::std::string* EventRaftErr::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventRaftErr.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventRaftErr::release_error() {
  // @@protoc_insertion_point(field_release:eventpb.EventRaftErr.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventRaftErr::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventRaftErr.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventStoreErr::kNodeIdFieldNumber;
const int EventStoreErr::kRangeIdFieldNumber;
const int EventStoreErr::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventStoreErr::EventStoreErr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventStoreErr)
}
EventStoreErr::EventStoreErr(const EventStoreErr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  // @@protoc_insertion_point(copy_constructor:eventpb.EventStoreErr)
}

void EventStoreErr::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  _cached_size_ = 0;
}

EventStoreErr::~EventStoreErr() {
  // @@protoc_insertion_point(destructor:eventpb.EventStoreErr)
  SharedDtor();
}

void EventStoreErr::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventStoreErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventStoreErr::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventStoreErr& EventStoreErr::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventStoreErr* EventStoreErr::New(::google::protobuf::Arena* arena) const {
  EventStoreErr* n = new EventStoreErr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventStoreErr::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventStoreErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(range_id_));
  _internal_metadata_.Clear();
}

bool EventStoreErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventStoreErr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventStoreErr.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventStoreErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventStoreErr)
  return false;
#undef DO_
}

void EventStoreErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventStoreErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->range_id(), output);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventStoreErr.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventStoreErr)
}

::google::protobuf::uint8* EventStoreErr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventStoreErr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->range_id(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventStoreErr.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventStoreErr)
  return target;
}

size_t EventStoreErr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventStoreErr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // uint64 range_id = 2;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventStoreErr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventStoreErr)
  GOOGLE_DCHECK_NE(&from, this);
  const EventStoreErr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventStoreErr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventStoreErr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventStoreErr)
    MergeFrom(*source);
  }
}

void EventStoreErr::MergeFrom(const EventStoreErr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventStoreErr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
}

void EventStoreErr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventStoreErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventStoreErr::CopyFrom(const EventStoreErr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventStoreErr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStoreErr::IsInitialized() const {
  return true;
}

void EventStoreErr::Swap(EventStoreErr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventStoreErr::InternalSwap(EventStoreErr* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(node_id_, other->node_id_);
  swap(range_id_, other->range_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventStoreErr::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventStoreErr

// uint64 node_id = 1;
void EventStoreErr::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventStoreErr::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.node_id)
  return node_id_;
}
void EventStoreErr::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.node_id)
}

// uint64 range_id = 2;
void EventStoreErr::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventStoreErr::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.range_id)
  return range_id_;
}
void EventStoreErr::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.range_id)
}

// string error = 3;
void EventStoreErr::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventStoreErr::error() const {
  // @@protoc_insertion_point(field_get:eventpb.EventStoreErr.error)
  return error_.GetNoArena();
}
void EventStoreErr::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventStoreErr.error)
}
#if LANG_CXX11
void EventStoreErr::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventStoreErr.error)
}
#endif
void EventStoreErr::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventStoreErr.error)
}
void EventStoreErr::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventStoreErr.error)
}
::std::string* EventStoreErr::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventStoreErr.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventStoreErr::release_error() {
  // @@protoc_insertion_point(field_release:eventpb.EventStoreErr.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventStoreErr::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventStoreErr.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventNodeBuildAck::kIpFieldNumber;
const int EventNodeBuildAck::kKeyFieldNumber;
const int EventNodeBuildAck::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventNodeBuildAck::EventNodeBuildAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventNodeBuildAck)
}
EventNodeBuildAck::EventNodeBuildAck(const EventNodeBuildAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  // @@protoc_insertion_point(copy_constructor:eventpb.EventNodeBuildAck)
}

void EventNodeBuildAck::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EventNodeBuildAck::~EventNodeBuildAck() {
  // @@protoc_insertion_point(destructor:eventpb.EventNodeBuildAck)
  SharedDtor();
}

void EventNodeBuildAck::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventNodeBuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventNodeBuildAck::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventNodeBuildAck& EventNodeBuildAck::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventNodeBuildAck* EventNodeBuildAck::New(::google::protobuf::Arena* arena) const {
  EventNodeBuildAck* n = new EventNodeBuildAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventNodeBuildAck::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventNodeBuildAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EventNodeBuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventNodeBuildAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventNodeBuildAck.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventNodeBuildAck.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), static_cast<int>(this->err().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventNodeBuildAck.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventNodeBuildAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventNodeBuildAck)
  return false;
#undef DO_
}

void EventNodeBuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventNodeBuildAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string err = 3;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->err(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventNodeBuildAck)
}

::google::protobuf::uint8* EventNodeBuildAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventNodeBuildAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string err = 3;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), static_cast<int>(this->err().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventNodeBuildAck.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventNodeBuildAck)
  return target;
}

size_t EventNodeBuildAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventNodeBuildAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string err = 3;
  if (this->err().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventNodeBuildAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventNodeBuildAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EventNodeBuildAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventNodeBuildAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventNodeBuildAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventNodeBuildAck)
    MergeFrom(*source);
  }
}

void EventNodeBuildAck::MergeFrom(const EventNodeBuildAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventNodeBuildAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
}

void EventNodeBuildAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventNodeBuildAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventNodeBuildAck::CopyFrom(const EventNodeBuildAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventNodeBuildAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventNodeBuildAck::IsInitialized() const {
  return true;
}

void EventNodeBuildAck::Swap(EventNodeBuildAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventNodeBuildAck::InternalSwap(EventNodeBuildAck* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  key_.Swap(&other->key_);
  err_.Swap(&other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventNodeBuildAck::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventNodeBuildAck

// string ip = 1;
void EventNodeBuildAck::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventNodeBuildAck::ip() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.ip)
  return ip_.GetNoArena();
}
void EventNodeBuildAck::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.ip)
}
#if LANG_CXX11
void EventNodeBuildAck::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.ip)
}
#endif
void EventNodeBuildAck::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.ip)
}
void EventNodeBuildAck::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.ip)
}
::std::string* EventNodeBuildAck::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventNodeBuildAck::release_ip() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventNodeBuildAck::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.ip)
}

// string key = 2;
void EventNodeBuildAck::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventNodeBuildAck::key() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.key)
  return key_.GetNoArena();
}
void EventNodeBuildAck::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.key)
}
#if LANG_CXX11
void EventNodeBuildAck::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.key)
}
#endif
void EventNodeBuildAck::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.key)
}
void EventNodeBuildAck::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.key)
}
::std::string* EventNodeBuildAck::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventNodeBuildAck::release_key() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventNodeBuildAck::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.key)
}

// string err = 3;
void EventNodeBuildAck::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventNodeBuildAck::err() const {
  // @@protoc_insertion_point(field_get:eventpb.EventNodeBuildAck.err)
  return err_.GetNoArena();
}
void EventNodeBuildAck::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventNodeBuildAck.err)
}
#if LANG_CXX11
void EventNodeBuildAck::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventNodeBuildAck.err)
}
#endif
void EventNodeBuildAck::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventNodeBuildAck.err)
}
void EventNodeBuildAck::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventNodeBuildAck.err)
}
::std::string* EventNodeBuildAck::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventNodeBuildAck.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventNodeBuildAck::release_err() {
  // @@protoc_insertion_point(field_release:eventpb.EventNodeBuildAck.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventNodeBuildAck::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventNodeBuildAck.err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventEventStatistics::kDbNameFieldNumber;
const int EventEventStatistics::kTableNameFieldNumber;
const int EventEventStatistics::kRangeIdFieldNumber;
const int EventEventStatistics::kNodeIdFieldNumber;
const int EventEventStatistics::kStartTimeFieldNumber;
const int EventEventStatistics::kEndTimeFieldNumber;
const int EventEventStatistics::kStatisticsTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventEventStatistics::EventEventStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.EventEventStatistics)
}
EventEventStatistics::EventEventStatistics(const EventEventStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  ::memcpy(&range_id_, &from.range_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&statisticstype_) -
    reinterpret_cast<char*>(&range_id_)) + sizeof(statisticstype_));
  // @@protoc_insertion_point(copy_constructor:eventpb.EventEventStatistics)
}

void EventEventStatistics::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstype_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(statisticstype_));
  _cached_size_ = 0;
}

EventEventStatistics::~EventEventStatistics() {
  // @@protoc_insertion_point(destructor:eventpb.EventEventStatistics)
  SharedDtor();
}

void EventEventStatistics::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventEventStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventEventStatistics::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventEventStatistics& EventEventStatistics::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventEventStatistics* EventEventStatistics::New(::google::protobuf::Arena* arena) const {
  EventEventStatistics* n = new EventEventStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventEventStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.EventEventStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstype_) -
      reinterpret_cast<char*>(&range_id_)) + sizeof(statisticstype_));
  _internal_metadata_.Clear();
}

bool EventEventStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.EventEventStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventEventStatistics.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eventpb.EventEventStatistics.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 node_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 startTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 endTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.StatisticsType statisticsType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statisticstype(static_cast< ::eventpb::StatisticsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.EventEventStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.EventEventStatistics)
  return false;
#undef DO_
}

void EventEventStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.EventEventStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventEventStatistics.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventEventStatistics.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->range_id(), output);
  }

  // uint64 node_id = 4;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->node_id(), output);
  }

  // int64 startTime = 5;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starttime(), output);
  }

  // int64 endTime = 6;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  // .eventpb.StatisticsType statisticsType = 7;
  if (this->statisticstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->statisticstype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.EventEventStatistics)
}

::google::protobuf::uint8* EventEventStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.EventEventStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventEventStatistics.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eventpb.EventEventStatistics.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->range_id(), target);
  }

  // uint64 node_id = 4;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->node_id(), target);
  }

  // int64 startTime = 5;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starttime(), target);
  }

  // int64 endTime = 6;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }

  // .eventpb.StatisticsType statisticsType = 7;
  if (this->statisticstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->statisticstype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.EventEventStatistics)
  return target;
}

size_t EventEventStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.EventEventStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // uint64 range_id = 3;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 node_id = 4;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // int64 startTime = 5;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());
  }

  // int64 endTime = 6;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());
  }

  // .eventpb.StatisticsType statisticsType = 7;
  if (this->statisticstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventEventStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.EventEventStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const EventEventStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventEventStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.EventEventStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.EventEventStatistics)
    MergeFrom(*source);
  }
}

void EventEventStatistics::MergeFrom(const EventEventStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.EventEventStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.statisticstype() != 0) {
    set_statisticstype(from.statisticstype());
  }
}

void EventEventStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.EventEventStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventEventStatistics::CopyFrom(const EventEventStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.EventEventStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventEventStatistics::IsInitialized() const {
  return true;
}

void EventEventStatistics::Swap(EventEventStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventEventStatistics::InternalSwap(EventEventStatistics* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_);
  table_name_.Swap(&other->table_name_);
  swap(range_id_, other->range_id_);
  swap(node_id_, other->node_id_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(statisticstype_, other->statisticstype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventEventStatistics::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventEventStatistics

// string db_name = 1;
void EventEventStatistics::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventEventStatistics::db_name() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.db_name)
  return db_name_.GetNoArena();
}
void EventEventStatistics::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.db_name)
}
#if LANG_CXX11
void EventEventStatistics::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventEventStatistics.db_name)
}
#endif
void EventEventStatistics::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventEventStatistics.db_name)
}
void EventEventStatistics::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventEventStatistics.db_name)
}
::std::string* EventEventStatistics::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventEventStatistics.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventEventStatistics::release_db_name() {
  // @@protoc_insertion_point(field_release:eventpb.EventEventStatistics.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventEventStatistics::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventEventStatistics.db_name)
}

// string table_name = 2;
void EventEventStatistics::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventEventStatistics::table_name() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.table_name)
  return table_name_.GetNoArena();
}
void EventEventStatistics::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.table_name)
}
#if LANG_CXX11
void EventEventStatistics::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eventpb.EventEventStatistics.table_name)
}
#endif
void EventEventStatistics::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eventpb.EventEventStatistics.table_name)
}
void EventEventStatistics::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eventpb.EventEventStatistics.table_name)
}
::std::string* EventEventStatistics::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:eventpb.EventEventStatistics.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventEventStatistics::release_table_name() {
  // @@protoc_insertion_point(field_release:eventpb.EventEventStatistics.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventEventStatistics::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:eventpb.EventEventStatistics.table_name)
}

// uint64 range_id = 3;
void EventEventStatistics::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventEventStatistics::range_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.range_id)
  return range_id_;
}
void EventEventStatistics::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.range_id)
}

// uint64 node_id = 4;
void EventEventStatistics::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventEventStatistics::node_id() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.node_id)
  return node_id_;
}
void EventEventStatistics::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.node_id)
}

// int64 startTime = 5;
void EventEventStatistics::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EventEventStatistics::starttime() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.startTime)
  return starttime_;
}
void EventEventStatistics::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.startTime)
}

// int64 endTime = 6;
void EventEventStatistics::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EventEventStatistics::endtime() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.endTime)
  return endtime_;
}
void EventEventStatistics::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.endTime)
}

// .eventpb.StatisticsType statisticsType = 7;
void EventEventStatistics::clear_statisticstype() {
  statisticstype_ = 0;
}
::eventpb::StatisticsType EventEventStatistics::statisticstype() const {
  // @@protoc_insertion_point(field_get:eventpb.EventEventStatistics.statisticsType)
  return static_cast< ::eventpb::StatisticsType >(statisticstype_);
}
void EventEventStatistics::set_statisticstype(::eventpb::StatisticsType value) {
  
  statisticstype_ = value;
  // @@protoc_insertion_point(field_set:eventpb.EventEventStatistics.statisticsType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTypeFieldNumber;
const int Event::kEventRangeSplitAckFieldNumber;
const int Event::kEventRaftErrFieldNumber;
const int Event::kEventNodeBuildAckFieldNumber;
const int Event::kEventRangeDeleteAckFieldNumber;
const int Event::kEventEventStatisticsFieldNumber;
const int Event::kEventRangeSplitKeyFieldNumber;
const int Event::kEventStoreErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eventpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eventpb.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event_range_split_ack()) {
    event_range_split_ack_ = new ::eventpb::EventRangeSplitAck(*from.event_range_split_ack_);
  } else {
    event_range_split_ack_ = NULL;
  }
  if (from.has_event_raft_err()) {
    event_raft_err_ = new ::eventpb::EventRaftErr(*from.event_raft_err_);
  } else {
    event_raft_err_ = NULL;
  }
  if (from.has_event_node_build_ack()) {
    event_node_build_ack_ = new ::eventpb::EventNodeBuildAck(*from.event_node_build_ack_);
  } else {
    event_node_build_ack_ = NULL;
  }
  if (from.has_event_range_delete_ack()) {
    event_range_delete_ack_ = new ::eventpb::EventRangeDeleteAck(*from.event_range_delete_ack_);
  } else {
    event_range_delete_ack_ = NULL;
  }
  if (from.has_event_event_statistics()) {
    event_event_statistics_ = new ::eventpb::EventEventStatistics(*from.event_event_statistics_);
  } else {
    event_event_statistics_ = NULL;
  }
  if (from.has_event_range_split_key()) {
    event_range_split_key_ = new ::eventpb::EventRangeSplitKey(*from.event_range_split_key_);
  } else {
    event_range_split_key_ = NULL;
  }
  if (from.has_event_store_err()) {
    event_store_err_ = new ::eventpb::EventStoreErr(*from.event_store_err_);
  } else {
    event_store_err_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:eventpb.Event)
}

void Event::SharedCtor() {
  ::memset(&event_range_split_ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&event_range_split_ack_)) + sizeof(type_));
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:eventpb.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete event_range_split_ack_;
  if (this != internal_default_instance()) delete event_raft_err_;
  if (this != internal_default_instance()) delete event_node_build_ack_;
  if (this != internal_default_instance()) delete event_range_delete_ack_;
  if (this != internal_default_instance()) delete event_event_statistics_;
  if (this != internal_default_instance()) delete event_range_split_key_;
  if (this != internal_default_instance()) delete event_store_err_;
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  protobuf_eventpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:eventpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && event_range_split_ack_ != NULL) {
    delete event_range_split_ack_;
  }
  event_range_split_ack_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_raft_err_ != NULL) {
    delete event_raft_err_;
  }
  event_raft_err_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_node_build_ack_ != NULL) {
    delete event_node_build_ack_;
  }
  event_node_build_ack_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_range_delete_ack_ != NULL) {
    delete event_range_delete_ack_;
  }
  event_range_delete_ack_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_event_statistics_ != NULL) {
    delete event_event_statistics_;
  }
  event_event_statistics_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_range_split_key_ != NULL) {
    delete event_range_split_key_;
  }
  event_range_split_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_store_err_ != NULL) {
    delete event_store_err_;
  }
  event_store_err_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eventpb.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .eventpb.EventType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::eventpb::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventRangeSplitAck event_range_split_ack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_range_split_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventRaftErr event_raft_err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_raft_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventNodeBuildAck event_node_build_ack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_node_build_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_range_delete_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventEventStatistics event_event_statistics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_event_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventRangeSplitKey event_range_split_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_range_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eventpb.EventStoreErr event_store_err = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_store_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eventpb.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eventpb.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eventpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eventpb.EventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .eventpb.EventRangeSplitAck event_range_split_ack = 2;
  if (this->has_event_range_split_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->event_range_split_ack_, output);
  }

  // .eventpb.EventRaftErr event_raft_err = 3;
  if (this->has_event_raft_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->event_raft_err_, output);
  }

  // .eventpb.EventNodeBuildAck event_node_build_ack = 4;
  if (this->has_event_node_build_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->event_node_build_ack_, output);
  }

  // .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
  if (this->has_event_range_delete_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->event_range_delete_ack_, output);
  }

  // .eventpb.EventEventStatistics event_event_statistics = 6;
  if (this->has_event_event_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->event_event_statistics_, output);
  }

  // .eventpb.EventRangeSplitKey event_range_split_key = 7;
  if (this->has_event_range_split_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->event_range_split_key_, output);
  }

  // .eventpb.EventStoreErr event_store_err = 8;
  if (this->has_event_store_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->event_store_err_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:eventpb.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eventpb.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eventpb.EventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .eventpb.EventRangeSplitAck event_range_split_ack = 2;
  if (this->has_event_range_split_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->event_range_split_ack_, deterministic, target);
  }

  // .eventpb.EventRaftErr event_raft_err = 3;
  if (this->has_event_raft_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->event_raft_err_, deterministic, target);
  }

  // .eventpb.EventNodeBuildAck event_node_build_ack = 4;
  if (this->has_event_node_build_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->event_node_build_ack_, deterministic, target);
  }

  // .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
  if (this->has_event_range_delete_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->event_range_delete_ack_, deterministic, target);
  }

  // .eventpb.EventEventStatistics event_event_statistics = 6;
  if (this->has_event_event_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->event_event_statistics_, deterministic, target);
  }

  // .eventpb.EventRangeSplitKey event_range_split_key = 7;
  if (this->has_event_range_split_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->event_range_split_key_, deterministic, target);
  }

  // .eventpb.EventStoreErr event_store_err = 8;
  if (this->has_event_store_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->event_store_err_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eventpb.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eventpb.Event)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .eventpb.EventRangeSplitAck event_range_split_ack = 2;
  if (this->has_event_range_split_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_range_split_ack_);
  }

  // .eventpb.EventRaftErr event_raft_err = 3;
  if (this->has_event_raft_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_raft_err_);
  }

  // .eventpb.EventNodeBuildAck event_node_build_ack = 4;
  if (this->has_event_node_build_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_node_build_ack_);
  }

  // .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
  if (this->has_event_range_delete_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_range_delete_ack_);
  }

  // .eventpb.EventEventStatistics event_event_statistics = 6;
  if (this->has_event_event_statistics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_event_statistics_);
  }

  // .eventpb.EventRangeSplitKey event_range_split_key = 7;
  if (this->has_event_range_split_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_range_split_key_);
  }

  // .eventpb.EventStoreErr event_store_err = 8;
  if (this->has_event_store_err()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_store_err_);
  }

  // .eventpb.EventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eventpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eventpb.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eventpb.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eventpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_event_range_split_ack()) {
    mutable_event_range_split_ack()->::eventpb::EventRangeSplitAck::MergeFrom(from.event_range_split_ack());
  }
  if (from.has_event_raft_err()) {
    mutable_event_raft_err()->::eventpb::EventRaftErr::MergeFrom(from.event_raft_err());
  }
  if (from.has_event_node_build_ack()) {
    mutable_event_node_build_ack()->::eventpb::EventNodeBuildAck::MergeFrom(from.event_node_build_ack());
  }
  if (from.has_event_range_delete_ack()) {
    mutable_event_range_delete_ack()->::eventpb::EventRangeDeleteAck::MergeFrom(from.event_range_delete_ack());
  }
  if (from.has_event_event_statistics()) {
    mutable_event_event_statistics()->::eventpb::EventEventStatistics::MergeFrom(from.event_event_statistics());
  }
  if (from.has_event_range_split_key()) {
    mutable_event_range_split_key()->::eventpb::EventRangeSplitKey::MergeFrom(from.event_range_split_key());
  }
  if (from.has_event_store_err()) {
    mutable_event_store_err()->::eventpb::EventStoreErr::MergeFrom(from.event_store_err());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eventpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eventpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(event_range_split_ack_, other->event_range_split_ack_);
  swap(event_raft_err_, other->event_raft_err_);
  swap(event_node_build_ack_, other->event_node_build_ack_);
  swap(event_range_delete_ack_, other->event_range_delete_ack_);
  swap(event_event_statistics_, other->event_event_statistics_);
  swap(event_range_split_key_, other->event_range_split_key_);
  swap(event_store_err_, other->event_store_err_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_eventpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eventpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// .eventpb.EventType type = 1;
void Event::clear_type() {
  type_ = 0;
}
::eventpb::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:eventpb.Event.type)
  return static_cast< ::eventpb::EventType >(type_);
}
void Event::set_type(::eventpb::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eventpb.Event.type)
}

// .eventpb.EventRangeSplitAck event_range_split_ack = 2;
bool Event::has_event_range_split_ack() const {
  return this != internal_default_instance() && event_range_split_ack_ != NULL;
}
void Event::clear_event_range_split_ack() {
  if (GetArenaNoVirtual() == NULL && event_range_split_ack_ != NULL) delete event_range_split_ack_;
  event_range_split_ack_ = NULL;
}
const ::eventpb::EventRangeSplitAck& Event::event_range_split_ack() const {
  const ::eventpb::EventRangeSplitAck* p = event_range_split_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_split_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeSplitAck*>(
      &::eventpb::_EventRangeSplitAck_default_instance_);
}
::eventpb::EventRangeSplitAck* Event::mutable_event_range_split_ack() {
  
  if (event_range_split_ack_ == NULL) {
    event_range_split_ack_ = new ::eventpb::EventRangeSplitAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_split_ack)
  return event_range_split_ack_;
}
::eventpb::EventRangeSplitAck* Event::release_event_range_split_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_split_ack)
  
  ::eventpb::EventRangeSplitAck* temp = event_range_split_ack_;
  event_range_split_ack_ = NULL;
  return temp;
}
void Event::set_allocated_event_range_split_ack(::eventpb::EventRangeSplitAck* event_range_split_ack) {
  delete event_range_split_ack_;
  event_range_split_ack_ = event_range_split_ack;
  if (event_range_split_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_split_ack)
}

// .eventpb.EventRaftErr event_raft_err = 3;
bool Event::has_event_raft_err() const {
  return this != internal_default_instance() && event_raft_err_ != NULL;
}
void Event::clear_event_raft_err() {
  if (GetArenaNoVirtual() == NULL && event_raft_err_ != NULL) delete event_raft_err_;
  event_raft_err_ = NULL;
}
const ::eventpb::EventRaftErr& Event::event_raft_err() const {
  const ::eventpb::EventRaftErr* p = event_raft_err_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_raft_err)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRaftErr*>(
      &::eventpb::_EventRaftErr_default_instance_);
}
::eventpb::EventRaftErr* Event::mutable_event_raft_err() {
  
  if (event_raft_err_ == NULL) {
    event_raft_err_ = new ::eventpb::EventRaftErr;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_raft_err)
  return event_raft_err_;
}
::eventpb::EventRaftErr* Event::release_event_raft_err() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_raft_err)
  
  ::eventpb::EventRaftErr* temp = event_raft_err_;
  event_raft_err_ = NULL;
  return temp;
}
void Event::set_allocated_event_raft_err(::eventpb::EventRaftErr* event_raft_err) {
  delete event_raft_err_;
  event_raft_err_ = event_raft_err;
  if (event_raft_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_raft_err)
}

// .eventpb.EventNodeBuildAck event_node_build_ack = 4;
bool Event::has_event_node_build_ack() const {
  return this != internal_default_instance() && event_node_build_ack_ != NULL;
}
void Event::clear_event_node_build_ack() {
  if (GetArenaNoVirtual() == NULL && event_node_build_ack_ != NULL) delete event_node_build_ack_;
  event_node_build_ack_ = NULL;
}
const ::eventpb::EventNodeBuildAck& Event::event_node_build_ack() const {
  const ::eventpb::EventNodeBuildAck* p = event_node_build_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_node_build_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventNodeBuildAck*>(
      &::eventpb::_EventNodeBuildAck_default_instance_);
}
::eventpb::EventNodeBuildAck* Event::mutable_event_node_build_ack() {
  
  if (event_node_build_ack_ == NULL) {
    event_node_build_ack_ = new ::eventpb::EventNodeBuildAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_node_build_ack)
  return event_node_build_ack_;
}
::eventpb::EventNodeBuildAck* Event::release_event_node_build_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_node_build_ack)
  
  ::eventpb::EventNodeBuildAck* temp = event_node_build_ack_;
  event_node_build_ack_ = NULL;
  return temp;
}
void Event::set_allocated_event_node_build_ack(::eventpb::EventNodeBuildAck* event_node_build_ack) {
  delete event_node_build_ack_;
  event_node_build_ack_ = event_node_build_ack;
  if (event_node_build_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_node_build_ack)
}

// .eventpb.EventRangeDeleteAck event_range_delete_ack = 5;
bool Event::has_event_range_delete_ack() const {
  return this != internal_default_instance() && event_range_delete_ack_ != NULL;
}
void Event::clear_event_range_delete_ack() {
  if (GetArenaNoVirtual() == NULL && event_range_delete_ack_ != NULL) delete event_range_delete_ack_;
  event_range_delete_ack_ = NULL;
}
const ::eventpb::EventRangeDeleteAck& Event::event_range_delete_ack() const {
  const ::eventpb::EventRangeDeleteAck* p = event_range_delete_ack_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_delete_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeDeleteAck*>(
      &::eventpb::_EventRangeDeleteAck_default_instance_);
}
::eventpb::EventRangeDeleteAck* Event::mutable_event_range_delete_ack() {
  
  if (event_range_delete_ack_ == NULL) {
    event_range_delete_ack_ = new ::eventpb::EventRangeDeleteAck;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_delete_ack)
  return event_range_delete_ack_;
}
::eventpb::EventRangeDeleteAck* Event::release_event_range_delete_ack() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_delete_ack)
  
  ::eventpb::EventRangeDeleteAck* temp = event_range_delete_ack_;
  event_range_delete_ack_ = NULL;
  return temp;
}
void Event::set_allocated_event_range_delete_ack(::eventpb::EventRangeDeleteAck* event_range_delete_ack) {
  delete event_range_delete_ack_;
  event_range_delete_ack_ = event_range_delete_ack;
  if (event_range_delete_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_delete_ack)
}

// .eventpb.EventEventStatistics event_event_statistics = 6;
bool Event::has_event_event_statistics() const {
  return this != internal_default_instance() && event_event_statistics_ != NULL;
}
void Event::clear_event_event_statistics() {
  if (GetArenaNoVirtual() == NULL && event_event_statistics_ != NULL) delete event_event_statistics_;
  event_event_statistics_ = NULL;
}
const ::eventpb::EventEventStatistics& Event::event_event_statistics() const {
  const ::eventpb::EventEventStatistics* p = event_event_statistics_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_event_statistics)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventEventStatistics*>(
      &::eventpb::_EventEventStatistics_default_instance_);
}
::eventpb::EventEventStatistics* Event::mutable_event_event_statistics() {
  
  if (event_event_statistics_ == NULL) {
    event_event_statistics_ = new ::eventpb::EventEventStatistics;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_event_statistics)
  return event_event_statistics_;
}
::eventpb::EventEventStatistics* Event::release_event_event_statistics() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_event_statistics)
  
  ::eventpb::EventEventStatistics* temp = event_event_statistics_;
  event_event_statistics_ = NULL;
  return temp;
}
void Event::set_allocated_event_event_statistics(::eventpb::EventEventStatistics* event_event_statistics) {
  delete event_event_statistics_;
  event_event_statistics_ = event_event_statistics;
  if (event_event_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_event_statistics)
}

// .eventpb.EventRangeSplitKey event_range_split_key = 7;
bool Event::has_event_range_split_key() const {
  return this != internal_default_instance() && event_range_split_key_ != NULL;
}
void Event::clear_event_range_split_key() {
  if (GetArenaNoVirtual() == NULL && event_range_split_key_ != NULL) delete event_range_split_key_;
  event_range_split_key_ = NULL;
}
const ::eventpb::EventRangeSplitKey& Event::event_range_split_key() const {
  const ::eventpb::EventRangeSplitKey* p = event_range_split_key_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_range_split_key)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventRangeSplitKey*>(
      &::eventpb::_EventRangeSplitKey_default_instance_);
}
::eventpb::EventRangeSplitKey* Event::mutable_event_range_split_key() {
  
  if (event_range_split_key_ == NULL) {
    event_range_split_key_ = new ::eventpb::EventRangeSplitKey;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_range_split_key)
  return event_range_split_key_;
}
::eventpb::EventRangeSplitKey* Event::release_event_range_split_key() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_range_split_key)
  
  ::eventpb::EventRangeSplitKey* temp = event_range_split_key_;
  event_range_split_key_ = NULL;
  return temp;
}
void Event::set_allocated_event_range_split_key(::eventpb::EventRangeSplitKey* event_range_split_key) {
  delete event_range_split_key_;
  event_range_split_key_ = event_range_split_key;
  if (event_range_split_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_range_split_key)
}

// .eventpb.EventStoreErr event_store_err = 8;
bool Event::has_event_store_err() const {
  return this != internal_default_instance() && event_store_err_ != NULL;
}
void Event::clear_event_store_err() {
  if (GetArenaNoVirtual() == NULL && event_store_err_ != NULL) delete event_store_err_;
  event_store_err_ = NULL;
}
const ::eventpb::EventStoreErr& Event::event_store_err() const {
  const ::eventpb::EventStoreErr* p = event_store_err_;
  // @@protoc_insertion_point(field_get:eventpb.Event.event_store_err)
  return p != NULL ? *p : *reinterpret_cast<const ::eventpb::EventStoreErr*>(
      &::eventpb::_EventStoreErr_default_instance_);
}
::eventpb::EventStoreErr* Event::mutable_event_store_err() {
  
  if (event_store_err_ == NULL) {
    event_store_err_ = new ::eventpb::EventStoreErr;
  }
  // @@protoc_insertion_point(field_mutable:eventpb.Event.event_store_err)
  return event_store_err_;
}
::eventpb::EventStoreErr* Event::release_event_store_err() {
  // @@protoc_insertion_point(field_release:eventpb.Event.event_store_err)
  
  ::eventpb::EventStoreErr* temp = event_store_err_;
  event_store_err_ = NULL;
  return temp;
}
void Event::set_allocated_event_store_err(::eventpb::EventStoreErr* event_store_err) {
  delete event_store_err_;
  event_store_err_ = event_store_err;
  if (event_store_err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eventpb.Event.event_store_err)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eventpb

// @@protoc_insertion_point(global_scope)
