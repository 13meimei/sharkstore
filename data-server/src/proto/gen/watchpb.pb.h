// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchpb.proto

#ifndef PROTOBUF_watchpb_2eproto__INCLUDED
#define PROTOBUF_watchpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kvrpcpb.pb.h"
// @@protoc_insertion_point(includes)
namespace watchpb {
class DsKvWatchDeleteRequest;
class DsKvWatchDeleteRequestDefaultTypeInternal;
extern DsKvWatchDeleteRequestDefaultTypeInternal _DsKvWatchDeleteRequest_default_instance_;
class DsKvWatchDeleteResponse;
class DsKvWatchDeleteResponseDefaultTypeInternal;
extern DsKvWatchDeleteResponseDefaultTypeInternal _DsKvWatchDeleteResponse_default_instance_;
class DsKvWatchGetMultiRequest;
class DsKvWatchGetMultiRequestDefaultTypeInternal;
extern DsKvWatchGetMultiRequestDefaultTypeInternal _DsKvWatchGetMultiRequest_default_instance_;
class DsKvWatchGetMultiResponse;
class DsKvWatchGetMultiResponseDefaultTypeInternal;
extern DsKvWatchGetMultiResponseDefaultTypeInternal _DsKvWatchGetMultiResponse_default_instance_;
class DsKvWatchPutRequest;
class DsKvWatchPutRequestDefaultTypeInternal;
extern DsKvWatchPutRequestDefaultTypeInternal _DsKvWatchPutRequest_default_instance_;
class DsKvWatchPutResponse;
class DsKvWatchPutResponseDefaultTypeInternal;
extern DsKvWatchPutResponseDefaultTypeInternal _DsKvWatchPutResponse_default_instance_;
class DsWatchRequest;
class DsWatchRequestDefaultTypeInternal;
extern DsWatchRequestDefaultTypeInternal _DsWatchRequest_default_instance_;
class DsWatchResponse;
class DsWatchResponseDefaultTypeInternal;
extern DsWatchResponseDefaultTypeInternal _DsWatchResponse_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class KvWatchDeleteRequest;
class KvWatchDeleteRequestDefaultTypeInternal;
extern KvWatchDeleteRequestDefaultTypeInternal _KvWatchDeleteRequest_default_instance_;
class KvWatchPutRequest;
class KvWatchPutRequestDefaultTypeInternal;
extern KvWatchPutRequestDefaultTypeInternal _KvWatchPutRequest_default_instance_;
class KvWatchResponse;
class KvWatchResponseDefaultTypeInternal;
extern KvWatchResponseDefaultTypeInternal _KvWatchResponse_default_instance_;
class WatchCreateRequest;
class WatchCreateRequestDefaultTypeInternal;
extern WatchCreateRequestDefaultTypeInternal _WatchCreateRequest_default_instance_;
class WatchKeyValue;
class WatchKeyValueDefaultTypeInternal;
extern WatchKeyValueDefaultTypeInternal _WatchKeyValue_default_instance_;
class WatchResponse;
class WatchResponseDefaultTypeInternal;
extern WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
}  // namespace watchpb

namespace watchpb {

namespace protobuf_watchpb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_watchpb_2eproto

enum EventType {
  PUT = 0,
  DELETE = 1,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = PUT;
const EventType EventType_MAX = DELETE;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum ScopeValue {
  RESPONSE_PART = 0,
  RESPONSE_ALL = 1,
  ScopeValue_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScopeValue_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScopeValue_IsValid(int value);
const ScopeValue ScopeValue_MIN = RESPONSE_PART;
const ScopeValue ScopeValue_MAX = RESPONSE_ALL;
const int ScopeValue_ARRAYSIZE = ScopeValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScopeValue_descriptor();
inline const ::std::string& ScopeValue_Name(ScopeValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScopeValue_descriptor(), value);
}
inline bool ScopeValue_Parse(
    const ::std::string& name, ScopeValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScopeValue>(
    ScopeValue_descriptor(), name, value);
}
enum FilterType {
  NOPUT = 0,
  NODELETE = 1,
  FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FilterType_IsValid(int value);
const FilterType FilterType_MIN = NOPUT;
const FilterType FilterType_MAX = NODELETE;
const int FilterType_ARRAYSIZE = FilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FilterType_descriptor();
inline const ::std::string& FilterType_Name(FilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FilterType_descriptor(), value);
}
inline bool FilterType_Parse(
    const ::std::string& name, FilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FilterType>(
    FilterType_descriptor(), name, value);
}
// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .watchpb.WatchKeyValue kv = 2;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  const ::watchpb::WatchKeyValue& kv() const;
  ::watchpb::WatchKeyValue* mutable_kv();
  ::watchpb::WatchKeyValue* release_kv();
  void set_allocated_kv(::watchpb::WatchKeyValue* kv);

  // .watchpb.EventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::watchpb::EventType type() const;
  void set_type(::watchpb::EventType value);

  // @@protoc_insertion_point(class_scope:watchpb.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::watchpb::WatchKeyValue* kv_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WatchKeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.WatchKeyValue) */ {
 public:
  WatchKeyValue();
  virtual ~WatchKeyValue();

  WatchKeyValue(const WatchKeyValue& from);

  inline WatchKeyValue& operator=(const WatchKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchKeyValue(WatchKeyValue&& from) noexcept
    : WatchKeyValue() {
    *this = ::std::move(from);
  }

  inline WatchKeyValue& operator=(WatchKeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchKeyValue& default_instance();

  static inline const WatchKeyValue* internal_default_instance() {
    return reinterpret_cast<const WatchKeyValue*>(
               &_WatchKeyValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(WatchKeyValue* other);
  friend void swap(WatchKeyValue& a, WatchKeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchKeyValue* New() const PROTOBUF_FINAL { return New(NULL); }

  WatchKeyValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatchKeyValue& from);
  void MergeFrom(const WatchKeyValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatchKeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key(int index) const;
  ::std::string* mutable_key(int index);
  void set_key(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_key(int index, ::std::string&& value);
  #endif
  void set_key(int index, const char* value);
  void set_key(int index, const void* value, size_t size);
  ::std::string* add_key();
  void add_key(const ::std::string& value);
  #if LANG_CXX11
  void add_key(::std::string&& value);
  #endif
  void add_key(const char* value);
  void add_key(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_key();

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes ext = 6;
  void clear_ext();
  static const int kExtFieldNumber = 6;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const void* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // int64 tableId = 1;
  void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int64 tableid() const;
  void set_tableid(::google::protobuf::int64 value);

  // int64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // uint64 expireAt = 5;
  void clear_expireat();
  static const int kExpireAtFieldNumber = 5;
  ::google::protobuf::uint64 expireat() const;
  void set_expireat(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:watchpb.WatchKeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::int64 tableid_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::uint64 expireat_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsWatchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsWatchRequest) */ {
 public:
  DsWatchRequest();
  virtual ~DsWatchRequest();

  DsWatchRequest(const DsWatchRequest& from);

  inline DsWatchRequest& operator=(const DsWatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsWatchRequest(DsWatchRequest&& from) noexcept
    : DsWatchRequest() {
    *this = ::std::move(from);
  }

  inline DsWatchRequest& operator=(DsWatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsWatchRequest& default_instance();

  static inline const DsWatchRequest* internal_default_instance() {
    return reinterpret_cast<const DsWatchRequest*>(
               &_DsWatchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DsWatchRequest* other);
  friend void swap(DsWatchRequest& a, DsWatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsWatchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsWatchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsWatchRequest& from);
  void MergeFrom(const DsWatchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsWatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .watchpb.WatchCreateRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::watchpb::WatchCreateRequest& req() const;
  ::watchpb::WatchCreateRequest* mutable_req();
  ::watchpb::WatchCreateRequest* release_req();
  void set_allocated_req(::watchpb::WatchCreateRequest* req);

  // @@protoc_insertion_point(class_scope:watchpb.DsWatchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::watchpb::WatchCreateRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WatchCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.WatchCreateRequest) */ {
 public:
  WatchCreateRequest();
  virtual ~WatchCreateRequest();

  WatchCreateRequest(const WatchCreateRequest& from);

  inline WatchCreateRequest& operator=(const WatchCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchCreateRequest(WatchCreateRequest&& from) noexcept
    : WatchCreateRequest() {
    *this = ::std::move(from);
  }

  inline WatchCreateRequest& operator=(WatchCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchCreateRequest& default_instance();

  static inline const WatchCreateRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCreateRequest*>(
               &_WatchCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WatchCreateRequest* other);
  friend void swap(WatchCreateRequest& a, WatchCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WatchCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatchCreateRequest& from);
  void MergeFrom(const WatchCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatchCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .watchpb.FilterType filters = 3;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 3;
  ::watchpb::FilterType filters(int index) const;
  void set_filters(int index, ::watchpb::FilterType value);
  void add_filters(::watchpb::FilterType value);
  const ::google::protobuf::RepeatedField<int>& filters() const;
  ::google::protobuf::RepeatedField<int>* mutable_filters();

  // .watchpb.WatchKeyValue kv = 1;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 1;
  const ::watchpb::WatchKeyValue& kv() const;
  ::watchpb::WatchKeyValue* mutable_kv();
  ::watchpb::WatchKeyValue* release_kv();
  void set_allocated_kv(::watchpb::WatchKeyValue* kv);

  // int64 startVersion = 2;
  void clear_startversion();
  static const int kStartVersionFieldNumber = 2;
  ::google::protobuf::int64 startversion() const;
  void set_startversion(::google::protobuf::int64 value);

  // int64 watchId = 4;
  void clear_watchid();
  static const int kWatchIdFieldNumber = 4;
  ::google::protobuf::int64 watchid() const;
  void set_watchid(::google::protobuf::int64 value);

  // int64 expireAt = 5;
  void clear_expireat();
  static const int kExpireAtFieldNumber = 5;
  ::google::protobuf::int64 expireat() const;
  void set_expireat(::google::protobuf::int64 value);

  // int64 longPull = 7;
  void clear_longpull();
  static const int kLongPullFieldNumber = 7;
  ::google::protobuf::int64 longpull() const;
  void set_longpull(::google::protobuf::int64 value);

  // bool prefix = 6;
  void clear_prefix();
  static const int kPrefixFieldNumber = 6;
  bool prefix() const;
  void set_prefix(bool value);

  // @@protoc_insertion_point(class_scope:watchpb.WatchCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> filters_;
  mutable int _filters_cached_byte_size_;
  ::watchpb::WatchKeyValue* kv_;
  ::google::protobuf::int64 startversion_;
  ::google::protobuf::int64 watchid_;
  ::google::protobuf::int64 expireat_;
  ::google::protobuf::int64 longpull_;
  bool prefix_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsWatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsWatchResponse) */ {
 public:
  DsWatchResponse();
  virtual ~DsWatchResponse();

  DsWatchResponse(const DsWatchResponse& from);

  inline DsWatchResponse& operator=(const DsWatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsWatchResponse(DsWatchResponse&& from) noexcept
    : DsWatchResponse() {
    *this = ::std::move(from);
  }

  inline DsWatchResponse& operator=(DsWatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsWatchResponse& default_instance();

  static inline const DsWatchResponse* internal_default_instance() {
    return reinterpret_cast<const DsWatchResponse*>(
               &_DsWatchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DsWatchResponse* other);
  friend void swap(DsWatchResponse& a, DsWatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsWatchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsWatchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsWatchResponse& from);
  void MergeFrom(const DsWatchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsWatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .watchpb.WatchResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::watchpb::WatchResponse& resp() const;
  ::watchpb::WatchResponse* mutable_resp();
  ::watchpb::WatchResponse* release_resp();
  void set_allocated_resp(::watchpb::WatchResponse* resp);

  // @@protoc_insertion_point(class_scope:watchpb.DsWatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::watchpb::WatchResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.WatchResponse) */ {
 public:
  WatchResponse();
  virtual ~WatchResponse();

  WatchResponse(const WatchResponse& from);

  inline WatchResponse& operator=(const WatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WatchResponse(WatchResponse&& from) noexcept
    : WatchResponse() {
    *this = ::std::move(from);
  }

  inline WatchResponse& operator=(WatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WatchResponse& default_instance();

  static inline const WatchResponse* internal_default_instance() {
    return reinterpret_cast<const WatchResponse*>(
               &_WatchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WatchResponse* other);
  friend void swap(WatchResponse& a, WatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WatchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WatchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WatchResponse& from);
  void MergeFrom(const WatchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .watchpb.Event events = 9;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 9;
  const ::watchpb::Event& events(int index) const;
  ::watchpb::Event* mutable_events(int index);
  ::watchpb::Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::watchpb::Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::watchpb::Event >&
      events() const;

  // int64 watchId = 1;
  void clear_watchid();
  static const int kWatchIdFieldNumber = 1;
  ::google::protobuf::int64 watchid() const;
  void set_watchid(::google::protobuf::int64 value);

  // int32 code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 scope = 6;
  void clear_scope();
  static const int kScopeFieldNumber = 6;
  ::google::protobuf::int32 scope() const;
  void set_scope(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:watchpb.WatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::watchpb::Event > events_;
  ::google::protobuf::int64 watchid_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 scope_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchPutRequest) */ {
 public:
  DsKvWatchPutRequest();
  virtual ~DsKvWatchPutRequest();

  DsKvWatchPutRequest(const DsKvWatchPutRequest& from);

  inline DsKvWatchPutRequest& operator=(const DsKvWatchPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchPutRequest(DsKvWatchPutRequest&& from) noexcept
    : DsKvWatchPutRequest() {
    *this = ::std::move(from);
  }

  inline DsKvWatchPutRequest& operator=(DsKvWatchPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchPutRequest& default_instance();

  static inline const DsKvWatchPutRequest* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchPutRequest*>(
               &_DsKvWatchPutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DsKvWatchPutRequest* other);
  friend void swap(DsKvWatchPutRequest& a, DsKvWatchPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchPutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchPutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchPutRequest& from);
  void MergeFrom(const DsKvWatchPutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .watchpb.KvWatchPutRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::watchpb::KvWatchPutRequest& req() const;
  ::watchpb::KvWatchPutRequest* mutable_req();
  ::watchpb::KvWatchPutRequest* release_req();
  void set_allocated_req(::watchpb::KvWatchPutRequest* req);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::watchpb::KvWatchPutRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchPutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchPutResponse) */ {
 public:
  DsKvWatchPutResponse();
  virtual ~DsKvWatchPutResponse();

  DsKvWatchPutResponse(const DsKvWatchPutResponse& from);

  inline DsKvWatchPutResponse& operator=(const DsKvWatchPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchPutResponse(DsKvWatchPutResponse&& from) noexcept
    : DsKvWatchPutResponse() {
    *this = ::std::move(from);
  }

  inline DsKvWatchPutResponse& operator=(DsKvWatchPutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchPutResponse& default_instance();

  static inline const DsKvWatchPutResponse* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchPutResponse*>(
               &_DsKvWatchPutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DsKvWatchPutResponse* other);
  friend void swap(DsKvWatchPutResponse& a, DsKvWatchPutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchPutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchPutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchPutResponse& from);
  void MergeFrom(const DsKvWatchPutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .watchpb.KvWatchResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::watchpb::KvWatchResponse& resp() const;
  ::watchpb::KvWatchResponse* mutable_resp();
  ::watchpb::KvWatchResponse* release_resp();
  void set_allocated_resp(::watchpb::KvWatchResponse* resp);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchPutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::watchpb::KvWatchResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvWatchPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.KvWatchPutRequest) */ {
 public:
  KvWatchPutRequest();
  virtual ~KvWatchPutRequest();

  KvWatchPutRequest(const KvWatchPutRequest& from);

  inline KvWatchPutRequest& operator=(const KvWatchPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvWatchPutRequest(KvWatchPutRequest&& from) noexcept
    : KvWatchPutRequest() {
    *this = ::std::move(from);
  }

  inline KvWatchPutRequest& operator=(KvWatchPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvWatchPutRequest& default_instance();

  static inline const KvWatchPutRequest* internal_default_instance() {
    return reinterpret_cast<const KvWatchPutRequest*>(
               &_KvWatchPutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(KvWatchPutRequest* other);
  friend void swap(KvWatchPutRequest& a, KvWatchPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvWatchPutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  KvWatchPutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KvWatchPutRequest& from);
  void MergeFrom(const KvWatchPutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KvWatchPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .watchpb.WatchKeyValue kv = 1;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 1;
  const ::watchpb::WatchKeyValue& kv() const;
  ::watchpb::WatchKeyValue* mutable_kv();
  ::watchpb::WatchKeyValue* release_kv();
  void set_allocated_kv(::watchpb::WatchKeyValue* kv);

  // @@protoc_insertion_point(class_scope:watchpb.KvWatchPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::watchpb::WatchKeyValue* kv_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchDeleteRequest) */ {
 public:
  DsKvWatchDeleteRequest();
  virtual ~DsKvWatchDeleteRequest();

  DsKvWatchDeleteRequest(const DsKvWatchDeleteRequest& from);

  inline DsKvWatchDeleteRequest& operator=(const DsKvWatchDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchDeleteRequest(DsKvWatchDeleteRequest&& from) noexcept
    : DsKvWatchDeleteRequest() {
    *this = ::std::move(from);
  }

  inline DsKvWatchDeleteRequest& operator=(DsKvWatchDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchDeleteRequest& default_instance();

  static inline const DsKvWatchDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchDeleteRequest*>(
               &_DsKvWatchDeleteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DsKvWatchDeleteRequest* other);
  friend void swap(DsKvWatchDeleteRequest& a, DsKvWatchDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchDeleteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchDeleteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchDeleteRequest& from);
  void MergeFrom(const DsKvWatchDeleteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .watchpb.KvWatchDeleteRequest req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::watchpb::KvWatchDeleteRequest& req() const;
  ::watchpb::KvWatchDeleteRequest* mutable_req();
  ::watchpb::KvWatchDeleteRequest* release_req();
  void set_allocated_req(::watchpb::KvWatchDeleteRequest* req);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::watchpb::KvWatchDeleteRequest* req_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchDeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchDeleteResponse) */ {
 public:
  DsKvWatchDeleteResponse();
  virtual ~DsKvWatchDeleteResponse();

  DsKvWatchDeleteResponse(const DsKvWatchDeleteResponse& from);

  inline DsKvWatchDeleteResponse& operator=(const DsKvWatchDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchDeleteResponse(DsKvWatchDeleteResponse&& from) noexcept
    : DsKvWatchDeleteResponse() {
    *this = ::std::move(from);
  }

  inline DsKvWatchDeleteResponse& operator=(DsKvWatchDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchDeleteResponse& default_instance();

  static inline const DsKvWatchDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchDeleteResponse*>(
               &_DsKvWatchDeleteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DsKvWatchDeleteResponse* other);
  friend void swap(DsKvWatchDeleteResponse& a, DsKvWatchDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchDeleteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchDeleteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchDeleteResponse& from);
  void MergeFrom(const DsKvWatchDeleteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // .watchpb.KvWatchResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::watchpb::KvWatchResponse& resp() const;
  ::watchpb::KvWatchResponse* mutable_resp();
  ::watchpb::KvWatchResponse* release_resp();
  void set_allocated_resp(::watchpb::KvWatchResponse* resp);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchDeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::ResponseHeader* header_;
  ::watchpb::KvWatchResponse* resp_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvWatchDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.KvWatchDeleteRequest) */ {
 public:
  KvWatchDeleteRequest();
  virtual ~KvWatchDeleteRequest();

  KvWatchDeleteRequest(const KvWatchDeleteRequest& from);

  inline KvWatchDeleteRequest& operator=(const KvWatchDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvWatchDeleteRequest(KvWatchDeleteRequest&& from) noexcept
    : KvWatchDeleteRequest() {
    *this = ::std::move(from);
  }

  inline KvWatchDeleteRequest& operator=(KvWatchDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvWatchDeleteRequest& default_instance();

  static inline const KvWatchDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const KvWatchDeleteRequest*>(
               &_KvWatchDeleteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(KvWatchDeleteRequest* other);
  friend void swap(KvWatchDeleteRequest& a, KvWatchDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvWatchDeleteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  KvWatchDeleteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KvWatchDeleteRequest& from);
  void MergeFrom(const KvWatchDeleteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KvWatchDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .watchpb.WatchKeyValue kv = 1;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 1;
  const ::watchpb::WatchKeyValue& kv() const;
  ::watchpb::WatchKeyValue* mutable_kv();
  ::watchpb::WatchKeyValue* release_kv();
  void set_allocated_kv(::watchpb::WatchKeyValue* kv);

  // bool prefix = 2;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  bool prefix() const;
  void set_prefix(bool value);

  // @@protoc_insertion_point(class_scope:watchpb.KvWatchDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::watchpb::WatchKeyValue* kv_;
  bool prefix_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvWatchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.KvWatchResponse) */ {
 public:
  KvWatchResponse();
  virtual ~KvWatchResponse();

  KvWatchResponse(const KvWatchResponse& from);

  inline KvWatchResponse& operator=(const KvWatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvWatchResponse(KvWatchResponse&& from) noexcept
    : KvWatchResponse() {
    *this = ::std::move(from);
  }

  inline KvWatchResponse& operator=(KvWatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvWatchResponse& default_instance();

  static inline const KvWatchResponse* internal_default_instance() {
    return reinterpret_cast<const KvWatchResponse*>(
               &_KvWatchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(KvWatchResponse* other);
  friend void swap(KvWatchResponse& a, KvWatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvWatchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  KvWatchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KvWatchResponse& from);
  void MergeFrom(const KvWatchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KvWatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:watchpb.KvWatchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchGetMultiRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchGetMultiRequest) */ {
 public:
  DsKvWatchGetMultiRequest();
  virtual ~DsKvWatchGetMultiRequest();

  DsKvWatchGetMultiRequest(const DsKvWatchGetMultiRequest& from);

  inline DsKvWatchGetMultiRequest& operator=(const DsKvWatchGetMultiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchGetMultiRequest(DsKvWatchGetMultiRequest&& from) noexcept
    : DsKvWatchGetMultiRequest() {
    *this = ::std::move(from);
  }

  inline DsKvWatchGetMultiRequest& operator=(DsKvWatchGetMultiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchGetMultiRequest& default_instance();

  static inline const DsKvWatchGetMultiRequest* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchGetMultiRequest*>(
               &_DsKvWatchGetMultiRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DsKvWatchGetMultiRequest* other);
  friend void swap(DsKvWatchGetMultiRequest& a, DsKvWatchGetMultiRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchGetMultiRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchGetMultiRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchGetMultiRequest& from);
  void MergeFrom(const DsKvWatchGetMultiRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchGetMultiRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kvrpcpb.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::RequestHeader& header() const;
  ::kvrpcpb::RequestHeader* mutable_header();
  ::kvrpcpb::RequestHeader* release_header();
  void set_allocated_header(::kvrpcpb::RequestHeader* header);

  // .watchpb.WatchKeyValue kv = 2;
  bool has_kv() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  const ::watchpb::WatchKeyValue& kv() const;
  ::watchpb::WatchKeyValue* mutable_kv();
  ::watchpb::WatchKeyValue* release_kv();
  void set_allocated_kv(::watchpb::WatchKeyValue* kv);

  // bool prefix = 3;
  void clear_prefix();
  static const int kPrefixFieldNumber = 3;
  bool prefix() const;
  void set_prefix(bool value);

  // uint32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchGetMultiRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::kvrpcpb::RequestHeader* header_;
  ::watchpb::WatchKeyValue* kv_;
  bool prefix_;
  ::google::protobuf::uint32 limit_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsKvWatchGetMultiResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:watchpb.DsKvWatchGetMultiResponse) */ {
 public:
  DsKvWatchGetMultiResponse();
  virtual ~DsKvWatchGetMultiResponse();

  DsKvWatchGetMultiResponse(const DsKvWatchGetMultiResponse& from);

  inline DsKvWatchGetMultiResponse& operator=(const DsKvWatchGetMultiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsKvWatchGetMultiResponse(DsKvWatchGetMultiResponse&& from) noexcept
    : DsKvWatchGetMultiResponse() {
    *this = ::std::move(from);
  }

  inline DsKvWatchGetMultiResponse& operator=(DsKvWatchGetMultiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsKvWatchGetMultiResponse& default_instance();

  static inline const DsKvWatchGetMultiResponse* internal_default_instance() {
    return reinterpret_cast<const DsKvWatchGetMultiResponse*>(
               &_DsKvWatchGetMultiResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DsKvWatchGetMultiResponse* other);
  friend void swap(DsKvWatchGetMultiResponse& a, DsKvWatchGetMultiResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsKvWatchGetMultiResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DsKvWatchGetMultiResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsKvWatchGetMultiResponse& from);
  void MergeFrom(const DsKvWatchGetMultiResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsKvWatchGetMultiResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .watchpb.WatchKeyValue kvs = 3;
  int kvs_size() const;
  void clear_kvs();
  static const int kKvsFieldNumber = 3;
  const ::watchpb::WatchKeyValue& kvs(int index) const;
  ::watchpb::WatchKeyValue* mutable_kvs(int index);
  ::watchpb::WatchKeyValue* add_kvs();
  ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >*
      mutable_kvs();
  const ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >&
      kvs() const;

  // .kvrpcpb.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::kvrpcpb::ResponseHeader& header() const;
  ::kvrpcpb::ResponseHeader* mutable_header();
  ::kvrpcpb::ResponseHeader* release_header();
  void set_allocated_header(::kvrpcpb::ResponseHeader* header);

  // int32 code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:watchpb.DsKvWatchGetMultiResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue > kvs_;
  ::kvrpcpb::ResponseHeader* header_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct protobuf_watchpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .watchpb.EventType type = 1;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::watchpb::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:watchpb.Event.type)
  return static_cast< ::watchpb::EventType >(type_);
}
inline void Event::set_type(::watchpb::EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:watchpb.Event.type)
}

// .watchpb.WatchKeyValue kv = 2;
inline bool Event::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline void Event::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
inline const ::watchpb::WatchKeyValue& Event::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.Event.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
inline ::watchpb::WatchKeyValue* Event::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.Event.kv)
  return kv_;
}
inline ::watchpb::WatchKeyValue* Event::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.Event.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void Event::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.Event.kv)
}

// -------------------------------------------------------------------

// WatchKeyValue

// int64 tableId = 1;
inline void WatchKeyValue::clear_tableid() {
  tableid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchKeyValue::tableid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.tableId)
  return tableid_;
}
inline void WatchKeyValue::set_tableid(::google::protobuf::int64 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.tableId)
}

// repeated bytes key = 2;
inline int WatchKeyValue::key_size() const {
  return key_.size();
}
inline void WatchKeyValue::clear_key() {
  key_.Clear();
}
inline const ::std::string& WatchKeyValue::key(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.key)
  return key_.Get(index);
}
inline ::std::string* WatchKeyValue::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.key)
  return key_.Mutable(index);
}
inline void WatchKeyValue::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.key)
  key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WatchKeyValue::set_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.key)
  key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WatchKeyValue::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.key)
}
inline void WatchKeyValue::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.key)
}
inline ::std::string* WatchKeyValue::add_key() {
  // @@protoc_insertion_point(field_add_mutable:watchpb.WatchKeyValue.key)
  return key_.Add();
}
inline void WatchKeyValue::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:watchpb.WatchKeyValue.key)
}
#if LANG_CXX11
inline void WatchKeyValue::add_key(::std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:watchpb.WatchKeyValue.key)
}
#endif
inline void WatchKeyValue::add_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:watchpb.WatchKeyValue.key)
}
inline void WatchKeyValue::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:watchpb.WatchKeyValue.key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WatchKeyValue::key() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchKeyValue.key)
  return key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WatchKeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchKeyValue.key)
  return &key_;
}

// int64 version = 3;
inline void WatchKeyValue::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchKeyValue::version() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.version)
  return version_;
}
inline void WatchKeyValue::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.version)
}

// bytes value = 4;
inline void WatchKeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchKeyValue::value() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.value)
  return value_.GetNoArena();
}
inline void WatchKeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.value)
}
#if LANG_CXX11
inline void WatchKeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:watchpb.WatchKeyValue.value)
}
#endif
inline void WatchKeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.value)
}
inline void WatchKeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.value)
}
inline ::std::string* WatchKeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:watchpb.WatchKeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchKeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchKeyValue.value)
}

// uint64 expireAt = 5;
inline void WatchKeyValue::clear_expireat() {
  expireat_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WatchKeyValue::expireat() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.expireAt)
  return expireat_;
}
inline void WatchKeyValue::set_expireat(::google::protobuf::uint64 value) {
  
  expireat_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.expireAt)
}

// bytes ext = 6;
inline void WatchKeyValue::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WatchKeyValue::ext() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchKeyValue.ext)
  return ext_.GetNoArena();
}
inline void WatchKeyValue::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:watchpb.WatchKeyValue.ext)
}
#if LANG_CXX11
inline void WatchKeyValue::set_ext(::std::string&& value) {
  
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:watchpb.WatchKeyValue.ext)
}
#endif
inline void WatchKeyValue::set_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:watchpb.WatchKeyValue.ext)
}
inline void WatchKeyValue::set_ext(const void* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:watchpb.WatchKeyValue.ext)
}
inline ::std::string* WatchKeyValue::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:watchpb.WatchKeyValue.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WatchKeyValue::release_ext() {
  // @@protoc_insertion_point(field_release:watchpb.WatchKeyValue.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WatchKeyValue::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchKeyValue.ext)
}

// -------------------------------------------------------------------

// DsWatchRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsWatchRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsWatchRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsWatchRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsWatchRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsWatchRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsWatchRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchRequest.header)
}

// .watchpb.WatchCreateRequest req = 2;
inline bool DsWatchRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsWatchRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::watchpb::WatchCreateRequest& DsWatchRequest::req() const {
  const ::watchpb::WatchCreateRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchCreateRequest*>(
      &::watchpb::_WatchCreateRequest_default_instance_);
}
inline ::watchpb::WatchCreateRequest* DsWatchRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::WatchCreateRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchRequest.req)
  return req_;
}
inline ::watchpb::WatchCreateRequest* DsWatchRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchRequest.req)
  
  ::watchpb::WatchCreateRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsWatchRequest::set_allocated_req(::watchpb::WatchCreateRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchRequest.req)
}

// -------------------------------------------------------------------

// WatchCreateRequest

// .watchpb.WatchKeyValue kv = 1;
inline bool WatchCreateRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline void WatchCreateRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
inline const ::watchpb::WatchKeyValue& WatchCreateRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
inline ::watchpb::WatchKeyValue* WatchCreateRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.WatchCreateRequest.kv)
  return kv_;
}
inline ::watchpb::WatchKeyValue* WatchCreateRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.WatchCreateRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void WatchCreateRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.WatchCreateRequest.kv)
}

// int64 startVersion = 2;
inline void WatchCreateRequest::clear_startversion() {
  startversion_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchCreateRequest::startversion() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.startVersion)
  return startversion_;
}
inline void WatchCreateRequest::set_startversion(::google::protobuf::int64 value) {
  
  startversion_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.startVersion)
}

// repeated .watchpb.FilterType filters = 3;
inline int WatchCreateRequest::filters_size() const {
  return filters_.size();
}
inline void WatchCreateRequest::clear_filters() {
  filters_.Clear();
}
inline ::watchpb::FilterType WatchCreateRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.filters)
  return static_cast< ::watchpb::FilterType >(filters_.Get(index));
}
inline void WatchCreateRequest::set_filters(int index, ::watchpb::FilterType value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.filters)
}
inline void WatchCreateRequest::add_filters(::watchpb::FilterType value) {
  filters_.Add(value);
  // @@protoc_insertion_point(field_add:watchpb.WatchCreateRequest.filters)
}
inline const ::google::protobuf::RepeatedField<int>&
WatchCreateRequest::filters() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchCreateRequest.filters)
  return filters_;
}
inline ::google::protobuf::RepeatedField<int>*
WatchCreateRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchCreateRequest.filters)
  return &filters_;
}

// int64 watchId = 4;
inline void WatchCreateRequest::clear_watchid() {
  watchid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchCreateRequest::watchid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.watchId)
  return watchid_;
}
inline void WatchCreateRequest::set_watchid(::google::protobuf::int64 value) {
  
  watchid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.watchId)
}

// int64 expireAt = 5;
inline void WatchCreateRequest::clear_expireat() {
  expireat_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchCreateRequest::expireat() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.expireAt)
  return expireat_;
}
inline void WatchCreateRequest::set_expireat(::google::protobuf::int64 value) {
  
  expireat_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.expireAt)
}

// bool prefix = 6;
inline void WatchCreateRequest::clear_prefix() {
  prefix_ = false;
}
inline bool WatchCreateRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.prefix)
  return prefix_;
}
inline void WatchCreateRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.prefix)
}

// int64 longPull = 7;
inline void WatchCreateRequest::clear_longpull() {
  longpull_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchCreateRequest::longpull() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchCreateRequest.longPull)
  return longpull_;
}
inline void WatchCreateRequest::set_longpull(::google::protobuf::int64 value) {
  
  longpull_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchCreateRequest.longPull)
}

// -------------------------------------------------------------------

// DsWatchResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsWatchResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsWatchResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsWatchResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsWatchResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsWatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsWatchResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchResponse.header)
}

// .watchpb.WatchResponse resp = 2;
inline bool DsWatchResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsWatchResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::watchpb::WatchResponse& DsWatchResponse::resp() const {
  const ::watchpb::WatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsWatchResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchResponse*>(
      &::watchpb::_WatchResponse_default_instance_);
}
inline ::watchpb::WatchResponse* DsWatchResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::WatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsWatchResponse.resp)
  return resp_;
}
inline ::watchpb::WatchResponse* DsWatchResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsWatchResponse.resp)
  
  ::watchpb::WatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsWatchResponse::set_allocated_resp(::watchpb::WatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsWatchResponse.resp)
}

// -------------------------------------------------------------------

// WatchResponse

// int64 watchId = 1;
inline void WatchResponse::clear_watchid() {
  watchid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WatchResponse::watchid() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.watchId)
  return watchid_;
}
inline void WatchResponse::set_watchid(::google::protobuf::int64 value) {
  
  watchid_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.watchId)
}

// int32 code = 3;
inline void WatchResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 WatchResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.code)
  return code_;
}
inline void WatchResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.code)
}

// int32 scope = 6;
inline void WatchResponse::clear_scope() {
  scope_ = 0;
}
inline ::google::protobuf::int32 WatchResponse::scope() const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.scope)
  return scope_;
}
inline void WatchResponse::set_scope(::google::protobuf::int32 value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:watchpb.WatchResponse.scope)
}

// repeated .watchpb.Event events = 9;
inline int WatchResponse::events_size() const {
  return events_.size();
}
inline void WatchResponse::clear_events() {
  events_.Clear();
}
inline const ::watchpb::Event& WatchResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.WatchResponse.events)
  return events_.Get(index);
}
inline ::watchpb::Event* WatchResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.WatchResponse.events)
  return events_.Mutable(index);
}
inline ::watchpb::Event* WatchResponse::add_events() {
  // @@protoc_insertion_point(field_add:watchpb.WatchResponse.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::watchpb::Event >*
WatchResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.WatchResponse.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::watchpb::Event >&
WatchResponse::events() const {
  // @@protoc_insertion_point(field_list:watchpb.WatchResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// DsKvWatchPutRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsKvWatchPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsKvWatchPutRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsKvWatchPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsKvWatchPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchPutRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutRequest.header)
}

// .watchpb.KvWatchPutRequest req = 2;
inline bool DsKvWatchPutRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsKvWatchPutRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::watchpb::KvWatchPutRequest& DsKvWatchPutRequest::req() const {
  const ::watchpb::KvWatchPutRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchPutRequest*>(
      &::watchpb::_KvWatchPutRequest_default_instance_);
}
inline ::watchpb::KvWatchPutRequest* DsKvWatchPutRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::KvWatchPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutRequest.req)
  return req_;
}
inline ::watchpb::KvWatchPutRequest* DsKvWatchPutRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutRequest.req)
  
  ::watchpb::KvWatchPutRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsKvWatchPutRequest::set_allocated_req(::watchpb::KvWatchPutRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutRequest.req)
}

// -------------------------------------------------------------------

// DsKvWatchPutResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsKvWatchPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsKvWatchPutResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchPutResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutResponse.header)
}

// .watchpb.KvWatchResponse resp = 2;
inline bool DsKvWatchPutResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsKvWatchPutResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::watchpb::KvWatchResponse& DsKvWatchPutResponse::resp() const {
  const ::watchpb::KvWatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchPutResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchResponse*>(
      &::watchpb::_KvWatchResponse_default_instance_);
}
inline ::watchpb::KvWatchResponse* DsKvWatchPutResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::KvWatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchPutResponse.resp)
  return resp_;
}
inline ::watchpb::KvWatchResponse* DsKvWatchPutResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchPutResponse.resp)
  
  ::watchpb::KvWatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsKvWatchPutResponse::set_allocated_resp(::watchpb::KvWatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchPutResponse.resp)
}

// -------------------------------------------------------------------

// KvWatchPutRequest

// .watchpb.WatchKeyValue kv = 1;
inline bool KvWatchPutRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline void KvWatchPutRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
inline const ::watchpb::WatchKeyValue& KvWatchPutRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.KvWatchPutRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
inline ::watchpb::WatchKeyValue* KvWatchPutRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.KvWatchPutRequest.kv)
  return kv_;
}
inline ::watchpb::WatchKeyValue* KvWatchPutRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.KvWatchPutRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void KvWatchPutRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.KvWatchPutRequest.kv)
}

// -------------------------------------------------------------------

// DsKvWatchDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsKvWatchDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsKvWatchDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsKvWatchDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsKvWatchDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteRequest.header)
}

// .watchpb.KvWatchDeleteRequest req = 2;
inline bool DsKvWatchDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
inline void DsKvWatchDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
inline const ::watchpb::KvWatchDeleteRequest& DsKvWatchDeleteRequest::req() const {
  const ::watchpb::KvWatchDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchDeleteRequest*>(
      &::watchpb::_KvWatchDeleteRequest_default_instance_);
}
inline ::watchpb::KvWatchDeleteRequest* DsKvWatchDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::watchpb::KvWatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteRequest.req)
  return req_;
}
inline ::watchpb::KvWatchDeleteRequest* DsKvWatchDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteRequest.req)
  
  ::watchpb::KvWatchDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
inline void DsKvWatchDeleteRequest::set_allocated_req(::watchpb::KvWatchDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteRequest.req)
}

// -------------------------------------------------------------------

// DsKvWatchDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsKvWatchDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsKvWatchDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteResponse.header)
}

// .watchpb.KvWatchResponse resp = 2;
inline bool DsKvWatchDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline void DsKvWatchDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
inline const ::watchpb::KvWatchResponse& DsKvWatchDeleteResponse::resp() const {
  const ::watchpb::KvWatchResponse* p = resp_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::KvWatchResponse*>(
      &::watchpb::_KvWatchResponse_default_instance_);
}
inline ::watchpb::KvWatchResponse* DsKvWatchDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::watchpb::KvWatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchDeleteResponse.resp)
  return resp_;
}
inline ::watchpb::KvWatchResponse* DsKvWatchDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchDeleteResponse.resp)
  
  ::watchpb::KvWatchResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void DsKvWatchDeleteResponse::set_allocated_resp(::watchpb::KvWatchResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchDeleteResponse.resp)
}

// -------------------------------------------------------------------

// KvWatchDeleteRequest

// .watchpb.WatchKeyValue kv = 1;
inline bool KvWatchDeleteRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline void KvWatchDeleteRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
inline const ::watchpb::WatchKeyValue& KvWatchDeleteRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.KvWatchDeleteRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
inline ::watchpb::WatchKeyValue* KvWatchDeleteRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.KvWatchDeleteRequest.kv)
  return kv_;
}
inline ::watchpb::WatchKeyValue* KvWatchDeleteRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.KvWatchDeleteRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void KvWatchDeleteRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.KvWatchDeleteRequest.kv)
}

// bool prefix = 2;
inline void KvWatchDeleteRequest::clear_prefix() {
  prefix_ = false;
}
inline bool KvWatchDeleteRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.KvWatchDeleteRequest.prefix)
  return prefix_;
}
inline void KvWatchDeleteRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.KvWatchDeleteRequest.prefix)
}

// -------------------------------------------------------------------

// KvWatchResponse

// int32 code = 1;
inline void KvWatchResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 KvWatchResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.KvWatchResponse.code)
  return code_;
}
inline void KvWatchResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.KvWatchResponse.code)
}

// -------------------------------------------------------------------

// DsKvWatchGetMultiRequest

// .kvrpcpb.RequestHeader header = 1;
inline bool DsKvWatchGetMultiRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchGetMultiRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::RequestHeader& DsKvWatchGetMultiRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
inline ::kvrpcpb::RequestHeader* DsKvWatchGetMultiRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiRequest.header)
  return header_;
}
inline ::kvrpcpb::RequestHeader* DsKvWatchGetMultiRequest::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchGetMultiRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiRequest.header)
}

// .watchpb.WatchKeyValue kv = 2;
inline bool DsKvWatchGetMultiRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
inline void DsKvWatchGetMultiRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
inline const ::watchpb::WatchKeyValue& DsKvWatchGetMultiRequest::kv() const {
  const ::watchpb::WatchKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::watchpb::WatchKeyValue*>(
      &::watchpb::_WatchKeyValue_default_instance_);
}
inline ::watchpb::WatchKeyValue* DsKvWatchGetMultiRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::watchpb::WatchKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiRequest.kv)
  return kv_;
}
inline ::watchpb::WatchKeyValue* DsKvWatchGetMultiRequest::release_kv() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiRequest.kv)
  
  ::watchpb::WatchKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
inline void DsKvWatchGetMultiRequest::set_allocated_kv(::watchpb::WatchKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiRequest.kv)
}

// bool prefix = 3;
inline void DsKvWatchGetMultiRequest::clear_prefix() {
  prefix_ = false;
}
inline bool DsKvWatchGetMultiRequest::prefix() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.prefix)
  return prefix_;
}
inline void DsKvWatchGetMultiRequest::set_prefix(bool value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiRequest.prefix)
}

// uint32 limit = 4;
inline void DsKvWatchGetMultiRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 DsKvWatchGetMultiRequest::limit() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiRequest.limit)
  return limit_;
}
inline void DsKvWatchGetMultiRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiRequest.limit)
}

// -------------------------------------------------------------------

// DsKvWatchGetMultiResponse

// .kvrpcpb.ResponseHeader header = 1;
inline bool DsKvWatchGetMultiResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void DsKvWatchGetMultiResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::kvrpcpb::ResponseHeader& DsKvWatchGetMultiResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchGetMultiResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiResponse.header)
  return header_;
}
inline ::kvrpcpb::ResponseHeader* DsKvWatchGetMultiResponse::release_header() {
  // @@protoc_insertion_point(field_release:watchpb.DsKvWatchGetMultiResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DsKvWatchGetMultiResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:watchpb.DsKvWatchGetMultiResponse.header)
}

// int32 code = 2;
inline void DsKvWatchGetMultiResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 DsKvWatchGetMultiResponse::code() const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.code)
  return code_;
}
inline void DsKvWatchGetMultiResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:watchpb.DsKvWatchGetMultiResponse.code)
}

// repeated .watchpb.WatchKeyValue kvs = 3;
inline int DsKvWatchGetMultiResponse::kvs_size() const {
  return kvs_.size();
}
inline void DsKvWatchGetMultiResponse::clear_kvs() {
  kvs_.Clear();
}
inline const ::watchpb::WatchKeyValue& DsKvWatchGetMultiResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Get(index);
}
inline ::watchpb::WatchKeyValue* DsKvWatchGetMultiResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::watchpb::WatchKeyValue* DsKvWatchGetMultiResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >*
DsKvWatchGetMultiResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:watchpb.DsKvWatchGetMultiResponse.kvs)
  return &kvs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::watchpb::WatchKeyValue >&
DsKvWatchGetMultiResponse::kvs() const {
  // @@protoc_insertion_point(field_list:watchpb.DsKvWatchGetMultiResponse.kvs)
  return kvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace watchpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::watchpb::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::watchpb::EventType>() {
  return ::watchpb::EventType_descriptor();
}
template <> struct is_proto_enum< ::watchpb::ScopeValue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::watchpb::ScopeValue>() {
  return ::watchpb::ScopeValue_descriptor();
}
template <> struct is_proto_enum< ::watchpb::FilterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::watchpb::FilterType>() {
  return ::watchpb::FilterType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_watchpb_2eproto__INCLUDED
