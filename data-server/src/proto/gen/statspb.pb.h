// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statspb.proto

#ifndef PROTOBUF_statspb_2eproto__INCLUDED
#define PROTOBUF_statspb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mspb.pb.h"
// @@protoc_insertion_point(includes)
namespace statspb {
class ClusterStats;
class ClusterStatsDefaultTypeInternal;
extern ClusterStatsDefaultTypeInternal _ClusterStats_default_instance_;
class DatabaseStats;
class DatabaseStatsDefaultTypeInternal;
extern DatabaseStatsDefaultTypeInternal _DatabaseStats_default_instance_;
class DiskStats;
class DiskStatsDefaultTypeInternal;
extern DiskStatsDefaultTypeInternal _DiskStats_default_instance_;
class DsInfo;
class DsInfoDefaultTypeInternal;
extern DsInfoDefaultTypeInternal _DsInfo_default_instance_;
class HotSpotStats;
class HotSpotStatsDefaultTypeInternal;
extern HotSpotStatsDefaultTypeInternal _HotSpotStats_default_instance_;
class MacStats;
class MacStatsDefaultTypeInternal;
extern MacStatsDefaultTypeInternal _MacStats_default_instance_;
class MemStats;
class MemStatsDefaultTypeInternal;
extern MemStatsDefaultTypeInternal _MemStats_default_instance_;
class NetStats;
class NetStatsDefaultTypeInternal;
extern NetStatsDefaultTypeInternal _NetStats_default_instance_;
class ProcessStats;
class ProcessStatsDefaultTypeInternal;
extern ProcessStatsDefaultTypeInternal _ProcessStats_default_instance_;
class RaftStatus;
class RaftStatusDefaultTypeInternal;
extern RaftStatusDefaultTypeInternal _RaftStatus_default_instance_;
class RangeInfo;
class RangeInfoDefaultTypeInternal;
extern RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
class RangeStats;
class RangeStatsDefaultTypeInternal;
extern RangeStatsDefaultTypeInternal _RangeStats_default_instance_;
class ReplicaStatus;
class ReplicaStatusDefaultTypeInternal;
extern ReplicaStatusDefaultTypeInternal _ReplicaStatus_default_instance_;
class ScheduleCount;
class ScheduleCountDefaultTypeInternal;
extern ScheduleCountDefaultTypeInternal _ScheduleCount_default_instance_;
class SlowLog;
class SlowLogDefaultTypeInternal;
extern SlowLogDefaultTypeInternal _SlowLog_default_instance_;
class SlowLogStats;
class SlowLogStatsDefaultTypeInternal;
extern SlowLogStatsDefaultTypeInternal _SlowLogStats_default_instance_;
class SqlSlow;
class SqlSlowDefaultTypeInternal;
extern SqlSlowDefaultTypeInternal _SqlSlow_default_instance_;
class SqlSlowlog;
class SqlSlowlogDefaultTypeInternal;
extern SqlSlowlogDefaultTypeInternal _SqlSlowlog_default_instance_;
class SqlStats;
class SqlStatsDefaultTypeInternal;
extern SqlStatsDefaultTypeInternal _SqlStats_default_instance_;
class SqlTp;
class SqlTpDefaultTypeInternal;
extern SqlTpDefaultTypeInternal _SqlTp_default_instance_;
class TableStats;
class TableStatsDefaultTypeInternal;
extern TableStatsDefaultTypeInternal _TableStats_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TpStats;
class TpStatsDefaultTypeInternal;
extern TpStatsDefaultTypeInternal _TpStats_default_instance_;
}  // namespace statspb

namespace statspb {

namespace protobuf_statspb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_statspb_2eproto

enum TpArgs {
  invalid = 0,
  msec_index = 1000,
  sec_index = 1060,
  min_index = 1061,
  TpArgs_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TpArgs_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TpArgs_IsValid(int value);
const TpArgs TpArgs_MIN = invalid;
const TpArgs TpArgs_MAX = min_index;
const int TpArgs_ARRAYSIZE = TpArgs_MAX + 1;

const ::google::protobuf::EnumDescriptor* TpArgs_descriptor();
inline const ::std::string& TpArgs_Name(TpArgs value) {
  return ::google::protobuf::internal::NameOfEnum(
    TpArgs_descriptor(), value);
}
inline bool TpArgs_Parse(
    const ::std::string& name, TpArgs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TpArgs>(
    TpArgs_descriptor(), name, value);
}
// ===================================================================

class ClusterStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.ClusterStats) */ {
 public:
  ClusterStats();
  virtual ~ClusterStats();

  ClusterStats(const ClusterStats& from);

  inline ClusterStats& operator=(const ClusterStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterStats(ClusterStats&& from) noexcept
    : ClusterStats() {
    *this = ::std::move(from);
  }

  inline ClusterStats& operator=(ClusterStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStats& default_instance();

  static inline const ClusterStats* internal_default_instance() {
    return reinterpret_cast<const ClusterStats*>(
               &_ClusterStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClusterStats* other);
  friend void swap(ClusterStats& a, ClusterStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterStats* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterStats& from);
  void MergeFrom(const ClusterStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 capacity_total = 1;
  void clear_capacity_total();
  static const int kCapacityTotalFieldNumber = 1;
  ::google::protobuf::uint64 capacity_total() const;
  void set_capacity_total(::google::protobuf::uint64 value);

  // uint64 size_used = 2;
  void clear_size_used();
  static const int kSizeUsedFieldNumber = 2;
  ::google::protobuf::uint64 size_used() const;
  void set_size_used(::google::protobuf::uint64 value);

  // uint64 range_num = 3;
  void clear_range_num();
  static const int kRangeNumFieldNumber = 3;
  ::google::protobuf::uint64 range_num() const;
  void set_range_num(::google::protobuf::uint64 value);

  // uint64 db_num = 4;
  void clear_db_num();
  static const int kDbNumFieldNumber = 4;
  ::google::protobuf::uint64 db_num() const;
  void set_db_num(::google::protobuf::uint64 value);

  // uint64 table_num = 5;
  void clear_table_num();
  static const int kTableNumFieldNumber = 5;
  ::google::protobuf::uint64 table_num() const;
  void set_table_num(::google::protobuf::uint64 value);

  // uint64 task_num = 6;
  void clear_task_num();
  static const int kTaskNumFieldNumber = 6;
  ::google::protobuf::uint64 task_num() const;
  void set_task_num(::google::protobuf::uint64 value);

  // uint64 node_up_count = 7;
  void clear_node_up_count();
  static const int kNodeUpCountFieldNumber = 7;
  ::google::protobuf::uint64 node_up_count() const;
  void set_node_up_count(::google::protobuf::uint64 value);

  // uint64 node_down_count = 8;
  void clear_node_down_count();
  static const int kNodeDownCountFieldNumber = 8;
  ::google::protobuf::uint64 node_down_count() const;
  void set_node_down_count(::google::protobuf::uint64 value);

  // uint64 node_offline_count = 9;
  void clear_node_offline_count();
  static const int kNodeOfflineCountFieldNumber = 9;
  ::google::protobuf::uint64 node_offline_count() const;
  void set_node_offline_count(::google::protobuf::uint64 value);

  // uint64 node_tombstone_count = 10;
  void clear_node_tombstone_count();
  static const int kNodeTombstoneCountFieldNumber = 10;
  ::google::protobuf::uint64 node_tombstone_count() const;
  void set_node_tombstone_count(::google::protobuf::uint64 value);

  // double leader_balance_ratio = 11;
  void clear_leader_balance_ratio();
  static const int kLeaderBalanceRatioFieldNumber = 11;
  double leader_balance_ratio() const;
  void set_leader_balance_ratio(double value);

  // double region_balance_ratio = 12;
  void clear_region_balance_ratio();
  static const int kRegionBalanceRatioFieldNumber = 12;
  double region_balance_ratio() const;
  void set_region_balance_ratio(double value);

  // @@protoc_insertion_point(class_scope:statspb.ClusterStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 capacity_total_;
  ::google::protobuf::uint64 size_used_;
  ::google::protobuf::uint64 range_num_;
  ::google::protobuf::uint64 db_num_;
  ::google::protobuf::uint64 table_num_;
  ::google::protobuf::uint64 task_num_;
  ::google::protobuf::uint64 node_up_count_;
  ::google::protobuf::uint64 node_down_count_;
  ::google::protobuf::uint64 node_offline_count_;
  ::google::protobuf::uint64 node_tombstone_count_;
  double leader_balance_ratio_;
  double region_balance_ratio_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.DatabaseStats) */ {
 public:
  DatabaseStats();
  virtual ~DatabaseStats();

  DatabaseStats(const DatabaseStats& from);

  inline DatabaseStats& operator=(const DatabaseStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseStats(DatabaseStats&& from) noexcept
    : DatabaseStats() {
    *this = ::std::move(from);
  }

  inline DatabaseStats& operator=(DatabaseStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseStats& default_instance();

  static inline const DatabaseStats* internal_default_instance() {
    return reinterpret_cast<const DatabaseStats*>(
               &_DatabaseStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DatabaseStats* other);
  friend void swap(DatabaseStats& a, DatabaseStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DatabaseStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatabaseStats& from);
  void MergeFrom(const DatabaseStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatabaseStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 table_num = 2;
  void clear_table_num();
  static const int kTableNumFieldNumber = 2;
  ::google::protobuf::uint32 table_num() const;
  void set_table_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statspb.DatabaseStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 table_num_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.TableStats) */ {
 public:
  TableStats();
  virtual ~TableStats();

  TableStats(const TableStats& from);

  inline TableStats& operator=(const TableStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableStats(TableStats&& from) noexcept
    : TableStats() {
    *this = ::std::move(from);
  }

  inline TableStats& operator=(TableStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableStats& default_instance();

  static inline const TableStats* internal_default_instance() {
    return reinterpret_cast<const TableStats*>(
               &_TableStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TableStats* other);
  friend void swap(TableStats& a, TableStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableStats* New() const PROTOBUF_FINAL { return New(NULL); }

  TableStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableStats& from);
  void MergeFrom(const TableStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string db_name = 1;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // string table_name = 2;
  void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // uint64 range_num = 3;
  void clear_range_num();
  static const int kRangeNumFieldNumber = 3;
  ::google::protobuf::uint64 range_num() const;
  void set_range_num(::google::protobuf::uint64 value);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.TableStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::uint64 range_num_;
  ::google::protobuf::uint64 size_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.TaskInfo) */ {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskInfo(TaskInfo&& from) noexcept
    : TaskInfo() {
    *this = ::std::move(from);
  }

  inline TaskInfo& operator=(TaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TaskInfo* other);
  friend void swap(TaskInfo& a, TaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 3;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string describe = 9;
  void clear_describe();
  static const int kDescribeFieldNumber = 9;
  const ::std::string& describe() const;
  void set_describe(const ::std::string& value);
  #if LANG_CXX11
  void set_describe(::std::string&& value);
  #endif
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  ::std::string* mutable_describe();
  ::std::string* release_describe();
  void set_allocated_describe(::std::string* describe);

  // uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // uint64 range_id = 2;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 2;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // int64 start = 6;
  void clear_start();
  static const int kStartFieldNumber = 6;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 7;
  void clear_end();
  static const int kEndFieldNumber = 7;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // double used_time = 8;
  void clear_used_time();
  static const int kUsedTimeFieldNumber = 8;
  double used_time() const;
  void set_used_time(double value);

  // @@protoc_insertion_point(class_scope:statspb.TaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr describe_;
  ::google::protobuf::uint64 task_id_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  double used_time_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HotSpotStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.HotSpotStats) */ {
 public:
  HotSpotStats();
  virtual ~HotSpotStats();

  HotSpotStats(const HotSpotStats& from);

  inline HotSpotStats& operator=(const HotSpotStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HotSpotStats(HotSpotStats&& from) noexcept
    : HotSpotStats() {
    *this = ::std::move(from);
  }

  inline HotSpotStats& operator=(HotSpotStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HotSpotStats& default_instance();

  static inline const HotSpotStats* internal_default_instance() {
    return reinterpret_cast<const HotSpotStats*>(
               &_HotSpotStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HotSpotStats* other);
  friend void swap(HotSpotStats& a, HotSpotStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HotSpotStats* New() const PROTOBUF_FINAL { return New(NULL); }

  HotSpotStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HotSpotStats& from);
  void MergeFrom(const HotSpotStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HotSpotStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_addr = 2;
  void clear_node_addr();
  static const int kNodeAddrFieldNumber = 2;
  const ::std::string& node_addr() const;
  void set_node_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_node_addr(::std::string&& value);
  #endif
  void set_node_addr(const char* value);
  void set_node_addr(const char* value, size_t size);
  ::std::string* mutable_node_addr();
  ::std::string* release_node_addr();
  void set_allocated_node_addr(::std::string* node_addr);

  // uint64 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // double total_written_bytes_as_peer = 3;
  void clear_total_written_bytes_as_peer();
  static const int kTotalWrittenBytesAsPeerFieldNumber = 3;
  double total_written_bytes_as_peer() const;
  void set_total_written_bytes_as_peer(double value);

  // uint64 hot_write_region_as_peer = 4;
  void clear_hot_write_region_as_peer();
  static const int kHotWriteRegionAsPeerFieldNumber = 4;
  ::google::protobuf::uint64 hot_write_region_as_peer() const;
  void set_hot_write_region_as_peer(::google::protobuf::uint64 value);

  // double total_written_bytes_as_leader = 5;
  void clear_total_written_bytes_as_leader();
  static const int kTotalWrittenBytesAsLeaderFieldNumber = 5;
  double total_written_bytes_as_leader() const;
  void set_total_written_bytes_as_leader(double value);

  // uint64 hot_write_region_as_leader = 6;
  void clear_hot_write_region_as_leader();
  static const int kHotWriteRegionAsLeaderFieldNumber = 6;
  ::google::protobuf::uint64 hot_write_region_as_leader() const;
  void set_hot_write_region_as_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.HotSpotStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_addr_;
  ::google::protobuf::uint64 node_id_;
  double total_written_bytes_as_peer_;
  ::google::protobuf::uint64 hot_write_region_as_peer_;
  double total_written_bytes_as_leader_;
  ::google::protobuf::uint64 hot_write_region_as_leader_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScheduleCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.ScheduleCount) */ {
 public:
  ScheduleCount();
  virtual ~ScheduleCount();

  ScheduleCount(const ScheduleCount& from);

  inline ScheduleCount& operator=(const ScheduleCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScheduleCount(ScheduleCount&& from) noexcept
    : ScheduleCount() {
    *this = ::std::move(from);
  }

  inline ScheduleCount& operator=(ScheduleCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleCount& default_instance();

  static inline const ScheduleCount* internal_default_instance() {
    return reinterpret_cast<const ScheduleCount*>(
               &_ScheduleCount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ScheduleCount* other);
  friend void swap(ScheduleCount& a, ScheduleCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScheduleCount* New() const PROTOBUF_FINAL { return New(NULL); }

  ScheduleCount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScheduleCount& from);
  void MergeFrom(const ScheduleCount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScheduleCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.ScheduleCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiskStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.DiskStats) */ {
 public:
  DiskStats();
  virtual ~DiskStats();

  DiskStats(const DiskStats& from);

  inline DiskStats& operator=(const DiskStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiskStats(DiskStats&& from) noexcept
    : DiskStats() {
    *this = ::std::move(from);
  }

  inline DiskStats& operator=(DiskStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskStats& default_instance();

  static inline const DiskStats* internal_default_instance() {
    return reinterpret_cast<const DiskStats*>(
               &_DiskStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DiskStats* other);
  friend void swap(DiskStats& a, DiskStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiskStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DiskStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiskStats& from);
  void MergeFrom(const DiskStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiskStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string disk_path = 1;
  void clear_disk_path();
  static const int kDiskPathFieldNumber = 1;
  const ::std::string& disk_path() const;
  void set_disk_path(const ::std::string& value);
  #if LANG_CXX11
  void set_disk_path(::std::string&& value);
  #endif
  void set_disk_path(const char* value);
  void set_disk_path(const char* value, size_t size);
  ::std::string* mutable_disk_path();
  ::std::string* release_disk_path();
  void set_allocated_disk_path(::std::string* disk_path);

  // uint64 disk_total = 2;
  void clear_disk_total();
  static const int kDiskTotalFieldNumber = 2;
  ::google::protobuf::uint64 disk_total() const;
  void set_disk_total(::google::protobuf::uint64 value);

  // uint64 disk_used = 3;
  void clear_disk_used();
  static const int kDiskUsedFieldNumber = 3;
  ::google::protobuf::uint64 disk_used() const;
  void set_disk_used(::google::protobuf::uint64 value);

  // uint64 disk_free = 4;
  void clear_disk_free();
  static const int kDiskFreeFieldNumber = 4;
  ::google::protobuf::uint64 disk_free() const;
  void set_disk_free(::google::protobuf::uint64 value);

  // double disk_proc_rate = 5;
  void clear_disk_proc_rate();
  static const int kDiskProcRateFieldNumber = 5;
  double disk_proc_rate() const;
  void set_disk_proc_rate(double value);

  // uint64 disk_read_byte_per_sec = 6;
  void clear_disk_read_byte_per_sec();
  static const int kDiskReadBytePerSecFieldNumber = 6;
  ::google::protobuf::uint64 disk_read_byte_per_sec() const;
  void set_disk_read_byte_per_sec(::google::protobuf::uint64 value);

  // uint64 disk_write_byte_per_sec = 7;
  void clear_disk_write_byte_per_sec();
  static const int kDiskWriteBytePerSecFieldNumber = 7;
  ::google::protobuf::uint64 disk_write_byte_per_sec() const;
  void set_disk_write_byte_per_sec(::google::protobuf::uint64 value);

  // uint64 disk_read_count_per_sec = 8;
  void clear_disk_read_count_per_sec();
  static const int kDiskReadCountPerSecFieldNumber = 8;
  ::google::protobuf::uint64 disk_read_count_per_sec() const;
  void set_disk_read_count_per_sec(::google::protobuf::uint64 value);

  // uint64 disk_write_count_per_sec = 9;
  void clear_disk_write_count_per_sec();
  static const int kDiskWriteCountPerSecFieldNumber = 9;
  ::google::protobuf::uint64 disk_write_count_per_sec() const;
  void set_disk_write_count_per_sec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.DiskStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr disk_path_;
  ::google::protobuf::uint64 disk_total_;
  ::google::protobuf::uint64 disk_used_;
  ::google::protobuf::uint64 disk_free_;
  double disk_proc_rate_;
  ::google::protobuf::uint64 disk_read_byte_per_sec_;
  ::google::protobuf::uint64 disk_write_byte_per_sec_;
  ::google::protobuf::uint64 disk_read_count_per_sec_;
  ::google::protobuf::uint64 disk_write_count_per_sec_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.NetStats) */ {
 public:
  NetStats();
  virtual ~NetStats();

  NetStats(const NetStats& from);

  inline NetStats& operator=(const NetStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetStats(NetStats&& from) noexcept
    : NetStats() {
    *this = ::std::move(from);
  }

  inline NetStats& operator=(NetStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStats& default_instance();

  static inline const NetStats* internal_default_instance() {
    return reinterpret_cast<const NetStats*>(
               &_NetStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NetStats* other);
  friend void swap(NetStats& a, NetStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetStats* New() const PROTOBUF_FINAL { return New(NULL); }

  NetStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetStats& from);
  void MergeFrom(const NetStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 net_io_in_byte_per_sec = 1;
  void clear_net_io_in_byte_per_sec();
  static const int kNetIoInBytePerSecFieldNumber = 1;
  ::google::protobuf::uint64 net_io_in_byte_per_sec() const;
  void set_net_io_in_byte_per_sec(::google::protobuf::uint64 value);

  // uint64 net_io_out_byte_per_sec = 2;
  void clear_net_io_out_byte_per_sec();
  static const int kNetIoOutBytePerSecFieldNumber = 2;
  ::google::protobuf::uint64 net_io_out_byte_per_sec() const;
  void set_net_io_out_byte_per_sec(::google::protobuf::uint64 value);

  // uint64 net_io_in_package_per_sec = 3;
  void clear_net_io_in_package_per_sec();
  static const int kNetIoInPackagePerSecFieldNumber = 3;
  ::google::protobuf::uint64 net_io_in_package_per_sec() const;
  void set_net_io_in_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_io_out_package_per_sec = 4;
  void clear_net_io_out_package_per_sec();
  static const int kNetIoOutPackagePerSecFieldNumber = 4;
  ::google::protobuf::uint64 net_io_out_package_per_sec() const;
  void set_net_io_out_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_tcp_active_opens_per_sec = 6;
  void clear_net_tcp_active_opens_per_sec();
  static const int kNetTcpActiveOpensPerSecFieldNumber = 6;
  ::google::protobuf::uint64 net_tcp_active_opens_per_sec() const;
  void set_net_tcp_active_opens_per_sec(::google::protobuf::uint64 value);

  // uint64 net_ip_recv_package_per_sec = 7;
  void clear_net_ip_recv_package_per_sec();
  static const int kNetIpRecvPackagePerSecFieldNumber = 7;
  ::google::protobuf::uint64 net_ip_recv_package_per_sec() const;
  void set_net_ip_recv_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_ip_send_package_per_sec = 8;
  void clear_net_ip_send_package_per_sec();
  static const int kNetIpSendPackagePerSecFieldNumber = 8;
  ::google::protobuf::uint64 net_ip_send_package_per_sec() const;
  void set_net_ip_send_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_ip_drop_package_per_sec = 9;
  void clear_net_ip_drop_package_per_sec();
  static const int kNetIpDropPackagePerSecFieldNumber = 9;
  ::google::protobuf::uint64 net_ip_drop_package_per_sec() const;
  void set_net_ip_drop_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_tcp_recv_package_per_sec = 10;
  void clear_net_tcp_recv_package_per_sec();
  static const int kNetTcpRecvPackagePerSecFieldNumber = 10;
  ::google::protobuf::uint64 net_tcp_recv_package_per_sec() const;
  void set_net_tcp_recv_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_tcp_send_package_per_sec = 11;
  void clear_net_tcp_send_package_per_sec();
  static const int kNetTcpSendPackagePerSecFieldNumber = 11;
  ::google::protobuf::uint64 net_tcp_send_package_per_sec() const;
  void set_net_tcp_send_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_tcp_err_package_per_sec = 12;
  void clear_net_tcp_err_package_per_sec();
  static const int kNetTcpErrPackagePerSecFieldNumber = 12;
  ::google::protobuf::uint64 net_tcp_err_package_per_sec() const;
  void set_net_tcp_err_package_per_sec(::google::protobuf::uint64 value);

  // uint64 net_tcp_retransfer_package_per_sec = 13;
  void clear_net_tcp_retransfer_package_per_sec();
  static const int kNetTcpRetransferPackagePerSecFieldNumber = 13;
  ::google::protobuf::uint64 net_tcp_retransfer_package_per_sec() const;
  void set_net_tcp_retransfer_package_per_sec(::google::protobuf::uint64 value);

  // uint32 net_tcp_connections = 5;
  void clear_net_tcp_connections();
  static const int kNetTcpConnectionsFieldNumber = 5;
  ::google::protobuf::uint32 net_tcp_connections() const;
  void set_net_tcp_connections(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statspb.NetStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 net_io_in_byte_per_sec_;
  ::google::protobuf::uint64 net_io_out_byte_per_sec_;
  ::google::protobuf::uint64 net_io_in_package_per_sec_;
  ::google::protobuf::uint64 net_io_out_package_per_sec_;
  ::google::protobuf::uint64 net_tcp_active_opens_per_sec_;
  ::google::protobuf::uint64 net_ip_recv_package_per_sec_;
  ::google::protobuf::uint64 net_ip_send_package_per_sec_;
  ::google::protobuf::uint64 net_ip_drop_package_per_sec_;
  ::google::protobuf::uint64 net_tcp_recv_package_per_sec_;
  ::google::protobuf::uint64 net_tcp_send_package_per_sec_;
  ::google::protobuf::uint64 net_tcp_err_package_per_sec_;
  ::google::protobuf::uint64 net_tcp_retransfer_package_per_sec_;
  ::google::protobuf::uint32 net_tcp_connections_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.MemStats) */ {
 public:
  MemStats();
  virtual ~MemStats();

  MemStats(const MemStats& from);

  inline MemStats& operator=(const MemStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemStats(MemStats&& from) noexcept
    : MemStats() {
    *this = ::std::move(from);
  }

  inline MemStats& operator=(MemStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemStats& default_instance();

  static inline const MemStats* internal_default_instance() {
    return reinterpret_cast<const MemStats*>(
               &_MemStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MemStats* other);
  friend void swap(MemStats& a, MemStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemStats* New() const PROTOBUF_FINAL { return New(NULL); }

  MemStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemStats& from);
  void MergeFrom(const MemStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 memory_total = 1;
  void clear_memory_total();
  static const int kMemoryTotalFieldNumber = 1;
  ::google::protobuf::uint64 memory_total() const;
  void set_memory_total(::google::protobuf::uint64 value);

  // uint64 memory_used_rss = 2;
  void clear_memory_used_rss();
  static const int kMemoryUsedRssFieldNumber = 2;
  ::google::protobuf::uint64 memory_used_rss() const;
  void set_memory_used_rss(::google::protobuf::uint64 value);

  // uint64 memory_used = 3;
  void clear_memory_used();
  static const int kMemoryUsedFieldNumber = 3;
  ::google::protobuf::uint64 memory_used() const;
  void set_memory_used(::google::protobuf::uint64 value);

  // uint64 memory_free = 4;
  void clear_memory_free();
  static const int kMemoryFreeFieldNumber = 4;
  ::google::protobuf::uint64 memory_free() const;
  void set_memory_free(::google::protobuf::uint64 value);

  // double memory_used_percent = 5;
  void clear_memory_used_percent();
  static const int kMemoryUsedPercentFieldNumber = 5;
  double memory_used_percent() const;
  void set_memory_used_percent(double value);

  // uint64 swap_memory_total = 6;
  void clear_swap_memory_total();
  static const int kSwapMemoryTotalFieldNumber = 6;
  ::google::protobuf::uint64 swap_memory_total() const;
  void set_swap_memory_total(::google::protobuf::uint64 value);

  // uint64 swap_memory_used = 7;
  void clear_swap_memory_used();
  static const int kSwapMemoryUsedFieldNumber = 7;
  ::google::protobuf::uint64 swap_memory_used() const;
  void set_swap_memory_used(::google::protobuf::uint64 value);

  // uint64 swap_memory_free = 8;
  void clear_swap_memory_free();
  static const int kSwapMemoryFreeFieldNumber = 8;
  ::google::protobuf::uint64 swap_memory_free() const;
  void set_swap_memory_free(::google::protobuf::uint64 value);

  // double swap_memory_used_percent = 9;
  void clear_swap_memory_used_percent();
  static const int kSwapMemoryUsedPercentFieldNumber = 9;
  double swap_memory_used_percent() const;
  void set_swap_memory_used_percent(double value);

  // @@protoc_insertion_point(class_scope:statspb.MemStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 memory_total_;
  ::google::protobuf::uint64 memory_used_rss_;
  ::google::protobuf::uint64 memory_used_;
  ::google::protobuf::uint64 memory_free_;
  double memory_used_percent_;
  ::google::protobuf::uint64 swap_memory_total_;
  ::google::protobuf::uint64 swap_memory_used_;
  ::google::protobuf::uint64 swap_memory_free_;
  double swap_memory_used_percent_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TpStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.TpStats) */ {
 public:
  TpStats();
  virtual ~TpStats();

  TpStats(const TpStats& from);

  inline TpStats& operator=(const TpStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TpStats(TpStats&& from) noexcept
    : TpStats() {
    *this = ::std::move(from);
  }

  inline TpStats& operator=(TpStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TpStats& default_instance();

  static inline const TpStats* internal_default_instance() {
    return reinterpret_cast<const TpStats*>(
               &_TpStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TpStats* other);
  friend void swap(TpStats& a, TpStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TpStats* New() const PROTOBUF_FINAL { return New(NULL); }

  TpStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TpStats& from);
  void MergeFrom(const TpStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TpStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 tps = 1;
  void clear_tps();
  static const int kTpsFieldNumber = 1;
  ::google::protobuf::uint64 tps() const;
  void set_tps(::google::protobuf::uint64 value);

  // double min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min() const;
  void set_min(double value);

  // double max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  double max() const;
  void set_max(double value);

  // double avg = 4;
  void clear_avg();
  static const int kAvgFieldNumber = 4;
  double avg() const;
  void set_avg(double value);

  // double tp_50 = 5;
  void clear_tp_50();
  static const int kTp50FieldNumber = 5;
  double tp_50() const;
  void set_tp_50(double value);

  // double tp_90 = 6;
  void clear_tp_90();
  static const int kTp90FieldNumber = 6;
  double tp_90() const;
  void set_tp_90(double value);

  // double tp_99 = 7;
  void clear_tp_99();
  static const int kTp99FieldNumber = 7;
  double tp_99() const;
  void set_tp_99(double value);

  // double tp_999 = 8;
  void clear_tp_999();
  static const int kTp999FieldNumber = 8;
  double tp_999() const;
  void set_tp_999(double value);

  // uint64 total_number = 9;
  void clear_total_number();
  static const int kTotalNumberFieldNumber = 9;
  ::google::protobuf::uint64 total_number() const;
  void set_total_number(::google::protobuf::uint64 value);

  // uint64 err_number = 10;
  void clear_err_number();
  static const int kErrNumberFieldNumber = 10;
  ::google::protobuf::uint64 err_number() const;
  void set_err_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.TpStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 tps_;
  double min_;
  double max_;
  double avg_;
  double tp_50_;
  double tp_90_;
  double tp_99_;
  double tp_999_;
  ::google::protobuf::uint64 total_number_;
  ::google::protobuf::uint64 err_number_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlowLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SlowLog) */ {
 public:
  SlowLog();
  virtual ~SlowLog();

  SlowLog(const SlowLog& from);

  inline SlowLog& operator=(const SlowLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlowLog(SlowLog&& from) noexcept
    : SlowLog() {
    *this = ::std::move(from);
  }

  inline SlowLog& operator=(SlowLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowLog& default_instance();

  static inline const SlowLog* internal_default_instance() {
    return reinterpret_cast<const SlowLog*>(
               &_SlowLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SlowLog* other);
  friend void swap(SlowLog& a, SlowLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlowLog* New() const PROTOBUF_FINAL { return New(NULL); }

  SlowLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlowLog& from);
  void MergeFrom(const SlowLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlowLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string slow_log = 1;
  void clear_slow_log();
  static const int kSlowLogFieldNumber = 1;
  const ::std::string& slow_log() const;
  void set_slow_log(const ::std::string& value);
  #if LANG_CXX11
  void set_slow_log(::std::string&& value);
  #endif
  void set_slow_log(const char* value);
  void set_slow_log(const char* value, size_t size);
  ::std::string* mutable_slow_log();
  ::std::string* release_slow_log();
  void set_allocated_slow_log(::std::string* slow_log);

  // double lats = 2;
  void clear_lats();
  static const int kLatsFieldNumber = 2;
  double lats() const;
  void set_lats(double value);

  // @@protoc_insertion_point(class_scope:statspb.SlowLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr slow_log_;
  double lats_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlowLogStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SlowLogStats) */ {
 public:
  SlowLogStats();
  virtual ~SlowLogStats();

  SlowLogStats(const SlowLogStats& from);

  inline SlowLogStats& operator=(const SlowLogStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlowLogStats(SlowLogStats&& from) noexcept
    : SlowLogStats() {
    *this = ::std::move(from);
  }

  inline SlowLogStats& operator=(SlowLogStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowLogStats& default_instance();

  static inline const SlowLogStats* internal_default_instance() {
    return reinterpret_cast<const SlowLogStats*>(
               &_SlowLogStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SlowLogStats* other);
  friend void swap(SlowLogStats& a, SlowLogStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlowLogStats* New() const PROTOBUF_FINAL { return New(NULL); }

  SlowLogStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlowLogStats& from);
  void MergeFrom(const SlowLogStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlowLogStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .statspb.SlowLog slow_logs = 1;
  int slow_logs_size() const;
  void clear_slow_logs();
  static const int kSlowLogsFieldNumber = 1;
  const ::statspb::SlowLog& slow_logs(int index) const;
  ::statspb::SlowLog* mutable_slow_logs(int index);
  ::statspb::SlowLog* add_slow_logs();
  ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >*
      mutable_slow_logs();
  const ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >&
      slow_logs() const;

  // @@protoc_insertion_point(class_scope:statspb.SlowLogStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog > slow_logs_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.DsInfo) */ {
 public:
  DsInfo();
  virtual ~DsInfo();

  DsInfo(const DsInfo& from);

  inline DsInfo& operator=(const DsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsInfo(DsInfo&& from) noexcept
    : DsInfo() {
    *this = ::std::move(from);
  }

  inline DsInfo& operator=(DsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsInfo& default_instance();

  static inline const DsInfo* internal_default_instance() {
    return reinterpret_cast<const DsInfo*>(
               &_DsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DsInfo* other);
  friend void swap(DsInfo& a, DsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsInfo& from);
  void MergeFrom(const DsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // uint64 range_count = 1;
  void clear_range_count();
  static const int kRangeCountFieldNumber = 1;
  ::google::protobuf::uint64 range_count() const;
  void set_range_count(::google::protobuf::uint64 value);

  // uint32 range_split_count = 2;
  void clear_range_split_count();
  static const int kRangeSplitCountFieldNumber = 2;
  ::google::protobuf::uint32 range_split_count() const;
  void set_range_split_count(::google::protobuf::uint32 value);

  // uint32 sending_snap_count = 3;
  void clear_sending_snap_count();
  static const int kSendingSnapCountFieldNumber = 3;
  ::google::protobuf::uint32 sending_snap_count() const;
  void set_sending_snap_count(::google::protobuf::uint32 value);

  // uint32 receiving_snap_count = 4;
  void clear_receiving_snap_count();
  static const int kReceivingSnapCountFieldNumber = 4;
  ::google::protobuf::uint32 receiving_snap_count() const;
  void set_receiving_snap_count(::google::protobuf::uint32 value);

  // uint32 applying_snap_count = 5;
  void clear_applying_snap_count();
  static const int kApplyingSnapCountFieldNumber = 5;
  ::google::protobuf::uint32 applying_snap_count() const;
  void set_applying_snap_count(::google::protobuf::uint32 value);

  // uint32 range_leader_count = 6;
  void clear_range_leader_count();
  static const int kRangeLeaderCountFieldNumber = 6;
  ::google::protobuf::uint32 range_leader_count() const;
  void set_range_leader_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statspb.DsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 range_count_;
  ::google::protobuf::uint32 range_split_count_;
  ::google::protobuf::uint32 sending_snap_count_;
  ::google::protobuf::uint32 receiving_snap_count_;
  ::google::protobuf::uint32 applying_snap_count_;
  ::google::protobuf::uint32 range_leader_count_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.ProcessStats) */ {
 public:
  ProcessStats();
  virtual ~ProcessStats();

  ProcessStats(const ProcessStats& from);

  inline ProcessStats& operator=(const ProcessStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessStats(ProcessStats&& from) noexcept
    : ProcessStats() {
    *this = ::std::move(from);
  }

  inline ProcessStats& operator=(ProcessStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessStats& default_instance();

  static inline const ProcessStats* internal_default_instance() {
    return reinterpret_cast<const ProcessStats*>(
               &_ProcessStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ProcessStats* other);
  friend void swap(ProcessStats& a, ProcessStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessStats* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessStats& from);
  void MergeFrom(const ProcessStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .statspb.DiskStats disk_stats = 8;
  bool has_disk_stats() const;
  void clear_disk_stats();
  static const int kDiskStatsFieldNumber = 8;
  const ::statspb::DiskStats& disk_stats() const;
  ::statspb::DiskStats* mutable_disk_stats();
  ::statspb::DiskStats* release_disk_stats();
  void set_allocated_disk_stats(::statspb::DiskStats* disk_stats);

  // .statspb.TpStats tp_stats = 9;
  bool has_tp_stats() const;
  void clear_tp_stats();
  static const int kTpStatsFieldNumber = 9;
  const ::statspb::TpStats& tp_stats() const;
  ::statspb::TpStats* mutable_tp_stats();
  ::statspb::TpStats* release_tp_stats();
  void set_allocated_tp_stats(::statspb::TpStats* tp_stats);

  // .statspb.DsInfo ds_info = 10;
  bool has_ds_info() const;
  void clear_ds_info();
  static const int kDsInfoFieldNumber = 10;
  const ::statspb::DsInfo& ds_info() const;
  ::statspb::DsInfo* mutable_ds_info();
  ::statspb::DsInfo* release_ds_info();
  void set_allocated_ds_info(::statspb::DsInfo* ds_info);

  // double cpu_proc_rate = 1;
  void clear_cpu_proc_rate();
  static const int kCpuProcRateFieldNumber = 1;
  double cpu_proc_rate() const;
  void set_cpu_proc_rate(double value);

  // uint64 memory_total = 2;
  void clear_memory_total();
  static const int kMemoryTotalFieldNumber = 2;
  ::google::protobuf::uint64 memory_total() const;
  void set_memory_total(::google::protobuf::uint64 value);

  // uint64 memory_used = 3;
  void clear_memory_used();
  static const int kMemoryUsedFieldNumber = 3;
  ::google::protobuf::uint64 memory_used() const;
  void set_memory_used(::google::protobuf::uint64 value);

  // uint64 connect_count = 4;
  void clear_connect_count();
  static const int kConnectCountFieldNumber = 4;
  ::google::protobuf::uint64 connect_count() const;
  void set_connect_count(::google::protobuf::uint64 value);

  // uint32 thread_num = 11;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 11;
  ::google::protobuf::uint32 thread_num() const;
  void set_thread_num(::google::protobuf::uint32 value);

  // uint32 handle_num = 12;
  void clear_handle_num();
  static const int kHandleNumFieldNumber = 12;
  ::google::protobuf::uint32 handle_num() const;
  void set_handle_num(::google::protobuf::uint32 value);

  // int64 start_time = 13;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 13;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:statspb.ProcessStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::statspb::DiskStats* disk_stats_;
  ::statspb::TpStats* tp_stats_;
  ::statspb::DsInfo* ds_info_;
  double cpu_proc_rate_;
  ::google::protobuf::uint64 memory_total_;
  ::google::protobuf::uint64 memory_used_;
  ::google::protobuf::uint64 connect_count_;
  ::google::protobuf::uint32 thread_num_;
  ::google::protobuf::uint32 handle_num_;
  ::google::protobuf::int64 start_time_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MacStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.MacStats) */ {
 public:
  MacStats();
  virtual ~MacStats();

  MacStats(const MacStats& from);

  inline MacStats& operator=(const MacStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MacStats(MacStats&& from) noexcept
    : MacStats() {
    *this = ::std::move(from);
  }

  inline MacStats& operator=(MacStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MacStats& default_instance();

  static inline const MacStats* internal_default_instance() {
    return reinterpret_cast<const MacStats*>(
               &_MacStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(MacStats* other);
  friend void swap(MacStats& a, MacStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MacStats* New() const PROTOBUF_FINAL { return New(NULL); }

  MacStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MacStats& from);
  void MergeFrom(const MacStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MacStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .statspb.DiskStats disk_stats = 8;
  int disk_stats_size() const;
  void clear_disk_stats();
  static const int kDiskStatsFieldNumber = 8;
  const ::statspb::DiskStats& disk_stats(int index) const;
  ::statspb::DiskStats* mutable_disk_stats(int index);
  ::statspb::DiskStats* add_disk_stats();
  ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >*
      mutable_disk_stats();
  const ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >&
      disk_stats() const;

  // .statspb.MemStats mem_stats = 6;
  bool has_mem_stats() const;
  void clear_mem_stats();
  static const int kMemStatsFieldNumber = 6;
  const ::statspb::MemStats& mem_stats() const;
  ::statspb::MemStats* mutable_mem_stats();
  ::statspb::MemStats* release_mem_stats();
  void set_allocated_mem_stats(::statspb::MemStats* mem_stats);

  // .statspb.NetStats net_stats = 7;
  bool has_net_stats() const;
  void clear_net_stats();
  static const int kNetStatsFieldNumber = 7;
  const ::statspb::NetStats& net_stats() const;
  ::statspb::NetStats* mutable_net_stats();
  ::statspb::NetStats* release_net_stats();
  void set_allocated_net_stats(::statspb::NetStats* net_stats);

  // double cpu_proc_rate = 1;
  void clear_cpu_proc_rate();
  static const int kCpuProcRateFieldNumber = 1;
  double cpu_proc_rate() const;
  void set_cpu_proc_rate(double value);

  // double load1 = 3;
  void clear_load1();
  static const int kLoad1FieldNumber = 3;
  double load1() const;
  void set_load1(double value);

  // double load5 = 4;
  void clear_load5();
  static const int kLoad5FieldNumber = 4;
  double load5() const;
  void set_load5(double value);

  // double load15 = 5;
  void clear_load15();
  static const int kLoad15FieldNumber = 5;
  double load15() const;
  void set_load15(double value);

  // uint32 cpu_count = 2;
  void clear_cpu_count();
  static const int kCpuCountFieldNumber = 2;
  ::google::protobuf::uint32 cpu_count() const;
  void set_cpu_count(::google::protobuf::uint32 value);

  // uint32 process_num = 9;
  void clear_process_num();
  static const int kProcessNumFieldNumber = 9;
  ::google::protobuf::uint32 process_num() const;
  void set_process_num(::google::protobuf::uint32 value);

  // uint32 thread_num = 10;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 10;
  ::google::protobuf::uint32 thread_num() const;
  void set_thread_num(::google::protobuf::uint32 value);

  // uint32 handle_num = 11;
  void clear_handle_num();
  static const int kHandleNumFieldNumber = 11;
  ::google::protobuf::uint32 handle_num() const;
  void set_handle_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statspb.MacStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats > disk_stats_;
  ::statspb::MemStats* mem_stats_;
  ::statspb::NetStats* net_stats_;
  double cpu_proc_rate_;
  double load1_;
  double load5_;
  double load15_;
  ::google::protobuf::uint32 cpu_count_;
  ::google::protobuf::uint32 process_num_;
  ::google::protobuf::uint32 thread_num_;
  ::google::protobuf::uint32 handle_num_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.RangeStats) */ {
 public:
  RangeStats();
  virtual ~RangeStats();

  RangeStats(const RangeStats& from);

  inline RangeStats& operator=(const RangeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeStats(RangeStats&& from) noexcept
    : RangeStats() {
    *this = ::std::move(from);
  }

  inline RangeStats& operator=(RangeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeStats& default_instance();

  static inline const RangeStats* internal_default_instance() {
    return reinterpret_cast<const RangeStats*>(
               &_RangeStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RangeStats* other);
  friend void swap(RangeStats& a, RangeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeStats* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeStats& from);
  void MergeFrom(const RangeStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // uint64 ops = 2;
  void clear_ops();
  static const int kOpsFieldNumber = 2;
  ::google::protobuf::uint64 ops() const;
  void set_ops(::google::protobuf::uint64 value);

  // uint64 bytes_in_per_sec = 3;
  void clear_bytes_in_per_sec();
  static const int kBytesInPerSecFieldNumber = 3;
  ::google::protobuf::uint64 bytes_in_per_sec() const;
  void set_bytes_in_per_sec(::google::protobuf::uint64 value);

  // uint64 bytes_out_per_sec = 4;
  void clear_bytes_out_per_sec();
  static const int kBytesOutPerSecFieldNumber = 4;
  ::google::protobuf::uint64 bytes_out_per_sec() const;
  void set_bytes_out_per_sec(::google::protobuf::uint64 value);

  // uint64 total_commands_processed = 5;
  void clear_total_commands_processed();
  static const int kTotalCommandsProcessedFieldNumber = 5;
  ::google::protobuf::uint64 total_commands_processed() const;
  void set_total_commands_processed(::google::protobuf::uint64 value);

  // uint64 keyspace_misses = 6;
  void clear_keyspace_misses();
  static const int kKeyspaceMissesFieldNumber = 6;
  ::google::protobuf::uint64 keyspace_misses() const;
  void set_keyspace_misses(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.RangeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 ops_;
  ::google::protobuf::uint64 bytes_in_per_sec_;
  ::google::protobuf::uint64 bytes_out_per_sec_;
  ::google::protobuf::uint64 total_commands_processed_;
  ::google::protobuf::uint64 keyspace_misses_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicaStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.ReplicaStatus) */ {
 public:
  ReplicaStatus();
  virtual ~ReplicaStatus();

  ReplicaStatus(const ReplicaStatus& from);

  inline ReplicaStatus& operator=(const ReplicaStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplicaStatus(ReplicaStatus&& from) noexcept
    : ReplicaStatus() {
    *this = ::std::move(from);
  }

  inline ReplicaStatus& operator=(ReplicaStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicaStatus& default_instance();

  static inline const ReplicaStatus* internal_default_instance() {
    return reinterpret_cast<const ReplicaStatus*>(
               &_ReplicaStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ReplicaStatus* other);
  friend void swap(ReplicaStatus& a, ReplicaStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplicaStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplicaStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplicaStatus& from);
  void MergeFrom(const ReplicaStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplicaStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // uint64 Match = 1;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  ::google::protobuf::uint64 match() const;
  void set_match(::google::protobuf::uint64 value);

  // uint64 Commit = 2;
  void clear_commit();
  static const int kCommitFieldNumber = 2;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 Next = 3;
  void clear_next();
  static const int kNextFieldNumber = 3;
  ::google::protobuf::uint64 next() const;
  void set_next(::google::protobuf::uint64 value);

  // bool Snapshoting = 5;
  void clear_snapshoting();
  static const int kSnapshotingFieldNumber = 5;
  bool snapshoting() const;
  void set_snapshoting(bool value);

  // bool Paused = 6;
  void clear_paused();
  static const int kPausedFieldNumber = 6;
  bool paused() const;
  void set_paused(bool value);

  // bool Active = 7;
  void clear_active();
  static const int kActiveFieldNumber = 7;
  bool active() const;
  void set_active(bool value);

  // int32 Inflight = 9;
  void clear_inflight();
  static const int kInflightFieldNumber = 9;
  ::google::protobuf::int32 inflight() const;
  void set_inflight(::google::protobuf::int32 value);

  // int64 LastActive = 8;
  void clear_lastactive();
  static const int kLastActiveFieldNumber = 8;
  ::google::protobuf::int64 lastactive() const;
  void set_lastactive(::google::protobuf::int64 value);

  // uint64 ID = 10;
  void clear_id();
  static const int kIDFieldNumber = 10;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.ReplicaStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::uint64 match_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 next_;
  bool snapshoting_;
  bool paused_;
  bool active_;
  ::google::protobuf::int32 inflight_;
  ::google::protobuf::int64 lastactive_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.RaftStatus) */ {
 public:
  RaftStatus();
  virtual ~RaftStatus();

  RaftStatus(const RaftStatus& from);

  inline RaftStatus& operator=(const RaftStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftStatus(RaftStatus&& from) noexcept
    : RaftStatus() {
    *this = ::std::move(from);
  }

  inline RaftStatus& operator=(RaftStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftStatus& default_instance();

  static inline const RaftStatus* internal_default_instance() {
    return reinterpret_cast<const RaftStatus*>(
               &_RaftStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(RaftStatus* other);
  friend void swap(RaftStatus& a, RaftStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftStatus& from);
  void MergeFrom(const RaftStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .statspb.ReplicaStatus Replicas = 15;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 15;
  const ::statspb::ReplicaStatus& replicas(int index) const;
  ::statspb::ReplicaStatus* mutable_replicas(int index);
  ::statspb::ReplicaStatus* add_replicas();
  ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >*
      mutable_replicas();
  const ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >&
      replicas() const;

  // string State = 14;
  void clear_state();
  static const int kStateFieldNumber = 14;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 Leader = 3;
  void clear_leader();
  static const int kLeaderFieldNumber = 3;
  ::google::protobuf::uint64 leader() const;
  void set_leader(::google::protobuf::uint64 value);

  // uint64 Term = 4;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 Index = 5;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // uint64 Commit = 6;
  void clear_commit();
  static const int kCommitFieldNumber = 6;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 Applied = 7;
  void clear_applied();
  static const int kAppliedFieldNumber = 7;
  ::google::protobuf::uint64 applied() const;
  void set_applied(::google::protobuf::uint64 value);

  // uint64 Vote = 8;
  void clear_vote();
  static const int kVoteFieldNumber = 8;
  ::google::protobuf::uint64 vote() const;
  void set_vote(::google::protobuf::uint64 value);

  // int32 PendQueue = 9;
  void clear_pendqueue();
  static const int kPendQueueFieldNumber = 9;
  ::google::protobuf::int32 pendqueue() const;
  void set_pendqueue(::google::protobuf::int32 value);

  // int32 RecvQueue = 10;
  void clear_recvqueue();
  static const int kRecvQueueFieldNumber = 10;
  ::google::protobuf::int32 recvqueue() const;
  void set_recvqueue(::google::protobuf::int32 value);

  // int32 AppQueue = 11;
  void clear_appqueue();
  static const int kAppQueueFieldNumber = 11;
  ::google::protobuf::int32 appqueue() const;
  void set_appqueue(::google::protobuf::int32 value);

  // bool Stopped = 12;
  void clear_stopped();
  static const int kStoppedFieldNumber = 12;
  bool stopped() const;
  void set_stopped(bool value);

  // bool RestoringSnapshot = 13;
  void clear_restoringsnapshot();
  static const int kRestoringSnapshotFieldNumber = 13;
  bool restoringsnapshot() const;
  void set_restoringsnapshot(bool value);

  // @@protoc_insertion_point(class_scope:statspb.RaftStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus > replicas_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 leader_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 applied_;
  ::google::protobuf::uint64 vote_;
  ::google::protobuf::int32 pendqueue_;
  ::google::protobuf::int32 recvqueue_;
  ::google::protobuf::int32 appqueue_;
  bool stopped_;
  bool restoringsnapshot_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqlStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SqlStats) */ {
 public:
  SqlStats();
  virtual ~SqlStats();

  SqlStats(const SqlStats& from);

  inline SqlStats& operator=(const SqlStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlStats(SqlStats&& from) noexcept
    : SqlStats() {
    *this = ::std::move(from);
  }

  inline SqlStats& operator=(SqlStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlStats& default_instance();

  static inline const SqlStats* internal_default_instance() {
    return reinterpret_cast<const SqlStats*>(
               &_SqlStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SqlStats* other);
  friend void swap(SqlStats& a, SqlStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlStats* New() const PROTOBUF_FINAL { return New(NULL); }

  SqlStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqlStats& from);
  void MergeFrom(const SqlStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqlStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes tp = 3;
  void clear_tp();
  static const int kTpFieldNumber = 3;
  const ::std::string& tp() const;
  void set_tp(const ::std::string& value);
  #if LANG_CXX11
  void set_tp(::std::string&& value);
  #endif
  void set_tp(const char* value);
  void set_tp(const void* value, size_t size);
  ::std::string* mutable_tp();
  ::std::string* release_tp();
  void set_allocated_tp(::std::string* tp);

  // int64 ops = 1;
  void clear_ops();
  static const int kOpsFieldNumber = 1;
  ::google::protobuf::int64 ops() const;
  void set_ops(::google::protobuf::int64 value);

  // int64 delay_avg = 2;
  void clear_delay_avg();
  static const int kDelayAvgFieldNumber = 2;
  ::google::protobuf::int64 delay_avg() const;
  void set_delay_avg(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:statspb.SqlStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tp_;
  ::google::protobuf::int64 ops_;
  ::google::protobuf::int64 delay_avg_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqlSlowlog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SqlSlowlog) */ {
 public:
  SqlSlowlog();
  virtual ~SqlSlowlog();

  SqlSlowlog(const SqlSlowlog& from);

  inline SqlSlowlog& operator=(const SqlSlowlog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlSlowlog(SqlSlowlog&& from) noexcept
    : SqlSlowlog() {
    *this = ::std::move(from);
  }

  inline SqlSlowlog& operator=(SqlSlowlog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlSlowlog& default_instance();

  static inline const SqlSlowlog* internal_default_instance() {
    return reinterpret_cast<const SqlSlowlog*>(
               &_SqlSlowlog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SqlSlowlog* other);
  friend void swap(SqlSlowlog& a, SqlSlowlog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlSlowlog* New() const PROTOBUF_FINAL { return New(NULL); }

  SqlSlowlog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqlSlowlog& from);
  void MergeFrom(const SqlSlowlog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqlSlowlog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .statspb.SqlSlow log = 4;
  int log_size() const;
  void clear_log();
  static const int kLogFieldNumber = 4;
  const ::statspb::SqlSlow& log(int index) const;
  ::statspb::SqlSlow* mutable_log(int index);
  ::statspb::SqlSlow* add_log();
  ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >*
      mutable_log();
  const ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >&
      log() const;

  // uint32 len = 1;
  void clear_len();
  static const int kLenFieldNumber = 1;
  ::google::protobuf::uint32 len() const;
  void set_len(::google::protobuf::uint32 value);

  // int32 than = 2;
  void clear_than();
  static const int kThanFieldNumber = 2;
  ::google::protobuf::int32 than() const;
  void set_than(::google::protobuf::int32 value);

  // uint32 idx = 3;
  void clear_idx();
  static const int kIdxFieldNumber = 3;
  ::google::protobuf::uint32 idx() const;
  void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:statspb.SqlSlowlog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow > log_;
  ::google::protobuf::uint32 len_;
  ::google::protobuf::int32 than_;
  ::google::protobuf::uint32 idx_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqlSlow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SqlSlow) */ {
 public:
  SqlSlow();
  virtual ~SqlSlow();

  SqlSlow(const SqlSlow& from);

  inline SqlSlow& operator=(const SqlSlow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlSlow(SqlSlow&& from) noexcept
    : SqlSlow() {
    *this = ::std::move(from);
  }

  inline SqlSlow& operator=(SqlSlow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlSlow& default_instance();

  static inline const SqlSlow* internal_default_instance() {
    return reinterpret_cast<const SqlSlow*>(
               &_SqlSlow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(SqlSlow* other);
  friend void swap(SqlSlow& a, SqlSlow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlSlow* New() const PROTOBUF_FINAL { return New(NULL); }

  SqlSlow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqlSlow& from);
  void MergeFrom(const SqlSlow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqlSlow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sql = 2;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // int64 time_sec = 1;
  void clear_time_sec();
  static const int kTimeSecFieldNumber = 1;
  ::google::protobuf::int64 time_sec() const;
  void set_time_sec(::google::protobuf::int64 value);

  // int64 total_usec = 3;
  void clear_total_usec();
  static const int kTotalUsecFieldNumber = 3;
  ::google::protobuf::int64 total_usec() const;
  void set_total_usec(::google::protobuf::int64 value);

  // int64 call_usec = 4;
  void clear_call_usec();
  static const int kCallUsecFieldNumber = 4;
  ::google::protobuf::int64 call_usec() const;
  void set_call_usec(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:statspb.SqlSlow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::int64 time_sec_;
  ::google::protobuf::int64 total_usec_;
  ::google::protobuf::int64 call_usec_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SqlTp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.SqlTp) */ {
 public:
  SqlTp();
  virtual ~SqlTp();

  SqlTp(const SqlTp& from);

  inline SqlTp& operator=(const SqlTp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlTp(SqlTp&& from) noexcept
    : SqlTp() {
    *this = ::std::move(from);
  }

  inline SqlTp& operator=(SqlTp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlTp& default_instance();

  static inline const SqlTp* internal_default_instance() {
    return reinterpret_cast<const SqlTp*>(
               &_SqlTp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SqlTp* other);
  friend void swap(SqlTp& a, SqlTp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlTp* New() const PROTOBUF_FINAL { return New(NULL); }

  SqlTp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SqlTp& from);
  void MergeFrom(const SqlTp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SqlTp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 tp = 2;
  int tp_size() const;
  void clear_tp();
  static const int kTpFieldNumber = 2;
  ::google::protobuf::int64 tp(int index) const;
  void set_tp(int index, ::google::protobuf::int64 value);
  void add_tp(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      tp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_tp();

  // int64 calls = 1;
  void clear_calls();
  static const int kCallsFieldNumber = 1;
  ::google::protobuf::int64 calls() const;
  void set_calls(::google::protobuf::int64 value);

  // int64 delay_max = 3;
  void clear_delay_max();
  static const int kDelayMaxFieldNumber = 3;
  ::google::protobuf::int64 delay_max() const;
  void set_delay_max(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:statspb.SqlTp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > tp_;
  mutable int _tp_cached_byte_size_;
  ::google::protobuf::int64 calls_;
  ::google::protobuf::int64 delay_max_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:statspb.RangeInfo) */ {
 public:
  RangeInfo();
  virtual ~RangeInfo();

  RangeInfo(const RangeInfo& from);

  inline RangeInfo& operator=(const RangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RangeInfo(RangeInfo&& from) noexcept
    : RangeInfo() {
    *this = ::std::move(from);
  }

  inline RangeInfo& operator=(RangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeInfo& default_instance();

  static inline const RangeInfo* internal_default_instance() {
    return reinterpret_cast<const RangeInfo*>(
               &_RangeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(RangeInfo* other);
  friend void swap(RangeInfo& a, RangeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RangeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeInfo& from);
  void MergeFrom(const RangeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_adder = 3;
  void clear_node_adder();
  static const int kNodeAdderFieldNumber = 3;
  const ::std::string& node_adder() const;
  void set_node_adder(const ::std::string& value);
  #if LANG_CXX11
  void set_node_adder(::std::string&& value);
  #endif
  void set_node_adder(const char* value);
  void set_node_adder(const char* value, size_t size);
  ::std::string* mutable_node_adder();
  ::std::string* release_node_adder();
  void set_allocated_node_adder(::std::string* node_adder);

  // .mspb.RangeStats stats = 4;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 4;
  const ::mspb::RangeStats& stats() const;
  ::mspb::RangeStats* mutable_stats();
  ::mspb::RangeStats* release_stats();
  void set_allocated_stats(::mspb::RangeStats* stats);

  // uint64 range_id = 1;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::uint64 range_id() const;
  void set_range_id(::google::protobuf::uint64 value);

  // uint64 leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  ::google::protobuf::uint64 leader_id() const;
  void set_leader_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:statspb.RangeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_adder_;
  ::mspb::RangeStats* stats_;
  ::google::protobuf::uint64 range_id_;
  ::google::protobuf::uint64 leader_id_;
  mutable int _cached_size_;
  friend struct protobuf_statspb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterStats

// uint64 capacity_total = 1;
inline void ClusterStats::clear_capacity_total() {
  capacity_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::capacity_total() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.capacity_total)
  return capacity_total_;
}
inline void ClusterStats::set_capacity_total(::google::protobuf::uint64 value) {
  
  capacity_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.capacity_total)
}

// uint64 size_used = 2;
inline void ClusterStats::clear_size_used() {
  size_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::size_used() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.size_used)
  return size_used_;
}
inline void ClusterStats::set_size_used(::google::protobuf::uint64 value) {
  
  size_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.size_used)
}

// uint64 range_num = 3;
inline void ClusterStats::clear_range_num() {
  range_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::range_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.range_num)
  return range_num_;
}
inline void ClusterStats::set_range_num(::google::protobuf::uint64 value) {
  
  range_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.range_num)
}

// uint64 db_num = 4;
inline void ClusterStats::clear_db_num() {
  db_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::db_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.db_num)
  return db_num_;
}
inline void ClusterStats::set_db_num(::google::protobuf::uint64 value) {
  
  db_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.db_num)
}

// uint64 table_num = 5;
inline void ClusterStats::clear_table_num() {
  table_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::table_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.table_num)
  return table_num_;
}
inline void ClusterStats::set_table_num(::google::protobuf::uint64 value) {
  
  table_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.table_num)
}

// uint64 task_num = 6;
inline void ClusterStats::clear_task_num() {
  task_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::task_num() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.task_num)
  return task_num_;
}
inline void ClusterStats::set_task_num(::google::protobuf::uint64 value) {
  
  task_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.task_num)
}

// uint64 node_up_count = 7;
inline void ClusterStats::clear_node_up_count() {
  node_up_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::node_up_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_up_count)
  return node_up_count_;
}
inline void ClusterStats::set_node_up_count(::google::protobuf::uint64 value) {
  
  node_up_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_up_count)
}

// uint64 node_down_count = 8;
inline void ClusterStats::clear_node_down_count() {
  node_down_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::node_down_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_down_count)
  return node_down_count_;
}
inline void ClusterStats::set_node_down_count(::google::protobuf::uint64 value) {
  
  node_down_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_down_count)
}

// uint64 node_offline_count = 9;
inline void ClusterStats::clear_node_offline_count() {
  node_offline_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::node_offline_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_offline_count)
  return node_offline_count_;
}
inline void ClusterStats::set_node_offline_count(::google::protobuf::uint64 value) {
  
  node_offline_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_offline_count)
}

// uint64 node_tombstone_count = 10;
inline void ClusterStats::clear_node_tombstone_count() {
  node_tombstone_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClusterStats::node_tombstone_count() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.node_tombstone_count)
  return node_tombstone_count_;
}
inline void ClusterStats::set_node_tombstone_count(::google::protobuf::uint64 value) {
  
  node_tombstone_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.node_tombstone_count)
}

// double leader_balance_ratio = 11;
inline void ClusterStats::clear_leader_balance_ratio() {
  leader_balance_ratio_ = 0;
}
inline double ClusterStats::leader_balance_ratio() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.leader_balance_ratio)
  return leader_balance_ratio_;
}
inline void ClusterStats::set_leader_balance_ratio(double value) {
  
  leader_balance_ratio_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.leader_balance_ratio)
}

// double region_balance_ratio = 12;
inline void ClusterStats::clear_region_balance_ratio() {
  region_balance_ratio_ = 0;
}
inline double ClusterStats::region_balance_ratio() const {
  // @@protoc_insertion_point(field_get:statspb.ClusterStats.region_balance_ratio)
  return region_balance_ratio_;
}
inline void ClusterStats::set_region_balance_ratio(double value) {
  
  region_balance_ratio_ = value;
  // @@protoc_insertion_point(field_set:statspb.ClusterStats.region_balance_ratio)
}

// -------------------------------------------------------------------

// DatabaseStats

// string name = 1;
inline void DatabaseStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseStats::name() const {
  // @@protoc_insertion_point(field_get:statspb.DatabaseStats.name)
  return name_.GetNoArena();
}
inline void DatabaseStats::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DatabaseStats.name)
}
#if LANG_CXX11
inline void DatabaseStats::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DatabaseStats.name)
}
#endif
inline void DatabaseStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DatabaseStats.name)
}
inline void DatabaseStats::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DatabaseStats.name)
}
inline ::std::string* DatabaseStats::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DatabaseStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseStats::release_name() {
  // @@protoc_insertion_point(field_release:statspb.DatabaseStats.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.DatabaseStats.name)
}

// uint32 table_num = 2;
inline void DatabaseStats::clear_table_num() {
  table_num_ = 0u;
}
inline ::google::protobuf::uint32 DatabaseStats::table_num() const {
  // @@protoc_insertion_point(field_get:statspb.DatabaseStats.table_num)
  return table_num_;
}
inline void DatabaseStats::set_table_num(::google::protobuf::uint32 value) {
  
  table_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.DatabaseStats.table_num)
}

// -------------------------------------------------------------------

// TableStats

// string db_name = 1;
inline void TableStats::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableStats::db_name() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.db_name)
  return db_name_.GetNoArena();
}
inline void TableStats::set_db_name(const ::std::string& value) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TableStats.db_name)
}
#if LANG_CXX11
inline void TableStats::set_db_name(::std::string&& value) {
  
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TableStats.db_name)
}
#endif
inline void TableStats::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TableStats.db_name)
}
inline void TableStats::set_db_name(const char* value, size_t size) {
  
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TableStats.db_name)
}
inline ::std::string* TableStats::mutable_db_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TableStats.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableStats::release_db_name() {
  // @@protoc_insertion_point(field_release:statspb.TableStats.db_name)
  
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableStats::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    
  } else {
    
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TableStats.db_name)
}

// string table_name = 2;
inline void TableStats::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableStats::table_name() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.table_name)
  return table_name_.GetNoArena();
}
inline void TableStats::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TableStats.table_name)
}
#if LANG_CXX11
inline void TableStats::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TableStats.table_name)
}
#endif
inline void TableStats::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TableStats.table_name)
}
inline void TableStats::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TableStats.table_name)
}
inline ::std::string* TableStats::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TableStats.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableStats::release_table_name() {
  // @@protoc_insertion_point(field_release:statspb.TableStats.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableStats::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TableStats.table_name)
}

// uint64 range_num = 3;
inline void TableStats::clear_range_num() {
  range_num_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableStats::range_num() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.range_num)
  return range_num_;
}
inline void TableStats::set_range_num(::google::protobuf::uint64 value) {
  
  range_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.TableStats.range_num)
}

// uint64 size = 4;
inline void TableStats::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableStats::size() const {
  // @@protoc_insertion_point(field_get:statspb.TableStats.size)
  return size_;
}
inline void TableStats::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:statspb.TableStats.size)
}

// -------------------------------------------------------------------

// TaskInfo

// uint64 task_id = 1;
inline void TaskInfo::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.task_id)
  return task_id_;
}
inline void TaskInfo::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.task_id)
}

// uint64 range_id = 2;
inline void TaskInfo::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskInfo::range_id() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.range_id)
  return range_id_;
}
inline void TaskInfo::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.range_id)
}

// string kind = 3;
inline void TaskInfo::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::kind() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.kind)
  return kind_.GetNoArena();
}
inline void TaskInfo::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.kind)
}
#if LANG_CXX11
inline void TaskInfo::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.kind)
}
#endif
inline void TaskInfo::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.kind)
}
inline void TaskInfo::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.kind)
}
inline ::std::string* TaskInfo::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_kind() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.kind)
}

// string name = 4;
inline void TaskInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::name() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.name)
  return name_.GetNoArena();
}
inline void TaskInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.name)
}
#if LANG_CXX11
inline void TaskInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.name)
}
#endif
inline void TaskInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.name)
}
inline void TaskInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.name)
}
inline ::std::string* TaskInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_name() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.name)
}

// string state = 5;
inline void TaskInfo::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::state() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.state)
  return state_.GetNoArena();
}
inline void TaskInfo::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.state)
}
#if LANG_CXX11
inline void TaskInfo::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.state)
}
#endif
inline void TaskInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.state)
}
inline void TaskInfo::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.state)
}
inline ::std::string* TaskInfo::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_state() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.state)
}

// int64 start = 6;
inline void TaskInfo::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TaskInfo::start() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.start)
  return start_;
}
inline void TaskInfo::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.start)
}

// int64 end = 7;
inline void TaskInfo::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TaskInfo::end() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.end)
  return end_;
}
inline void TaskInfo::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.end)
}

// double used_time = 8;
inline void TaskInfo::clear_used_time() {
  used_time_ = 0;
}
inline double TaskInfo::used_time() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.used_time)
  return used_time_;
}
inline void TaskInfo::set_used_time(double value) {
  
  used_time_ = value;
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.used_time)
}

// string describe = 9;
inline void TaskInfo::clear_describe() {
  describe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskInfo::describe() const {
  // @@protoc_insertion_point(field_get:statspb.TaskInfo.describe)
  return describe_.GetNoArena();
}
inline void TaskInfo::set_describe(const ::std::string& value) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.TaskInfo.describe)
}
#if LANG_CXX11
inline void TaskInfo::set_describe(::std::string&& value) {
  
  describe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.TaskInfo.describe)
}
#endif
inline void TaskInfo::set_describe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.TaskInfo.describe)
}
inline void TaskInfo::set_describe(const char* value, size_t size) {
  
  describe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.TaskInfo.describe)
}
inline ::std::string* TaskInfo::mutable_describe() {
  
  // @@protoc_insertion_point(field_mutable:statspb.TaskInfo.describe)
  return describe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInfo::release_describe() {
  // @@protoc_insertion_point(field_release:statspb.TaskInfo.describe)
  
  return describe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInfo::set_allocated_describe(::std::string* describe) {
  if (describe != NULL) {
    
  } else {
    
  }
  describe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:statspb.TaskInfo.describe)
}

// -------------------------------------------------------------------

// HotSpotStats

// uint64 node_id = 1;
inline void HotSpotStats::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HotSpotStats::node_id() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.node_id)
  return node_id_;
}
inline void HotSpotStats::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.node_id)
}

// string node_addr = 2;
inline void HotSpotStats::clear_node_addr() {
  node_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HotSpotStats::node_addr() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.node_addr)
  return node_addr_.GetNoArena();
}
inline void HotSpotStats::set_node_addr(const ::std::string& value) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.node_addr)
}
#if LANG_CXX11
inline void HotSpotStats::set_node_addr(::std::string&& value) {
  
  node_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.HotSpotStats.node_addr)
}
#endif
inline void HotSpotStats::set_node_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.HotSpotStats.node_addr)
}
inline void HotSpotStats::set_node_addr(const char* value, size_t size) {
  
  node_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.HotSpotStats.node_addr)
}
inline ::std::string* HotSpotStats::mutable_node_addr() {
  
  // @@protoc_insertion_point(field_mutable:statspb.HotSpotStats.node_addr)
  return node_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HotSpotStats::release_node_addr() {
  // @@protoc_insertion_point(field_release:statspb.HotSpotStats.node_addr)
  
  return node_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HotSpotStats::set_allocated_node_addr(::std::string* node_addr) {
  if (node_addr != NULL) {
    
  } else {
    
  }
  node_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_addr);
  // @@protoc_insertion_point(field_set_allocated:statspb.HotSpotStats.node_addr)
}

// double total_written_bytes_as_peer = 3;
inline void HotSpotStats::clear_total_written_bytes_as_peer() {
  total_written_bytes_as_peer_ = 0;
}
inline double HotSpotStats::total_written_bytes_as_peer() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.total_written_bytes_as_peer)
  return total_written_bytes_as_peer_;
}
inline void HotSpotStats::set_total_written_bytes_as_peer(double value) {
  
  total_written_bytes_as_peer_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.total_written_bytes_as_peer)
}

// uint64 hot_write_region_as_peer = 4;
inline void HotSpotStats::clear_hot_write_region_as_peer() {
  hot_write_region_as_peer_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HotSpotStats::hot_write_region_as_peer() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.hot_write_region_as_peer)
  return hot_write_region_as_peer_;
}
inline void HotSpotStats::set_hot_write_region_as_peer(::google::protobuf::uint64 value) {
  
  hot_write_region_as_peer_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.hot_write_region_as_peer)
}

// double total_written_bytes_as_leader = 5;
inline void HotSpotStats::clear_total_written_bytes_as_leader() {
  total_written_bytes_as_leader_ = 0;
}
inline double HotSpotStats::total_written_bytes_as_leader() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.total_written_bytes_as_leader)
  return total_written_bytes_as_leader_;
}
inline void HotSpotStats::set_total_written_bytes_as_leader(double value) {
  
  total_written_bytes_as_leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.total_written_bytes_as_leader)
}

// uint64 hot_write_region_as_leader = 6;
inline void HotSpotStats::clear_hot_write_region_as_leader() {
  hot_write_region_as_leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HotSpotStats::hot_write_region_as_leader() const {
  // @@protoc_insertion_point(field_get:statspb.HotSpotStats.hot_write_region_as_leader)
  return hot_write_region_as_leader_;
}
inline void HotSpotStats::set_hot_write_region_as_leader(::google::protobuf::uint64 value) {
  
  hot_write_region_as_leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.HotSpotStats.hot_write_region_as_leader)
}

// -------------------------------------------------------------------

// ScheduleCount

// string name = 1;
inline void ScheduleCount::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScheduleCount::name() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.name)
  return name_.GetNoArena();
}
inline void ScheduleCount::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.name)
}
#if LANG_CXX11
inline void ScheduleCount::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ScheduleCount.name)
}
#endif
inline void ScheduleCount::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ScheduleCount.name)
}
inline void ScheduleCount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ScheduleCount.name)
}
inline ::std::string* ScheduleCount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ScheduleCount.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScheduleCount::release_name() {
  // @@protoc_insertion_point(field_release:statspb.ScheduleCount.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScheduleCount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:statspb.ScheduleCount.name)
}

// string label = 2;
inline void ScheduleCount::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScheduleCount::label() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.label)
  return label_.GetNoArena();
}
inline void ScheduleCount::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.label)
}
#if LANG_CXX11
inline void ScheduleCount::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ScheduleCount.label)
}
#endif
inline void ScheduleCount::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ScheduleCount.label)
}
inline void ScheduleCount::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ScheduleCount.label)
}
inline ::std::string* ScheduleCount::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ScheduleCount.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScheduleCount::release_label() {
  // @@protoc_insertion_point(field_release:statspb.ScheduleCount.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScheduleCount::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:statspb.ScheduleCount.label)
}

// uint64 count = 3;
inline void ScheduleCount::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ScheduleCount::count() const {
  // @@protoc_insertion_point(field_get:statspb.ScheduleCount.count)
  return count_;
}
inline void ScheduleCount::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ScheduleCount.count)
}

// -------------------------------------------------------------------

// DiskStats

// string disk_path = 1;
inline void DiskStats::clear_disk_path() {
  disk_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiskStats::disk_path() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_path)
  return disk_path_.GetNoArena();
}
inline void DiskStats::set_disk_path(const ::std::string& value) {
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_path)
}
#if LANG_CXX11
inline void DiskStats::set_disk_path(::std::string&& value) {
  
  disk_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DiskStats.disk_path)
}
#endif
inline void DiskStats::set_disk_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DiskStats.disk_path)
}
inline void DiskStats::set_disk_path(const char* value, size_t size) {
  
  disk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DiskStats.disk_path)
}
inline ::std::string* DiskStats::mutable_disk_path() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DiskStats.disk_path)
  return disk_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiskStats::release_disk_path() {
  // @@protoc_insertion_point(field_release:statspb.DiskStats.disk_path)
  
  return disk_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiskStats::set_allocated_disk_path(::std::string* disk_path) {
  if (disk_path != NULL) {
    
  } else {
    
  }
  disk_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_path);
  // @@protoc_insertion_point(field_set_allocated:statspb.DiskStats.disk_path)
}

// uint64 disk_total = 2;
inline void DiskStats::clear_disk_total() {
  disk_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_total() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_total)
  return disk_total_;
}
inline void DiskStats::set_disk_total(::google::protobuf::uint64 value) {
  
  disk_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_total)
}

// uint64 disk_used = 3;
inline void DiskStats::clear_disk_used() {
  disk_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_used() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_used)
  return disk_used_;
}
inline void DiskStats::set_disk_used(::google::protobuf::uint64 value) {
  
  disk_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_used)
}

// uint64 disk_free = 4;
inline void DiskStats::clear_disk_free() {
  disk_free_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_free() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_free)
  return disk_free_;
}
inline void DiskStats::set_disk_free(::google::protobuf::uint64 value) {
  
  disk_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_free)
}

// double disk_proc_rate = 5;
inline void DiskStats::clear_disk_proc_rate() {
  disk_proc_rate_ = 0;
}
inline double DiskStats::disk_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_proc_rate)
  return disk_proc_rate_;
}
inline void DiskStats::set_disk_proc_rate(double value) {
  
  disk_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_proc_rate)
}

// uint64 disk_read_byte_per_sec = 6;
inline void DiskStats::clear_disk_read_byte_per_sec() {
  disk_read_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_read_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_read_byte_per_sec)
  return disk_read_byte_per_sec_;
}
inline void DiskStats::set_disk_read_byte_per_sec(::google::protobuf::uint64 value) {
  
  disk_read_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_read_byte_per_sec)
}

// uint64 disk_write_byte_per_sec = 7;
inline void DiskStats::clear_disk_write_byte_per_sec() {
  disk_write_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_write_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_write_byte_per_sec)
  return disk_write_byte_per_sec_;
}
inline void DiskStats::set_disk_write_byte_per_sec(::google::protobuf::uint64 value) {
  
  disk_write_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_write_byte_per_sec)
}

// uint64 disk_read_count_per_sec = 8;
inline void DiskStats::clear_disk_read_count_per_sec() {
  disk_read_count_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_read_count_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_read_count_per_sec)
  return disk_read_count_per_sec_;
}
inline void DiskStats::set_disk_read_count_per_sec(::google::protobuf::uint64 value) {
  
  disk_read_count_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_read_count_per_sec)
}

// uint64 disk_write_count_per_sec = 9;
inline void DiskStats::clear_disk_write_count_per_sec() {
  disk_write_count_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DiskStats::disk_write_count_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.DiskStats.disk_write_count_per_sec)
  return disk_write_count_per_sec_;
}
inline void DiskStats::set_disk_write_count_per_sec(::google::protobuf::uint64 value) {
  
  disk_write_count_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.DiskStats.disk_write_count_per_sec)
}

// -------------------------------------------------------------------

// NetStats

// uint64 net_io_in_byte_per_sec = 1;
inline void NetStats::clear_net_io_in_byte_per_sec() {
  net_io_in_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_io_in_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_in_byte_per_sec)
  return net_io_in_byte_per_sec_;
}
inline void NetStats::set_net_io_in_byte_per_sec(::google::protobuf::uint64 value) {
  
  net_io_in_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_in_byte_per_sec)
}

// uint64 net_io_out_byte_per_sec = 2;
inline void NetStats::clear_net_io_out_byte_per_sec() {
  net_io_out_byte_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_io_out_byte_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_out_byte_per_sec)
  return net_io_out_byte_per_sec_;
}
inline void NetStats::set_net_io_out_byte_per_sec(::google::protobuf::uint64 value) {
  
  net_io_out_byte_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_out_byte_per_sec)
}

// uint64 net_io_in_package_per_sec = 3;
inline void NetStats::clear_net_io_in_package_per_sec() {
  net_io_in_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_io_in_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_in_package_per_sec)
  return net_io_in_package_per_sec_;
}
inline void NetStats::set_net_io_in_package_per_sec(::google::protobuf::uint64 value) {
  
  net_io_in_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_in_package_per_sec)
}

// uint64 net_io_out_package_per_sec = 4;
inline void NetStats::clear_net_io_out_package_per_sec() {
  net_io_out_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_io_out_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_io_out_package_per_sec)
  return net_io_out_package_per_sec_;
}
inline void NetStats::set_net_io_out_package_per_sec(::google::protobuf::uint64 value) {
  
  net_io_out_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_io_out_package_per_sec)
}

// uint32 net_tcp_connections = 5;
inline void NetStats::clear_net_tcp_connections() {
  net_tcp_connections_ = 0u;
}
inline ::google::protobuf::uint32 NetStats::net_tcp_connections() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_connections)
  return net_tcp_connections_;
}
inline void NetStats::set_net_tcp_connections(::google::protobuf::uint32 value) {
  
  net_tcp_connections_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_connections)
}

// uint64 net_tcp_active_opens_per_sec = 6;
inline void NetStats::clear_net_tcp_active_opens_per_sec() {
  net_tcp_active_opens_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_tcp_active_opens_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_active_opens_per_sec)
  return net_tcp_active_opens_per_sec_;
}
inline void NetStats::set_net_tcp_active_opens_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_active_opens_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_active_opens_per_sec)
}

// uint64 net_ip_recv_package_per_sec = 7;
inline void NetStats::clear_net_ip_recv_package_per_sec() {
  net_ip_recv_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_ip_recv_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_recv_package_per_sec)
  return net_ip_recv_package_per_sec_;
}
inline void NetStats::set_net_ip_recv_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_recv_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_recv_package_per_sec)
}

// uint64 net_ip_send_package_per_sec = 8;
inline void NetStats::clear_net_ip_send_package_per_sec() {
  net_ip_send_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_ip_send_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_send_package_per_sec)
  return net_ip_send_package_per_sec_;
}
inline void NetStats::set_net_ip_send_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_send_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_send_package_per_sec)
}

// uint64 net_ip_drop_package_per_sec = 9;
inline void NetStats::clear_net_ip_drop_package_per_sec() {
  net_ip_drop_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_ip_drop_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_ip_drop_package_per_sec)
  return net_ip_drop_package_per_sec_;
}
inline void NetStats::set_net_ip_drop_package_per_sec(::google::protobuf::uint64 value) {
  
  net_ip_drop_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_ip_drop_package_per_sec)
}

// uint64 net_tcp_recv_package_per_sec = 10;
inline void NetStats::clear_net_tcp_recv_package_per_sec() {
  net_tcp_recv_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_tcp_recv_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_recv_package_per_sec)
  return net_tcp_recv_package_per_sec_;
}
inline void NetStats::set_net_tcp_recv_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_recv_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_recv_package_per_sec)
}

// uint64 net_tcp_send_package_per_sec = 11;
inline void NetStats::clear_net_tcp_send_package_per_sec() {
  net_tcp_send_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_tcp_send_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_send_package_per_sec)
  return net_tcp_send_package_per_sec_;
}
inline void NetStats::set_net_tcp_send_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_send_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_send_package_per_sec)
}

// uint64 net_tcp_err_package_per_sec = 12;
inline void NetStats::clear_net_tcp_err_package_per_sec() {
  net_tcp_err_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_tcp_err_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_err_package_per_sec)
  return net_tcp_err_package_per_sec_;
}
inline void NetStats::set_net_tcp_err_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_err_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_err_package_per_sec)
}

// uint64 net_tcp_retransfer_package_per_sec = 13;
inline void NetStats::clear_net_tcp_retransfer_package_per_sec() {
  net_tcp_retransfer_package_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetStats::net_tcp_retransfer_package_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.NetStats.net_tcp_retransfer_package_per_sec)
  return net_tcp_retransfer_package_per_sec_;
}
inline void NetStats::set_net_tcp_retransfer_package_per_sec(::google::protobuf::uint64 value) {
  
  net_tcp_retransfer_package_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.NetStats.net_tcp_retransfer_package_per_sec)
}

// -------------------------------------------------------------------

// MemStats

// uint64 memory_total = 1;
inline void MemStats::clear_memory_total() {
  memory_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_total)
  return memory_total_;
}
inline void MemStats::set_memory_total(::google::protobuf::uint64 value) {
  
  memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_total)
}

// uint64 memory_used_rss = 2;
inline void MemStats::clear_memory_used_rss() {
  memory_used_rss_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::memory_used_rss() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used_rss)
  return memory_used_rss_;
}
inline void MemStats::set_memory_used_rss(::google::protobuf::uint64 value) {
  
  memory_used_rss_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used_rss)
}

// uint64 memory_used = 3;
inline void MemStats::clear_memory_used() {
  memory_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used)
  return memory_used_;
}
inline void MemStats::set_memory_used(::google::protobuf::uint64 value) {
  
  memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used)
}

// uint64 memory_free = 4;
inline void MemStats::clear_memory_free() {
  memory_free_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::memory_free() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_free)
  return memory_free_;
}
inline void MemStats::set_memory_free(::google::protobuf::uint64 value) {
  
  memory_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_free)
}

// double memory_used_percent = 5;
inline void MemStats::clear_memory_used_percent() {
  memory_used_percent_ = 0;
}
inline double MemStats::memory_used_percent() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.memory_used_percent)
  return memory_used_percent_;
}
inline void MemStats::set_memory_used_percent(double value) {
  
  memory_used_percent_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.memory_used_percent)
}

// uint64 swap_memory_total = 6;
inline void MemStats::clear_swap_memory_total() {
  swap_memory_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::swap_memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_total)
  return swap_memory_total_;
}
inline void MemStats::set_swap_memory_total(::google::protobuf::uint64 value) {
  
  swap_memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_total)
}

// uint64 swap_memory_used = 7;
inline void MemStats::clear_swap_memory_used() {
  swap_memory_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::swap_memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_used)
  return swap_memory_used_;
}
inline void MemStats::set_swap_memory_used(::google::protobuf::uint64 value) {
  
  swap_memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_used)
}

// uint64 swap_memory_free = 8;
inline void MemStats::clear_swap_memory_free() {
  swap_memory_free_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemStats::swap_memory_free() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_free)
  return swap_memory_free_;
}
inline void MemStats::set_swap_memory_free(::google::protobuf::uint64 value) {
  
  swap_memory_free_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_free)
}

// double swap_memory_used_percent = 9;
inline void MemStats::clear_swap_memory_used_percent() {
  swap_memory_used_percent_ = 0;
}
inline double MemStats::swap_memory_used_percent() const {
  // @@protoc_insertion_point(field_get:statspb.MemStats.swap_memory_used_percent)
  return swap_memory_used_percent_;
}
inline void MemStats::set_swap_memory_used_percent(double value) {
  
  swap_memory_used_percent_ = value;
  // @@protoc_insertion_point(field_set:statspb.MemStats.swap_memory_used_percent)
}

// -------------------------------------------------------------------

// TpStats

// uint64 tps = 1;
inline void TpStats::clear_tps() {
  tps_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TpStats::tps() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tps)
  return tps_;
}
inline void TpStats::set_tps(::google::protobuf::uint64 value) {
  
  tps_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tps)
}

// double min = 2;
inline void TpStats::clear_min() {
  min_ = 0;
}
inline double TpStats::min() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.min)
  return min_;
}
inline void TpStats::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.min)
}

// double max = 3;
inline void TpStats::clear_max() {
  max_ = 0;
}
inline double TpStats::max() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.max)
  return max_;
}
inline void TpStats::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.max)
}

// double avg = 4;
inline void TpStats::clear_avg() {
  avg_ = 0;
}
inline double TpStats::avg() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.avg)
  return avg_;
}
inline void TpStats::set_avg(double value) {
  
  avg_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.avg)
}

// double tp_50 = 5;
inline void TpStats::clear_tp_50() {
  tp_50_ = 0;
}
inline double TpStats::tp_50() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_50)
  return tp_50_;
}
inline void TpStats::set_tp_50(double value) {
  
  tp_50_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_50)
}

// double tp_90 = 6;
inline void TpStats::clear_tp_90() {
  tp_90_ = 0;
}
inline double TpStats::tp_90() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_90)
  return tp_90_;
}
inline void TpStats::set_tp_90(double value) {
  
  tp_90_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_90)
}

// double tp_99 = 7;
inline void TpStats::clear_tp_99() {
  tp_99_ = 0;
}
inline double TpStats::tp_99() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_99)
  return tp_99_;
}
inline void TpStats::set_tp_99(double value) {
  
  tp_99_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_99)
}

// double tp_999 = 8;
inline void TpStats::clear_tp_999() {
  tp_999_ = 0;
}
inline double TpStats::tp_999() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.tp_999)
  return tp_999_;
}
inline void TpStats::set_tp_999(double value) {
  
  tp_999_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.tp_999)
}

// uint64 total_number = 9;
inline void TpStats::clear_total_number() {
  total_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TpStats::total_number() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.total_number)
  return total_number_;
}
inline void TpStats::set_total_number(::google::protobuf::uint64 value) {
  
  total_number_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.total_number)
}

// uint64 err_number = 10;
inline void TpStats::clear_err_number() {
  err_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TpStats::err_number() const {
  // @@protoc_insertion_point(field_get:statspb.TpStats.err_number)
  return err_number_;
}
inline void TpStats::set_err_number(::google::protobuf::uint64 value) {
  
  err_number_ = value;
  // @@protoc_insertion_point(field_set:statspb.TpStats.err_number)
}

// -------------------------------------------------------------------

// SlowLog

// string slow_log = 1;
inline void SlowLog::clear_slow_log() {
  slow_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SlowLog::slow_log() const {
  // @@protoc_insertion_point(field_get:statspb.SlowLog.slow_log)
  return slow_log_.GetNoArena();
}
inline void SlowLog::set_slow_log(const ::std::string& value) {
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SlowLog.slow_log)
}
#if LANG_CXX11
inline void SlowLog::set_slow_log(::std::string&& value) {
  
  slow_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SlowLog.slow_log)
}
#endif
inline void SlowLog::set_slow_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SlowLog.slow_log)
}
inline void SlowLog::set_slow_log(const char* value, size_t size) {
  
  slow_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SlowLog.slow_log)
}
inline ::std::string* SlowLog::mutable_slow_log() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SlowLog.slow_log)
  return slow_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SlowLog::release_slow_log() {
  // @@protoc_insertion_point(field_release:statspb.SlowLog.slow_log)
  
  return slow_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SlowLog::set_allocated_slow_log(::std::string* slow_log) {
  if (slow_log != NULL) {
    
  } else {
    
  }
  slow_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slow_log);
  // @@protoc_insertion_point(field_set_allocated:statspb.SlowLog.slow_log)
}

// double lats = 2;
inline void SlowLog::clear_lats() {
  lats_ = 0;
}
inline double SlowLog::lats() const {
  // @@protoc_insertion_point(field_get:statspb.SlowLog.lats)
  return lats_;
}
inline void SlowLog::set_lats(double value) {
  
  lats_ = value;
  // @@protoc_insertion_point(field_set:statspb.SlowLog.lats)
}

// -------------------------------------------------------------------

// SlowLogStats

// repeated .statspb.SlowLog slow_logs = 1;
inline int SlowLogStats::slow_logs_size() const {
  return slow_logs_.size();
}
inline void SlowLogStats::clear_slow_logs() {
  slow_logs_.Clear();
}
inline const ::statspb::SlowLog& SlowLogStats::slow_logs(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Get(index);
}
inline ::statspb::SlowLog* SlowLogStats::mutable_slow_logs(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Mutable(index);
}
inline ::statspb::SlowLog* SlowLogStats::add_slow_logs() {
  // @@protoc_insertion_point(field_add:statspb.SlowLogStats.slow_logs)
  return slow_logs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >*
SlowLogStats::mutable_slow_logs() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SlowLogStats.slow_logs)
  return &slow_logs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::statspb::SlowLog >&
SlowLogStats::slow_logs() const {
  // @@protoc_insertion_point(field_list:statspb.SlowLogStats.slow_logs)
  return slow_logs_;
}

// -------------------------------------------------------------------

// DsInfo

// uint64 range_count = 1;
inline void DsInfo::clear_range_count() {
  range_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DsInfo::range_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_count)
  return range_count_;
}
inline void DsInfo::set_range_count(::google::protobuf::uint64 value) {
  
  range_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_count)
}

// uint32 range_split_count = 2;
inline void DsInfo::clear_range_split_count() {
  range_split_count_ = 0u;
}
inline ::google::protobuf::uint32 DsInfo::range_split_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_split_count)
  return range_split_count_;
}
inline void DsInfo::set_range_split_count(::google::protobuf::uint32 value) {
  
  range_split_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_split_count)
}

// uint32 sending_snap_count = 3;
inline void DsInfo::clear_sending_snap_count() {
  sending_snap_count_ = 0u;
}
inline ::google::protobuf::uint32 DsInfo::sending_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.sending_snap_count)
  return sending_snap_count_;
}
inline void DsInfo::set_sending_snap_count(::google::protobuf::uint32 value) {
  
  sending_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.sending_snap_count)
}

// uint32 receiving_snap_count = 4;
inline void DsInfo::clear_receiving_snap_count() {
  receiving_snap_count_ = 0u;
}
inline ::google::protobuf::uint32 DsInfo::receiving_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.receiving_snap_count)
  return receiving_snap_count_;
}
inline void DsInfo::set_receiving_snap_count(::google::protobuf::uint32 value) {
  
  receiving_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.receiving_snap_count)
}

// uint32 applying_snap_count = 5;
inline void DsInfo::clear_applying_snap_count() {
  applying_snap_count_ = 0u;
}
inline ::google::protobuf::uint32 DsInfo::applying_snap_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.applying_snap_count)
  return applying_snap_count_;
}
inline void DsInfo::set_applying_snap_count(::google::protobuf::uint32 value) {
  
  applying_snap_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.applying_snap_count)
}

// uint32 range_leader_count = 6;
inline void DsInfo::clear_range_leader_count() {
  range_leader_count_ = 0u;
}
inline ::google::protobuf::uint32 DsInfo::range_leader_count() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.range_leader_count)
  return range_leader_count_;
}
inline void DsInfo::set_range_leader_count(::google::protobuf::uint32 value) {
  
  range_leader_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.DsInfo.range_leader_count)
}

// string version = 7;
inline void DsInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DsInfo::version() const {
  // @@protoc_insertion_point(field_get:statspb.DsInfo.version)
  return version_.GetNoArena();
}
inline void DsInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.DsInfo.version)
}
#if LANG_CXX11
inline void DsInfo::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.DsInfo.version)
}
#endif
inline void DsInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.DsInfo.version)
}
inline void DsInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.DsInfo.version)
}
inline ::std::string* DsInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:statspb.DsInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DsInfo::release_version() {
  // @@protoc_insertion_point(field_release:statspb.DsInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DsInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:statspb.DsInfo.version)
}

// -------------------------------------------------------------------

// ProcessStats

// double cpu_proc_rate = 1;
inline void ProcessStats::clear_cpu_proc_rate() {
  cpu_proc_rate_ = 0;
}
inline double ProcessStats::cpu_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.cpu_proc_rate)
  return cpu_proc_rate_;
}
inline void ProcessStats::set_cpu_proc_rate(double value) {
  
  cpu_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.cpu_proc_rate)
}

// uint64 memory_total = 2;
inline void ProcessStats::clear_memory_total() {
  memory_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProcessStats::memory_total() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.memory_total)
  return memory_total_;
}
inline void ProcessStats::set_memory_total(::google::protobuf::uint64 value) {
  
  memory_total_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.memory_total)
}

// uint64 memory_used = 3;
inline void ProcessStats::clear_memory_used() {
  memory_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProcessStats::memory_used() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.memory_used)
  return memory_used_;
}
inline void ProcessStats::set_memory_used(::google::protobuf::uint64 value) {
  
  memory_used_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.memory_used)
}

// uint64 connect_count = 4;
inline void ProcessStats::clear_connect_count() {
  connect_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProcessStats::connect_count() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.connect_count)
  return connect_count_;
}
inline void ProcessStats::set_connect_count(::google::protobuf::uint64 value) {
  
  connect_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.connect_count)
}

// .statspb.DiskStats disk_stats = 8;
inline bool ProcessStats::has_disk_stats() const {
  return this != internal_default_instance() && disk_stats_ != NULL;
}
inline void ProcessStats::clear_disk_stats() {
  if (GetArenaNoVirtual() == NULL && disk_stats_ != NULL) delete disk_stats_;
  disk_stats_ = NULL;
}
inline const ::statspb::DiskStats& ProcessStats::disk_stats() const {
  const ::statspb::DiskStats* p = disk_stats_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.disk_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::DiskStats*>(
      &::statspb::_DiskStats_default_instance_);
}
inline ::statspb::DiskStats* ProcessStats::mutable_disk_stats() {
  
  if (disk_stats_ == NULL) {
    disk_stats_ = new ::statspb::DiskStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.disk_stats)
  return disk_stats_;
}
inline ::statspb::DiskStats* ProcessStats::release_disk_stats() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.disk_stats)
  
  ::statspb::DiskStats* temp = disk_stats_;
  disk_stats_ = NULL;
  return temp;
}
inline void ProcessStats::set_allocated_disk_stats(::statspb::DiskStats* disk_stats) {
  delete disk_stats_;
  disk_stats_ = disk_stats;
  if (disk_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.disk_stats)
}

// .statspb.TpStats tp_stats = 9;
inline bool ProcessStats::has_tp_stats() const {
  return this != internal_default_instance() && tp_stats_ != NULL;
}
inline void ProcessStats::clear_tp_stats() {
  if (GetArenaNoVirtual() == NULL && tp_stats_ != NULL) delete tp_stats_;
  tp_stats_ = NULL;
}
inline const ::statspb::TpStats& ProcessStats::tp_stats() const {
  const ::statspb::TpStats* p = tp_stats_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.tp_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::TpStats*>(
      &::statspb::_TpStats_default_instance_);
}
inline ::statspb::TpStats* ProcessStats::mutable_tp_stats() {
  
  if (tp_stats_ == NULL) {
    tp_stats_ = new ::statspb::TpStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.tp_stats)
  return tp_stats_;
}
inline ::statspb::TpStats* ProcessStats::release_tp_stats() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.tp_stats)
  
  ::statspb::TpStats* temp = tp_stats_;
  tp_stats_ = NULL;
  return temp;
}
inline void ProcessStats::set_allocated_tp_stats(::statspb::TpStats* tp_stats) {
  delete tp_stats_;
  tp_stats_ = tp_stats;
  if (tp_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.tp_stats)
}

// .statspb.DsInfo ds_info = 10;
inline bool ProcessStats::has_ds_info() const {
  return this != internal_default_instance() && ds_info_ != NULL;
}
inline void ProcessStats::clear_ds_info() {
  if (GetArenaNoVirtual() == NULL && ds_info_ != NULL) delete ds_info_;
  ds_info_ = NULL;
}
inline const ::statspb::DsInfo& ProcessStats::ds_info() const {
  const ::statspb::DsInfo* p = ds_info_;
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.ds_info)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::DsInfo*>(
      &::statspb::_DsInfo_default_instance_);
}
inline ::statspb::DsInfo* ProcessStats::mutable_ds_info() {
  
  if (ds_info_ == NULL) {
    ds_info_ = new ::statspb::DsInfo;
  }
  // @@protoc_insertion_point(field_mutable:statspb.ProcessStats.ds_info)
  return ds_info_;
}
inline ::statspb::DsInfo* ProcessStats::release_ds_info() {
  // @@protoc_insertion_point(field_release:statspb.ProcessStats.ds_info)
  
  ::statspb::DsInfo* temp = ds_info_;
  ds_info_ = NULL;
  return temp;
}
inline void ProcessStats::set_allocated_ds_info(::statspb::DsInfo* ds_info) {
  delete ds_info_;
  ds_info_ = ds_info;
  if (ds_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.ProcessStats.ds_info)
}

// uint32 thread_num = 11;
inline void ProcessStats::clear_thread_num() {
  thread_num_ = 0u;
}
inline ::google::protobuf::uint32 ProcessStats::thread_num() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.thread_num)
  return thread_num_;
}
inline void ProcessStats::set_thread_num(::google::protobuf::uint32 value) {
  
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.thread_num)
}

// uint32 handle_num = 12;
inline void ProcessStats::clear_handle_num() {
  handle_num_ = 0u;
}
inline ::google::protobuf::uint32 ProcessStats::handle_num() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.handle_num)
  return handle_num_;
}
inline void ProcessStats::set_handle_num(::google::protobuf::uint32 value) {
  
  handle_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.handle_num)
}

// int64 start_time = 13;
inline void ProcessStats::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessStats::start_time() const {
  // @@protoc_insertion_point(field_get:statspb.ProcessStats.start_time)
  return start_time_;
}
inline void ProcessStats::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:statspb.ProcessStats.start_time)
}

// -------------------------------------------------------------------

// MacStats

// double cpu_proc_rate = 1;
inline void MacStats::clear_cpu_proc_rate() {
  cpu_proc_rate_ = 0;
}
inline double MacStats::cpu_proc_rate() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.cpu_proc_rate)
  return cpu_proc_rate_;
}
inline void MacStats::set_cpu_proc_rate(double value) {
  
  cpu_proc_rate_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.cpu_proc_rate)
}

// uint32 cpu_count = 2;
inline void MacStats::clear_cpu_count() {
  cpu_count_ = 0u;
}
inline ::google::protobuf::uint32 MacStats::cpu_count() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.cpu_count)
  return cpu_count_;
}
inline void MacStats::set_cpu_count(::google::protobuf::uint32 value) {
  
  cpu_count_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.cpu_count)
}

// double load1 = 3;
inline void MacStats::clear_load1() {
  load1_ = 0;
}
inline double MacStats::load1() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load1)
  return load1_;
}
inline void MacStats::set_load1(double value) {
  
  load1_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load1)
}

// double load5 = 4;
inline void MacStats::clear_load5() {
  load5_ = 0;
}
inline double MacStats::load5() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load5)
  return load5_;
}
inline void MacStats::set_load5(double value) {
  
  load5_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load5)
}

// double load15 = 5;
inline void MacStats::clear_load15() {
  load15_ = 0;
}
inline double MacStats::load15() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.load15)
  return load15_;
}
inline void MacStats::set_load15(double value) {
  
  load15_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.load15)
}

// .statspb.MemStats mem_stats = 6;
inline bool MacStats::has_mem_stats() const {
  return this != internal_default_instance() && mem_stats_ != NULL;
}
inline void MacStats::clear_mem_stats() {
  if (GetArenaNoVirtual() == NULL && mem_stats_ != NULL) delete mem_stats_;
  mem_stats_ = NULL;
}
inline const ::statspb::MemStats& MacStats::mem_stats() const {
  const ::statspb::MemStats* p = mem_stats_;
  // @@protoc_insertion_point(field_get:statspb.MacStats.mem_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::MemStats*>(
      &::statspb::_MemStats_default_instance_);
}
inline ::statspb::MemStats* MacStats::mutable_mem_stats() {
  
  if (mem_stats_ == NULL) {
    mem_stats_ = new ::statspb::MemStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.mem_stats)
  return mem_stats_;
}
inline ::statspb::MemStats* MacStats::release_mem_stats() {
  // @@protoc_insertion_point(field_release:statspb.MacStats.mem_stats)
  
  ::statspb::MemStats* temp = mem_stats_;
  mem_stats_ = NULL;
  return temp;
}
inline void MacStats::set_allocated_mem_stats(::statspb::MemStats* mem_stats) {
  delete mem_stats_;
  mem_stats_ = mem_stats;
  if (mem_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.MacStats.mem_stats)
}

// .statspb.NetStats net_stats = 7;
inline bool MacStats::has_net_stats() const {
  return this != internal_default_instance() && net_stats_ != NULL;
}
inline void MacStats::clear_net_stats() {
  if (GetArenaNoVirtual() == NULL && net_stats_ != NULL) delete net_stats_;
  net_stats_ = NULL;
}
inline const ::statspb::NetStats& MacStats::net_stats() const {
  const ::statspb::NetStats* p = net_stats_;
  // @@protoc_insertion_point(field_get:statspb.MacStats.net_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::statspb::NetStats*>(
      &::statspb::_NetStats_default_instance_);
}
inline ::statspb::NetStats* MacStats::mutable_net_stats() {
  
  if (net_stats_ == NULL) {
    net_stats_ = new ::statspb::NetStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.net_stats)
  return net_stats_;
}
inline ::statspb::NetStats* MacStats::release_net_stats() {
  // @@protoc_insertion_point(field_release:statspb.MacStats.net_stats)
  
  ::statspb::NetStats* temp = net_stats_;
  net_stats_ = NULL;
  return temp;
}
inline void MacStats::set_allocated_net_stats(::statspb::NetStats* net_stats) {
  delete net_stats_;
  net_stats_ = net_stats;
  if (net_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.MacStats.net_stats)
}

// repeated .statspb.DiskStats disk_stats = 8;
inline int MacStats::disk_stats_size() const {
  return disk_stats_.size();
}
inline void MacStats::clear_disk_stats() {
  disk_stats_.Clear();
}
inline const ::statspb::DiskStats& MacStats::disk_stats(int index) const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.disk_stats)
  return disk_stats_.Get(index);
}
inline ::statspb::DiskStats* MacStats::mutable_disk_stats(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.MacStats.disk_stats)
  return disk_stats_.Mutable(index);
}
inline ::statspb::DiskStats* MacStats::add_disk_stats() {
  // @@protoc_insertion_point(field_add:statspb.MacStats.disk_stats)
  return disk_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >*
MacStats::mutable_disk_stats() {
  // @@protoc_insertion_point(field_mutable_list:statspb.MacStats.disk_stats)
  return &disk_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::statspb::DiskStats >&
MacStats::disk_stats() const {
  // @@protoc_insertion_point(field_list:statspb.MacStats.disk_stats)
  return disk_stats_;
}

// uint32 process_num = 9;
inline void MacStats::clear_process_num() {
  process_num_ = 0u;
}
inline ::google::protobuf::uint32 MacStats::process_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.process_num)
  return process_num_;
}
inline void MacStats::set_process_num(::google::protobuf::uint32 value) {
  
  process_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.process_num)
}

// uint32 thread_num = 10;
inline void MacStats::clear_thread_num() {
  thread_num_ = 0u;
}
inline ::google::protobuf::uint32 MacStats::thread_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.thread_num)
  return thread_num_;
}
inline void MacStats::set_thread_num(::google::protobuf::uint32 value) {
  
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.thread_num)
}

// uint32 handle_num = 11;
inline void MacStats::clear_handle_num() {
  handle_num_ = 0u;
}
inline ::google::protobuf::uint32 MacStats::handle_num() const {
  // @@protoc_insertion_point(field_get:statspb.MacStats.handle_num)
  return handle_num_;
}
inline void MacStats::set_handle_num(::google::protobuf::uint32 value) {
  
  handle_num_ = value;
  // @@protoc_insertion_point(field_set:statspb.MacStats.handle_num)
}

// -------------------------------------------------------------------

// RangeStats

// uint64 size = 1;
inline void RangeStats::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::size() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.size)
  return size_;
}
inline void RangeStats::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.size)
}

// uint64 ops = 2;
inline void RangeStats::clear_ops() {
  ops_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::ops() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.ops)
  return ops_;
}
inline void RangeStats::set_ops(::google::protobuf::uint64 value) {
  
  ops_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.ops)
}

// uint64 bytes_in_per_sec = 3;
inline void RangeStats::clear_bytes_in_per_sec() {
  bytes_in_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::bytes_in_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.bytes_in_per_sec)
  return bytes_in_per_sec_;
}
inline void RangeStats::set_bytes_in_per_sec(::google::protobuf::uint64 value) {
  
  bytes_in_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.bytes_in_per_sec)
}

// uint64 bytes_out_per_sec = 4;
inline void RangeStats::clear_bytes_out_per_sec() {
  bytes_out_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::bytes_out_per_sec() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.bytes_out_per_sec)
  return bytes_out_per_sec_;
}
inline void RangeStats::set_bytes_out_per_sec(::google::protobuf::uint64 value) {
  
  bytes_out_per_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.bytes_out_per_sec)
}

// uint64 total_commands_processed = 5;
inline void RangeStats::clear_total_commands_processed() {
  total_commands_processed_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::total_commands_processed() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.total_commands_processed)
  return total_commands_processed_;
}
inline void RangeStats::set_total_commands_processed(::google::protobuf::uint64 value) {
  
  total_commands_processed_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.total_commands_processed)
}

// uint64 keyspace_misses = 6;
inline void RangeStats::clear_keyspace_misses() {
  keyspace_misses_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeStats::keyspace_misses() const {
  // @@protoc_insertion_point(field_get:statspb.RangeStats.keyspace_misses)
  return keyspace_misses_;
}
inline void RangeStats::set_keyspace_misses(::google::protobuf::uint64 value) {
  
  keyspace_misses_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeStats.keyspace_misses)
}

// -------------------------------------------------------------------

// ReplicaStatus

// uint64 Match = 1;
inline void ReplicaStatus::clear_match() {
  match_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplicaStatus::match() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Match)
  return match_;
}
inline void ReplicaStatus::set_match(::google::protobuf::uint64 value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Match)
}

// uint64 Commit = 2;
inline void ReplicaStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplicaStatus::commit() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Commit)
  return commit_;
}
inline void ReplicaStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Commit)
}

// uint64 Next = 3;
inline void ReplicaStatus::clear_next() {
  next_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplicaStatus::next() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Next)
  return next_;
}
inline void ReplicaStatus::set_next(::google::protobuf::uint64 value) {
  
  next_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Next)
}

// string State = 4;
inline void ReplicaStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReplicaStatus::state() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.State)
  return state_.GetNoArena();
}
inline void ReplicaStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.State)
}
#if LANG_CXX11
inline void ReplicaStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.ReplicaStatus.State)
}
#endif
inline void ReplicaStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.ReplicaStatus.State)
}
inline void ReplicaStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.ReplicaStatus.State)
}
inline ::std::string* ReplicaStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.ReplicaStatus.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplicaStatus::release_state() {
  // @@protoc_insertion_point(field_release:statspb.ReplicaStatus.State)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicaStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.ReplicaStatus.State)
}

// bool Snapshoting = 5;
inline void ReplicaStatus::clear_snapshoting() {
  snapshoting_ = false;
}
inline bool ReplicaStatus::snapshoting() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Snapshoting)
  return snapshoting_;
}
inline void ReplicaStatus::set_snapshoting(bool value) {
  
  snapshoting_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Snapshoting)
}

// bool Paused = 6;
inline void ReplicaStatus::clear_paused() {
  paused_ = false;
}
inline bool ReplicaStatus::paused() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Paused)
  return paused_;
}
inline void ReplicaStatus::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Paused)
}

// bool Active = 7;
inline void ReplicaStatus::clear_active() {
  active_ = false;
}
inline bool ReplicaStatus::active() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Active)
  return active_;
}
inline void ReplicaStatus::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Active)
}

// int64 LastActive = 8;
inline void ReplicaStatus::clear_lastactive() {
  lastactive_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReplicaStatus::lastactive() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.LastActive)
  return lastactive_;
}
inline void ReplicaStatus::set_lastactive(::google::protobuf::int64 value) {
  
  lastactive_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.LastActive)
}

// int32 Inflight = 9;
inline void ReplicaStatus::clear_inflight() {
  inflight_ = 0;
}
inline ::google::protobuf::int32 ReplicaStatus::inflight() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.Inflight)
  return inflight_;
}
inline void ReplicaStatus::set_inflight(::google::protobuf::int32 value) {
  
  inflight_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.Inflight)
}

// uint64 ID = 10;
inline void ReplicaStatus::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReplicaStatus::id() const {
  // @@protoc_insertion_point(field_get:statspb.ReplicaStatus.ID)
  return id_;
}
inline void ReplicaStatus::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:statspb.ReplicaStatus.ID)
}

// -------------------------------------------------------------------

// RaftStatus

// uint64 ID = 1;
inline void RaftStatus::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::id() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.ID)
  return id_;
}
inline void RaftStatus::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.ID)
}

// uint64 NodeID = 2;
inline void RaftStatus::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::nodeid() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.NodeID)
  return nodeid_;
}
inline void RaftStatus::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.NodeID)
}

// uint64 Leader = 3;
inline void RaftStatus::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::leader() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Leader)
  return leader_;
}
inline void RaftStatus::set_leader(::google::protobuf::uint64 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Leader)
}

// uint64 Term = 4;
inline void RaftStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::term() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Term)
  return term_;
}
inline void RaftStatus::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Term)
}

// uint64 Index = 5;
inline void RaftStatus::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::index() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Index)
  return index_;
}
inline void RaftStatus::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Index)
}

// uint64 Commit = 6;
inline void RaftStatus::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::commit() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Commit)
  return commit_;
}
inline void RaftStatus::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Commit)
}

// uint64 Applied = 7;
inline void RaftStatus::clear_applied() {
  applied_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::applied() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Applied)
  return applied_;
}
inline void RaftStatus::set_applied(::google::protobuf::uint64 value) {
  
  applied_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Applied)
}

// uint64 Vote = 8;
inline void RaftStatus::clear_vote() {
  vote_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftStatus::vote() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Vote)
  return vote_;
}
inline void RaftStatus::set_vote(::google::protobuf::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Vote)
}

// int32 PendQueue = 9;
inline void RaftStatus::clear_pendqueue() {
  pendqueue_ = 0;
}
inline ::google::protobuf::int32 RaftStatus::pendqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.PendQueue)
  return pendqueue_;
}
inline void RaftStatus::set_pendqueue(::google::protobuf::int32 value) {
  
  pendqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.PendQueue)
}

// int32 RecvQueue = 10;
inline void RaftStatus::clear_recvqueue() {
  recvqueue_ = 0;
}
inline ::google::protobuf::int32 RaftStatus::recvqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.RecvQueue)
  return recvqueue_;
}
inline void RaftStatus::set_recvqueue(::google::protobuf::int32 value) {
  
  recvqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.RecvQueue)
}

// int32 AppQueue = 11;
inline void RaftStatus::clear_appqueue() {
  appqueue_ = 0;
}
inline ::google::protobuf::int32 RaftStatus::appqueue() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.AppQueue)
  return appqueue_;
}
inline void RaftStatus::set_appqueue(::google::protobuf::int32 value) {
  
  appqueue_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.AppQueue)
}

// bool Stopped = 12;
inline void RaftStatus::clear_stopped() {
  stopped_ = false;
}
inline bool RaftStatus::stopped() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Stopped)
  return stopped_;
}
inline void RaftStatus::set_stopped(bool value) {
  
  stopped_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.Stopped)
}

// bool RestoringSnapshot = 13;
inline void RaftStatus::clear_restoringsnapshot() {
  restoringsnapshot_ = false;
}
inline bool RaftStatus::restoringsnapshot() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.RestoringSnapshot)
  return restoringsnapshot_;
}
inline void RaftStatus::set_restoringsnapshot(bool value) {
  
  restoringsnapshot_ = value;
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.RestoringSnapshot)
}

// string State = 14;
inline void RaftStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftStatus::state() const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.State)
  return state_.GetNoArena();
}
inline void RaftStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.RaftStatus.State)
}
#if LANG_CXX11
inline void RaftStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.RaftStatus.State)
}
#endif
inline void RaftStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.RaftStatus.State)
}
inline void RaftStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.RaftStatus.State)
}
inline ::std::string* RaftStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:statspb.RaftStatus.State)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftStatus::release_state() {
  // @@protoc_insertion_point(field_release:statspb.RaftStatus.State)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:statspb.RaftStatus.State)
}

// repeated .statspb.ReplicaStatus Replicas = 15;
inline int RaftStatus::replicas_size() const {
  return replicas_.size();
}
inline void RaftStatus::clear_replicas() {
  replicas_.Clear();
}
inline const ::statspb::ReplicaStatus& RaftStatus::replicas(int index) const {
  // @@protoc_insertion_point(field_get:statspb.RaftStatus.Replicas)
  return replicas_.Get(index);
}
inline ::statspb::ReplicaStatus* RaftStatus::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.RaftStatus.Replicas)
  return replicas_.Mutable(index);
}
inline ::statspb::ReplicaStatus* RaftStatus::add_replicas() {
  // @@protoc_insertion_point(field_add:statspb.RaftStatus.Replicas)
  return replicas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >*
RaftStatus::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:statspb.RaftStatus.Replicas)
  return &replicas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::statspb::ReplicaStatus >&
RaftStatus::replicas() const {
  // @@protoc_insertion_point(field_list:statspb.RaftStatus.Replicas)
  return replicas_;
}

// -------------------------------------------------------------------

// SqlStats

// int64 ops = 1;
inline void SqlStats::clear_ops() {
  ops_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlStats::ops() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.ops)
  return ops_;
}
inline void SqlStats::set_ops(::google::protobuf::int64 value) {
  
  ops_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlStats.ops)
}

// int64 delay_avg = 2;
inline void SqlStats::clear_delay_avg() {
  delay_avg_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlStats::delay_avg() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.delay_avg)
  return delay_avg_;
}
inline void SqlStats::set_delay_avg(::google::protobuf::int64 value) {
  
  delay_avg_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlStats.delay_avg)
}

// bytes tp = 3;
inline void SqlStats::clear_tp() {
  tp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlStats::tp() const {
  // @@protoc_insertion_point(field_get:statspb.SqlStats.tp)
  return tp_.GetNoArena();
}
inline void SqlStats::set_tp(const ::std::string& value) {
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SqlStats.tp)
}
#if LANG_CXX11
inline void SqlStats::set_tp(::std::string&& value) {
  
  tp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SqlStats.tp)
}
#endif
inline void SqlStats::set_tp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SqlStats.tp)
}
inline void SqlStats::set_tp(const void* value, size_t size) {
  
  tp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SqlStats.tp)
}
inline ::std::string* SqlStats::mutable_tp() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SqlStats.tp)
  return tp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlStats::release_tp() {
  // @@protoc_insertion_point(field_release:statspb.SqlStats.tp)
  
  return tp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlStats::set_allocated_tp(::std::string* tp) {
  if (tp != NULL) {
    
  } else {
    
  }
  tp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tp);
  // @@protoc_insertion_point(field_set_allocated:statspb.SqlStats.tp)
}

// -------------------------------------------------------------------

// SqlSlowlog

// uint32 len = 1;
inline void SqlSlowlog::clear_len() {
  len_ = 0u;
}
inline ::google::protobuf::uint32 SqlSlowlog::len() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.len)
  return len_;
}
inline void SqlSlowlog::set_len(::google::protobuf::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.len)
}

// int32 than = 2;
inline void SqlSlowlog::clear_than() {
  than_ = 0;
}
inline ::google::protobuf::int32 SqlSlowlog::than() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.than)
  return than_;
}
inline void SqlSlowlog::set_than(::google::protobuf::int32 value) {
  
  than_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.than)
}

// uint32 idx = 3;
inline void SqlSlowlog::clear_idx() {
  idx_ = 0u;
}
inline ::google::protobuf::uint32 SqlSlowlog::idx() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.idx)
  return idx_;
}
inline void SqlSlowlog::set_idx(::google::protobuf::uint32 value) {
  
  idx_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlowlog.idx)
}

// repeated .statspb.SqlSlow log = 4;
inline int SqlSlowlog::log_size() const {
  return log_.size();
}
inline void SqlSlowlog::clear_log() {
  log_.Clear();
}
inline const ::statspb::SqlSlow& SqlSlowlog::log(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlowlog.log)
  return log_.Get(index);
}
inline ::statspb::SqlSlow* SqlSlowlog::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:statspb.SqlSlowlog.log)
  return log_.Mutable(index);
}
inline ::statspb::SqlSlow* SqlSlowlog::add_log() {
  // @@protoc_insertion_point(field_add:statspb.SqlSlowlog.log)
  return log_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >*
SqlSlowlog::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SqlSlowlog.log)
  return &log_;
}
inline const ::google::protobuf::RepeatedPtrField< ::statspb::SqlSlow >&
SqlSlowlog::log() const {
  // @@protoc_insertion_point(field_list:statspb.SqlSlowlog.log)
  return log_;
}

// -------------------------------------------------------------------

// SqlSlow

// int64 time_sec = 1;
inline void SqlSlow::clear_time_sec() {
  time_sec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlSlow::time_sec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.time_sec)
  return time_sec_;
}
inline void SqlSlow::set_time_sec(::google::protobuf::int64 value) {
  
  time_sec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.time_sec)
}

// string sql = 2;
inline void SqlSlow::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlSlow::sql() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.sql)
  return sql_.GetNoArena();
}
inline void SqlSlow::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.sql)
}
#if LANG_CXX11
inline void SqlSlow::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.SqlSlow.sql)
}
#endif
inline void SqlSlow::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.SqlSlow.sql)
}
inline void SqlSlow::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.SqlSlow.sql)
}
inline ::std::string* SqlSlow::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:statspb.SqlSlow.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlSlow::release_sql() {
  // @@protoc_insertion_point(field_release:statspb.SqlSlow.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlSlow::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:statspb.SqlSlow.sql)
}

// int64 total_usec = 3;
inline void SqlSlow::clear_total_usec() {
  total_usec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlSlow::total_usec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.total_usec)
  return total_usec_;
}
inline void SqlSlow::set_total_usec(::google::protobuf::int64 value) {
  
  total_usec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.total_usec)
}

// int64 call_usec = 4;
inline void SqlSlow::clear_call_usec() {
  call_usec_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlSlow::call_usec() const {
  // @@protoc_insertion_point(field_get:statspb.SqlSlow.call_usec)
  return call_usec_;
}
inline void SqlSlow::set_call_usec(::google::protobuf::int64 value) {
  
  call_usec_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlSlow.call_usec)
}

// -------------------------------------------------------------------

// SqlTp

// int64 calls = 1;
inline void SqlTp::clear_calls() {
  calls_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlTp::calls() const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.calls)
  return calls_;
}
inline void SqlTp::set_calls(::google::protobuf::int64 value) {
  
  calls_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlTp.calls)
}

// repeated int64 tp = 2;
inline int SqlTp::tp_size() const {
  return tp_.size();
}
inline void SqlTp::clear_tp() {
  tp_.Clear();
}
inline ::google::protobuf::int64 SqlTp::tp(int index) const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.tp)
  return tp_.Get(index);
}
inline void SqlTp::set_tp(int index, ::google::protobuf::int64 value) {
  tp_.Set(index, value);
  // @@protoc_insertion_point(field_set:statspb.SqlTp.tp)
}
inline void SqlTp::add_tp(::google::protobuf::int64 value) {
  tp_.Add(value);
  // @@protoc_insertion_point(field_add:statspb.SqlTp.tp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SqlTp::tp() const {
  // @@protoc_insertion_point(field_list:statspb.SqlTp.tp)
  return tp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SqlTp::mutable_tp() {
  // @@protoc_insertion_point(field_mutable_list:statspb.SqlTp.tp)
  return &tp_;
}

// int64 delay_max = 3;
inline void SqlTp::clear_delay_max() {
  delay_max_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SqlTp::delay_max() const {
  // @@protoc_insertion_point(field_get:statspb.SqlTp.delay_max)
  return delay_max_;
}
inline void SqlTp::set_delay_max(::google::protobuf::int64 value) {
  
  delay_max_ = value;
  // @@protoc_insertion_point(field_set:statspb.SqlTp.delay_max)
}

// -------------------------------------------------------------------

// RangeInfo

// uint64 range_id = 1;
inline void RangeInfo::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeInfo::range_id() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.range_id)
  return range_id_;
}
inline void RangeInfo::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.range_id)
}

// uint64 leader_id = 2;
inline void RangeInfo::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RangeInfo::leader_id() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.leader_id)
  return leader_id_;
}
inline void RangeInfo::set_leader_id(::google::protobuf::uint64 value) {
  
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.leader_id)
}

// string node_adder = 3;
inline void RangeInfo::clear_node_adder() {
  node_adder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RangeInfo::node_adder() const {
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.node_adder)
  return node_adder_.GetNoArena();
}
inline void RangeInfo::set_node_adder(const ::std::string& value) {
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:statspb.RangeInfo.node_adder)
}
#if LANG_CXX11
inline void RangeInfo::set_node_adder(::std::string&& value) {
  
  node_adder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:statspb.RangeInfo.node_adder)
}
#endif
inline void RangeInfo::set_node_adder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:statspb.RangeInfo.node_adder)
}
inline void RangeInfo::set_node_adder(const char* value, size_t size) {
  
  node_adder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:statspb.RangeInfo.node_adder)
}
inline ::std::string* RangeInfo::mutable_node_adder() {
  
  // @@protoc_insertion_point(field_mutable:statspb.RangeInfo.node_adder)
  return node_adder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeInfo::release_node_adder() {
  // @@protoc_insertion_point(field_release:statspb.RangeInfo.node_adder)
  
  return node_adder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeInfo::set_allocated_node_adder(::std::string* node_adder) {
  if (node_adder != NULL) {
    
  } else {
    
  }
  node_adder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_adder);
  // @@protoc_insertion_point(field_set_allocated:statspb.RangeInfo.node_adder)
}

// .mspb.RangeStats stats = 4;
inline bool RangeInfo::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void RangeInfo::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::mspb::RangeStats& RangeInfo::stats() const {
  const ::mspb::RangeStats* p = stats_;
  // @@protoc_insertion_point(field_get:statspb.RangeInfo.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::mspb::RangeStats*>(
      &::mspb::_RangeStats_default_instance_);
}
inline ::mspb::RangeStats* RangeInfo::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::mspb::RangeStats;
  }
  // @@protoc_insertion_point(field_mutable:statspb.RangeInfo.stats)
  return stats_;
}
inline ::mspb::RangeStats* RangeInfo::release_stats() {
  // @@protoc_insertion_point(field_release:statspb.RangeInfo.stats)
  
  ::mspb::RangeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void RangeInfo::set_allocated_stats(::mspb::RangeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:statspb.RangeInfo.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace statspb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::statspb::TpArgs> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::statspb::TpArgs>() {
  return ::statspb::TpArgs_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_statspb_2eproto__INCLUDED
