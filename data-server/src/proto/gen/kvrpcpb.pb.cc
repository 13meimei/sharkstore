// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kvrpcpb {
class KvPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvPair>
     _instance;
} _KvPair_default_instance_;
class RequestHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
     _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
     _instance;
} _ResponseHeader_default_instance_;
class DsKvRawGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawGetRequest>
     _instance;
} _DsKvRawGetRequest_default_instance_;
class DsKvRawGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawGetResponse>
     _instance;
} _DsKvRawGetResponse_default_instance_;
class KvRawGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawGetRequest>
     _instance;
} _KvRawGetRequest_default_instance_;
class KvRawGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawGetResponse>
     _instance;
} _KvRawGetResponse_default_instance_;
class DsKvRawPutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawPutRequest>
     _instance;
} _DsKvRawPutRequest_default_instance_;
class DsKvRawPutResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawPutResponse>
     _instance;
} _DsKvRawPutResponse_default_instance_;
class KvRawPutRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawPutRequest>
     _instance;
} _KvRawPutRequest_default_instance_;
class KvRawPutResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawPutResponse>
     _instance;
} _KvRawPutResponse_default_instance_;
class DsKvRawDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawDeleteRequest>
     _instance;
} _DsKvRawDeleteRequest_default_instance_;
class DsKvRawDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawDeleteResponse>
     _instance;
} _DsKvRawDeleteResponse_default_instance_;
class KvRawDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawDeleteRequest>
     _instance;
} _KvRawDeleteRequest_default_instance_;
class KvRawDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawDeleteResponse>
     _instance;
} _KvRawDeleteResponse_default_instance_;
class KvPairRawExecuteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvPairRawExecute>
     _instance;
} _KvPairRawExecute_default_instance_;
class DsKvRawExecuteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawExecuteRequest>
     _instance;
} _DsKvRawExecuteRequest_default_instance_;
class DsKvRawExecuteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRawExecuteResponse>
     _instance;
} _DsKvRawExecuteResponse_default_instance_;
class KvRawExecuteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawExecuteRequest>
     _instance;
} _KvRawExecuteRequest_default_instance_;
class KvRawExecuteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRawExecuteResponse>
     _instance;
} _KvRawExecuteResponse_default_instance_;
class ScopeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Scope>
     _instance;
} _Scope_default_instance_;
class SelectFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectField>
     _instance;
} _SelectField_default_instance_;
class MatchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Match>
     _instance;
} _Match_default_instance_;
class LimitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Limit>
     _instance;
} _Limit_default_instance_;
class DsSelectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsSelectRequest>
     _instance;
} _DsSelectRequest_default_instance_;
class SelectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectRequest>
     _instance;
} _SelectRequest_default_instance_;
class RowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Row>
     _instance;
} _Row_default_instance_;
class DsSelectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsSelectResponse>
     _instance;
} _DsSelectResponse_default_instance_;
class SelectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SelectResponse>
     _instance;
} _SelectResponse_default_instance_;
class KeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeyValue>
     _instance;
} _KeyValue_default_instance_;
class DsInsertRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsInsertRequest>
     _instance;
} _DsInsertRequest_default_instance_;
class DsInsertResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsInsertResponse>
     _instance;
} _DsInsertResponse_default_instance_;
class InsertRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InsertRequest>
     _instance;
} _InsertRequest_default_instance_;
class InsertResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InsertResponse>
     _instance;
} _InsertResponse_default_instance_;
class BatchInsertRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BatchInsertRequest>
     _instance;
} _BatchInsertRequest_default_instance_;
class BatchInsertResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BatchInsertResponse>
     _instance;
} _BatchInsertResponse_default_instance_;
class DsDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsDeleteRequest>
     _instance;
} _DsDeleteRequest_default_instance_;
class DsDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsDeleteResponse>
     _instance;
} _DsDeleteResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest>
     _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse>
     _instance;
} _DeleteResponse_default_instance_;
class FieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Field>
     _instance;
} _Field_default_instance_;
class RedisKeyValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RedisKeyValue>
     _instance;
} _RedisKeyValue_default_instance_;
class RedisDoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RedisDo>
     _instance;
} _RedisDo_default_instance_;
class KvSetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvSetRequest>
     _instance;
} _KvSetRequest_default_instance_;
class KvSetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvSetResponse>
     _instance;
} _KvSetResponse_default_instance_;
class DsKvSetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvSetRequest>
     _instance;
} _DsKvSetRequest_default_instance_;
class DsKvSetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvSetResponse>
     _instance;
} _DsKvSetResponse_default_instance_;
class KvGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvGetRequest>
     _instance;
} _KvGetRequest_default_instance_;
class KvGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvGetResponse>
     _instance;
} _KvGetResponse_default_instance_;
class DsKvGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvGetRequest>
     _instance;
} _DsKvGetRequest_default_instance_;
class DsKvGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvGetResponse>
     _instance;
} _DsKvGetResponse_default_instance_;
class KvBatchSetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchSetRequest>
     _instance;
} _KvBatchSetRequest_default_instance_;
class KvBatchSetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchSetResponse>
     _instance;
} _KvBatchSetResponse_default_instance_;
class DsKvBatchSetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchSetRequest>
     _instance;
} _DsKvBatchSetRequest_default_instance_;
class DsKvBatchSetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchSetResponse>
     _instance;
} _DsKvBatchSetResponse_default_instance_;
class KvBatchGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchGetRequest>
     _instance;
} _KvBatchGetRequest_default_instance_;
class KvBatchGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchGetResponse>
     _instance;
} _KvBatchGetResponse_default_instance_;
class DsKvBatchGetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchGetRequest>
     _instance;
} _DsKvBatchGetRequest_default_instance_;
class DsKvBatchGetResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchGetResponse>
     _instance;
} _DsKvBatchGetResponse_default_instance_;
class KvScanRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvScanRequest>
     _instance;
} _KvScanRequest_default_instance_;
class KvScanResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvScanResponse>
     _instance;
} _KvScanResponse_default_instance_;
class DsKvScanRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvScanRequest>
     _instance;
} _DsKvScanRequest_default_instance_;
class DsKvScanResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvScanResponse>
     _instance;
} _DsKvScanResponse_default_instance_;
class KvDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvDeleteRequest>
     _instance;
} _KvDeleteRequest_default_instance_;
class KvDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvDeleteResponse>
     _instance;
} _KvDeleteResponse_default_instance_;
class DsKvDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvDeleteRequest>
     _instance;
} _DsKvDeleteRequest_default_instance_;
class DsKvDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvDeleteResponse>
     _instance;
} _DsKvDeleteResponse_default_instance_;
class KvBatchDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchDeleteRequest>
     _instance;
} _KvBatchDeleteRequest_default_instance_;
class KvBatchDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvBatchDeleteResponse>
     _instance;
} _KvBatchDeleteResponse_default_instance_;
class DsKvBatchDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchDeleteRequest>
     _instance;
} _DsKvBatchDeleteRequest_default_instance_;
class DsKvBatchDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvBatchDeleteResponse>
     _instance;
} _DsKvBatchDeleteResponse_default_instance_;
class KvRangeDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRangeDeleteRequest>
     _instance;
} _KvRangeDeleteRequest_default_instance_;
class KvRangeDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KvRangeDeleteResponse>
     _instance;
} _KvRangeDeleteResponse_default_instance_;
class DsKvRangeDeleteRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRangeDeleteRequest>
     _instance;
} _DsKvRangeDeleteRequest_default_instance_;
class DsKvRangeDeleteResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsKvRangeDeleteResponse>
     _instance;
} _DsKvRangeDeleteResponse_default_instance_;
class LockValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockValue>
     _instance;
} _LockValue_default_instance_;
class LockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockRequest>
     _instance;
} _LockRequest_default_instance_;
class DsLockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockRequest>
     _instance;
} _DsLockRequest_default_instance_;
class LockResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockResponse>
     _instance;
} _LockResponse_default_instance_;
class LockInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockInfo>
     _instance;
} _LockInfo_default_instance_;
class LockScanResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockScanResponse>
     _instance;
} _LockScanResponse_default_instance_;
class DsLockResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockResponse>
     _instance;
} _DsLockResponse_default_instance_;
class LockUpdateRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockUpdateRequest>
     _instance;
} _LockUpdateRequest_default_instance_;
class DsLockUpdateRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockUpdateRequest>
     _instance;
} _DsLockUpdateRequest_default_instance_;
class DsLockUpdateResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockUpdateResponse>
     _instance;
} _DsLockUpdateResponse_default_instance_;
class UnlockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnlockRequest>
     _instance;
} _UnlockRequest_default_instance_;
class DsUnlockRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsUnlockRequest>
     _instance;
} _DsUnlockRequest_default_instance_;
class DsUnlockResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsUnlockResponse>
     _instance;
} _DsUnlockResponse_default_instance_;
class UnlockForceRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnlockForceRequest>
     _instance;
} _UnlockForceRequest_default_instance_;
class DsUnlockForceRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsUnlockForceRequest>
     _instance;
} _DsUnlockForceRequest_default_instance_;
class DsUnlockForceResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsUnlockForceResponse>
     _instance;
} _DsUnlockForceResponse_default_instance_;
class LockScanRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LockScanRequest>
     _instance;
} _LockScanRequest_default_instance_;
class DsLockScanRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockScanRequest>
     _instance;
} _DsLockScanRequest_default_instance_;
class DsLockScanResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DsLockScanResponse>
     _instance;
} _DsLockScanResponse_default_instance_;

namespace protobuf_kvrpcpb_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[94];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, range_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, range_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, read_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, apply_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawGetResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawGetRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawGetResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawGetResponse, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawPutResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawPutRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawPutRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawPutResponse, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawDeleteRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawDeleteResponse, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPairRawExecute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPairRawExecute, do__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPairRawExecute, kv_pair_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRawExecuteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawExecuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawExecuteRequest, execs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawExecuteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRawExecuteResponse, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scope, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, typ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, aggre_func_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectField, column_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, match_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, where_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, group_bys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectRequest, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, aggred_counts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsSelectResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResponse, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, ttl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsInsertResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRequest, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRequest, check_duplicate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertRequest, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResponse, affected_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResponse, duplicate_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchInsertRequest, reqs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchInsertResponse, resps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, where_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, indexs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, affected_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, column_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisKeyValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisDo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisDo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisDo, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisDo, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisDo, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetRequest, kv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetRequest, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvSetResponse, affected_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvSetResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvGetRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvGetResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvGetResponse, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvGetResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetRequest, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetRequest, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchSetResponse, affected_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchSetResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetRequest, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetRequest, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchGetResponse, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchGetResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, count_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, key_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanRequest, max_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanResponse, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvScanResponse, last_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvScanResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteRequest, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvDeleteResponse, affected_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteRequest, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteRequest, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvBatchDeleteResponse, affected_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvBatchDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteRequest, max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteRequest, case__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteResponse, affected_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvRangeDeleteResponse, last_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsKvRangeDeleteResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, delete_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockValue, by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockRequest, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockResponse, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanResponse, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanResponse, last_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, update_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockUpdateRequest, by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockUpdateResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRequest, by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockForceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockForceRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockForceRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockForceRequest, by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsUnlockForceResponse, resp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockScanRequest, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanRequest, req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLockScanResponse, resp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(KvPair)},
  { 7, -1, sizeof(RequestHeader)},
  { 18, -1, sizeof(ResponseHeader)},
  { 29, -1, sizeof(DsKvRawGetRequest)},
  { 36, -1, sizeof(DsKvRawGetResponse)},
  { 43, -1, sizeof(KvRawGetRequest)},
  { 49, -1, sizeof(KvRawGetResponse)},
  { 56, -1, sizeof(DsKvRawPutRequest)},
  { 63, -1, sizeof(DsKvRawPutResponse)},
  { 70, -1, sizeof(KvRawPutRequest)},
  { 77, -1, sizeof(KvRawPutResponse)},
  { 83, -1, sizeof(DsKvRawDeleteRequest)},
  { 90, -1, sizeof(DsKvRawDeleteResponse)},
  { 97, -1, sizeof(KvRawDeleteRequest)},
  { 103, -1, sizeof(KvRawDeleteResponse)},
  { 109, -1, sizeof(KvPairRawExecute)},
  { 116, -1, sizeof(DsKvRawExecuteRequest)},
  { 123, -1, sizeof(DsKvRawExecuteResponse)},
  { 130, -1, sizeof(KvRawExecuteRequest)},
  { 136, -1, sizeof(KvRawExecuteResponse)},
  { 142, -1, sizeof(Scope)},
  { 149, -1, sizeof(SelectField)},
  { 157, -1, sizeof(Match)},
  { 165, -1, sizeof(Limit)},
  { 172, -1, sizeof(DsSelectRequest)},
  { 179, -1, sizeof(SelectRequest)},
  { 191, -1, sizeof(Row)},
  { 199, -1, sizeof(DsSelectResponse)},
  { 206, -1, sizeof(SelectResponse)},
  { 214, -1, sizeof(KeyValue)},
  { 222, -1, sizeof(DsInsertRequest)},
  { 229, -1, sizeof(DsInsertResponse)},
  { 236, -1, sizeof(InsertRequest)},
  { 244, -1, sizeof(InsertResponse)},
  { 252, -1, sizeof(BatchInsertRequest)},
  { 258, -1, sizeof(BatchInsertResponse)},
  { 264, -1, sizeof(DsDeleteRequest)},
  { 271, -1, sizeof(DsDeleteResponse)},
  { 278, -1, sizeof(DeleteRequest)},
  { 288, -1, sizeof(DeleteResponse)},
  { 295, -1, sizeof(Field)},
  { 302, -1, sizeof(RedisKeyValue)},
  { 309, -1, sizeof(RedisDo)},
  { 318, -1, sizeof(KvSetRequest)},
  { 325, -1, sizeof(KvSetResponse)},
  { 332, -1, sizeof(DsKvSetRequest)},
  { 339, -1, sizeof(DsKvSetResponse)},
  { 346, -1, sizeof(KvGetRequest)},
  { 352, -1, sizeof(KvGetResponse)},
  { 359, -1, sizeof(DsKvGetRequest)},
  { 366, -1, sizeof(DsKvGetResponse)},
  { 373, -1, sizeof(KvBatchSetRequest)},
  { 380, -1, sizeof(KvBatchSetResponse)},
  { 387, -1, sizeof(DsKvBatchSetRequest)},
  { 394, -1, sizeof(DsKvBatchSetResponse)},
  { 401, -1, sizeof(KvBatchGetRequest)},
  { 408, -1, sizeof(KvBatchGetResponse)},
  { 415, -1, sizeof(DsKvBatchGetRequest)},
  { 422, -1, sizeof(DsKvBatchGetResponse)},
  { 429, -1, sizeof(KvScanRequest)},
  { 439, -1, sizeof(KvScanResponse)},
  { 448, -1, sizeof(DsKvScanRequest)},
  { 455, -1, sizeof(DsKvScanResponse)},
  { 462, -1, sizeof(KvDeleteRequest)},
  { 469, -1, sizeof(KvDeleteResponse)},
  { 476, -1, sizeof(DsKvDeleteRequest)},
  { 483, -1, sizeof(DsKvDeleteResponse)},
  { 490, -1, sizeof(KvBatchDeleteRequest)},
  { 497, -1, sizeof(KvBatchDeleteResponse)},
  { 504, -1, sizeof(DsKvBatchDeleteRequest)},
  { 511, -1, sizeof(DsKvBatchDeleteResponse)},
  { 518, -1, sizeof(KvRangeDeleteRequest)},
  { 527, -1, sizeof(KvRangeDeleteResponse)},
  { 535, -1, sizeof(DsKvRangeDeleteRequest)},
  { 542, -1, sizeof(DsKvRangeDeleteResponse)},
  { 549, -1, sizeof(LockValue)},
  { 559, -1, sizeof(LockRequest)},
  { 567, -1, sizeof(DsLockRequest)},
  { 574, -1, sizeof(LockResponse)},
  { 583, -1, sizeof(LockInfo)},
  { 590, -1, sizeof(LockScanResponse)},
  { 597, -1, sizeof(DsLockResponse)},
  { 604, -1, sizeof(LockUpdateRequest)},
  { 615, -1, sizeof(DsLockUpdateRequest)},
  { 622, -1, sizeof(DsLockUpdateResponse)},
  { 629, -1, sizeof(UnlockRequest)},
  { 638, -1, sizeof(DsUnlockRequest)},
  { 645, -1, sizeof(DsUnlockResponse)},
  { 652, -1, sizeof(UnlockForceRequest)},
  { 660, -1, sizeof(DsUnlockForceRequest)},
  { 667, -1, sizeof(DsUnlockForceResponse)},
  { 674, -1, sizeof(LockScanRequest)},
  { 682, -1, sizeof(DsLockScanRequest)},
  { 689, -1, sizeof(DsLockScanResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawPutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawPutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawPutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawPutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvPairRawExecute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawExecuteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRawExecuteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawExecuteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRawExecuteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Limit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsSelectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsSelectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsInsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsInsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchInsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchInsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedisKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedisDo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvScanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvScanResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvScanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvScanResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvBatchDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvBatchDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRangeDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KvRangeDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRangeDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsKvRangeDeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockScanResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsUnlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsUnlockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnlockForceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsUnlockForceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsUnlockForceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LockScanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockScanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DsLockScanResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "kvrpcpb.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 94);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::metapb::protobuf_metapb_2eproto::InitDefaults();
  ::errorpb::protobuf_errorpb_2eproto::InitDefaults();
  ::timestamp::protobuf_timestamp_2eproto::InitDefaults();
  _KvPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvPair_default_instance_);_RequestHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestHeader_default_instance_);_ResponseHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResponseHeader_default_instance_);_DsKvRawGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawGetRequest_default_instance_);_DsKvRawGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawGetResponse_default_instance_);_KvRawGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawGetRequest_default_instance_);_KvRawGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawGetResponse_default_instance_);_DsKvRawPutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawPutRequest_default_instance_);_DsKvRawPutResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawPutResponse_default_instance_);_KvRawPutRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawPutRequest_default_instance_);_KvRawPutResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawPutResponse_default_instance_);_DsKvRawDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawDeleteRequest_default_instance_);_DsKvRawDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawDeleteResponse_default_instance_);_KvRawDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawDeleteRequest_default_instance_);_KvRawDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawDeleteResponse_default_instance_);_KvPairRawExecute_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvPairRawExecute_default_instance_);_DsKvRawExecuteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawExecuteRequest_default_instance_);_DsKvRawExecuteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRawExecuteResponse_default_instance_);_KvRawExecuteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawExecuteRequest_default_instance_);_KvRawExecuteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRawExecuteResponse_default_instance_);_Scope_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Scope_default_instance_);_SelectField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectField_default_instance_);_Match_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Match_default_instance_);_Limit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Limit_default_instance_);_DsSelectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsSelectRequest_default_instance_);_SelectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectRequest_default_instance_);_Row_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Row_default_instance_);_DsSelectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsSelectResponse_default_instance_);_SelectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SelectResponse_default_instance_);_KeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeyValue_default_instance_);_DsInsertRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsInsertRequest_default_instance_);_DsInsertResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsInsertResponse_default_instance_);_InsertRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InsertRequest_default_instance_);_InsertResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InsertResponse_default_instance_);_BatchInsertRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BatchInsertRequest_default_instance_);_BatchInsertResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BatchInsertResponse_default_instance_);_DsDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsDeleteRequest_default_instance_);_DsDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsDeleteResponse_default_instance_);_DeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteRequest_default_instance_);_DeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteResponse_default_instance_);_Field_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Field_default_instance_);_RedisKeyValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RedisKeyValue_default_instance_);_RedisDo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RedisDo_default_instance_);_KvSetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvSetRequest_default_instance_);_KvSetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvSetResponse_default_instance_);_DsKvSetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvSetRequest_default_instance_);_DsKvSetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvSetResponse_default_instance_);_KvGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvGetRequest_default_instance_);_KvGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvGetResponse_default_instance_);_DsKvGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvGetRequest_default_instance_);_DsKvGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvGetResponse_default_instance_);_KvBatchSetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchSetRequest_default_instance_);_KvBatchSetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchSetResponse_default_instance_);_DsKvBatchSetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchSetRequest_default_instance_);_DsKvBatchSetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchSetResponse_default_instance_);_KvBatchGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchGetRequest_default_instance_);_KvBatchGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchGetResponse_default_instance_);_DsKvBatchGetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchGetRequest_default_instance_);_DsKvBatchGetResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchGetResponse_default_instance_);_KvScanRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvScanRequest_default_instance_);_KvScanResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvScanResponse_default_instance_);_DsKvScanRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvScanRequest_default_instance_);_DsKvScanResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvScanResponse_default_instance_);_KvDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvDeleteRequest_default_instance_);_KvDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvDeleteResponse_default_instance_);_DsKvDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvDeleteRequest_default_instance_);_DsKvDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvDeleteResponse_default_instance_);_KvBatchDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchDeleteRequest_default_instance_);_KvBatchDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvBatchDeleteResponse_default_instance_);_DsKvBatchDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchDeleteRequest_default_instance_);_DsKvBatchDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvBatchDeleteResponse_default_instance_);_KvRangeDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRangeDeleteRequest_default_instance_);_KvRangeDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KvRangeDeleteResponse_default_instance_);_DsKvRangeDeleteRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRangeDeleteRequest_default_instance_);_DsKvRangeDeleteResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsKvRangeDeleteResponse_default_instance_);_LockValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockValue_default_instance_);_LockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockRequest_default_instance_);_DsLockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockRequest_default_instance_);_LockResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockResponse_default_instance_);_LockInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockInfo_default_instance_);_LockScanResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockScanResponse_default_instance_);_DsLockResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockResponse_default_instance_);_LockUpdateRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockUpdateRequest_default_instance_);_DsLockUpdateRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockUpdateRequest_default_instance_);_DsLockUpdateResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockUpdateResponse_default_instance_);_UnlockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnlockRequest_default_instance_);_DsUnlockRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsUnlockRequest_default_instance_);_DsUnlockResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsUnlockResponse_default_instance_);_UnlockForceRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnlockForceRequest_default_instance_);_DsUnlockForceRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsUnlockForceRequest_default_instance_);_DsUnlockForceResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsUnlockForceResponse_default_instance_);_LockScanRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LockScanRequest_default_instance_);_DsLockScanRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockScanRequest_default_instance_);_DsLockScanResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DsLockScanResponse_default_instance_);_RequestHeader_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _RequestHeader_default_instance_._instance.get_mutable()->range_epoch_ = const_cast< ::metapb::RangeEpoch*>(
      ::metapb::RangeEpoch::internal_default_instance());
  _ResponseHeader_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _ResponseHeader_default_instance_._instance.get_mutable()->now_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  _DsKvRawGetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvRawGetRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvRawGetRequest*>(
      ::kvrpcpb::KvRawGetRequest::internal_default_instance());
  _DsKvRawGetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvRawGetResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvRawGetResponse*>(
      ::kvrpcpb::KvRawGetResponse::internal_default_instance());
  _DsKvRawPutRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvRawPutRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvRawPutRequest*>(
      ::kvrpcpb::KvRawPutRequest::internal_default_instance());
  _DsKvRawPutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvRawPutResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvRawPutResponse*>(
      ::kvrpcpb::KvRawPutResponse::internal_default_instance());
  _DsKvRawDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvRawDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvRawDeleteRequest*>(
      ::kvrpcpb::KvRawDeleteRequest::internal_default_instance());
  _DsKvRawDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvRawDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvRawDeleteResponse*>(
      ::kvrpcpb::KvRawDeleteResponse::internal_default_instance());
  _KvPairRawExecute_default_instance_._instance.get_mutable()->kv_pair_ = const_cast< ::kvrpcpb::KvPair*>(
      ::kvrpcpb::KvPair::internal_default_instance());
  _DsKvRawExecuteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvRawExecuteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvRawExecuteRequest*>(
      ::kvrpcpb::KvRawExecuteRequest::internal_default_instance());
  _DsKvRawExecuteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvRawExecuteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvRawExecuteResponse*>(
      ::kvrpcpb::KvRawExecuteResponse::internal_default_instance());
  _SelectField_default_instance_._instance.get_mutable()->column_ = const_cast< ::metapb::Column*>(
      ::metapb::Column::internal_default_instance());
  _Match_default_instance_._instance.get_mutable()->column_ = const_cast< ::metapb::Column*>(
      ::metapb::Column::internal_default_instance());
  _DsSelectRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsSelectRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::SelectRequest*>(
      ::kvrpcpb::SelectRequest::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->scope_ = const_cast< ::kvrpcpb::Scope*>(
      ::kvrpcpb::Scope::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->limit_ = const_cast< ::kvrpcpb::Limit*>(
      ::kvrpcpb::Limit::internal_default_instance());
  _SelectRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsSelectResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsSelectResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::SelectResponse*>(
      ::kvrpcpb::SelectResponse::internal_default_instance());
  _DsInsertRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsInsertRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::InsertRequest*>(
      ::kvrpcpb::InsertRequest::internal_default_instance());
  _DsInsertResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsInsertResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::InsertResponse*>(
      ::kvrpcpb::InsertResponse::internal_default_instance());
  _InsertRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::DeleteRequest*>(
      ::kvrpcpb::DeleteRequest::internal_default_instance());
  _DsDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::DeleteResponse*>(
      ::kvrpcpb::DeleteResponse::internal_default_instance());
  _DeleteRequest_default_instance_._instance.get_mutable()->scope_ = const_cast< ::kvrpcpb::Scope*>(
      ::kvrpcpb::Scope::internal_default_instance());
  _DeleteRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _KvSetRequest_default_instance_._instance.get_mutable()->kv_ = const_cast< ::kvrpcpb::RedisKeyValue*>(
      ::kvrpcpb::RedisKeyValue::internal_default_instance());
  _DsKvSetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvSetRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvSetRequest*>(
      ::kvrpcpb::KvSetRequest::internal_default_instance());
  _DsKvSetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvSetResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvSetResponse*>(
      ::kvrpcpb::KvSetResponse::internal_default_instance());
  _DsKvGetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvGetRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvGetRequest*>(
      ::kvrpcpb::KvGetRequest::internal_default_instance());
  _DsKvGetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvGetResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvGetResponse*>(
      ::kvrpcpb::KvGetResponse::internal_default_instance());
  _DsKvBatchSetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvBatchSetRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvBatchSetRequest*>(
      ::kvrpcpb::KvBatchSetRequest::internal_default_instance());
  _DsKvBatchSetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvBatchSetResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvBatchSetResponse*>(
      ::kvrpcpb::KvBatchSetResponse::internal_default_instance());
  _DsKvBatchGetRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvBatchGetRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvBatchGetRequest*>(
      ::kvrpcpb::KvBatchGetRequest::internal_default_instance());
  _DsKvBatchGetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvBatchGetResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvBatchGetResponse*>(
      ::kvrpcpb::KvBatchGetResponse::internal_default_instance());
  _DsKvScanRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvScanRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvScanRequest*>(
      ::kvrpcpb::KvScanRequest::internal_default_instance());
  _DsKvScanResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvScanResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvScanResponse*>(
      ::kvrpcpb::KvScanResponse::internal_default_instance());
  _DsKvDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvDeleteRequest*>(
      ::kvrpcpb::KvDeleteRequest::internal_default_instance());
  _DsKvDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvDeleteResponse*>(
      ::kvrpcpb::KvDeleteResponse::internal_default_instance());
  _DsKvBatchDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvBatchDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvBatchDeleteRequest*>(
      ::kvrpcpb::KvBatchDeleteRequest::internal_default_instance());
  _DsKvBatchDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvBatchDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvBatchDeleteResponse*>(
      ::kvrpcpb::KvBatchDeleteResponse::internal_default_instance());
  _DsKvRangeDeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsKvRangeDeleteRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::KvRangeDeleteRequest*>(
      ::kvrpcpb::KvRangeDeleteRequest::internal_default_instance());
  _DsKvRangeDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsKvRangeDeleteResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::KvRangeDeleteResponse*>(
      ::kvrpcpb::KvRangeDeleteResponse::internal_default_instance());
  _LockRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::kvrpcpb::LockValue*>(
      ::kvrpcpb::LockValue::internal_default_instance());
  _LockRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsLockRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsLockRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::LockRequest*>(
      ::kvrpcpb::LockRequest::internal_default_instance());
  _LockInfo_default_instance_._instance.get_mutable()->value_ = const_cast< ::kvrpcpb::LockValue*>(
      ::kvrpcpb::LockValue::internal_default_instance());
  _DsLockResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsLockResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::LockResponse*>(
      ::kvrpcpb::LockResponse::internal_default_instance());
  _LockUpdateRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsLockUpdateRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsLockUpdateRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::LockUpdateRequest*>(
      ::kvrpcpb::LockUpdateRequest::internal_default_instance());
  _DsLockUpdateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsLockUpdateResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::LockResponse*>(
      ::kvrpcpb::LockResponse::internal_default_instance());
  _UnlockRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsUnlockRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsUnlockRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::UnlockRequest*>(
      ::kvrpcpb::UnlockRequest::internal_default_instance());
  _DsUnlockResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsUnlockResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::LockResponse*>(
      ::kvrpcpb::LockResponse::internal_default_instance());
  _UnlockForceRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::timestamp::Timestamp*>(
      ::timestamp::Timestamp::internal_default_instance());
  _DsUnlockForceRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsUnlockForceRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::UnlockForceRequest*>(
      ::kvrpcpb::UnlockForceRequest::internal_default_instance());
  _DsUnlockForceResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsUnlockForceResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::LockResponse*>(
      ::kvrpcpb::LockResponse::internal_default_instance());
  _DsLockScanRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::RequestHeader*>(
      ::kvrpcpb::RequestHeader::internal_default_instance());
  _DsLockScanRequest_default_instance_._instance.get_mutable()->req_ = const_cast< ::kvrpcpb::LockScanRequest*>(
      ::kvrpcpb::LockScanRequest::internal_default_instance());
  _DsLockScanResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::kvrpcpb::ResponseHeader*>(
      ::kvrpcpb::ResponseHeader::internal_default_instance());
  _DsLockScanResponse_default_instance_._instance.get_mutable()->resp_ = const_cast< ::kvrpcpb::LockScanResponse*>(
      ::kvrpcpb::LockScanResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
      "errorpb.proto\032\017timestamp.proto\"$\n\006KvPair"
      "\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"\255\001\n\rRequest"
      "Header\022\022\n\ncluster_id\030\001 \001(\004\022\'\n\ttimestamp\030"
      "\002 \001(\0132\024.timestamp.Timestamp\022\020\n\010trace_id\030"
      "\003 \001(\004\022\020\n\010range_id\030\004 \001(\004\022\'\n\013range_epoch\030\005"
      " \001(\0132\022.metapb.RangeEpoch\022\022\n\nread_index\030\006"
      " \001(\004\"\266\001\n\016ResponseHeader\022\022\n\ncluster_id\030\001 "
      "\001(\004\022\'\n\ttimestamp\030\002 \001(\0132\024.timestamp.Times"
      "tamp\022\020\n\010trace_id\030\003 \001(\004\022!\n\003now\030\004 \001(\0132\024.ti"
      "mestamp.Timestamp\022\035\n\005error\030\005 \001(\0132\016.error"
      "pb.Error\022\023\n\013apply_index\030\006 \001(\004\"b\n\021DsKvRaw"
      "GetRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Req"
      "uestHeader\022%\n\003req\030\002 \001(\0132\030.kvrpcpb.KvRawG"
      "etRequest\"f\n\022DsKvRawGetResponse\022\'\n\006heade"
      "r\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022\'\n\004resp"
      "\030\002 \001(\0132\031.kvrpcpb.KvRawGetResponse\"\036\n\017KvR"
      "awGetRequest\022\013\n\003key\030\001 \001(\014\"/\n\020KvRawGetRes"
      "ponse\022\014\n\004code\030\001 \001(\005\022\r\n\005value\030\002 \001(\014\"b\n\021Ds"
      "KvRawPutRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcp"
      "b.RequestHeader\022%\n\003req\030\002 \001(\0132\030.kvrpcpb.K"
      "vRawPutRequest\"f\n\022DsKvRawPutResponse\022\'\n\006"
      "header\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022\'\n"
      "\004resp\030\002 \001(\0132\031.kvrpcpb.KvRawPutResponse\"-"
      "\n\017KvRawPutRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030"
      "\002 \001(\014\" \n\020KvRawPutResponse\022\014\n\004code\030\001 \001(\005\""
      "h\n\024DsKvRawDeleteRequest\022&\n\006header\030\001 \001(\0132"
      "\026.kvrpcpb.RequestHeader\022(\n\003req\030\002 \001(\0132\033.k"
      "vrpcpb.KvRawDeleteRequest\"l\n\025DsKvRawDele"
      "teResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Res"
      "ponseHeader\022*\n\004resp\030\002 \001(\0132\034.kvrpcpb.KvRa"
      "wDeleteResponse\"!\n\022KvRawDeleteRequest\022\013\n"
      "\003key\030\001 \001(\014\"#\n\023KvRawDeleteResponse\022\014\n\004cod"
      "e\030\001 \001(\005\"V\n\020KvPairRawExecute\022 \n\002do\030\001 \001(\0162"
      "\024.kvrpcpb.ExecuteType\022 \n\007kv_pair\030\002 \001(\0132\017"
      ".kvrpcpb.KvPair\"j\n\025DsKvRawExecuteRequest"
      "\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader"
      "\022)\n\003req\030\002 \001(\0132\034.kvrpcpb.KvRawExecuteRequ"
      "est\"n\n\026DsKvRawExecuteResponse\022\'\n\006header\030"
      "\001 \001(\0132\027.kvrpcpb.ResponseHeader\022+\n\004resp\030\002"
      " \001(\0132\035.kvrpcpb.KvRawExecuteResponse\"\?\n\023K"
      "vRawExecuteRequest\022(\n\005execs\030\001 \003(\0132\031.kvrp"
      "cpb.KvPairRawExecute\"$\n\024KvRawExecuteResp"
      "onse\022\014\n\004code\030\001 \001(\005\"%\n\005Scope\022\r\n\005start\030\001 \001"
      "(\014\022\r\n\005limit\030\002 \001(\014\"\220\001\n\013SelectField\022&\n\003typ"
      "\030\001 \001(\0162\031.kvrpcpb.SelectField.Type\022\022\n\nagg"
      "re_func\030\002 \001(\t\022\036\n\006column\030\003 \001(\0132\016.metapb.C"
      "olumn\"%\n\004Type\022\n\n\006Column\020\000\022\021\n\rAggreFuncti"
      "on\020\001\"b\n\005Match\022\036\n\006column\030\001 \001(\0132\016.metapb.C"
      "olumn\022\021\n\tthreshold\030\002 \001(\014\022&\n\nmatch_type\030\003"
      " \001(\0162\022.kvrpcpb.MatchType\"&\n\005Limit\022\016\n\006off"
      "set\030\001 \001(\004\022\r\n\005count\030\002 \001(\004\"^\n\017DsSelectRequ"
      "est\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHea"
      "der\022#\n\003req\030\002 \001(\0132\026.kvrpcpb.SelectRequest"
      "\"\367\001\n\rSelectRequest\022\013\n\003key\030\001 \001(\014\022\035\n\005scope"
      "\030\002 \001(\0132\016.kvrpcpb.Scope\022(\n\nfield_list\030\003 \003"
      "(\0132\024.kvrpcpb.SelectField\022%\n\rwhere_filter"
      "s\030\004 \003(\0132\016.kvrpcpb.Match\022!\n\tgroup_bys\030\005 \003"
      "(\0132\016.metapb.Column\022\035\n\005limit\030\006 \001(\0132\016.kvrp"
      "cpb.Limit\022\'\n\ttimestamp\030\007 \001(\0132\024.timestamp"
      ".Timestamp\"9\n\003Row\022\013\n\003key\030\001 \001(\014\022\016\n\006fields"
      "\030\002 \001(\014\022\025\n\raggred_counts\030\003 \003(\003\"b\n\020DsSelec"
      "tResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Resp"
      "onseHeader\022%\n\004resp\030\002 \001(\0132\027.kvrpcpb.Selec"
      "tResponse\"J\n\016SelectResponse\022\014\n\004code\030\001 \001("
      "\005\022\032\n\004rows\030\002 \003(\0132\014.kvrpcpb.Row\022\016\n\006offset\030"
      "\003 \001(\004\"3\n\010KeyValue\022\013\n\003Key\030\001 \001(\014\022\r\n\005Value\030"
      "\002 \001(\014\022\013\n\003TTL\030\003 \001(\004\"^\n\017DsInsertRequest\022&\n"
      "\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022#\n"
      "\003req\030\002 \001(\0132\026.kvrpcpb.InsertRequest\"b\n\020Ds"
      "InsertResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb"
      ".ResponseHeader\022%\n\004resp\030\002 \001(\0132\027.kvrpcpb."
      "InsertResponse\"r\n\rInsertRequest\022\037\n\004rows\030"
      "\001 \003(\0132\021.kvrpcpb.KeyValue\022\027\n\017check_duplic"
      "ate\030\002 \001(\010\022\'\n\ttimestamp\030\003 \001(\0132\024.timestamp"
      ".Timestamp\"L\n\016InsertResponse\022\014\n\004code\030\001 \001"
      "(\005\022\025\n\raffected_keys\030\002 \001(\004\022\025\n\rduplicate_k"
      "ey\030\003 \001(\014\":\n\022BatchInsertRequest\022$\n\004reqs\030\001"
      " \003(\0132\026.kvrpcpb.InsertRequest\"=\n\023BatchIns"
      "ertResponse\022&\n\005resps\030\002 \003(\0132\027.kvrpcpb.Ins"
      "ertResponse\"^\n\017DsDeleteRequest\022&\n\006header"
      "\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022#\n\003req\030\002 "
      "\001(\0132\026.kvrpcpb.DeleteRequest\"b\n\020DsDeleteR"
      "esponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Respon"
      "seHeader\022%\n\004resp\030\002 \001(\0132\027.kvrpcpb.DeleteR"
      "esponse\"\233\001\n\rDeleteRequest\022\013\n\003key\030\001 \001(\014\022\035"
      "\n\005scope\030\002 \001(\0132\016.kvrpcpb.Scope\022%\n\rwhere_f"
      "ilters\030\003 \003(\0132\016.kvrpcpb.Match\022\016\n\006indexs\030\004"
      " \003(\004\022\'\n\ttimestamp\030\n \001(\0132\024.timestamp.Time"
      "stamp\"5\n\016DeleteResponse\022\014\n\004code\030\001 \001(\005\022\025\n"
      "\raffected_keys\030\002 \001(\004\")\n\005Field\022\021\n\tcolumn_"
      "id\030\001 \001(\004\022\r\n\005value\030\002 \001(\014\"+\n\rRedisKeyValue"
      "\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"g\n\007RedisDo\022"
      "\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\036\n\002op\030\003 \001(\0162"
      "\022.kvrpcpb.Operation\022 \n\004case\030\004 \001(\0162\022.kvrp"
      "cpb.ExistCase\"T\n\014KvSetRequest\022\"\n\002kv\030\001 \001("
      "\0132\026.kvrpcpb.RedisKeyValue\022 \n\004case\030\002 \001(\0162"
      "\022.kvrpcpb.ExistCase\"4\n\rKvSetResponse\022\014\n\004"
      "code\030\001 \001(\005\022\025\n\raffected_keys\030\002 \001(\004\"\\\n\016DsK"
      "vSetRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Re"
      "questHeader\022\"\n\003req\030\002 \001(\0132\025.kvrpcpb.KvSet"
      "Request\"`\n\017DsKvSetResponse\022\'\n\006header\030\001 \001"
      "(\0132\027.kvrpcpb.ResponseHeader\022$\n\004resp\030\002 \001("
      "\0132\026.kvrpcpb.KvSetResponse\"\033\n\014KvGetReques"
      "t\022\013\n\003key\030\001 \001(\014\",\n\rKvGetResponse\022\014\n\004code\030"
      "\001 \001(\005\022\r\n\005value\030\002 \001(\014\"\\\n\016DsKvGetRequest\022&"
      "\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022\""
      "\n\003req\030\002 \001(\0132\025.kvrpcpb.KvGetRequest\"`\n\017Ds"
      "KvGetResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb."
      "ResponseHeader\022$\n\004resp\030\002 \001(\0132\026.kvrpcpb.K"
      "vGetResponse\"Z\n\021KvBatchSetRequest\022#\n\003kvs"
      "\030\001 \003(\0132\026.kvrpcpb.RedisKeyValue\022 \n\004case\030\002"
      " \001(\0162\022.kvrpcpb.ExistCase\"9\n\022KvBatchSetRe"
      "sponse\022\014\n\004code\030\001 \001(\005\022\025\n\raffected_keys\030\002 "
      "\001(\004\"f\n\023DsKvBatchSetRequest\022&\n\006header\030\001 \001"
      "(\0132\026.kvrpcpb.RequestHeader\022\'\n\003req\030\002 \001(\0132"
      "\032.kvrpcpb.KvBatchSetRequest\"j\n\024DsKvBatch"
      "SetResponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Re"
      "sponseHeader\022)\n\004resp\030\002 \001(\0132\033.kvrpcpb.KvB"
      "atchSetResponse\"/\n\021KvBatchGetRequest\022\014\n\004"
      "code\030\001 \001(\005\022\014\n\004keys\030\002 \003(\014\"G\n\022KvBatchGetRe"
      "sponse\022\014\n\004code\030\001 \001(\005\022#\n\003kvs\030\002 \003(\0132\026.kvrp"
      "cpb.RedisKeyValue\"f\n\023DsKvBatchGetRequest"
      "\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader"
      "\022\'\n\003req\030\002 \001(\0132\032.kvrpcpb.KvBatchGetReques"
      "t\"j\n\024DsKvBatchGetResponse\022\'\n\006header\030\001 \001("
      "\0132\027.kvrpcpb.ResponseHeader\022)\n\004resp\030\002 \001(\013"
      "2\033.kvrpcpb.KvBatchGetResponse\"f\n\rKvScanR"
      "equest\022\r\n\005start\030\001 \001(\014\022\r\n\005limit\030\002 \001(\014\022\022\n\n"
      "count_only\030\003 \001(\010\022\020\n\010key_only\030\004 \001(\010\022\021\n\tma"
      "x_count\030\005 \001(\003\"d\n\016KvScanResponse\022\014\n\004code\030"
      "\001 \001(\005\022\r\n\005count\030\002 \001(\003\022#\n\003kvs\030\003 \003(\0132\026.kvrp"
      "cpb.RedisKeyValue\022\020\n\010last_key\030\004 \001(\014\"^\n\017D"
      "sKvScanRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb"
      ".RequestHeader\022#\n\003req\030\002 \001(\0132\026.kvrpcpb.Kv"
      "ScanRequest\"b\n\020DsKvScanResponse\022\'\n\006heade"
      "r\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022%\n\004resp"
      "\030\002 \001(\0132\027.kvrpcpb.KvScanResponse\"@\n\017KvDel"
      "eteRequest\022\013\n\003key\030\001 \001(\014\022 \n\004case\030\002 \001(\0162\022."
      "kvrpcpb.ExistCase\"7\n\020KvDeleteResponse\022\014\n"
      "\004code\030\001 \001(\005\022\025\n\raffected_keys\030\002 \001(\004\"b\n\021Ds"
      "KvDeleteRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcp"
      "b.RequestHeader\022%\n\003req\030\002 \001(\0132\030.kvrpcpb.K"
      "vDeleteRequest\"f\n\022DsKvDeleteResponse\022\'\n\006"
      "header\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022\'\n"
      "\004resp\030\002 \001(\0132\031.kvrpcpb.KvDeleteResponse\"F"
      "\n\024KvBatchDeleteRequest\022\014\n\004keys\030\001 \003(\014\022 \n\004"
      "case\030\002 \001(\0162\022.kvrpcpb.ExistCase\"<\n\025KvBatc"
      "hDeleteResponse\022\014\n\004code\030\001 \001(\005\022\025\n\raffecte"
      "d_keys\030\002 \001(\004\"l\n\026DsKvBatchDeleteRequest\022&"
      "\n\006header\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022*"
      "\n\003req\030\002 \001(\0132\035.kvrpcpb.KvBatchDeleteReque"
      "st\"p\n\027DsKvBatchDeleteResponse\022\'\n\006header\030"
      "\001 \001(\0132\027.kvrpcpb.ResponseHeader\022,\n\004resp\030\002"
      " \001(\0132\036.kvrpcpb.KvBatchDeleteResponse\"i\n\024"
      "KvRangeDeleteRequest\022\r\n\005start\030\001 \001(\014\022\r\n\005l"
      "imit\030\002 \001(\014\022\021\n\tmax_count\030\003 \001(\003\022 \n\004case\030\004 "
      "\001(\0162\022.kvrpcpb.ExistCase\"N\n\025KvRangeDelete"
      "Response\022\014\n\004code\030\001 \001(\005\022\025\n\raffected_keys\030"
      "\002 \001(\004\022\020\n\010last_key\030\003 \001(\014\"l\n\026DsKvRangeDele"
      "teRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Requ"
      "estHeader\022*\n\003req\030\002 \001(\0132\035.kvrpcpb.KvRange"
      "DeleteRequest\"p\n\027DsKvRangeDeleteResponse"
      "\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.ResponseHeade"
      "r\022,\n\004resp\030\002 \001(\0132\036.kvrpcpb.KvRangeDeleteR"
      "esponse\"\\\n\tLockValue\022\r\n\005value\030\002 \001(\014\022\n\n\002i"
      "d\030\003 \001(\t\022\023\n\013delete_time\030\004 \001(\003\022\023\n\013update_t"
      "ime\030\005 \001(\003\022\n\n\002by\030\007 \001(\t\"f\n\013LockRequest\022\013\n\003"
      "key\030\001 \001(\014\022!\n\005value\030\002 \001(\0132\022.kvrpcpb.LockV"
      "alue\022\'\n\ttimestamp\030\n \001(\0132\024.timestamp.Time"
      "stamp\"Z\n\rDsLockRequest\022&\n\006header\030\001 \001(\0132\026"
      ".kvrpcpb.RequestHeader\022!\n\003req\030\002 \001(\0132\024.kv"
      "rpcpb.LockRequest\"O\n\014LockResponse\022\014\n\004cod"
      "e\030\001 \001(\003\022\r\n\005error\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\022\023\n"
      "\013update_time\030\004 \001(\003\":\n\010LockInfo\022\013\n\003key\030\001 "
      "\001(\014\022!\n\005value\030\002 \001(\0132\022.kvrpcpb.LockValue\"E"
      "\n\020LockScanResponse\022\037\n\004info\030\001 \003(\0132\021.kvrpc"
      "pb.LockInfo\022\020\n\010last_key\030\002 \001(\014\"^\n\016DsLockR"
      "esponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Respon"
      "seHeader\022#\n\004resp\030\002 \001(\0132\025.kvrpcpb.LockRes"
      "ponse\"\214\001\n\021LockUpdateRequest\022\013\n\003key\030\001 \001(\014"
      "\022\n\n\002id\030\003 \001(\t\022\023\n\013update_time\030\005 \001(\003\022\024\n\014upd"
      "ate_value\030\006 \001(\014\022\'\n\ttimestamp\030\n \001(\0132\024.tim"
      "estamp.Timestamp\022\n\n\002by\030\013 \001(\t\"f\n\023DsLockUp"
      "dateRequest\022&\n\006header\030\001 \001(\0132\026.kvrpcpb.Re"
      "questHeader\022\'\n\003req\030\002 \001(\0132\032.kvrpcpb.LockU"
      "pdateRequest\"d\n\024DsLockUpdateResponse\022\'\n\006"
      "header\030\001 \001(\0132\027.kvrpcpb.ResponseHeader\022#\n"
      "\004resp\030\002 \001(\0132\025.kvrpcpb.LockResponse\"]\n\rUn"
      "lockRequest\022\013\n\003key\030\001 \001(\014\022\n\n\002id\030\003 \001(\t\022\'\n\t"
      "timestamp\030\n \001(\0132\024.timestamp.Timestamp\022\n\n"
      "\002by\030\013 \001(\t\"^\n\017DsUnlockRequest\022&\n\006header\030\001"
      " \001(\0132\026.kvrpcpb.RequestHeader\022#\n\003req\030\002 \001("
      "\0132\026.kvrpcpb.UnlockRequest\"`\n\020DsUnlockRes"
      "ponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Response"
      "Header\022#\n\004resp\030\002 \001(\0132\025.kvrpcpb.LockRespo"
      "nse\"V\n\022UnlockForceRequest\022\013\n\003key\030\001 \001(\014\022\'"
      "\n\ttimestamp\030\n \001(\0132\024.timestamp.Timestamp\022"
      "\n\n\002by\030\013 \001(\t\"h\n\024DsUnlockForceRequest\022&\n\006h"
      "eader\030\001 \001(\0132\026.kvrpcpb.RequestHeader\022(\n\003r"
      "eq\030\002 \001(\0132\033.kvrpcpb.UnlockForceRequest\"e\n"
      "\025DsUnlockForceResponse\022\'\n\006header\030\001 \001(\0132\027"
      ".kvrpcpb.ResponseHeader\022#\n\004resp\030\002 \001(\0132\025."
      "kvrpcpb.LockResponse\">\n\017LockScanRequest\022"
      "\r\n\005start\030\001 \001(\014\022\r\n\005limit\030\002 \001(\014\022\r\n\005count\030\003"
      " \001(\r\"b\n\021DsLockScanRequest\022&\n\006header\030\001 \001("
      "\0132\026.kvrpcpb.RequestHeader\022%\n\003req\030\002 \001(\0132\030"
      ".kvrpcpb.LockScanRequest\"f\n\022DsLockScanRe"
      "sponse\022\'\n\006header\030\001 \001(\0132\027.kvrpcpb.Respons"
      "eHeader\022\'\n\004resp\030\002 \001(\0132\031.kvrpcpb.LockScan"
      "Response*;\n\013ExecuteType\022\017\n\013ExecInvalid\020\000"
      "\022\013\n\007ExecPut\020\001\022\016\n\nExecDelete\020\002*k\n\tMatchTy"
      "pe\022\013\n\007Invalid\020\000\022\t\n\005Equal\020\001\022\014\n\010NotEqual\020\002"
      "\022\010\n\004Less\020\003\022\017\n\013LessOrEqual\020\004\022\n\n\006Larger\020\005\022"
      "\021\n\rLargerOrEqual\020\006*Z\n\tExistCase\022\016\n\nEC_In"
      "valid\020\000\022\020\n\014EC_NotExists\020\001\022\r\n\tEC_Exists\020\002"
      "\022\016\n\nEC_AnyCase\020\003\022\014\n\010EC_Force\020\004*B\n\tOperat"
      "ion\022\016\n\nOP_Invalid\020\000\022\n\n\006OP_Set\020\001\022\r\n\tOP_De"
      "lete\020\002\022\n\n\006OP_Get\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kvrpcpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_metapb_2eproto::AddDescriptors();
  ::errorpb::protobuf_errorpb_2eproto::AddDescriptors();
  ::timestamp::protobuf_timestamp_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_kvrpcpb_2eproto

const ::google::protobuf::EnumDescriptor* SelectField_Type_descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_enum_descriptors[0];
}
bool SelectField_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SelectField_Type SelectField::Column;
const SelectField_Type SelectField::AggreFunction;
const SelectField_Type SelectField::Type_MIN;
const SelectField_Type SelectField::Type_MAX;
const int SelectField::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExecuteType_descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_enum_descriptors[1];
}
bool ExecuteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_enum_descriptors[2];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExistCase_descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_enum_descriptors[3];
}
bool ExistCase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_enum_descriptors[4];
}
bool Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPair::kKeyFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPair::KvPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPair)
}
KvPair::KvPair(const KvPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvPair::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvPair& KvPair::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvPair* KvPair::New(::google::protobuf::Arena* arena) const {
  KvPair* n = new KvPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KvPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPair)
  return false;
#undef DO_
}

void KvPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPair)
}

::google::protobuf::uint8* KvPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KvPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPair)
    MergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KvPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPair::IsInitialized() const {
  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPair::InternalSwap(KvPair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvPair::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvPair

// bytes key = 1;
void KvPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvPair::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.key)
  return key_.GetNoArena();
}
void KvPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.key)
}
#if LANG_CXX11
void KvPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvPair.key)
}
#endif
void KvPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.key)
}
void KvPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.key)
}
::std::string* KvPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.key)
}

// bytes value = 2;
void KvPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvPair::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.value)
  return value_.GetNoArena();
}
void KvPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.value)
}
#if LANG_CXX11
void KvPair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvPair.value)
}
#endif
void KvPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.value)
}
void KvPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.value)
}
::std::string* KvPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
const int RequestHeader::kTimestampFieldNumber;
const int RequestHeader::kTraceIdFieldNumber;
const int RequestHeader::kRangeIdFieldNumber;
const int RequestHeader::kRangeEpochFieldNumber;
const int RequestHeader::kReadIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_range_epoch()) {
    range_epoch_ = new ::metapb::RangeEpoch(*from.range_epoch_);
  } else {
    range_epoch_ = NULL;
  }
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_index_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(read_index_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(read_index_));
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete range_epoch_;
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) {
    delete range_epoch_;
  }
  range_epoch_ = NULL;
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_index_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(read_index_));
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trace_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 range_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RangeEpoch range_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 read_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->trace_id(), output);
  }

  // uint64 range_id = 4;
  if (this->range_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->range_id(), output);
  }

  // .metapb.RangeEpoch range_epoch = 5;
  if (this->has_range_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->range_epoch_, output);
  }

  // uint64 read_index = 6;
  if (this->read_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->read_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, deterministic, target);
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->trace_id(), target);
  }

  // uint64 range_id = 4;
  if (this->range_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->range_id(), target);
  }

  // .metapb.RangeEpoch range_epoch = 5;
  if (this->has_range_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->range_epoch_, deterministic, target);
  }

  // uint64 read_index = 6;
  if (this->read_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->read_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RequestHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .metapb.RangeEpoch range_epoch = 5;
  if (this->has_range_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_epoch_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  // uint64 range_id = 4;
  if (this->range_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->range_id());
  }

  // uint64 read_index = 6;
  if (this->read_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->read_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_range_epoch()) {
    mutable_range_epoch()->::metapb::RangeEpoch::MergeFrom(from.range_epoch());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.range_id() != 0) {
    set_range_id(from.range_id());
  }
  if (from.read_index() != 0) {
    set_read_index(from.read_index());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(range_epoch_, other->range_epoch_);
  swap(cluster_id_, other->cluster_id_);
  swap(trace_id_, other->trace_id_);
  swap(range_id_, other->range_id_);
  swap(read_index_, other->read_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// uint64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RequestHeader.cluster_id)
}

// .timestamp.Timestamp timestamp = 2;
bool RequestHeader::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void RequestHeader::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& RequestHeader::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* RequestHeader::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RequestHeader.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* RequestHeader::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RequestHeader.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void RequestHeader::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RequestHeader.timestamp)
}

// uint64 trace_id = 3;
void RequestHeader::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::trace_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.trace_id)
  return trace_id_;
}
void RequestHeader::set_trace_id(::google::protobuf::uint64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RequestHeader.trace_id)
}

// uint64 range_id = 4;
void RequestHeader::clear_range_id() {
  range_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::range_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.range_id)
  return range_id_;
}
void RequestHeader::set_range_id(::google::protobuf::uint64 value) {
  
  range_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RequestHeader.range_id)
}

// .metapb.RangeEpoch range_epoch = 5;
bool RequestHeader::has_range_epoch() const {
  return this != internal_default_instance() && range_epoch_ != NULL;
}
void RequestHeader::clear_range_epoch() {
  if (GetArenaNoVirtual() == NULL && range_epoch_ != NULL) delete range_epoch_;
  range_epoch_ = NULL;
}
const ::metapb::RangeEpoch& RequestHeader::range_epoch() const {
  const ::metapb::RangeEpoch* p = range_epoch_;
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.range_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RangeEpoch*>(
      &::metapb::_RangeEpoch_default_instance_);
}
::metapb::RangeEpoch* RequestHeader::mutable_range_epoch() {
  
  if (range_epoch_ == NULL) {
    range_epoch_ = new ::metapb::RangeEpoch;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RequestHeader.range_epoch)
  return range_epoch_;
}
::metapb::RangeEpoch* RequestHeader::release_range_epoch() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RequestHeader.range_epoch)
  
  ::metapb::RangeEpoch* temp = range_epoch_;
  range_epoch_ = NULL;
  return temp;
}
void RequestHeader::set_allocated_range_epoch(::metapb::RangeEpoch* range_epoch) {
  delete range_epoch_;
  range_epoch_ = range_epoch;
  if (range_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RequestHeader.range_epoch)
}

// uint64 read_index = 6;
void RequestHeader::clear_read_index() {
  read_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::read_index() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RequestHeader.read_index)
  return read_index_;
}
void RequestHeader::set_read_index(::google::protobuf::uint64 value) {
  
  read_index_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RequestHeader.read_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kTimestampFieldNumber;
const int ResponseHeader::kTraceIdFieldNumber;
const int ResponseHeader::kNowFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
const int ResponseHeader::kApplyIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_now()) {
    now_ = new ::timestamp::Timestamp(*from.now_);
  } else {
    now_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::errorpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&apply_index_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(apply_index_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apply_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(apply_index_));
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete now_;
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && now_ != NULL) {
    delete now_;
  }
  now_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apply_index_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(apply_index_));
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 trace_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp now = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .errorpb.Error error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 apply_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->trace_id(), output);
  }

  // .timestamp.Timestamp now = 4;
  if (this->has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->now_, output);
  }

  // .errorpb.Error error = 5;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->error_, output);
  }

  // uint64 apply_index = 6;
  if (this->apply_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->apply_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, deterministic, target);
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->trace_id(), target);
  }

  // .timestamp.Timestamp now = 4;
  if (this->has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->now_, deterministic, target);
  }

  // .errorpb.Error error = 5;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->error_, deterministic, target);
  }

  // uint64 apply_index = 6;
  if (this->apply_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->apply_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .timestamp.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .timestamp.Timestamp now = 4;
  if (this->has_now()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->now_);
  }

  // .errorpb.Error error = 5;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // uint64 trace_id = 3;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  // uint64 apply_index = 6;
  if (this->apply_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->apply_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_now()) {
    mutable_now()->::timestamp::Timestamp::MergeFrom(from.now());
  }
  if (from.has_error()) {
    mutable_error()->::errorpb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.apply_index() != 0) {
    set_apply_index(from.apply_index());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(now_, other->now_);
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
  swap(trace_id_, other->trace_id_);
  swap(apply_index_, other->apply_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ResponseHeader.cluster_id)
}

// .timestamp.Timestamp timestamp = 2;
bool ResponseHeader::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void ResponseHeader::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& ResponseHeader::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* ResponseHeader::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResponseHeader.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* ResponseHeader::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResponseHeader.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResponseHeader.timestamp)
}

// uint64 trace_id = 3;
void ResponseHeader::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::trace_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.trace_id)
  return trace_id_;
}
void ResponseHeader::set_trace_id(::google::protobuf::uint64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ResponseHeader.trace_id)
}

// .timestamp.Timestamp now = 4;
bool ResponseHeader::has_now() const {
  return this != internal_default_instance() && now_ != NULL;
}
void ResponseHeader::clear_now() {
  if (GetArenaNoVirtual() == NULL && now_ != NULL) delete now_;
  now_ = NULL;
}
const ::timestamp::Timestamp& ResponseHeader::now() const {
  const ::timestamp::Timestamp* p = now_;
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.now)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* ResponseHeader::mutable_now() {
  
  if (now_ == NULL) {
    now_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResponseHeader.now)
  return now_;
}
::timestamp::Timestamp* ResponseHeader::release_now() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResponseHeader.now)
  
  ::timestamp::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_now(::timestamp::Timestamp* now) {
  delete now_;
  now_ = now;
  if (now) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResponseHeader.now)
}

// .errorpb.Error error = 5;
bool ResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::errorpb::Error& ResponseHeader::error() const {
  const ::errorpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.error)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::Error*>(
      &::errorpb::_Error_default_instance_);
}
::errorpb::Error* ResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResponseHeader.error)
  return error_;
}
::errorpb::Error* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResponseHeader.error)
  
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_error(::errorpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResponseHeader.error)
}

// uint64 apply_index = 6;
void ResponseHeader::clear_apply_index() {
  apply_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::apply_index() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResponseHeader.apply_index)
  return apply_index_;
}
void ResponseHeader::set_apply_index(::google::protobuf::uint64 value) {
  
  apply_index_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ResponseHeader.apply_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawGetRequest::kHeaderFieldNumber;
const int DsKvRawGetRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawGetRequest::DsKvRawGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawGetRequest)
}
DsKvRawGetRequest::DsKvRawGetRequest(const DsKvRawGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvRawGetRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawGetRequest)
}

void DsKvRawGetRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvRawGetRequest::~DsKvRawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawGetRequest)
  SharedDtor();
}

void DsKvRawGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvRawGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawGetRequest& DsKvRawGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawGetRequest* DsKvRawGetRequest::New(::google::protobuf::Arena* arena) const {
  DsKvRawGetRequest* n = new DsKvRawGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawGetRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawGetRequest)
  return false;
#undef DO_
}

void DsKvRawGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawGetRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawGetRequest)
}

::google::protobuf::uint8* DsKvRawGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawGetRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawGetRequest)
  return target;
}

size_t DsKvRawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawGetRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawGetRequest)
    MergeFrom(*source);
  }
}

void DsKvRawGetRequest::MergeFrom(const DsKvRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvRawGetRequest::MergeFrom(from.req());
  }
}

void DsKvRawGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawGetRequest::CopyFrom(const DsKvRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawGetRequest::IsInitialized() const {
  return true;
}

void DsKvRawGetRequest::Swap(DsKvRawGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawGetRequest::InternalSwap(DsKvRawGetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawGetRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvRawGetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawGetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvRawGetRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawGetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvRawGetRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawGetRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvRawGetRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawGetRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawGetRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawGetRequest.header)
}

// .kvrpcpb.KvRawGetRequest req = 2;
bool DsKvRawGetRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvRawGetRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvRawGetRequest& DsKvRawGetRequest::req() const {
  const ::kvrpcpb::KvRawGetRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawGetRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawGetRequest*>(
      &::kvrpcpb::_KvRawGetRequest_default_instance_);
}
::kvrpcpb::KvRawGetRequest* DsKvRawGetRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvRawGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawGetRequest.req)
  return req_;
}
::kvrpcpb::KvRawGetRequest* DsKvRawGetRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawGetRequest.req)
  
  ::kvrpcpb::KvRawGetRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvRawGetRequest::set_allocated_req(::kvrpcpb::KvRawGetRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawGetRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawGetResponse::kHeaderFieldNumber;
const int DsKvRawGetResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawGetResponse::DsKvRawGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawGetResponse)
}
DsKvRawGetResponse::DsKvRawGetResponse(const DsKvRawGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvRawGetResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawGetResponse)
}

void DsKvRawGetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvRawGetResponse::~DsKvRawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawGetResponse)
  SharedDtor();
}

void DsKvRawGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvRawGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawGetResponse& DsKvRawGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawGetResponse* DsKvRawGetResponse::New(::google::protobuf::Arena* arena) const {
  DsKvRawGetResponse* n = new DsKvRawGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawGetResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawGetResponse)
  return false;
#undef DO_
}

void DsKvRawGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawGetResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawGetResponse)
}

::google::protobuf::uint8* DsKvRawGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawGetResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawGetResponse)
  return target;
}

size_t DsKvRawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawGetResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawGetResponse)
    MergeFrom(*source);
  }
}

void DsKvRawGetResponse::MergeFrom(const DsKvRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvRawGetResponse::MergeFrom(from.resp());
  }
}

void DsKvRawGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawGetResponse::CopyFrom(const DsKvRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawGetResponse::IsInitialized() const {
  return true;
}

void DsKvRawGetResponse::Swap(DsKvRawGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawGetResponse::InternalSwap(DsKvRawGetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawGetResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvRawGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvRawGetResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawGetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvRawGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawGetResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvRawGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawGetResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawGetResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawGetResponse.header)
}

// .kvrpcpb.KvRawGetResponse resp = 2;
bool DsKvRawGetResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvRawGetResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvRawGetResponse& DsKvRawGetResponse::resp() const {
  const ::kvrpcpb::KvRawGetResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawGetResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawGetResponse*>(
      &::kvrpcpb::_KvRawGetResponse_default_instance_);
}
::kvrpcpb::KvRawGetResponse* DsKvRawGetResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvRawGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawGetResponse.resp)
  return resp_;
}
::kvrpcpb::KvRawGetResponse* DsKvRawGetResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawGetResponse.resp)
  
  ::kvrpcpb::KvRawGetResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvRawGetResponse::set_allocated_resp(::kvrpcpb::KvRawGetResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawGetResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawGetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawGetRequest::KvRawGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawGetRequest)
}
KvRawGetRequest::KvRawGetRequest(const KvRawGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawGetRequest)
}

void KvRawGetRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KvRawGetRequest::~KvRawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawGetRequest)
  SharedDtor();
}

void KvRawGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRawGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawGetRequest& KvRawGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawGetRequest* KvRawGetRequest::New(::google::protobuf::Arena* arena) const {
  KvRawGetRequest* n = new KvRawGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KvRawGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawGetRequest)
  return false;
#undef DO_
}

void KvRawGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawGetRequest)
}

::google::protobuf::uint8* KvRawGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawGetRequest)
  return target;
}

size_t KvRawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawGetRequest)
    MergeFrom(*source);
  }
}

void KvRawGetRequest::MergeFrom(const KvRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void KvRawGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawGetRequest::CopyFrom(const KvRawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawGetRequest::IsInitialized() const {
  return true;
}

void KvRawGetRequest::Swap(KvRawGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawGetRequest::InternalSwap(KvRawGetRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawGetRequest

// bytes key = 1;
void KvRawGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRawGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawGetRequest.key)
  return key_.GetNoArena();
}
void KvRawGetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawGetRequest.key)
}
#if LANG_CXX11
void KvRawGetRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRawGetRequest.key)
}
#endif
void KvRawGetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRawGetRequest.key)
}
void KvRawGetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRawGetRequest.key)
}
::std::string* KvRawGetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRawGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRawGetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRawGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRawGetRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawGetResponse::kCodeFieldNumber;
const int KvRawGetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawGetResponse::KvRawGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawGetResponse)
}
KvRawGetResponse::KvRawGetResponse(const KvRawGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawGetResponse)
}

void KvRawGetResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

KvRawGetResponse::~KvRawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawGetResponse)
  SharedDtor();
}

void KvRawGetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRawGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawGetResponse& KvRawGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawGetResponse* KvRawGetResponse::New(::google::protobuf::Arena* arena) const {
  KvRawGetResponse* n = new KvRawGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvRawGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawGetResponse)
  return false;
#undef DO_
}

void KvRawGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawGetResponse)
}

::google::protobuf::uint8* KvRawGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawGetResponse)
  return target;
}

size_t KvRawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawGetResponse)
    MergeFrom(*source);
  }
}

void KvRawGetResponse::MergeFrom(const KvRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvRawGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawGetResponse::CopyFrom(const KvRawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawGetResponse::IsInitialized() const {
  return true;
}

void KvRawGetResponse::Swap(KvRawGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawGetResponse::InternalSwap(KvRawGetResponse* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawGetResponse

// int32 code = 1;
void KvRawGetResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvRawGetResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawGetResponse.code)
  return code_;
}
void KvRawGetResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawGetResponse.code)
}

// bytes value = 2;
void KvRawGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRawGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawGetResponse.value)
  return value_.GetNoArena();
}
void KvRawGetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawGetResponse.value)
}
#if LANG_CXX11
void KvRawGetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRawGetResponse.value)
}
#endif
void KvRawGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRawGetResponse.value)
}
void KvRawGetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRawGetResponse.value)
}
::std::string* KvRawGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRawGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRawGetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRawGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRawGetResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawPutRequest::kHeaderFieldNumber;
const int DsKvRawPutRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawPutRequest::DsKvRawPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawPutRequest)
}
DsKvRawPutRequest::DsKvRawPutRequest(const DsKvRawPutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvRawPutRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawPutRequest)
}

void DsKvRawPutRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvRawPutRequest::~DsKvRawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawPutRequest)
  SharedDtor();
}

void DsKvRawPutRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvRawPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawPutRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawPutRequest& DsKvRawPutRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawPutRequest* DsKvRawPutRequest::New(::google::protobuf::Arena* arena) const {
  DsKvRawPutRequest* n = new DsKvRawPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawPutRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawPutRequest)
  return false;
#undef DO_
}

void DsKvRawPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawPutRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawPutRequest)
}

::google::protobuf::uint8* DsKvRawPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawPutRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawPutRequest)
  return target;
}

size_t DsKvRawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawPutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawPutRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawPutRequest)
    MergeFrom(*source);
  }
}

void DsKvRawPutRequest::MergeFrom(const DsKvRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvRawPutRequest::MergeFrom(from.req());
  }
}

void DsKvRawPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawPutRequest::CopyFrom(const DsKvRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawPutRequest::IsInitialized() const {
  return true;
}

void DsKvRawPutRequest::Swap(DsKvRawPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawPutRequest::InternalSwap(DsKvRawPutRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawPutRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawPutRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvRawPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvRawPutRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvRawPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawPutRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvRawPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawPutRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawPutRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawPutRequest.header)
}

// .kvrpcpb.KvRawPutRequest req = 2;
bool DsKvRawPutRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvRawPutRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvRawPutRequest& DsKvRawPutRequest::req() const {
  const ::kvrpcpb::KvRawPutRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawPutRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawPutRequest*>(
      &::kvrpcpb::_KvRawPutRequest_default_instance_);
}
::kvrpcpb::KvRawPutRequest* DsKvRawPutRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvRawPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawPutRequest.req)
  return req_;
}
::kvrpcpb::KvRawPutRequest* DsKvRawPutRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawPutRequest.req)
  
  ::kvrpcpb::KvRawPutRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvRawPutRequest::set_allocated_req(::kvrpcpb::KvRawPutRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawPutRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawPutResponse::kHeaderFieldNumber;
const int DsKvRawPutResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawPutResponse::DsKvRawPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawPutResponse)
}
DsKvRawPutResponse::DsKvRawPutResponse(const DsKvRawPutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvRawPutResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawPutResponse)
}

void DsKvRawPutResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvRawPutResponse::~DsKvRawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawPutResponse)
  SharedDtor();
}

void DsKvRawPutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvRawPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawPutResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawPutResponse& DsKvRawPutResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawPutResponse* DsKvRawPutResponse::New(::google::protobuf::Arena* arena) const {
  DsKvRawPutResponse* n = new DsKvRawPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawPutResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawPutResponse)
  return false;
#undef DO_
}

void DsKvRawPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawPutResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawPutResponse)
}

::google::protobuf::uint8* DsKvRawPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawPutResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawPutResponse)
  return target;
}

size_t DsKvRawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawPutResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawPutResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawPutResponse)
    MergeFrom(*source);
  }
}

void DsKvRawPutResponse::MergeFrom(const DsKvRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvRawPutResponse::MergeFrom(from.resp());
  }
}

void DsKvRawPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawPutResponse::CopyFrom(const DsKvRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawPutResponse::IsInitialized() const {
  return true;
}

void DsKvRawPutResponse::Swap(DsKvRawPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawPutResponse::InternalSwap(DsKvRawPutResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawPutResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawPutResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvRawPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvRawPutResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvRawPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawPutResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvRawPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawPutResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawPutResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawPutResponse.header)
}

// .kvrpcpb.KvRawPutResponse resp = 2;
bool DsKvRawPutResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvRawPutResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvRawPutResponse& DsKvRawPutResponse::resp() const {
  const ::kvrpcpb::KvRawPutResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawPutResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawPutResponse*>(
      &::kvrpcpb::_KvRawPutResponse_default_instance_);
}
::kvrpcpb::KvRawPutResponse* DsKvRawPutResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvRawPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawPutResponse.resp)
  return resp_;
}
::kvrpcpb::KvRawPutResponse* DsKvRawPutResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawPutResponse.resp)
  
  ::kvrpcpb::KvRawPutResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvRawPutResponse::set_allocated_resp(::kvrpcpb::KvRawPutResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawPutResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawPutRequest::kKeyFieldNumber;
const int KvRawPutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawPutRequest::KvRawPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawPutRequest)
}
KvRawPutRequest::KvRawPutRequest(const KvRawPutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawPutRequest)
}

void KvRawPutRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KvRawPutRequest::~KvRawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawPutRequest)
  SharedDtor();
}

void KvRawPutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRawPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawPutRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawPutRequest& KvRawPutRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawPutRequest* KvRawPutRequest::New(::google::protobuf::Arena* arena) const {
  KvRawPutRequest* n = new KvRawPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KvRawPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawPutRequest)
  return false;
#undef DO_
}

void KvRawPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawPutRequest)
}

::google::protobuf::uint8* KvRawPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawPutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawPutRequest)
  return target;
}

size_t KvRawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawPutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawPutRequest)
    MergeFrom(*source);
  }
}

void KvRawPutRequest::MergeFrom(const KvRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KvRawPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawPutRequest::CopyFrom(const KvRawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawPutRequest::IsInitialized() const {
  return true;
}

void KvRawPutRequest::Swap(KvRawPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawPutRequest::InternalSwap(KvRawPutRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawPutRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawPutRequest

// bytes key = 1;
void KvRawPutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRawPutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawPutRequest.key)
  return key_.GetNoArena();
}
void KvRawPutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawPutRequest.key)
}
#if LANG_CXX11
void KvRawPutRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRawPutRequest.key)
}
#endif
void KvRawPutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRawPutRequest.key)
}
void KvRawPutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRawPutRequest.key)
}
::std::string* KvRawPutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawPutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRawPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRawPutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRawPutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRawPutRequest.key)
}

// bytes value = 2;
void KvRawPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRawPutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawPutRequest.value)
  return value_.GetNoArena();
}
void KvRawPutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawPutRequest.value)
}
#if LANG_CXX11
void KvRawPutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRawPutRequest.value)
}
#endif
void KvRawPutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRawPutRequest.value)
}
void KvRawPutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRawPutRequest.value)
}
::std::string* KvRawPutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRawPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRawPutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRawPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRawPutRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawPutResponse::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawPutResponse::KvRawPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawPutResponse)
}
KvRawPutResponse::KvRawPutResponse(const KvRawPutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawPutResponse)
}

void KvRawPutResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvRawPutResponse::~KvRawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawPutResponse)
  SharedDtor();
}

void KvRawPutResponse::SharedDtor() {
}

void KvRawPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawPutResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawPutResponse& KvRawPutResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawPutResponse* KvRawPutResponse::New(::google::protobuf::Arena* arena) const {
  KvRawPutResponse* n = new KvRawPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvRawPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawPutResponse)
  return false;
#undef DO_
}

void KvRawPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawPutResponse)
}

::google::protobuf::uint8* KvRawPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawPutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawPutResponse)
  return target;
}

size_t KvRawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawPutResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawPutResponse)
    MergeFrom(*source);
  }
}

void KvRawPutResponse::MergeFrom(const KvRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvRawPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawPutResponse::CopyFrom(const KvRawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawPutResponse::IsInitialized() const {
  return true;
}

void KvRawPutResponse::Swap(KvRawPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawPutResponse::InternalSwap(KvRawPutResponse* other) {
  using std::swap;
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawPutResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawPutResponse

// int32 code = 1;
void KvRawPutResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvRawPutResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawPutResponse.code)
  return code_;
}
void KvRawPutResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawPutResponse.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawDeleteRequest::kHeaderFieldNumber;
const int DsKvRawDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawDeleteRequest::DsKvRawDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawDeleteRequest)
}
DsKvRawDeleteRequest::DsKvRawDeleteRequest(const DsKvRawDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvRawDeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawDeleteRequest)
}

void DsKvRawDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvRawDeleteRequest::~DsKvRawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawDeleteRequest)
  SharedDtor();
}

void DsKvRawDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvRawDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawDeleteRequest& DsKvRawDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawDeleteRequest* DsKvRawDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvRawDeleteRequest* n = new DsKvRawDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawDeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawDeleteRequest)
  return false;
#undef DO_
}

void DsKvRawDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawDeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawDeleteRequest)
}

::google::protobuf::uint8* DsKvRawDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawDeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawDeleteRequest)
  return target;
}

size_t DsKvRawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawDeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawDeleteRequest)
    MergeFrom(*source);
  }
}

void DsKvRawDeleteRequest::MergeFrom(const DsKvRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvRawDeleteRequest::MergeFrom(from.req());
  }
}

void DsKvRawDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawDeleteRequest::CopyFrom(const DsKvRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawDeleteRequest::IsInitialized() const {
  return true;
}

void DsKvRawDeleteRequest::Swap(DsKvRawDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawDeleteRequest::InternalSwap(DsKvRawDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvRawDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvRawDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvRawDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvRawDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawDeleteRequest.header)
}

// .kvrpcpb.KvRawDeleteRequest req = 2;
bool DsKvRawDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvRawDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvRawDeleteRequest& DsKvRawDeleteRequest::req() const {
  const ::kvrpcpb::KvRawDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawDeleteRequest*>(
      &::kvrpcpb::_KvRawDeleteRequest_default_instance_);
}
::kvrpcpb::KvRawDeleteRequest* DsKvRawDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvRawDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawDeleteRequest.req)
  return req_;
}
::kvrpcpb::KvRawDeleteRequest* DsKvRawDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawDeleteRequest.req)
  
  ::kvrpcpb::KvRawDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvRawDeleteRequest::set_allocated_req(::kvrpcpb::KvRawDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawDeleteResponse::kHeaderFieldNumber;
const int DsKvRawDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawDeleteResponse::DsKvRawDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawDeleteResponse)
}
DsKvRawDeleteResponse::DsKvRawDeleteResponse(const DsKvRawDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvRawDeleteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawDeleteResponse)
}

void DsKvRawDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvRawDeleteResponse::~DsKvRawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawDeleteResponse)
  SharedDtor();
}

void DsKvRawDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvRawDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawDeleteResponse& DsKvRawDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawDeleteResponse* DsKvRawDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvRawDeleteResponse* n = new DsKvRawDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawDeleteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawDeleteResponse)
  return false;
#undef DO_
}

void DsKvRawDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawDeleteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawDeleteResponse)
}

::google::protobuf::uint8* DsKvRawDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawDeleteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawDeleteResponse)
  return target;
}

size_t DsKvRawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawDeleteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawDeleteResponse)
    MergeFrom(*source);
  }
}

void DsKvRawDeleteResponse::MergeFrom(const DsKvRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvRawDeleteResponse::MergeFrom(from.resp());
  }
}

void DsKvRawDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawDeleteResponse::CopyFrom(const DsKvRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawDeleteResponse::IsInitialized() const {
  return true;
}

void DsKvRawDeleteResponse::Swap(DsKvRawDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawDeleteResponse::InternalSwap(DsKvRawDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvRawDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvRawDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvRawDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvRawDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawDeleteResponse.header)
}

// .kvrpcpb.KvRawDeleteResponse resp = 2;
bool DsKvRawDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvRawDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvRawDeleteResponse& DsKvRawDeleteResponse::resp() const {
  const ::kvrpcpb::KvRawDeleteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawDeleteResponse*>(
      &::kvrpcpb::_KvRawDeleteResponse_default_instance_);
}
::kvrpcpb::KvRawDeleteResponse* DsKvRawDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvRawDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawDeleteResponse.resp)
  return resp_;
}
::kvrpcpb::KvRawDeleteResponse* DsKvRawDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawDeleteResponse.resp)
  
  ::kvrpcpb::KvRawDeleteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvRawDeleteResponse::set_allocated_resp(::kvrpcpb::KvRawDeleteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawDeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawDeleteRequest::KvRawDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawDeleteRequest)
}
KvRawDeleteRequest::KvRawDeleteRequest(const KvRawDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawDeleteRequest)
}

void KvRawDeleteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KvRawDeleteRequest::~KvRawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawDeleteRequest)
  SharedDtor();
}

void KvRawDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRawDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawDeleteRequest& KvRawDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawDeleteRequest* KvRawDeleteRequest::New(::google::protobuf::Arena* arena) const {
  KvRawDeleteRequest* n = new KvRawDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KvRawDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawDeleteRequest)
  return false;
#undef DO_
}

void KvRawDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawDeleteRequest)
}

::google::protobuf::uint8* KvRawDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawDeleteRequest)
  return target;
}

size_t KvRawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawDeleteRequest)
    MergeFrom(*source);
  }
}

void KvRawDeleteRequest::MergeFrom(const KvRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void KvRawDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawDeleteRequest::CopyFrom(const KvRawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawDeleteRequest::IsInitialized() const {
  return true;
}

void KvRawDeleteRequest::Swap(KvRawDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawDeleteRequest::InternalSwap(KvRawDeleteRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawDeleteRequest

// bytes key = 1;
void KvRawDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRawDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawDeleteRequest.key)
  return key_.GetNoArena();
}
void KvRawDeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawDeleteRequest.key)
}
#if LANG_CXX11
void KvRawDeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRawDeleteRequest.key)
}
#endif
void KvRawDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRawDeleteRequest.key)
}
void KvRawDeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRawDeleteRequest.key)
}
::std::string* KvRawDeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRawDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRawDeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRawDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRawDeleteRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawDeleteResponse::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawDeleteResponse::KvRawDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawDeleteResponse)
}
KvRawDeleteResponse::KvRawDeleteResponse(const KvRawDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawDeleteResponse)
}

void KvRawDeleteResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvRawDeleteResponse::~KvRawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawDeleteResponse)
  SharedDtor();
}

void KvRawDeleteResponse::SharedDtor() {
}

void KvRawDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawDeleteResponse& KvRawDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawDeleteResponse* KvRawDeleteResponse::New(::google::protobuf::Arena* arena) const {
  KvRawDeleteResponse* n = new KvRawDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvRawDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawDeleteResponse)
  return false;
#undef DO_
}

void KvRawDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawDeleteResponse)
}

::google::protobuf::uint8* KvRawDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawDeleteResponse)
  return target;
}

size_t KvRawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawDeleteResponse)
    MergeFrom(*source);
  }
}

void KvRawDeleteResponse::MergeFrom(const KvRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvRawDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawDeleteResponse::CopyFrom(const KvRawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawDeleteResponse::IsInitialized() const {
  return true;
}

void KvRawDeleteResponse::Swap(KvRawDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawDeleteResponse::InternalSwap(KvRawDeleteResponse* other) {
  using std::swap;
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawDeleteResponse

// int32 code = 1;
void KvRawDeleteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvRawDeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawDeleteResponse.code)
  return code_;
}
void KvRawDeleteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawDeleteResponse.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPairRawExecute::kDoFieldNumber;
const int KvPairRawExecute::kKvPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPairRawExecute::KvPairRawExecute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPairRawExecute)
}
KvPairRawExecute::KvPairRawExecute(const KvPairRawExecute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv_pair()) {
    kv_pair_ = new ::kvrpcpb::KvPair(*from.kv_pair_);
  } else {
    kv_pair_ = NULL;
  }
  do__ = from.do__;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPairRawExecute)
}

void KvPairRawExecute::SharedCtor() {
  ::memset(&kv_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do__) -
      reinterpret_cast<char*>(&kv_pair_)) + sizeof(do__));
  _cached_size_ = 0;
}

KvPairRawExecute::~KvPairRawExecute() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPairRawExecute)
  SharedDtor();
}

void KvPairRawExecute::SharedDtor() {
  if (this != internal_default_instance()) delete kv_pair_;
}

void KvPairRawExecute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvPairRawExecute::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvPairRawExecute& KvPairRawExecute::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvPairRawExecute* KvPairRawExecute::New(::google::protobuf::Arena* arena) const {
  KvPairRawExecute* n = new KvPairRawExecute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvPairRawExecute::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPairRawExecute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kv_pair_ != NULL) {
    delete kv_pair_;
  }
  kv_pair_ = NULL;
  do__ = 0;
  _internal_metadata_.Clear();
}

bool KvPairRawExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPairRawExecute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ExecuteType do = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_do_(static_cast< ::kvrpcpb::ExecuteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvPair kv_pair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPairRawExecute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPairRawExecute)
  return false;
#undef DO_
}

void KvPairRawExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPairRawExecute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ExecuteType do = 1;
  if (this->do_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->do_(), output);
  }

  // .kvrpcpb.KvPair kv_pair = 2;
  if (this->has_kv_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->kv_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPairRawExecute)
}

::google::protobuf::uint8* KvPairRawExecute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPairRawExecute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ExecuteType do = 1;
  if (this->do_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->do_(), target);
  }

  // .kvrpcpb.KvPair kv_pair = 2;
  if (this->has_kv_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->kv_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPairRawExecute)
  return target;
}

size_t KvPairRawExecute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPairRawExecute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.KvPair kv_pair = 2;
  if (this->has_kv_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_pair_);
  }

  // .kvrpcpb.ExecuteType do = 1;
  if (this->do_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->do_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvPairRawExecute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPairRawExecute)
  GOOGLE_DCHECK_NE(&from, this);
  const KvPairRawExecute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvPairRawExecute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPairRawExecute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPairRawExecute)
    MergeFrom(*source);
  }
}

void KvPairRawExecute::MergeFrom(const KvPairRawExecute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPairRawExecute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv_pair()) {
    mutable_kv_pair()->::kvrpcpb::KvPair::MergeFrom(from.kv_pair());
  }
  if (from.do_() != 0) {
    set_do_(from.do_());
  }
}

void KvPairRawExecute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPairRawExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPairRawExecute::CopyFrom(const KvPairRawExecute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPairRawExecute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPairRawExecute::IsInitialized() const {
  return true;
}

void KvPairRawExecute::Swap(KvPairRawExecute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPairRawExecute::InternalSwap(KvPairRawExecute* other) {
  using std::swap;
  swap(kv_pair_, other->kv_pair_);
  swap(do__, other->do__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvPairRawExecute::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvPairRawExecute

// .kvrpcpb.ExecuteType do = 1;
void KvPairRawExecute::clear_do_() {
  do__ = 0;
}
::kvrpcpb::ExecuteType KvPairRawExecute::do_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPairRawExecute.do)
  return static_cast< ::kvrpcpb::ExecuteType >(do__);
}
void KvPairRawExecute::set_do_(::kvrpcpb::ExecuteType value) {
  
  do__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPairRawExecute.do)
}

// .kvrpcpb.KvPair kv_pair = 2;
bool KvPairRawExecute::has_kv_pair() const {
  return this != internal_default_instance() && kv_pair_ != NULL;
}
void KvPairRawExecute::clear_kv_pair() {
  if (GetArenaNoVirtual() == NULL && kv_pair_ != NULL) delete kv_pair_;
  kv_pair_ = NULL;
}
const ::kvrpcpb::KvPair& KvPairRawExecute::kv_pair() const {
  const ::kvrpcpb::KvPair* p = kv_pair_;
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPairRawExecute.kv_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvPair*>(
      &::kvrpcpb::_KvPair_default_instance_);
}
::kvrpcpb::KvPair* KvPairRawExecute::mutable_kv_pair() {
  
  if (kv_pair_ == NULL) {
    kv_pair_ = new ::kvrpcpb::KvPair;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPairRawExecute.kv_pair)
  return kv_pair_;
}
::kvrpcpb::KvPair* KvPairRawExecute::release_kv_pair() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPairRawExecute.kv_pair)
  
  ::kvrpcpb::KvPair* temp = kv_pair_;
  kv_pair_ = NULL;
  return temp;
}
void KvPairRawExecute::set_allocated_kv_pair(::kvrpcpb::KvPair* kv_pair) {
  delete kv_pair_;
  kv_pair_ = kv_pair;
  if (kv_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPairRawExecute.kv_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawExecuteRequest::kHeaderFieldNumber;
const int DsKvRawExecuteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawExecuteRequest::DsKvRawExecuteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawExecuteRequest)
}
DsKvRawExecuteRequest::DsKvRawExecuteRequest(const DsKvRawExecuteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvRawExecuteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawExecuteRequest)
}

void DsKvRawExecuteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvRawExecuteRequest::~DsKvRawExecuteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawExecuteRequest)
  SharedDtor();
}

void DsKvRawExecuteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvRawExecuteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawExecuteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawExecuteRequest& DsKvRawExecuteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawExecuteRequest* DsKvRawExecuteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvRawExecuteRequest* n = new DsKvRawExecuteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawExecuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawExecuteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawExecuteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawExecuteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawExecuteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawExecuteRequest)
  return false;
#undef DO_
}

void DsKvRawExecuteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawExecuteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawExecuteRequest)
}

::google::protobuf::uint8* DsKvRawExecuteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawExecuteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawExecuteRequest)
  return target;
}

size_t DsKvRawExecuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawExecuteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawExecuteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawExecuteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawExecuteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawExecuteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawExecuteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawExecuteRequest)
    MergeFrom(*source);
  }
}

void DsKvRawExecuteRequest::MergeFrom(const DsKvRawExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvRawExecuteRequest::MergeFrom(from.req());
  }
}

void DsKvRawExecuteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawExecuteRequest::CopyFrom(const DsKvRawExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawExecuteRequest::IsInitialized() const {
  return true;
}

void DsKvRawExecuteRequest::Swap(DsKvRawExecuteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawExecuteRequest::InternalSwap(DsKvRawExecuteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawExecuteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawExecuteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvRawExecuteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawExecuteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvRawExecuteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawExecuteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvRawExecuteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawExecuteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvRawExecuteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawExecuteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawExecuteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawExecuteRequest.header)
}

// .kvrpcpb.KvRawExecuteRequest req = 2;
bool DsKvRawExecuteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvRawExecuteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvRawExecuteRequest& DsKvRawExecuteRequest::req() const {
  const ::kvrpcpb::KvRawExecuteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawExecuteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawExecuteRequest*>(
      &::kvrpcpb::_KvRawExecuteRequest_default_instance_);
}
::kvrpcpb::KvRawExecuteRequest* DsKvRawExecuteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvRawExecuteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawExecuteRequest.req)
  return req_;
}
::kvrpcpb::KvRawExecuteRequest* DsKvRawExecuteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawExecuteRequest.req)
  
  ::kvrpcpb::KvRawExecuteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvRawExecuteRequest::set_allocated_req(::kvrpcpb::KvRawExecuteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawExecuteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRawExecuteResponse::kHeaderFieldNumber;
const int DsKvRawExecuteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRawExecuteResponse::DsKvRawExecuteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRawExecuteResponse)
}
DsKvRawExecuteResponse::DsKvRawExecuteResponse(const DsKvRawExecuteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvRawExecuteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRawExecuteResponse)
}

void DsKvRawExecuteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvRawExecuteResponse::~DsKvRawExecuteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRawExecuteResponse)
  SharedDtor();
}

void DsKvRawExecuteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvRawExecuteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRawExecuteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRawExecuteResponse& DsKvRawExecuteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRawExecuteResponse* DsKvRawExecuteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvRawExecuteResponse* n = new DsKvRawExecuteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRawExecuteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRawExecuteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRawExecuteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRawExecuteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRawExecuteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRawExecuteResponse)
  return false;
#undef DO_
}

void DsKvRawExecuteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRawExecuteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRawExecuteResponse)
}

::google::protobuf::uint8* DsKvRawExecuteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRawExecuteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRawExecuteResponse)
  return target;
}

size_t DsKvRawExecuteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRawExecuteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRawExecuteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRawExecuteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRawExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRawExecuteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRawExecuteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRawExecuteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRawExecuteResponse)
    MergeFrom(*source);
  }
}

void DsKvRawExecuteResponse::MergeFrom(const DsKvRawExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRawExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvRawExecuteResponse::MergeFrom(from.resp());
  }
}

void DsKvRawExecuteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRawExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRawExecuteResponse::CopyFrom(const DsKvRawExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRawExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRawExecuteResponse::IsInitialized() const {
  return true;
}

void DsKvRawExecuteResponse::Swap(DsKvRawExecuteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRawExecuteResponse::InternalSwap(DsKvRawExecuteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRawExecuteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRawExecuteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvRawExecuteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRawExecuteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvRawExecuteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawExecuteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvRawExecuteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawExecuteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvRawExecuteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawExecuteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRawExecuteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawExecuteResponse.header)
}

// .kvrpcpb.KvRawExecuteResponse resp = 2;
bool DsKvRawExecuteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvRawExecuteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvRawExecuteResponse& DsKvRawExecuteResponse::resp() const {
  const ::kvrpcpb::KvRawExecuteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRawExecuteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRawExecuteResponse*>(
      &::kvrpcpb::_KvRawExecuteResponse_default_instance_);
}
::kvrpcpb::KvRawExecuteResponse* DsKvRawExecuteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvRawExecuteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRawExecuteResponse.resp)
  return resp_;
}
::kvrpcpb::KvRawExecuteResponse* DsKvRawExecuteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRawExecuteResponse.resp)
  
  ::kvrpcpb::KvRawExecuteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvRawExecuteResponse::set_allocated_resp(::kvrpcpb::KvRawExecuteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRawExecuteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawExecuteRequest::kExecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawExecuteRequest::KvRawExecuteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawExecuteRequest)
}
KvRawExecuteRequest::KvRawExecuteRequest(const KvRawExecuteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      execs_(from.execs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawExecuteRequest)
}

void KvRawExecuteRequest::SharedCtor() {
  _cached_size_ = 0;
}

KvRawExecuteRequest::~KvRawExecuteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawExecuteRequest)
  SharedDtor();
}

void KvRawExecuteRequest::SharedDtor() {
}

void KvRawExecuteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawExecuteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawExecuteRequest& KvRawExecuteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawExecuteRequest* KvRawExecuteRequest::New(::google::protobuf::Arena* arena) const {
  KvRawExecuteRequest* n = new KvRawExecuteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawExecuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execs_.Clear();
  _internal_metadata_.Clear();
}

bool KvRawExecuteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawExecuteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KvPairRawExecute execs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawExecuteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawExecuteRequest)
  return false;
#undef DO_
}

void KvRawExecuteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPairRawExecute execs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->execs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawExecuteRequest)
}

::google::protobuf::uint8* KvRawExecuteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPairRawExecute execs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->execs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawExecuteRequest)
  return target;
}

size_t KvRawExecuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawExecuteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.KvPairRawExecute execs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->execs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->execs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawExecuteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawExecuteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawExecuteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawExecuteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawExecuteRequest)
    MergeFrom(*source);
  }
}

void KvRawExecuteRequest::MergeFrom(const KvRawExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  execs_.MergeFrom(from.execs_);
}

void KvRawExecuteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawExecuteRequest::CopyFrom(const KvRawExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawExecuteRequest::IsInitialized() const {
  return true;
}

void KvRawExecuteRequest::Swap(KvRawExecuteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawExecuteRequest::InternalSwap(KvRawExecuteRequest* other) {
  using std::swap;
  execs_.InternalSwap(&other->execs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawExecuteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawExecuteRequest

// repeated .kvrpcpb.KvPairRawExecute execs = 1;
int KvRawExecuteRequest::execs_size() const {
  return execs_.size();
}
void KvRawExecuteRequest::clear_execs() {
  execs_.Clear();
}
const ::kvrpcpb::KvPairRawExecute& KvRawExecuteRequest::execs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawExecuteRequest.execs)
  return execs_.Get(index);
}
::kvrpcpb::KvPairRawExecute* KvRawExecuteRequest::mutable_execs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRawExecuteRequest.execs)
  return execs_.Mutable(index);
}
::kvrpcpb::KvPairRawExecute* KvRawExecuteRequest::add_execs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.KvRawExecuteRequest.execs)
  return execs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPairRawExecute >*
KvRawExecuteRequest::mutable_execs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvRawExecuteRequest.execs)
  return &execs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPairRawExecute >&
KvRawExecuteRequest::execs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvRawExecuteRequest.execs)
  return execs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRawExecuteResponse::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRawExecuteResponse::KvRawExecuteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRawExecuteResponse)
}
KvRawExecuteResponse::KvRawExecuteResponse(const KvRawExecuteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRawExecuteResponse)
}

void KvRawExecuteResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvRawExecuteResponse::~KvRawExecuteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRawExecuteResponse)
  SharedDtor();
}

void KvRawExecuteResponse::SharedDtor() {
}

void KvRawExecuteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRawExecuteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRawExecuteResponse& KvRawExecuteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRawExecuteResponse* KvRawExecuteResponse::New(::google::protobuf::Arena* arena) const {
  KvRawExecuteResponse* n = new KvRawExecuteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRawExecuteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvRawExecuteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRawExecuteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRawExecuteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRawExecuteResponse)
  return false;
#undef DO_
}

void KvRawExecuteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRawExecuteResponse)
}

::google::protobuf::uint8* KvRawExecuteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRawExecuteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRawExecuteResponse)
  return target;
}

size_t KvRawExecuteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRawExecuteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRawExecuteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRawExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRawExecuteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRawExecuteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRawExecuteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRawExecuteResponse)
    MergeFrom(*source);
  }
}

void KvRawExecuteResponse::MergeFrom(const KvRawExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRawExecuteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvRawExecuteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRawExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRawExecuteResponse::CopyFrom(const KvRawExecuteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRawExecuteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRawExecuteResponse::IsInitialized() const {
  return true;
}

void KvRawExecuteResponse::Swap(KvRawExecuteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRawExecuteResponse::InternalSwap(KvRawExecuteResponse* other) {
  using std::swap;
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRawExecuteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRawExecuteResponse

// int32 code = 1;
void KvRawExecuteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvRawExecuteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRawExecuteResponse.code)
  return code_;
}
void KvRawExecuteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRawExecuteResponse.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scope::kStartFieldNumber;
const int Scope::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scope::Scope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Scope)
}
Scope::Scope(const Scope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Scope)
}

void Scope::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Scope::~Scope() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Scope)
  SharedDtor();
}

void Scope::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scope::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scope& Scope::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scope* Scope::New(::google::protobuf::Arena* arena) const {
  Scope* n = new Scope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Scope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Scope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Scope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Scope)
  return false;
#undef DO_
}

void Scope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Scope)
}

::google::protobuf::uint8* Scope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Scope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Scope)
  return target;
}

size_t Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Scope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  const Scope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Scope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Scope)
    MergeFrom(*source);
  }
}

void Scope::MergeFrom(const Scope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
}

void Scope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scope::CopyFrom(const Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scope::IsInitialized() const {
  return true;
}

void Scope::Swap(Scope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scope::InternalSwap(Scope* other) {
  using std::swap;
  start_.Swap(&other->start_);
  limit_.Swap(&other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scope::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scope

// bytes start = 1;
void Scope::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Scope::start() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Scope.start)
  return start_.GetNoArena();
}
void Scope::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Scope.start)
}
#if LANG_CXX11
void Scope::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Scope.start)
}
#endif
void Scope::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Scope.start)
}
void Scope::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Scope.start)
}
::std::string* Scope::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Scope.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scope::release_start() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Scope.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scope::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Scope.start)
}

// bytes limit = 2;
void Scope::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Scope::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Scope.limit)
  return limit_.GetNoArena();
}
void Scope::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Scope.limit)
}
#if LANG_CXX11
void Scope::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Scope.limit)
}
#endif
void Scope::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Scope.limit)
}
void Scope::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Scope.limit)
}
::std::string* Scope::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Scope.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scope::release_limit() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Scope.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scope::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Scope.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectField::kTypFieldNumber;
const int SelectField::kAggreFuncFieldNumber;
const int SelectField::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectField::SelectField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.SelectField)
}
SelectField::SelectField(const SelectField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aggre_func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aggre_func().size() > 0) {
    aggre_func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aggre_func_);
  }
  if (from.has_column()) {
    column_ = new ::metapb::Column(*from.column_);
  } else {
    column_ = NULL;
  }
  typ_ = from.typ_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.SelectField)
}

void SelectField::SharedCtor() {
  aggre_func_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typ_) -
      reinterpret_cast<char*>(&column_)) + sizeof(typ_));
  _cached_size_ = 0;
}

SelectField::~SelectField() {
  // @@protoc_insertion_point(destructor:kvrpcpb.SelectField)
  SharedDtor();
}

void SelectField::SharedDtor() {
  aggre_func_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete column_;
}

void SelectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectField::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectField& SelectField::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectField* SelectField::New(::google::protobuf::Arena* arena) const {
  SelectField* n = new SelectField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectField::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggre_func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  typ_ = 0;
  _internal_metadata_.Clear();
}

bool SelectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.SelectField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.SelectField.Type typ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typ(static_cast< ::kvrpcpb::SelectField_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aggre_func = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aggre_func()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.SelectField.aggre_func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Column column = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.SelectField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.SelectField)
  return false;
#undef DO_
}

void SelectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typ(), output);
  }

  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.SelectField.aggre_func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->aggre_func(), output);
  }

  // .metapb.Column column = 3;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->column_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.SelectField)
}

::google::protobuf::uint8* SelectField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.SelectField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typ(), target);
  }

  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aggre_func().data(), static_cast<int>(this->aggre_func().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.SelectField.aggre_func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->aggre_func(), target);
  }

  // .metapb.Column column = 3;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->column_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.SelectField)
  return target;
}

size_t SelectField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.SelectField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string aggre_func = 2;
  if (this->aggre_func().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aggre_func());
  }

  // .metapb.Column column = 3;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  // .kvrpcpb.SelectField.Type typ = 1;
  if (this->typ() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typ());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.SelectField)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.SelectField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.SelectField)
    MergeFrom(*source);
  }
}

void SelectField::MergeFrom(const SelectField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.SelectField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aggre_func().size() > 0) {

    aggre_func_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aggre_func_);
  }
  if (from.has_column()) {
    mutable_column()->::metapb::Column::MergeFrom(from.column());
  }
  if (from.typ() != 0) {
    set_typ(from.typ());
  }
}

void SelectField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.SelectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectField::CopyFrom(const SelectField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.SelectField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectField::IsInitialized() const {
  return true;
}

void SelectField::Swap(SelectField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectField::InternalSwap(SelectField* other) {
  using std::swap;
  aggre_func_.Swap(&other->aggre_func_);
  swap(column_, other->column_);
  swap(typ_, other->typ_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectField::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectField

// .kvrpcpb.SelectField.Type typ = 1;
void SelectField::clear_typ() {
  typ_ = 0;
}
::kvrpcpb::SelectField_Type SelectField::typ() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectField.typ)
  return static_cast< ::kvrpcpb::SelectField_Type >(typ_);
}
void SelectField::set_typ(::kvrpcpb::SelectField_Type value) {
  
  typ_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.SelectField.typ)
}

// string aggre_func = 2;
void SelectField::clear_aggre_func() {
  aggre_func_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectField::aggre_func() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectField.aggre_func)
  return aggre_func_.GetNoArena();
}
void SelectField::set_aggre_func(const ::std::string& value) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.SelectField.aggre_func)
}
#if LANG_CXX11
void SelectField::set_aggre_func(::std::string&& value) {
  
  aggre_func_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.SelectField.aggre_func)
}
#endif
void SelectField::set_aggre_func(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.SelectField.aggre_func)
}
void SelectField::set_aggre_func(const char* value, size_t size) {
  
  aggre_func_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.SelectField.aggre_func)
}
::std::string* SelectField::mutable_aggre_func() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectField.aggre_func)
  return aggre_func_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectField::release_aggre_func() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectField.aggre_func)
  
  return aggre_func_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectField::set_allocated_aggre_func(::std::string* aggre_func) {
  if (aggre_func != NULL) {
    
  } else {
    
  }
  aggre_func_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aggre_func);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectField.aggre_func)
}

// .metapb.Column column = 3;
bool SelectField::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void SelectField::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::metapb::Column& SelectField::column() const {
  const ::metapb::Column* p = column_;
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectField.column)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Column*>(
      &::metapb::_Column_default_instance_);
}
::metapb::Column* SelectField::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::metapb::Column;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectField.column)
  return column_;
}
::metapb::Column* SelectField::release_column() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectField.column)
  
  ::metapb::Column* temp = column_;
  column_ = NULL;
  return temp;
}
void SelectField::set_allocated_column(::metapb::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectField.column)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kColumnFieldNumber;
const int Match::kThresholdFieldNumber;
const int Match::kMatchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Match)
}
Match::Match(const Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.threshold().size() > 0) {
    threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threshold_);
  }
  if (from.has_column()) {
    column_ = new ::metapb::Column(*from.column_);
  } else {
    column_ = NULL;
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Match)
}

void Match::SharedCtor() {
  threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&column_)) + sizeof(match_type_));
  _cached_size_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  threshold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete column_;
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Match& Match::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && column_ != NULL) {
    delete column_;
  }
  column_ = NULL;
  match_type_ = 0;
  _internal_metadata_.Clear();
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Column column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.MatchType match_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_match_type(static_cast< ::kvrpcpb::MatchType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Column column = 1;
  if (this->has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->column_, output);
  }

  // bytes threshold = 2;
  if (this->threshold().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->threshold(), output);
  }

  // .kvrpcpb.MatchType match_type = 3;
  if (this->match_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->match_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Match)
}

::google::protobuf::uint8* Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Column column = 1;
  if (this->has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->column_, deterministic, target);
  }

  // bytes threshold = 2;
  if (this->threshold().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->threshold(), target);
  }

  // .kvrpcpb.MatchType match_type = 3;
  if (this->match_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->match_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Match)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes threshold = 2;
  if (this->threshold().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->threshold());
  }

  // .metapb.Column column = 1;
  if (this->has_column()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_);
  }

  // .kvrpcpb.MatchType match_type = 3;
  if (this->match_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.threshold().size() > 0) {

    threshold_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.threshold_);
  }
  if (from.has_column()) {
    mutable_column()->::metapb::Column::MergeFrom(from.column());
  }
  if (from.match_type() != 0) {
    set_match_type(from.match_type());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  using std::swap;
  threshold_.Swap(&other->threshold_);
  swap(column_, other->column_);
  swap(match_type_, other->match_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// .metapb.Column column = 1;
bool Match::has_column() const {
  return this != internal_default_instance() && column_ != NULL;
}
void Match::clear_column() {
  if (GetArenaNoVirtual() == NULL && column_ != NULL) delete column_;
  column_ = NULL;
}
const ::metapb::Column& Match::column() const {
  const ::metapb::Column* p = column_;
  // @@protoc_insertion_point(field_get:kvrpcpb.Match.column)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Column*>(
      &::metapb::_Column_default_instance_);
}
::metapb::Column* Match::mutable_column() {
  
  if (column_ == NULL) {
    column_ = new ::metapb::Column;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Match.column)
  return column_;
}
::metapb::Column* Match::release_column() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Match.column)
  
  ::metapb::Column* temp = column_;
  column_ = NULL;
  return temp;
}
void Match::set_allocated_column(::metapb::Column* column) {
  delete column_;
  column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Match.column)
}

// bytes threshold = 2;
void Match::clear_threshold() {
  threshold_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Match::threshold() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Match.threshold)
  return threshold_.GetNoArena();
}
void Match::set_threshold(const ::std::string& value) {
  
  threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Match.threshold)
}
#if LANG_CXX11
void Match::set_threshold(::std::string&& value) {
  
  threshold_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Match.threshold)
}
#endif
void Match::set_threshold(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Match.threshold)
}
void Match::set_threshold(const void* value, size_t size) {
  
  threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Match.threshold)
}
::std::string* Match::mutable_threshold() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Match.threshold)
  return threshold_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Match::release_threshold() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Match.threshold)
  
  return threshold_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Match::set_allocated_threshold(::std::string* threshold) {
  if (threshold != NULL) {
    
  } else {
    
  }
  threshold_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), threshold);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Match.threshold)
}

// .kvrpcpb.MatchType match_type = 3;
void Match::clear_match_type() {
  match_type_ = 0;
}
::kvrpcpb::MatchType Match::match_type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Match.match_type)
  return static_cast< ::kvrpcpb::MatchType >(match_type_);
}
void Match::set_match_type(::kvrpcpb::MatchType value) {
  
  match_type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Match.match_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Limit::kOffsetFieldNumber;
const int Limit::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Limit::Limit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Limit)
}
Limit::Limit(const Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Limit)
}

void Limit::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _cached_size_ = 0;
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Limit)
  SharedDtor();
}

void Limit::SharedDtor() {
}

void Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Limit::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Limit& Limit::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Limit* Limit::New(::google::protobuf::Arena* arena) const {
  Limit* n = new Limit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Limit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Limit)
  return false;
#undef DO_
}

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->offset(), output);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Limit)
}

::google::protobuf::uint8* Limit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->offset(), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Limit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const Limit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Limit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Limit)
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::Swap(Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Limit::InternalSwap(Limit* other) {
  using std::swap;
  swap(offset_, other->offset_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Limit

// uint64 offset = 1;
void Limit::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Limit::offset() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Limit.offset)
  return offset_;
}
void Limit::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Limit.offset)
}

// uint64 count = 2;
void Limit::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Limit::count() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Limit.count)
  return count_;
}
void Limit::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Limit.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsSelectRequest::kHeaderFieldNumber;
const int DsSelectRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsSelectRequest::DsSelectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsSelectRequest)
}
DsSelectRequest::DsSelectRequest(const DsSelectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::SelectRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsSelectRequest)
}

void DsSelectRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsSelectRequest::~DsSelectRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsSelectRequest)
  SharedDtor();
}

void DsSelectRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsSelectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsSelectRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsSelectRequest& DsSelectRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsSelectRequest* DsSelectRequest::New(::google::protobuf::Arena* arena) const {
  DsSelectRequest* n = new DsSelectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsSelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsSelectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsSelectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.SelectRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsSelectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsSelectRequest)
  return false;
#undef DO_
}

void DsSelectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.SelectRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsSelectRequest)
}

::google::protobuf::uint8* DsSelectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsSelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.SelectRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsSelectRequest)
  return target;
}

size_t DsSelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsSelectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.SelectRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsSelectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsSelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsSelectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsSelectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsSelectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsSelectRequest)
    MergeFrom(*source);
  }
}

void DsSelectRequest::MergeFrom(const DsSelectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsSelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::SelectRequest::MergeFrom(from.req());
  }
}

void DsSelectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsSelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsSelectRequest::CopyFrom(const DsSelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsSelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsSelectRequest::IsInitialized() const {
  return true;
}

void DsSelectRequest::Swap(DsSelectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsSelectRequest::InternalSwap(DsSelectRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsSelectRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsSelectRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsSelectRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsSelectRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsSelectRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsSelectRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsSelectRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsSelectRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsSelectRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsSelectRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsSelectRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsSelectRequest.header)
}

// .kvrpcpb.SelectRequest req = 2;
bool DsSelectRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsSelectRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::SelectRequest& DsSelectRequest::req() const {
  const ::kvrpcpb::SelectRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsSelectRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::SelectRequest*>(
      &::kvrpcpb::_SelectRequest_default_instance_);
}
::kvrpcpb::SelectRequest* DsSelectRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::SelectRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsSelectRequest.req)
  return req_;
}
::kvrpcpb::SelectRequest* DsSelectRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsSelectRequest.req)
  
  ::kvrpcpb::SelectRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsSelectRequest::set_allocated_req(::kvrpcpb::SelectRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsSelectRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectRequest::kKeyFieldNumber;
const int SelectRequest::kScopeFieldNumber;
const int SelectRequest::kFieldListFieldNumber;
const int SelectRequest::kWhereFiltersFieldNumber;
const int SelectRequest::kGroupBysFieldNumber;
const int SelectRequest::kLimitFieldNumber;
const int SelectRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectRequest::SelectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.SelectRequest)
}
SelectRequest::SelectRequest(const SelectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_list_(from.field_list_),
      where_filters_(from.where_filters_),
      group_bys_(from.group_bys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    scope_ = new ::kvrpcpb::Scope(*from.scope_);
  } else {
    scope_ = NULL;
  }
  if (from.has_limit()) {
    limit_ = new ::kvrpcpb::Limit(*from.limit_);
  } else {
    limit_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.SelectRequest)
}

void SelectRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

SelectRequest::~SelectRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.SelectRequest)
  SharedDtor();
}

void SelectRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scope_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete timestamp_;
}

void SelectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectRequest& SelectRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectRequest* SelectRequest::New(::google::protobuf::Arena* arena) const {
  SelectRequest* n = new SelectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_list_.Clear();
  where_filters_.Clear();
  group_bys_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) {
    delete scope_;
  }
  scope_ = NULL;
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) {
    delete limit_;
  }
  limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool SelectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.SelectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Scope scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.SelectField field_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.Match where_filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_where_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Column group_bys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_bys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Limit limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.SelectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.SelectRequest)
  return false;
#undef DO_
}

void SelectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scope_, output);
  }

  // repeated .kvrpcpb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field_list(static_cast<int>(i)), output);
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->where_filters(static_cast<int>(i)), output);
  }

  // repeated .metapb.Column group_bys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_bys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->group_bys(static_cast<int>(i)), output);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->limit_, output);
  }

  // .timestamp.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.SelectRequest)
}

::google::protobuf::uint8* SelectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.SelectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scope_, deterministic, target);
  }

  // repeated .kvrpcpb.SelectField field_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->field_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->where_filters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metapb.Column group_bys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_bys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->group_bys(static_cast<int>(i)), deterministic, target);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->limit_, deterministic, target);
  }

  // .timestamp.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.SelectRequest)
  return target;
}

size_t SelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.SelectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.SelectField field_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_list(static_cast<int>(i)));
    }
  }

  // repeated .kvrpcpb.Match where_filters = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->where_filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->where_filters(static_cast<int>(i)));
    }
  }

  // repeated .metapb.Column group_bys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->group_bys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_bys(static_cast<int>(i)));
    }
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scope_);
  }

  // .kvrpcpb.Limit limit = 6;
  if (this->has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limit_);
  }

  // .timestamp.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.SelectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.SelectRequest)
    MergeFrom(*source);
  }
}

void SelectRequest::MergeFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.SelectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_list_.MergeFrom(from.field_list_);
  where_filters_.MergeFrom(from.where_filters_);
  group_bys_.MergeFrom(from.group_bys_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    mutable_scope()->::kvrpcpb::Scope::MergeFrom(from.scope());
  }
  if (from.has_limit()) {
    mutable_limit()->::kvrpcpb::Limit::MergeFrom(from.limit());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
}

void SelectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectRequest::CopyFrom(const SelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.SelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectRequest::IsInitialized() const {
  return true;
}

void SelectRequest::Swap(SelectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectRequest::InternalSwap(SelectRequest* other) {
  using std::swap;
  field_list_.InternalSwap(&other->field_list_);
  where_filters_.InternalSwap(&other->where_filters_);
  group_bys_.InternalSwap(&other->group_bys_);
  key_.Swap(&other->key_);
  swap(scope_, other->scope_);
  swap(limit_, other->limit_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectRequest

// bytes key = 1;
void SelectRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.key)
  return key_.GetNoArena();
}
void SelectRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.SelectRequest.key)
}
#if LANG_CXX11
void SelectRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.SelectRequest.key)
}
#endif
void SelectRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.SelectRequest.key)
}
void SelectRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.SelectRequest.key)
}
::std::string* SelectRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectRequest.key)
}

// .kvrpcpb.Scope scope = 2;
bool SelectRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
void SelectRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
const ::kvrpcpb::Scope& SelectRequest::scope() const {
  const ::kvrpcpb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Scope*>(
      &::kvrpcpb::_Scope_default_instance_);
}
::kvrpcpb::Scope* SelectRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::kvrpcpb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.scope)
  return scope_;
}
::kvrpcpb::Scope* SelectRequest::release_scope() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectRequest.scope)
  
  ::kvrpcpb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_scope(::kvrpcpb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectRequest.scope)
}

// repeated .kvrpcpb.SelectField field_list = 3;
int SelectRequest::field_list_size() const {
  return field_list_.size();
}
void SelectRequest::clear_field_list() {
  field_list_.Clear();
}
const ::kvrpcpb::SelectField& SelectRequest::field_list(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.field_list)
  return field_list_.Get(index);
}
::kvrpcpb::SelectField* SelectRequest::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.field_list)
  return field_list_.Mutable(index);
}
::kvrpcpb::SelectField* SelectRequest::add_field_list() {
  // @@protoc_insertion_point(field_add:kvrpcpb.SelectRequest.field_list)
  return field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >*
SelectRequest::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.SelectRequest.field_list)
  return &field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::SelectField >&
SelectRequest::field_list() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.SelectRequest.field_list)
  return field_list_;
}

// repeated .kvrpcpb.Match where_filters = 4;
int SelectRequest::where_filters_size() const {
  return where_filters_.size();
}
void SelectRequest::clear_where_filters() {
  where_filters_.Clear();
}
const ::kvrpcpb::Match& SelectRequest::where_filters(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.where_filters)
  return where_filters_.Get(index);
}
::kvrpcpb::Match* SelectRequest::mutable_where_filters(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.where_filters)
  return where_filters_.Mutable(index);
}
::kvrpcpb::Match* SelectRequest::add_where_filters() {
  // @@protoc_insertion_point(field_add:kvrpcpb.SelectRequest.where_filters)
  return where_filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >*
SelectRequest::mutable_where_filters() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.SelectRequest.where_filters)
  return &where_filters_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >&
SelectRequest::where_filters() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.SelectRequest.where_filters)
  return where_filters_;
}

// repeated .metapb.Column group_bys = 5;
int SelectRequest::group_bys_size() const {
  return group_bys_.size();
}
void SelectRequest::clear_group_bys() {
  group_bys_.Clear();
}
const ::metapb::Column& SelectRequest::group_bys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.group_bys)
  return group_bys_.Get(index);
}
::metapb::Column* SelectRequest::mutable_group_bys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.group_bys)
  return group_bys_.Mutable(index);
}
::metapb::Column* SelectRequest::add_group_bys() {
  // @@protoc_insertion_point(field_add:kvrpcpb.SelectRequest.group_bys)
  return group_bys_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Column >*
SelectRequest::mutable_group_bys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.SelectRequest.group_bys)
  return &group_bys_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Column >&
SelectRequest::group_bys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.SelectRequest.group_bys)
  return group_bys_;
}

// .kvrpcpb.Limit limit = 6;
bool SelectRequest::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
void SelectRequest::clear_limit() {
  if (GetArenaNoVirtual() == NULL && limit_ != NULL) delete limit_;
  limit_ = NULL;
}
const ::kvrpcpb::Limit& SelectRequest::limit() const {
  const ::kvrpcpb::Limit* p = limit_;
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Limit*>(
      &::kvrpcpb::_Limit_default_instance_);
}
::kvrpcpb::Limit* SelectRequest::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::kvrpcpb::Limit;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.limit)
  return limit_;
}
::kvrpcpb::Limit* SelectRequest::release_limit() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectRequest.limit)
  
  ::kvrpcpb::Limit* temp = limit_;
  limit_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_limit(::kvrpcpb::Limit* limit) {
  delete limit_;
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectRequest.limit)
}

// .timestamp.Timestamp timestamp = 7;
bool SelectRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void SelectRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& SelectRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* SelectRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* SelectRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SelectRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void SelectRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SelectRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kKeyFieldNumber;
const int Row::kFieldsFieldNumber;
const int Row::kAggredCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      aggred_counts_(from.aggred_counts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fields().size() > 0) {
    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Row)
}

void Row::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Row& Row::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggred_counts_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 aggred_counts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_aggred_counts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_aggred_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes fields = 2;
  if (this->fields().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fields(), output);
  }

  // repeated int64 aggred_counts = 3;
  if (this->aggred_counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _aggred_counts_cached_byte_size_));
  }
  for (int i = 0, n = this->aggred_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->aggred_counts(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes fields = 2;
  if (this->fields().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fields(), target);
  }

  // repeated int64 aggred_counts = 3;
  if (this->aggred_counts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _aggred_counts_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->aggred_counts_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Row)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 aggred_counts = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->aggred_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _aggred_counts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes fields = 2;
  if (this->fields().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fields());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aggred_counts_.MergeFrom(from.aggred_counts_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.fields().size() > 0) {

    fields_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fields_);
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  aggred_counts_.InternalSwap(&other->aggred_counts_);
  key_.Swap(&other->key_);
  fields_.Swap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// bytes key = 1;
void Row::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Row.key)
  return key_.GetNoArena();
}
void Row::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Row.key)
}
#if LANG_CXX11
void Row::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Row.key)
}
#endif
void Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Row.key)
}
void Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Row.key)
}
::std::string* Row::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Row.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Row.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Row.key)
}

// bytes fields = 2;
void Row::clear_fields() {
  fields_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Row::fields() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Row.fields)
  return fields_.GetNoArena();
}
void Row::set_fields(const ::std::string& value) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Row.fields)
}
#if LANG_CXX11
void Row::set_fields(::std::string&& value) {
  
  fields_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Row.fields)
}
#endif
void Row::set_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Row.fields)
}
void Row::set_fields(const void* value, size_t size) {
  
  fields_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Row.fields)
}
::std::string* Row::mutable_fields() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Row.fields)
  return fields_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Row::release_fields() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Row.fields)
  
  return fields_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Row::set_allocated_fields(::std::string* fields) {
  if (fields != NULL) {
    
  } else {
    
  }
  fields_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fields);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Row.fields)
}

// repeated int64 aggred_counts = 3;
int Row::aggred_counts_size() const {
  return aggred_counts_.size();
}
void Row::clear_aggred_counts() {
  aggred_counts_.Clear();
}
::google::protobuf::int64 Row::aggred_counts(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Row.aggred_counts)
  return aggred_counts_.Get(index);
}
void Row::set_aggred_counts(int index, ::google::protobuf::int64 value) {
  aggred_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Row.aggred_counts)
}
void Row::add_aggred_counts(::google::protobuf::int64 value) {
  aggred_counts_.Add(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.Row.aggred_counts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Row::aggred_counts() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.Row.aggred_counts)
  return aggred_counts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Row::mutable_aggred_counts() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.Row.aggred_counts)
  return &aggred_counts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsSelectResponse::kHeaderFieldNumber;
const int DsSelectResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsSelectResponse::DsSelectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsSelectResponse)
}
DsSelectResponse::DsSelectResponse(const DsSelectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::SelectResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsSelectResponse)
}

void DsSelectResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsSelectResponse::~DsSelectResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsSelectResponse)
  SharedDtor();
}

void DsSelectResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsSelectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsSelectResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsSelectResponse& DsSelectResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsSelectResponse* DsSelectResponse::New(::google::protobuf::Arena* arena) const {
  DsSelectResponse* n = new DsSelectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsSelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsSelectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsSelectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.SelectResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsSelectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsSelectResponse)
  return false;
#undef DO_
}

void DsSelectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.SelectResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsSelectResponse)
}

::google::protobuf::uint8* DsSelectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsSelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.SelectResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsSelectResponse)
  return target;
}

size_t DsSelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsSelectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.SelectResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsSelectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsSelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsSelectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsSelectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsSelectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsSelectResponse)
    MergeFrom(*source);
  }
}

void DsSelectResponse::MergeFrom(const DsSelectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsSelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::SelectResponse::MergeFrom(from.resp());
  }
}

void DsSelectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsSelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsSelectResponse::CopyFrom(const DsSelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsSelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsSelectResponse::IsInitialized() const {
  return true;
}

void DsSelectResponse::Swap(DsSelectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsSelectResponse::InternalSwap(DsSelectResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsSelectResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsSelectResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsSelectResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsSelectResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsSelectResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsSelectResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsSelectResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsSelectResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsSelectResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsSelectResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsSelectResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsSelectResponse.header)
}

// .kvrpcpb.SelectResponse resp = 2;
bool DsSelectResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsSelectResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::SelectResponse& DsSelectResponse::resp() const {
  const ::kvrpcpb::SelectResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsSelectResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::SelectResponse*>(
      &::kvrpcpb::_SelectResponse_default_instance_);
}
::kvrpcpb::SelectResponse* DsSelectResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::SelectResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsSelectResponse.resp)
  return resp_;
}
::kvrpcpb::SelectResponse* DsSelectResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsSelectResponse.resp)
  
  ::kvrpcpb::SelectResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsSelectResponse::set_allocated_resp(::kvrpcpb::SelectResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsSelectResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectResponse::kCodeFieldNumber;
const int SelectResponse::kRowsFieldNumber;
const int SelectResponse::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectResponse::SelectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.SelectResponse)
}
SelectResponse::SelectResponse(const SelectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.SelectResponse)
}

void SelectResponse::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _cached_size_ = 0;
}

SelectResponse::~SelectResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.SelectResponse)
  SharedDtor();
}

void SelectResponse::SharedDtor() {
}

void SelectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SelectResponse& SelectResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectResponse* SelectResponse::New(::google::protobuf::Arena* arena) const {
  SelectResponse* n = new SelectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool SelectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.SelectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.SelectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.SelectResponse)
  return false;
#undef DO_
}

void SelectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .kvrpcpb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(static_cast<int>(i)), output);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.SelectResponse)
}

::google::protobuf::uint8* SelectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.SelectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .kvrpcpb.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.SelectResponse)
  return target;
}

size_t SelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.SelectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(static_cast<int>(i)));
    }
  }

  // uint64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.SelectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.SelectResponse)
    MergeFrom(*source);
  }
}

void SelectResponse::MergeFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.SelectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void SelectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectResponse::CopyFrom(const SelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.SelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResponse::IsInitialized() const {
  return true;
}

void SelectResponse::Swap(SelectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectResponse::InternalSwap(SelectResponse* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  swap(offset_, other->offset_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectResponse

// int32 code = 1;
void SelectResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 SelectResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectResponse.code)
  return code_;
}
void SelectResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.SelectResponse.code)
}

// repeated .kvrpcpb.Row rows = 2;
int SelectResponse::rows_size() const {
  return rows_.size();
}
void SelectResponse::clear_rows() {
  rows_.Clear();
}
const ::kvrpcpb::Row& SelectResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectResponse.rows)
  return rows_.Get(index);
}
::kvrpcpb::Row* SelectResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SelectResponse.rows)
  return rows_.Mutable(index);
}
::kvrpcpb::Row* SelectResponse::add_rows() {
  // @@protoc_insertion_point(field_add:kvrpcpb.SelectResponse.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Row >*
SelectResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.SelectResponse.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Row >&
SelectResponse::rows() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.SelectResponse.rows)
  return rows_;
}

// uint64 offset = 3;
void SelectResponse::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SelectResponse::offset() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SelectResponse.offset)
  return offset_;
}
void SelectResponse::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.SelectResponse.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
const int KeyValue::kTTLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ttl_ = from.ttl_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TTL = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // uint64 TTL = 3;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ttl(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // uint64 TTL = 3;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ttl(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes Value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// bytes Key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyValue.Key)
  return key_.GetNoArena();
}
void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyValue.Key)
}
#if LANG_CXX11
void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KeyValue.Key)
}
#endif
void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyValue.Key)
}
void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyValue.Key)
}
::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyValue.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyValue.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyValue.Key)
}

// bytes Value = 2;
void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyValue.Value)
  return value_.GetNoArena();
}
void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyValue.Value)
}
#if LANG_CXX11
void KeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KeyValue.Value)
}
#endif
void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyValue.Value)
}
void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyValue.Value)
}
::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyValue.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyValue.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyValue.Value)
}

// uint64 TTL = 3;
void KeyValue::clear_ttl() {
  ttl_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KeyValue::ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyValue.TTL)
  return ttl_;
}
void KeyValue::set_ttl(::google::protobuf::uint64 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyValue.TTL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsInsertRequest::kHeaderFieldNumber;
const int DsInsertRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsInsertRequest::DsInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsInsertRequest)
}
DsInsertRequest::DsInsertRequest(const DsInsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::InsertRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsInsertRequest)
}

void DsInsertRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsInsertRequest::~DsInsertRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsInsertRequest)
  SharedDtor();
}

void DsInsertRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsInsertRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsInsertRequest& DsInsertRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsInsertRequest* DsInsertRequest::New(::google::protobuf::Arena* arena) const {
  DsInsertRequest* n = new DsInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.InsertRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsInsertRequest)
  return false;
#undef DO_
}

void DsInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.InsertRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsInsertRequest)
}

::google::protobuf::uint8* DsInsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.InsertRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsInsertRequest)
  return target;
}

size_t DsInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsInsertRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.InsertRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsInsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsInsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsInsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsInsertRequest)
    MergeFrom(*source);
  }
}

void DsInsertRequest::MergeFrom(const DsInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::InsertRequest::MergeFrom(from.req());
  }
}

void DsInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsInsertRequest::CopyFrom(const DsInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsInsertRequest::IsInitialized() const {
  return true;
}

void DsInsertRequest::Swap(DsInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsInsertRequest::InternalSwap(DsInsertRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsInsertRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsInsertRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsInsertRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsInsertRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsInsertRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsInsertRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsInsertRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsInsertRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsInsertRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsInsertRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsInsertRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsInsertRequest.header)
}

// .kvrpcpb.InsertRequest req = 2;
bool DsInsertRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsInsertRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::InsertRequest& DsInsertRequest::req() const {
  const ::kvrpcpb::InsertRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsInsertRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::InsertRequest*>(
      &::kvrpcpb::_InsertRequest_default_instance_);
}
::kvrpcpb::InsertRequest* DsInsertRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::InsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsInsertRequest.req)
  return req_;
}
::kvrpcpb::InsertRequest* DsInsertRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsInsertRequest.req)
  
  ::kvrpcpb::InsertRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsInsertRequest::set_allocated_req(::kvrpcpb::InsertRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsInsertRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsInsertResponse::kHeaderFieldNumber;
const int DsInsertResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsInsertResponse::DsInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsInsertResponse)
}
DsInsertResponse::DsInsertResponse(const DsInsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::InsertResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsInsertResponse)
}

void DsInsertResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsInsertResponse::~DsInsertResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsInsertResponse)
  SharedDtor();
}

void DsInsertResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsInsertResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsInsertResponse& DsInsertResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsInsertResponse* DsInsertResponse::New(::google::protobuf::Arena* arena) const {
  DsInsertResponse* n = new DsInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.InsertResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsInsertResponse)
  return false;
#undef DO_
}

void DsInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.InsertResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsInsertResponse)
}

::google::protobuf::uint8* DsInsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.InsertResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsInsertResponse)
  return target;
}

size_t DsInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsInsertResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.InsertResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsInsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsInsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsInsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsInsertResponse)
    MergeFrom(*source);
  }
}

void DsInsertResponse::MergeFrom(const DsInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::InsertResponse::MergeFrom(from.resp());
  }
}

void DsInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsInsertResponse::CopyFrom(const DsInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsInsertResponse::IsInitialized() const {
  return true;
}

void DsInsertResponse::Swap(DsInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsInsertResponse::InternalSwap(DsInsertResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsInsertResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsInsertResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsInsertResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsInsertResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsInsertResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsInsertResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsInsertResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsInsertResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsInsertResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsInsertResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsInsertResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsInsertResponse.header)
}

// .kvrpcpb.InsertResponse resp = 2;
bool DsInsertResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsInsertResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::InsertResponse& DsInsertResponse::resp() const {
  const ::kvrpcpb::InsertResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsInsertResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::InsertResponse*>(
      &::kvrpcpb::_InsertResponse_default_instance_);
}
::kvrpcpb::InsertResponse* DsInsertResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::InsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsInsertResponse.resp)
  return resp_;
}
::kvrpcpb::InsertResponse* DsInsertResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsInsertResponse.resp)
  
  ::kvrpcpb::InsertResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsInsertResponse::set_allocated_resp(::kvrpcpb::InsertResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsInsertResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertRequest::kRowsFieldNumber;
const int InsertRequest::kCheckDuplicateFieldNumber;
const int InsertRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertRequest::InsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  check_duplicate_ = from.check_duplicate_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.InsertRequest)
}

void InsertRequest::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_duplicate_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(check_duplicate_));
  _cached_size_ = 0;
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.InsertRequest)
  SharedDtor();
}

void InsertRequest::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void InsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsertRequest& InsertRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsertRequest* InsertRequest::New(::google::protobuf::Arena* arena) const {
  InsertRequest* n = new InsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.InsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  check_duplicate_ = false;
  _internal_metadata_.Clear();
}

bool InsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.InsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.KeyValue rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool check_duplicate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_duplicate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.InsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.InsertRequest)
  return false;
#undef DO_
}

void InsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.InsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.KeyValue rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(static_cast<int>(i)), output);
  }

  // bool check_duplicate = 2;
  if (this->check_duplicate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->check_duplicate(), output);
  }

  // .timestamp.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.InsertRequest)
}

::google::protobuf::uint8* InsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.InsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.KeyValue rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rows(static_cast<int>(i)), deterministic, target);
  }

  // bool check_duplicate = 2;
  if (this->check_duplicate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->check_duplicate(), target);
  }

  // .timestamp.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.InsertRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.KeyValue rows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(static_cast<int>(i)));
    }
  }

  // .timestamp.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // bool check_duplicate = 2;
  if (this->check_duplicate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.InsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.InsertRequest)
    MergeFrom(*source);
  }
}

void InsertRequest::MergeFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.check_duplicate() != 0) {
    set_check_duplicate(from.check_duplicate());
  }
}

void InsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::Swap(InsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  rows_.InternalSwap(&other->rows_);
  swap(timestamp_, other->timestamp_);
  swap(check_duplicate_, other->check_duplicate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsertRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsertRequest

// repeated .kvrpcpb.KeyValue rows = 1;
int InsertRequest::rows_size() const {
  return rows_.size();
}
void InsertRequest::clear_rows() {
  rows_.Clear();
}
const ::kvrpcpb::KeyValue& InsertRequest::rows(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertRequest.rows)
  return rows_.Get(index);
}
::kvrpcpb::KeyValue* InsertRequest::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.InsertRequest.rows)
  return rows_.Mutable(index);
}
::kvrpcpb::KeyValue* InsertRequest::add_rows() {
  // @@protoc_insertion_point(field_add:kvrpcpb.InsertRequest.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyValue >*
InsertRequest::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.InsertRequest.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyValue >&
InsertRequest::rows() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.InsertRequest.rows)
  return rows_;
}

// bool check_duplicate = 2;
void InsertRequest::clear_check_duplicate() {
  check_duplicate_ = false;
}
bool InsertRequest::check_duplicate() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertRequest.check_duplicate)
  return check_duplicate_;
}
void InsertRequest::set_check_duplicate(bool value) {
  
  check_duplicate_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.InsertRequest.check_duplicate)
}

// .timestamp.Timestamp timestamp = 3;
bool InsertRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void InsertRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& InsertRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* InsertRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.InsertRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* InsertRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.InsertRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void InsertRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.InsertRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsertResponse::kCodeFieldNumber;
const int InsertResponse::kAffectedKeysFieldNumber;
const int InsertResponse::kDuplicateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsertResponse::InsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.InsertResponse)
}
InsertResponse::InsertResponse(const InsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duplicate_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.duplicate_key().size() > 0) {
    duplicate_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duplicate_key_);
  }
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.InsertResponse)
}

void InsertResponse::SharedCtor() {
  duplicate_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

InsertResponse::~InsertResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.InsertResponse)
  SharedDtor();
}

void InsertResponse::SharedDtor() {
  duplicate_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsertResponse& InsertResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsertResponse* InsertResponse::New(::google::protobuf::Arena* arena) const {
  InsertResponse* n = new InsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.InsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duplicate_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool InsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.InsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes duplicate_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_duplicate_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.InsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.InsertResponse)
  return false;
#undef DO_
}

void InsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.InsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  // bytes duplicate_key = 3;
  if (this->duplicate_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->duplicate_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.InsertResponse)
}

::google::protobuf::uint8* InsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.InsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  // bytes duplicate_key = 3;
  if (this->duplicate_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->duplicate_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.InsertResponse)
  return target;
}

size_t InsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.InsertResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes duplicate_key = 3;
  if (this->duplicate_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->duplicate_key());
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.InsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.InsertResponse)
    MergeFrom(*source);
  }
}

void InsertResponse::MergeFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.InsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duplicate_key().size() > 0) {

    duplicate_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duplicate_key_);
  }
  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void InsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertResponse::CopyFrom(const InsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.InsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResponse::IsInitialized() const {
  return true;
}

void InsertResponse::Swap(InsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsertResponse::InternalSwap(InsertResponse* other) {
  using std::swap;
  duplicate_key_.Swap(&other->duplicate_key_);
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsertResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsertResponse

// int32 code = 1;
void InsertResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 InsertResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertResponse.code)
  return code_;
}
void InsertResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.InsertResponse.code)
}

// uint64 affected_keys = 2;
void InsertResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InsertResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertResponse.affected_keys)
  return affected_keys_;
}
void InsertResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.InsertResponse.affected_keys)
}

// bytes duplicate_key = 3;
void InsertResponse::clear_duplicate_key() {
  duplicate_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InsertResponse::duplicate_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.InsertResponse.duplicate_key)
  return duplicate_key_.GetNoArena();
}
void InsertResponse::set_duplicate_key(const ::std::string& value) {
  
  duplicate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.InsertResponse.duplicate_key)
}
#if LANG_CXX11
void InsertResponse::set_duplicate_key(::std::string&& value) {
  
  duplicate_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.InsertResponse.duplicate_key)
}
#endif
void InsertResponse::set_duplicate_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duplicate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.InsertResponse.duplicate_key)
}
void InsertResponse::set_duplicate_key(const void* value, size_t size) {
  
  duplicate_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.InsertResponse.duplicate_key)
}
::std::string* InsertResponse::mutable_duplicate_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.InsertResponse.duplicate_key)
  return duplicate_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InsertResponse::release_duplicate_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.InsertResponse.duplicate_key)
  
  return duplicate_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InsertResponse::set_allocated_duplicate_key(::std::string* duplicate_key) {
  if (duplicate_key != NULL) {
    
  } else {
    
  }
  duplicate_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duplicate_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.InsertResponse.duplicate_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchInsertRequest::kReqsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchInsertRequest::BatchInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchInsertRequest)
}
BatchInsertRequest::BatchInsertRequest(const BatchInsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reqs_(from.reqs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchInsertRequest)
}

void BatchInsertRequest::SharedCtor() {
  _cached_size_ = 0;
}

BatchInsertRequest::~BatchInsertRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchInsertRequest)
  SharedDtor();
}

void BatchInsertRequest::SharedDtor() {
}

void BatchInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchInsertRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchInsertRequest& BatchInsertRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchInsertRequest* BatchInsertRequest::New(::google::protobuf::Arena* arena) const {
  BatchInsertRequest* n = new BatchInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqs_.Clear();
  _internal_metadata_.Clear();
}

bool BatchInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.InsertRequest reqs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reqs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchInsertRequest)
  return false;
#undef DO_
}

void BatchInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.InsertRequest reqs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reqs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reqs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchInsertRequest)
}

::google::protobuf::uint8* BatchInsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.InsertRequest reqs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reqs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->reqs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchInsertRequest)
  return target;
}

size_t BatchInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchInsertRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.InsertRequest reqs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->reqs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchInsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchInsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchInsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchInsertRequest)
    MergeFrom(*source);
  }
}

void BatchInsertRequest::MergeFrom(const BatchInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reqs_.MergeFrom(from.reqs_);
}

void BatchInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchInsertRequest::CopyFrom(const BatchInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchInsertRequest::IsInitialized() const {
  return true;
}

void BatchInsertRequest::Swap(BatchInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchInsertRequest::InternalSwap(BatchInsertRequest* other) {
  using std::swap;
  reqs_.InternalSwap(&other->reqs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchInsertRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchInsertRequest

// repeated .kvrpcpb.InsertRequest reqs = 1;
int BatchInsertRequest::reqs_size() const {
  return reqs_.size();
}
void BatchInsertRequest::clear_reqs() {
  reqs_.Clear();
}
const ::kvrpcpb::InsertRequest& BatchInsertRequest::reqs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchInsertRequest.reqs)
  return reqs_.Get(index);
}
::kvrpcpb::InsertRequest* BatchInsertRequest::mutable_reqs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchInsertRequest.reqs)
  return reqs_.Mutable(index);
}
::kvrpcpb::InsertRequest* BatchInsertRequest::add_reqs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchInsertRequest.reqs)
  return reqs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::InsertRequest >*
BatchInsertRequest::mutable_reqs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchInsertRequest.reqs)
  return &reqs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::InsertRequest >&
BatchInsertRequest::reqs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchInsertRequest.reqs)
  return reqs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchInsertResponse::kRespsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchInsertResponse::BatchInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchInsertResponse)
}
BatchInsertResponse::BatchInsertResponse(const BatchInsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      resps_(from.resps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchInsertResponse)
}

void BatchInsertResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchInsertResponse::~BatchInsertResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchInsertResponse)
  SharedDtor();
}

void BatchInsertResponse::SharedDtor() {
}

void BatchInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchInsertResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchInsertResponse& BatchInsertResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchInsertResponse* BatchInsertResponse::New(::google::protobuf::Arena* arena) const {
  BatchInsertResponse* n = new BatchInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resps_.Clear();
  _internal_metadata_.Clear();
}

bool BatchInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.InsertResponse resps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchInsertResponse)
  return false;
#undef DO_
}

void BatchInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.InsertResponse resps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resps(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchInsertResponse)
}

::google::protobuf::uint8* BatchInsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.InsertResponse resps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->resps(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchInsertResponse)
  return target;
}

size_t BatchInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchInsertResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.InsertResponse resps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->resps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resps(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchInsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchInsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchInsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchInsertResponse)
    MergeFrom(*source);
  }
}

void BatchInsertResponse::MergeFrom(const BatchInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resps_.MergeFrom(from.resps_);
}

void BatchInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchInsertResponse::CopyFrom(const BatchInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchInsertResponse::IsInitialized() const {
  return true;
}

void BatchInsertResponse::Swap(BatchInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchInsertResponse::InternalSwap(BatchInsertResponse* other) {
  using std::swap;
  resps_.InternalSwap(&other->resps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchInsertResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchInsertResponse

// repeated .kvrpcpb.InsertResponse resps = 2;
int BatchInsertResponse::resps_size() const {
  return resps_.size();
}
void BatchInsertResponse::clear_resps() {
  resps_.Clear();
}
const ::kvrpcpb::InsertResponse& BatchInsertResponse::resps(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchInsertResponse.resps)
  return resps_.Get(index);
}
::kvrpcpb::InsertResponse* BatchInsertResponse::mutable_resps(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchInsertResponse.resps)
  return resps_.Mutable(index);
}
::kvrpcpb::InsertResponse* BatchInsertResponse::add_resps() {
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchInsertResponse.resps)
  return resps_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::InsertResponse >*
BatchInsertResponse::mutable_resps() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchInsertResponse.resps)
  return &resps_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::InsertResponse >&
BatchInsertResponse::resps() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchInsertResponse.resps)
  return resps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsDeleteRequest::kHeaderFieldNumber;
const int DsDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsDeleteRequest::DsDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsDeleteRequest)
}
DsDeleteRequest::DsDeleteRequest(const DsDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::DeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsDeleteRequest)
}

void DsDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsDeleteRequest::~DsDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsDeleteRequest)
  SharedDtor();
}

void DsDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsDeleteRequest& DsDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsDeleteRequest* DsDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsDeleteRequest* n = new DsDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.DeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsDeleteRequest)
  return false;
#undef DO_
}

void DsDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.DeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsDeleteRequest)
}

::google::protobuf::uint8* DsDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.DeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsDeleteRequest)
  return target;
}

size_t DsDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.DeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsDeleteRequest)
    MergeFrom(*source);
  }
}

void DsDeleteRequest::MergeFrom(const DsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::DeleteRequest::MergeFrom(from.req());
  }
}

void DsDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsDeleteRequest::CopyFrom(const DsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsDeleteRequest::IsInitialized() const {
  return true;
}

void DsDeleteRequest::Swap(DsDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsDeleteRequest::InternalSwap(DsDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsDeleteRequest.header)
}

// .kvrpcpb.DeleteRequest req = 2;
bool DsDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::DeleteRequest& DsDeleteRequest::req() const {
  const ::kvrpcpb::DeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::DeleteRequest*>(
      &::kvrpcpb::_DeleteRequest_default_instance_);
}
::kvrpcpb::DeleteRequest* DsDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsDeleteRequest.req)
  return req_;
}
::kvrpcpb::DeleteRequest* DsDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsDeleteRequest.req)
  
  ::kvrpcpb::DeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsDeleteRequest::set_allocated_req(::kvrpcpb::DeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsDeleteResponse::kHeaderFieldNumber;
const int DsDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsDeleteResponse::DsDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsDeleteResponse)
}
DsDeleteResponse::DsDeleteResponse(const DsDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::DeleteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsDeleteResponse)
}

void DsDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsDeleteResponse::~DsDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsDeleteResponse)
  SharedDtor();
}

void DsDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsDeleteResponse& DsDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsDeleteResponse* DsDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsDeleteResponse* n = new DsDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.DeleteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsDeleteResponse)
  return false;
#undef DO_
}

void DsDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.DeleteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsDeleteResponse)
}

::google::protobuf::uint8* DsDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.DeleteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsDeleteResponse)
  return target;
}

size_t DsDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.DeleteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsDeleteResponse)
    MergeFrom(*source);
  }
}

void DsDeleteResponse::MergeFrom(const DsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::DeleteResponse::MergeFrom(from.resp());
  }
}

void DsDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsDeleteResponse::CopyFrom(const DsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsDeleteResponse::IsInitialized() const {
  return true;
}

void DsDeleteResponse::Swap(DsDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsDeleteResponse::InternalSwap(DsDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsDeleteResponse.header)
}

// .kvrpcpb.DeleteResponse resp = 2;
bool DsDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::DeleteResponse& DsDeleteResponse::resp() const {
  const ::kvrpcpb::DeleteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::DeleteResponse*>(
      &::kvrpcpb::_DeleteResponse_default_instance_);
}
::kvrpcpb::DeleteResponse* DsDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsDeleteResponse.resp)
  return resp_;
}
::kvrpcpb::DeleteResponse* DsDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsDeleteResponse.resp)
  
  ::kvrpcpb::DeleteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsDeleteResponse::set_allocated_resp(::kvrpcpb::DeleteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kKeyFieldNumber;
const int DeleteRequest::kScopeFieldNumber;
const int DeleteRequest::kWhereFiltersFieldNumber;
const int DeleteRequest::kIndexsFieldNumber;
const int DeleteRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      where_filters_(from.where_filters_),
      indexs_(from.indexs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    scope_ = new ::kvrpcpb::Scope(*from.scope_);
  } else {
    scope_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scope_;
  if (this != internal_default_instance()) delete timestamp_;
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRequest& DeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteRequest* DeleteRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRequest* n = new DeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  where_filters_.Clear();
  indexs_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) {
    delete scope_;
  }
  scope_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Scope scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.Match where_filters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_where_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 indexs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_indexs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_indexs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scope_, output);
  }

  // repeated .kvrpcpb.Match where_filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->where_filters(static_cast<int>(i)), output);
  }

  // repeated uint64 indexs = 4;
  if (this->indexs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _indexs_cached_byte_size_));
  }
  for (int i = 0, n = this->indexs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->indexs(i), output);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scope_, deterministic, target);
  }

  // repeated .kvrpcpb.Match where_filters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->where_filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->where_filters(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint64 indexs = 4;
  if (this->indexs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _indexs_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->indexs_, target);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.Match where_filters = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->where_filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->where_filters(static_cast<int>(i)));
    }
  }

  // repeated uint64 indexs = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->indexs_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _indexs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.Scope scope = 2;
  if (this->has_scope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scope_);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  where_filters_.MergeFrom(from.where_filters_);
  indexs_.MergeFrom(from.indexs_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_scope()) {
    mutable_scope()->::kvrpcpb::Scope::MergeFrom(from.scope());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  where_filters_.InternalSwap(&other->where_filters_);
  indexs_.InternalSwap(&other->indexs_);
  key_.Swap(&other->key_);
  swap(scope_, other->scope_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRequest

// bytes key = 1;
void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRequest.key)
  return key_.GetNoArena();
}
void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteRequest.key)
}
#if LANG_CXX11
void DeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.DeleteRequest.key)
}
#endif
void DeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.DeleteRequest.key)
}
void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.DeleteRequest.key)
}
::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRequest.key)
}

// .kvrpcpb.Scope scope = 2;
bool DeleteRequest::has_scope() const {
  return this != internal_default_instance() && scope_ != NULL;
}
void DeleteRequest::clear_scope() {
  if (GetArenaNoVirtual() == NULL && scope_ != NULL) delete scope_;
  scope_ = NULL;
}
const ::kvrpcpb::Scope& DeleteRequest::scope() const {
  const ::kvrpcpb::Scope* p = scope_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRequest.scope)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::Scope*>(
      &::kvrpcpb::_Scope_default_instance_);
}
::kvrpcpb::Scope* DeleteRequest::mutable_scope() {
  
  if (scope_ == NULL) {
    scope_ = new ::kvrpcpb::Scope;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRequest.scope)
  return scope_;
}
::kvrpcpb::Scope* DeleteRequest::release_scope() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRequest.scope)
  
  ::kvrpcpb::Scope* temp = scope_;
  scope_ = NULL;
  return temp;
}
void DeleteRequest::set_allocated_scope(::kvrpcpb::Scope* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRequest.scope)
}

// repeated .kvrpcpb.Match where_filters = 3;
int DeleteRequest::where_filters_size() const {
  return where_filters_.size();
}
void DeleteRequest::clear_where_filters() {
  where_filters_.Clear();
}
const ::kvrpcpb::Match& DeleteRequest::where_filters(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRequest.where_filters)
  return where_filters_.Get(index);
}
::kvrpcpb::Match* DeleteRequest::mutable_where_filters(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRequest.where_filters)
  return where_filters_.Mutable(index);
}
::kvrpcpb::Match* DeleteRequest::add_where_filters() {
  // @@protoc_insertion_point(field_add:kvrpcpb.DeleteRequest.where_filters)
  return where_filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >*
DeleteRequest::mutable_where_filters() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.DeleteRequest.where_filters)
  return &where_filters_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Match >&
DeleteRequest::where_filters() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.DeleteRequest.where_filters)
  return where_filters_;
}

// repeated uint64 indexs = 4;
int DeleteRequest::indexs_size() const {
  return indexs_.size();
}
void DeleteRequest::clear_indexs() {
  indexs_.Clear();
}
::google::protobuf::uint64 DeleteRequest::indexs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRequest.indexs)
  return indexs_.Get(index);
}
void DeleteRequest::set_indexs(int index, ::google::protobuf::uint64 value) {
  indexs_.Set(index, value);
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteRequest.indexs)
}
void DeleteRequest::add_indexs(::google::protobuf::uint64 value) {
  indexs_.Add(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.DeleteRequest.indexs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DeleteRequest::indexs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.DeleteRequest.indexs)
  return indexs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DeleteRequest::mutable_indexs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.DeleteRequest.indexs)
  return &indexs_;
}

// .timestamp.Timestamp timestamp = 10;
bool DeleteRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void DeleteRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& DeleteRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* DeleteRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* DeleteRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void DeleteRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteResponse::kCodeFieldNumber;
const int DeleteResponse::kAffectedKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteResponse& DeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteResponse* DeleteResponse::New(::google::protobuf::Arena* arena) const {
  DeleteResponse* n = new DeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteResponse

// int32 code = 1;
void DeleteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 DeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteResponse.code)
  return code_;
}
void DeleteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteResponse.code)
}

// uint64 affected_keys = 2;
void DeleteResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DeleteResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteResponse.affected_keys)
  return affected_keys_;
}
void DeleteResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteResponse.affected_keys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kColumnIdFieldNumber;
const int Field::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Field)
}
Field::Field(const Field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  column_id_ = from.column_id_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Field)
}

void Field::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Field& Field::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 column_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &column_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 column_id = 1;
  if (this->column_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->column_id(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 column_id = 1;
  if (this->column_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->column_id(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint64 column_id = 1;
  if (this->column_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->column_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.column_id() != 0) {
    set_column_id(from.column_id());
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(column_id_, other->column_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// uint64 column_id = 1;
void Field::clear_column_id() {
  column_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Field::column_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Field.column_id)
  return column_id_;
}
void Field::set_column_id(::google::protobuf::uint64 value) {
  
  column_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Field.column_id)
}

// bytes value = 2;
void Field::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Field.value)
  return value_.GetNoArena();
}
void Field::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Field.value)
}
#if LANG_CXX11
void Field::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Field.value)
}
#endif
void Field::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Field.value)
}
void Field::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Field.value)
}
::std::string* Field::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Field.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Field.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Field::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Field.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisKeyValue::kKeyFieldNumber;
const int RedisKeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisKeyValue::RedisKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RedisKeyValue)
}
RedisKeyValue::RedisKeyValue(const RedisKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RedisKeyValue)
}

void RedisKeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RedisKeyValue::~RedisKeyValue() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RedisKeyValue)
  SharedDtor();
}

void RedisKeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisKeyValue::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisKeyValue& RedisKeyValue::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedisKeyValue* RedisKeyValue::New(::google::protobuf::Arena* arena) const {
  RedisKeyValue* n = new RedisKeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RedisKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RedisKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RedisKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RedisKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RedisKeyValue)
  return false;
#undef DO_
}

void RedisKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RedisKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RedisKeyValue)
}

::google::protobuf::uint8* RedisKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RedisKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RedisKeyValue)
  return target;
}

size_t RedisKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RedisKeyValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RedisKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisKeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RedisKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RedisKeyValue)
    MergeFrom(*source);
  }
}

void RedisKeyValue::MergeFrom(const RedisKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RedisKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RedisKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RedisKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisKeyValue::CopyFrom(const RedisKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RedisKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisKeyValue::IsInitialized() const {
  return true;
}

void RedisKeyValue::Swap(RedisKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisKeyValue::InternalSwap(RedisKeyValue* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisKeyValue::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisKeyValue

// bytes key = 1;
void RedisKeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedisKeyValue::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisKeyValue.key)
  return key_.GetNoArena();
}
void RedisKeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisKeyValue.key)
}
#if LANG_CXX11
void RedisKeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RedisKeyValue.key)
}
#endif
void RedisKeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RedisKeyValue.key)
}
void RedisKeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RedisKeyValue.key)
}
::std::string* RedisKeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RedisKeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RedisKeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisKeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RedisKeyValue.key)
}

// bytes value = 2;
void RedisKeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedisKeyValue::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisKeyValue.value)
  return value_.GetNoArena();
}
void RedisKeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisKeyValue.value)
}
#if LANG_CXX11
void RedisKeyValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RedisKeyValue.value)
}
#endif
void RedisKeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RedisKeyValue.value)
}
void RedisKeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RedisKeyValue.value)
}
::std::string* RedisKeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RedisKeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RedisKeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisKeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RedisKeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisDo::kKeyFieldNumber;
const int RedisDo::kValueFieldNumber;
const int RedisDo::kOpFieldNumber;
const int RedisDo::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisDo::RedisDo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RedisDo)
}
RedisDo::RedisDo(const RedisDo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&case__) -
    reinterpret_cast<char*>(&op_)) + sizeof(case__));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RedisDo)
}

void RedisDo::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case__) -
      reinterpret_cast<char*>(&op_)) + sizeof(case__));
  _cached_size_ = 0;
}

RedisDo::~RedisDo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RedisDo)
  SharedDtor();
}

void RedisDo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisDo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisDo::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedisDo& RedisDo::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedisDo* RedisDo::New(::google::protobuf::Arena* arena) const {
  RedisDo* n = new RedisDo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisDo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RedisDo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case__) -
      reinterpret_cast<char*>(&op_)) + sizeof(case__));
  _internal_metadata_.Clear();
}

bool RedisDo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RedisDo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Operation op = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::kvrpcpb::Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RedisDo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RedisDo)
  return false;
#undef DO_
}

void RedisDo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RedisDo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // .kvrpcpb.Operation op = 3;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RedisDo)
}

::google::protobuf::uint8* RedisDo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RedisDo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // .kvrpcpb.Operation op = 3;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RedisDo)
  return target;
}

size_t RedisDo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RedisDo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .kvrpcpb.Operation op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisDo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RedisDo)
  GOOGLE_DCHECK_NE(&from, this);
  const RedisDo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisDo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RedisDo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RedisDo)
    MergeFrom(*source);
  }
}

void RedisDo::MergeFrom(const RedisDo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RedisDo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void RedisDo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RedisDo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisDo::CopyFrom(const RedisDo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RedisDo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisDo::IsInitialized() const {
  return true;
}

void RedisDo::Swap(RedisDo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisDo::InternalSwap(RedisDo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(op_, other->op_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisDo::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisDo

// bytes key = 1;
void RedisDo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedisDo::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisDo.key)
  return key_.GetNoArena();
}
void RedisDo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisDo.key)
}
#if LANG_CXX11
void RedisDo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RedisDo.key)
}
#endif
void RedisDo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RedisDo.key)
}
void RedisDo::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RedisDo.key)
}
::std::string* RedisDo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RedisDo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisDo::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RedisDo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisDo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RedisDo.key)
}

// bytes value = 2;
void RedisDo::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedisDo::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisDo.value)
  return value_.GetNoArena();
}
void RedisDo::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisDo.value)
}
#if LANG_CXX11
void RedisDo::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RedisDo.value)
}
#endif
void RedisDo::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RedisDo.value)
}
void RedisDo::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RedisDo.value)
}
::std::string* RedisDo::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RedisDo.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisDo::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RedisDo.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisDo::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RedisDo.value)
}

// .kvrpcpb.Operation op = 3;
void RedisDo::clear_op() {
  op_ = 0;
}
::kvrpcpb::Operation RedisDo::op() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisDo.op)
  return static_cast< ::kvrpcpb::Operation >(op_);
}
void RedisDo::set_op(::kvrpcpb::Operation value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisDo.op)
}

// .kvrpcpb.ExistCase case = 4;
void RedisDo::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase RedisDo::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RedisDo.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void RedisDo::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RedisDo.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvSetRequest::kKvFieldNumber;
const int KvSetRequest::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvSetRequest::KvSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvSetRequest)
}
KvSetRequest::KvSetRequest(const KvSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kv()) {
    kv_ = new ::kvrpcpb::RedisKeyValue(*from.kv_);
  } else {
    kv_ = NULL;
  }
  case__ = from.case__;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvSetRequest)
}

void KvSetRequest::SharedCtor() {
  ::memset(&kv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case__) -
      reinterpret_cast<char*>(&kv_)) + sizeof(case__));
  _cached_size_ = 0;
}

KvSetRequest::~KvSetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvSetRequest)
  SharedDtor();
}

void KvSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete kv_;
}

void KvSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvSetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvSetRequest& KvSetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvSetRequest* KvSetRequest::New(::google::protobuf::Arena* arena) const {
  KvSetRequest* n = new KvSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kv_ != NULL) {
    delete kv_;
  }
  kv_ = NULL;
  case__ = 0;
  _internal_metadata_.Clear();
}

bool KvSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RedisKeyValue kv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvSetRequest)
  return false;
#undef DO_
}

void KvSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RedisKeyValue kv = 1;
  if (this->has_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kv_, output);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvSetRequest)
}

::google::protobuf::uint8* KvSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RedisKeyValue kv = 1;
  if (this->has_kv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kv_, deterministic, target);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvSetRequest)
  return target;
}

size_t KvSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RedisKeyValue kv = 1;
  if (this->has_kv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kv_);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvSetRequest)
    MergeFrom(*source);
  }
}

void KvSetRequest::MergeFrom(const KvSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kv()) {
    mutable_kv()->::kvrpcpb::RedisKeyValue::MergeFrom(from.kv());
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void KvSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvSetRequest::CopyFrom(const KvSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvSetRequest::IsInitialized() const {
  return true;
}

void KvSetRequest::Swap(KvSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvSetRequest::InternalSwap(KvSetRequest* other) {
  using std::swap;
  swap(kv_, other->kv_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvSetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvSetRequest

// .kvrpcpb.RedisKeyValue kv = 1;
bool KvSetRequest::has_kv() const {
  return this != internal_default_instance() && kv_ != NULL;
}
void KvSetRequest::clear_kv() {
  if (GetArenaNoVirtual() == NULL && kv_ != NULL) delete kv_;
  kv_ = NULL;
}
const ::kvrpcpb::RedisKeyValue& KvSetRequest::kv() const {
  const ::kvrpcpb::RedisKeyValue* p = kv_;
  // @@protoc_insertion_point(field_get:kvrpcpb.KvSetRequest.kv)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RedisKeyValue*>(
      &::kvrpcpb::_RedisKeyValue_default_instance_);
}
::kvrpcpb::RedisKeyValue* KvSetRequest::mutable_kv() {
  
  if (kv_ == NULL) {
    kv_ = new ::kvrpcpb::RedisKeyValue;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvSetRequest.kv)
  return kv_;
}
::kvrpcpb::RedisKeyValue* KvSetRequest::release_kv() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvSetRequest.kv)
  
  ::kvrpcpb::RedisKeyValue* temp = kv_;
  kv_ = NULL;
  return temp;
}
void KvSetRequest::set_allocated_kv(::kvrpcpb::RedisKeyValue* kv) {
  delete kv_;
  kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvSetRequest.kv)
}

// .kvrpcpb.ExistCase case = 2;
void KvSetRequest::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase KvSetRequest::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvSetRequest.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void KvSetRequest::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvSetRequest.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvSetResponse::kCodeFieldNumber;
const int KvSetResponse::kAffectedKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvSetResponse::KvSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvSetResponse)
}
KvSetResponse::KvSetResponse(const KvSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvSetResponse)
}

void KvSetResponse::SharedCtor() {
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvSetResponse::~KvSetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvSetResponse)
  SharedDtor();
}

void KvSetResponse::SharedDtor() {
}

void KvSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvSetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvSetResponse& KvSetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvSetResponse* KvSetResponse::New(::google::protobuf::Arena* arena) const {
  KvSetResponse* n = new KvSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvSetResponse)
  return false;
#undef DO_
}

void KvSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvSetResponse)
}

::google::protobuf::uint8* KvSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvSetResponse)
  return target;
}

size_t KvSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvSetResponse)
    MergeFrom(*source);
  }
}

void KvSetResponse::MergeFrom(const KvSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvSetResponse::CopyFrom(const KvSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvSetResponse::IsInitialized() const {
  return true;
}

void KvSetResponse::Swap(KvSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvSetResponse::InternalSwap(KvSetResponse* other) {
  using std::swap;
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvSetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvSetResponse

// int32 code = 1;
void KvSetResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvSetResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvSetResponse.code)
  return code_;
}
void KvSetResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvSetResponse.code)
}

// uint64 affected_keys = 2;
void KvSetResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KvSetResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvSetResponse.affected_keys)
  return affected_keys_;
}
void KvSetResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvSetResponse.affected_keys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvSetRequest::kHeaderFieldNumber;
const int DsKvSetRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvSetRequest::DsKvSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvSetRequest)
}
DsKvSetRequest::DsKvSetRequest(const DsKvSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvSetRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvSetRequest)
}

void DsKvSetRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvSetRequest::~DsKvSetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvSetRequest)
  SharedDtor();
}

void DsKvSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvSetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvSetRequest& DsKvSetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvSetRequest* DsKvSetRequest::New(::google::protobuf::Arena* arena) const {
  DsKvSetRequest* n = new DsKvSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvSetRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvSetRequest)
  return false;
#undef DO_
}

void DsKvSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvSetRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvSetRequest)
}

::google::protobuf::uint8* DsKvSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvSetRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvSetRequest)
  return target;
}

size_t DsKvSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvSetRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvSetRequest)
    MergeFrom(*source);
  }
}

void DsKvSetRequest::MergeFrom(const DsKvSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvSetRequest::MergeFrom(from.req());
  }
}

void DsKvSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvSetRequest::CopyFrom(const DsKvSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvSetRequest::IsInitialized() const {
  return true;
}

void DsKvSetRequest::Swap(DsKvSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvSetRequest::InternalSwap(DsKvSetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvSetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvSetRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvSetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvSetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvSetRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvSetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvSetRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvSetRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvSetRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvSetRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvSetRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvSetRequest.header)
}

// .kvrpcpb.KvSetRequest req = 2;
bool DsKvSetRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvSetRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvSetRequest& DsKvSetRequest::req() const {
  const ::kvrpcpb::KvSetRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvSetRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvSetRequest*>(
      &::kvrpcpb::_KvSetRequest_default_instance_);
}
::kvrpcpb::KvSetRequest* DsKvSetRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvSetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvSetRequest.req)
  return req_;
}
::kvrpcpb::KvSetRequest* DsKvSetRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvSetRequest.req)
  
  ::kvrpcpb::KvSetRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvSetRequest::set_allocated_req(::kvrpcpb::KvSetRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvSetRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvSetResponse::kHeaderFieldNumber;
const int DsKvSetResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvSetResponse::DsKvSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvSetResponse)
}
DsKvSetResponse::DsKvSetResponse(const DsKvSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvSetResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvSetResponse)
}

void DsKvSetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvSetResponse::~DsKvSetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvSetResponse)
  SharedDtor();
}

void DsKvSetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvSetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvSetResponse& DsKvSetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvSetResponse* DsKvSetResponse::New(::google::protobuf::Arena* arena) const {
  DsKvSetResponse* n = new DsKvSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvSetResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvSetResponse)
  return false;
#undef DO_
}

void DsKvSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvSetResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvSetResponse)
}

::google::protobuf::uint8* DsKvSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvSetResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvSetResponse)
  return target;
}

size_t DsKvSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvSetResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvSetResponse)
    MergeFrom(*source);
  }
}

void DsKvSetResponse::MergeFrom(const DsKvSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvSetResponse::MergeFrom(from.resp());
  }
}

void DsKvSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvSetResponse::CopyFrom(const DsKvSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvSetResponse::IsInitialized() const {
  return true;
}

void DsKvSetResponse::Swap(DsKvSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvSetResponse::InternalSwap(DsKvSetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvSetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvSetResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvSetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvSetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvSetResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvSetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvSetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvSetResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvSetResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvSetResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvSetResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvSetResponse.header)
}

// .kvrpcpb.KvSetResponse resp = 2;
bool DsKvSetResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvSetResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvSetResponse& DsKvSetResponse::resp() const {
  const ::kvrpcpb::KvSetResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvSetResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvSetResponse*>(
      &::kvrpcpb::_KvSetResponse_default_instance_);
}
::kvrpcpb::KvSetResponse* DsKvSetResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvSetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvSetResponse.resp)
  return resp_;
}
::kvrpcpb::KvSetResponse* DsKvSetResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvSetResponse.resp)
  
  ::kvrpcpb::KvSetResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvSetResponse::set_allocated_resp(::kvrpcpb::KvSetResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvSetResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvGetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvGetRequest::KvGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvGetRequest)
}
KvGetRequest::KvGetRequest(const KvGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvGetRequest)
}

void KvGetRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KvGetRequest::~KvGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvGetRequest)
  SharedDtor();
}

void KvGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvGetRequest& KvGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvGetRequest* KvGetRequest::New(::google::protobuf::Arena* arena) const {
  KvGetRequest* n = new KvGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KvGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvGetRequest)
  return false;
#undef DO_
}

void KvGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvGetRequest)
}

::google::protobuf::uint8* KvGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvGetRequest)
  return target;
}

size_t KvGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvGetRequest)
    MergeFrom(*source);
  }
}

void KvGetRequest::MergeFrom(const KvGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void KvGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvGetRequest::CopyFrom(const KvGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvGetRequest::IsInitialized() const {
  return true;
}

void KvGetRequest::Swap(KvGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvGetRequest::InternalSwap(KvGetRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvGetRequest

// bytes key = 1;
void KvGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvGetRequest.key)
  return key_.GetNoArena();
}
void KvGetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvGetRequest.key)
}
#if LANG_CXX11
void KvGetRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvGetRequest.key)
}
#endif
void KvGetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvGetRequest.key)
}
void KvGetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvGetRequest.key)
}
::std::string* KvGetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvGetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvGetRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvGetResponse::kCodeFieldNumber;
const int KvGetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvGetResponse::KvGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvGetResponse)
}
KvGetResponse::KvGetResponse(const KvGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvGetResponse)
}

void KvGetResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

KvGetResponse::~KvGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvGetResponse)
  SharedDtor();
}

void KvGetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvGetResponse& KvGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvGetResponse* KvGetResponse::New(::google::protobuf::Arena* arena) const {
  KvGetResponse* n = new KvGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvGetResponse)
  return false;
#undef DO_
}

void KvGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvGetResponse)
}

::google::protobuf::uint8* KvGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvGetResponse)
  return target;
}

size_t KvGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvGetResponse)
    MergeFrom(*source);
  }
}

void KvGetResponse::MergeFrom(const KvGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvGetResponse::CopyFrom(const KvGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvGetResponse::IsInitialized() const {
  return true;
}

void KvGetResponse::Swap(KvGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvGetResponse::InternalSwap(KvGetResponse* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvGetResponse

// int32 code = 1;
void KvGetResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvGetResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvGetResponse.code)
  return code_;
}
void KvGetResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvGetResponse.code)
}

// bytes value = 2;
void KvGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvGetResponse.value)
  return value_.GetNoArena();
}
void KvGetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvGetResponse.value)
}
#if LANG_CXX11
void KvGetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvGetResponse.value)
}
#endif
void KvGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvGetResponse.value)
}
void KvGetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvGetResponse.value)
}
::std::string* KvGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvGetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvGetResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvGetRequest::kHeaderFieldNumber;
const int DsKvGetRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvGetRequest::DsKvGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvGetRequest)
}
DsKvGetRequest::DsKvGetRequest(const DsKvGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvGetRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvGetRequest)
}

void DsKvGetRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvGetRequest::~DsKvGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvGetRequest)
  SharedDtor();
}

void DsKvGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvGetRequest& DsKvGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvGetRequest* DsKvGetRequest::New(::google::protobuf::Arena* arena) const {
  DsKvGetRequest* n = new DsKvGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvGetRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvGetRequest)
  return false;
#undef DO_
}

void DsKvGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvGetRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvGetRequest)
}

::google::protobuf::uint8* DsKvGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvGetRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvGetRequest)
  return target;
}

size_t DsKvGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvGetRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvGetRequest)
    MergeFrom(*source);
  }
}

void DsKvGetRequest::MergeFrom(const DsKvGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvGetRequest::MergeFrom(from.req());
  }
}

void DsKvGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvGetRequest::CopyFrom(const DsKvGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvGetRequest::IsInitialized() const {
  return true;
}

void DsKvGetRequest::Swap(DsKvGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvGetRequest::InternalSwap(DsKvGetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvGetRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvGetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvGetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvGetRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvGetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvGetRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvGetRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvGetRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvGetRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvGetRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvGetRequest.header)
}

// .kvrpcpb.KvGetRequest req = 2;
bool DsKvGetRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvGetRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvGetRequest& DsKvGetRequest::req() const {
  const ::kvrpcpb::KvGetRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvGetRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvGetRequest*>(
      &::kvrpcpb::_KvGetRequest_default_instance_);
}
::kvrpcpb::KvGetRequest* DsKvGetRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvGetRequest.req)
  return req_;
}
::kvrpcpb::KvGetRequest* DsKvGetRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvGetRequest.req)
  
  ::kvrpcpb::KvGetRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvGetRequest::set_allocated_req(::kvrpcpb::KvGetRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvGetRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvGetResponse::kHeaderFieldNumber;
const int DsKvGetResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvGetResponse::DsKvGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvGetResponse)
}
DsKvGetResponse::DsKvGetResponse(const DsKvGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvGetResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvGetResponse)
}

void DsKvGetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvGetResponse::~DsKvGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvGetResponse)
  SharedDtor();
}

void DsKvGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvGetResponse& DsKvGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvGetResponse* DsKvGetResponse::New(::google::protobuf::Arena* arena) const {
  DsKvGetResponse* n = new DsKvGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvGetResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvGetResponse)
  return false;
#undef DO_
}

void DsKvGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvGetResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvGetResponse)
}

::google::protobuf::uint8* DsKvGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvGetResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvGetResponse)
  return target;
}

size_t DsKvGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvGetResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvGetResponse)
    MergeFrom(*source);
  }
}

void DsKvGetResponse::MergeFrom(const DsKvGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvGetResponse::MergeFrom(from.resp());
  }
}

void DsKvGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvGetResponse::CopyFrom(const DsKvGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvGetResponse::IsInitialized() const {
  return true;
}

void DsKvGetResponse::Swap(DsKvGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvGetResponse::InternalSwap(DsKvGetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvGetResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvGetResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvGetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvGetResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvGetResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvGetResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvGetResponse.header)
}

// .kvrpcpb.KvGetResponse resp = 2;
bool DsKvGetResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvGetResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvGetResponse& DsKvGetResponse::resp() const {
  const ::kvrpcpb::KvGetResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvGetResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvGetResponse*>(
      &::kvrpcpb::_KvGetResponse_default_instance_);
}
::kvrpcpb::KvGetResponse* DsKvGetResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvGetResponse.resp)
  return resp_;
}
::kvrpcpb::KvGetResponse* DsKvGetResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvGetResponse.resp)
  
  ::kvrpcpb::KvGetResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvGetResponse::set_allocated_resp(::kvrpcpb::KvGetResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvGetResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchSetRequest::kKvsFieldNumber;
const int KvBatchSetRequest::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchSetRequest::KvBatchSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchSetRequest)
}
KvBatchSetRequest::KvBatchSetRequest(const KvBatchSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  case__ = from.case__;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchSetRequest)
}

void KvBatchSetRequest::SharedCtor() {
  case__ = 0;
  _cached_size_ = 0;
}

KvBatchSetRequest::~KvBatchSetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchSetRequest)
  SharedDtor();
}

void KvBatchSetRequest::SharedDtor() {
}

void KvBatchSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchSetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchSetRequest& KvBatchSetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchSetRequest* KvBatchSetRequest::New(::google::protobuf::Arena* arena) const {
  KvBatchSetRequest* n = new KvBatchSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  case__ = 0;
  _internal_metadata_.Clear();
}

bool KvBatchSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.RedisKeyValue kvs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchSetRequest)
  return false;
#undef DO_
}

void KvBatchSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.RedisKeyValue kvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kvs(static_cast<int>(i)), output);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchSetRequest)
}

::google::protobuf::uint8* KvBatchSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.RedisKeyValue kvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->kvs(static_cast<int>(i)), deterministic, target);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchSetRequest)
  return target;
}

size_t KvBatchSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.RedisKeyValue kvs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(static_cast<int>(i)));
    }
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchSetRequest)
    MergeFrom(*source);
  }
}

void KvBatchSetRequest::MergeFrom(const KvBatchSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void KvBatchSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchSetRequest::CopyFrom(const KvBatchSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchSetRequest::IsInitialized() const {
  return true;
}

void KvBatchSetRequest::Swap(KvBatchSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchSetRequest::InternalSwap(KvBatchSetRequest* other) {
  using std::swap;
  kvs_.InternalSwap(&other->kvs_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchSetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchSetRequest

// repeated .kvrpcpb.RedisKeyValue kvs = 1;
int KvBatchSetRequest::kvs_size() const {
  return kvs_.size();
}
void KvBatchSetRequest::clear_kvs() {
  kvs_.Clear();
}
const ::kvrpcpb::RedisKeyValue& KvBatchSetRequest::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchSetRequest.kvs)
  return kvs_.Get(index);
}
::kvrpcpb::RedisKeyValue* KvBatchSetRequest::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvBatchSetRequest.kvs)
  return kvs_.Mutable(index);
}
::kvrpcpb::RedisKeyValue* KvBatchSetRequest::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchSetRequest.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >*
KvBatchSetRequest::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvBatchSetRequest.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >&
KvBatchSetRequest::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvBatchSetRequest.kvs)
  return kvs_;
}

// .kvrpcpb.ExistCase case = 2;
void KvBatchSetRequest::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase KvBatchSetRequest::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchSetRequest.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void KvBatchSetRequest::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchSetRequest.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchSetResponse::kCodeFieldNumber;
const int KvBatchSetResponse::kAffectedKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchSetResponse::KvBatchSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchSetResponse)
}
KvBatchSetResponse::KvBatchSetResponse(const KvBatchSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchSetResponse)
}

void KvBatchSetResponse::SharedCtor() {
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvBatchSetResponse::~KvBatchSetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchSetResponse)
  SharedDtor();
}

void KvBatchSetResponse::SharedDtor() {
}

void KvBatchSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchSetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchSetResponse& KvBatchSetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchSetResponse* KvBatchSetResponse::New(::google::protobuf::Arena* arena) const {
  KvBatchSetResponse* n = new KvBatchSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvBatchSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchSetResponse)
  return false;
#undef DO_
}

void KvBatchSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchSetResponse)
}

::google::protobuf::uint8* KvBatchSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchSetResponse)
  return target;
}

size_t KvBatchSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchSetResponse)
    MergeFrom(*source);
  }
}

void KvBatchSetResponse::MergeFrom(const KvBatchSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvBatchSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchSetResponse::CopyFrom(const KvBatchSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchSetResponse::IsInitialized() const {
  return true;
}

void KvBatchSetResponse::Swap(KvBatchSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchSetResponse::InternalSwap(KvBatchSetResponse* other) {
  using std::swap;
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchSetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchSetResponse

// int32 code = 1;
void KvBatchSetResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvBatchSetResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchSetResponse.code)
  return code_;
}
void KvBatchSetResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchSetResponse.code)
}

// uint64 affected_keys = 2;
void KvBatchSetResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KvBatchSetResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchSetResponse.affected_keys)
  return affected_keys_;
}
void KvBatchSetResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchSetResponse.affected_keys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchSetRequest::kHeaderFieldNumber;
const int DsKvBatchSetRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchSetRequest::DsKvBatchSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchSetRequest)
}
DsKvBatchSetRequest::DsKvBatchSetRequest(const DsKvBatchSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvBatchSetRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchSetRequest)
}

void DsKvBatchSetRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvBatchSetRequest::~DsKvBatchSetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchSetRequest)
  SharedDtor();
}

void DsKvBatchSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvBatchSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchSetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchSetRequest& DsKvBatchSetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchSetRequest* DsKvBatchSetRequest::New(::google::protobuf::Arena* arena) const {
  DsKvBatchSetRequest* n = new DsKvBatchSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchSetRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchSetRequest)
  return false;
#undef DO_
}

void DsKvBatchSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchSetRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchSetRequest)
}

::google::protobuf::uint8* DsKvBatchSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchSetRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchSetRequest)
  return target;
}

size_t DsKvBatchSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchSetRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchSetRequest)
    MergeFrom(*source);
  }
}

void DsKvBatchSetRequest::MergeFrom(const DsKvBatchSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvBatchSetRequest::MergeFrom(from.req());
  }
}

void DsKvBatchSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchSetRequest::CopyFrom(const DsKvBatchSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchSetRequest::IsInitialized() const {
  return true;
}

void DsKvBatchSetRequest::Swap(DsKvBatchSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchSetRequest::InternalSwap(DsKvBatchSetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchSetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchSetRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvBatchSetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchSetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvBatchSetRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchSetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvBatchSetRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchSetRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvBatchSetRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchSetRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchSetRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchSetRequest.header)
}

// .kvrpcpb.KvBatchSetRequest req = 2;
bool DsKvBatchSetRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvBatchSetRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvBatchSetRequest& DsKvBatchSetRequest::req() const {
  const ::kvrpcpb::KvBatchSetRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchSetRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchSetRequest*>(
      &::kvrpcpb::_KvBatchSetRequest_default_instance_);
}
::kvrpcpb::KvBatchSetRequest* DsKvBatchSetRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvBatchSetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchSetRequest.req)
  return req_;
}
::kvrpcpb::KvBatchSetRequest* DsKvBatchSetRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchSetRequest.req)
  
  ::kvrpcpb::KvBatchSetRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvBatchSetRequest::set_allocated_req(::kvrpcpb::KvBatchSetRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchSetRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchSetResponse::kHeaderFieldNumber;
const int DsKvBatchSetResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchSetResponse::DsKvBatchSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchSetResponse)
}
DsKvBatchSetResponse::DsKvBatchSetResponse(const DsKvBatchSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvBatchSetResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchSetResponse)
}

void DsKvBatchSetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvBatchSetResponse::~DsKvBatchSetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchSetResponse)
  SharedDtor();
}

void DsKvBatchSetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvBatchSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchSetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchSetResponse& DsKvBatchSetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchSetResponse* DsKvBatchSetResponse::New(::google::protobuf::Arena* arena) const {
  DsKvBatchSetResponse* n = new DsKvBatchSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchSetResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchSetResponse)
  return false;
#undef DO_
}

void DsKvBatchSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchSetResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchSetResponse)
}

::google::protobuf::uint8* DsKvBatchSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchSetResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchSetResponse)
  return target;
}

size_t DsKvBatchSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchSetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchSetResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchSetResponse)
    MergeFrom(*source);
  }
}

void DsKvBatchSetResponse::MergeFrom(const DsKvBatchSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvBatchSetResponse::MergeFrom(from.resp());
  }
}

void DsKvBatchSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchSetResponse::CopyFrom(const DsKvBatchSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchSetResponse::IsInitialized() const {
  return true;
}

void DsKvBatchSetResponse::Swap(DsKvBatchSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchSetResponse::InternalSwap(DsKvBatchSetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchSetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchSetResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvBatchSetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchSetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvBatchSetResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchSetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvBatchSetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchSetResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvBatchSetResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchSetResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchSetResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchSetResponse.header)
}

// .kvrpcpb.KvBatchSetResponse resp = 2;
bool DsKvBatchSetResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvBatchSetResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvBatchSetResponse& DsKvBatchSetResponse::resp() const {
  const ::kvrpcpb::KvBatchSetResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchSetResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchSetResponse*>(
      &::kvrpcpb::_KvBatchSetResponse_default_instance_);
}
::kvrpcpb::KvBatchSetResponse* DsKvBatchSetResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvBatchSetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchSetResponse.resp)
  return resp_;
}
::kvrpcpb::KvBatchSetResponse* DsKvBatchSetResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchSetResponse.resp)
  
  ::kvrpcpb::KvBatchSetResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvBatchSetResponse::set_allocated_resp(::kvrpcpb::KvBatchSetResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchSetResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchGetRequest::kCodeFieldNumber;
const int KvBatchGetRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchGetRequest::KvBatchGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchGetRequest)
}
KvBatchGetRequest::KvBatchGetRequest(const KvBatchGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchGetRequest)
}

void KvBatchGetRequest::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvBatchGetRequest::~KvBatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchGetRequest)
  SharedDtor();
}

void KvBatchGetRequest::SharedDtor() {
}

void KvBatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchGetRequest& KvBatchGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchGetRequest* KvBatchGetRequest::New(::google::protobuf::Arena* arena) const {
  KvBatchGetRequest* n = new KvBatchGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvBatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchGetRequest)
  return false;
#undef DO_
}

void KvBatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchGetRequest)
}

::google::protobuf::uint8* KvBatchGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchGetRequest)
  return target;
}

size_t KvBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchGetRequest)
    MergeFrom(*source);
  }
}

void KvBatchGetRequest::MergeFrom(const KvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvBatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetRequest::CopyFrom(const KvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetRequest::IsInitialized() const {
  return true;
}

void KvBatchGetRequest::Swap(KvBatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchGetRequest::InternalSwap(KvBatchGetRequest* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchGetRequest

// int32 code = 1;
void KvBatchGetRequest::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvBatchGetRequest::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchGetRequest.code)
  return code_;
}
void KvBatchGetRequest::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchGetRequest.code)
}

// repeated bytes keys = 2;
int KvBatchGetRequest::keys_size() const {
  return keys_.size();
}
void KvBatchGetRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& KvBatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchGetRequest.keys)
  return keys_.Get(index);
}
::std::string* KvBatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvBatchGetRequest.keys)
  return keys_.Mutable(index);
}
void KvBatchGetRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void KvBatchGetRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchGetRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void KvBatchGetRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvBatchGetRequest.keys)
}
void KvBatchGetRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvBatchGetRequest.keys)
}
::std::string* KvBatchGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.KvBatchGetRequest.keys)
  return keys_.Add();
}
void KvBatchGetRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchGetRequest.keys)
}
#if LANG_CXX11
void KvBatchGetRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchGetRequest.keys)
}
#endif
void KvBatchGetRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.KvBatchGetRequest.keys)
}
void KvBatchGetRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.KvBatchGetRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
KvBatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvBatchGetRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
KvBatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvBatchGetRequest.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchGetResponse::kCodeFieldNumber;
const int KvBatchGetResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchGetResponse::KvBatchGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchGetResponse)
}
KvBatchGetResponse::KvBatchGetResponse(const KvBatchGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchGetResponse)
}

void KvBatchGetResponse::SharedCtor() {
  code_ = 0;
  _cached_size_ = 0;
}

KvBatchGetResponse::~KvBatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchGetResponse)
  SharedDtor();
}

void KvBatchGetResponse::SharedDtor() {
}

void KvBatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchGetResponse& KvBatchGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchGetResponse* KvBatchGetResponse::New(::google::protobuf::Arena* arena) const {
  KvBatchGetResponse* n = new KvBatchGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  code_ = 0;
  _internal_metadata_.Clear();
}

bool KvBatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.RedisKeyValue kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchGetResponse)
  return false;
#undef DO_
}

void KvBatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .kvrpcpb.RedisKeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchGetResponse)
}

::google::protobuf::uint8* KvBatchGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .kvrpcpb.RedisKeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchGetResponse)
  return target;
}

size_t KvBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.RedisKeyValue kvs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(static_cast<int>(i)));
    }
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchGetResponse)
    MergeFrom(*source);
  }
}

void KvBatchGetResponse::MergeFrom(const KvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvBatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchGetResponse::CopyFrom(const KvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetResponse::IsInitialized() const {
  return true;
}

void KvBatchGetResponse::Swap(KvBatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchGetResponse::InternalSwap(KvBatchGetResponse* other) {
  using std::swap;
  kvs_.InternalSwap(&other->kvs_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchGetResponse

// int32 code = 1;
void KvBatchGetResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvBatchGetResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchGetResponse.code)
  return code_;
}
void KvBatchGetResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchGetResponse.code)
}

// repeated .kvrpcpb.RedisKeyValue kvs = 2;
int KvBatchGetResponse::kvs_size() const {
  return kvs_.size();
}
void KvBatchGetResponse::clear_kvs() {
  kvs_.Clear();
}
const ::kvrpcpb::RedisKeyValue& KvBatchGetResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchGetResponse.kvs)
  return kvs_.Get(index);
}
::kvrpcpb::RedisKeyValue* KvBatchGetResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvBatchGetResponse.kvs)
  return kvs_.Mutable(index);
}
::kvrpcpb::RedisKeyValue* KvBatchGetResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchGetResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >*
KvBatchGetResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvBatchGetResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >&
KvBatchGetResponse::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvBatchGetResponse.kvs)
  return kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchGetRequest::kHeaderFieldNumber;
const int DsKvBatchGetRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchGetRequest::DsKvBatchGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchGetRequest)
}
DsKvBatchGetRequest::DsKvBatchGetRequest(const DsKvBatchGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvBatchGetRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchGetRequest)
}

void DsKvBatchGetRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvBatchGetRequest::~DsKvBatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchGetRequest)
  SharedDtor();
}

void DsKvBatchGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvBatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchGetRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchGetRequest& DsKvBatchGetRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchGetRequest* DsKvBatchGetRequest::New(::google::protobuf::Arena* arena) const {
  DsKvBatchGetRequest* n = new DsKvBatchGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchGetRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchGetRequest)
  return false;
#undef DO_
}

void DsKvBatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchGetRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchGetRequest)
}

::google::protobuf::uint8* DsKvBatchGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchGetRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchGetRequest)
  return target;
}

size_t DsKvBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchGetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchGetRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchGetRequest)
    MergeFrom(*source);
  }
}

void DsKvBatchGetRequest::MergeFrom(const DsKvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvBatchGetRequest::MergeFrom(from.req());
  }
}

void DsKvBatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchGetRequest::CopyFrom(const DsKvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchGetRequest::IsInitialized() const {
  return true;
}

void DsKvBatchGetRequest::Swap(DsKvBatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchGetRequest::InternalSwap(DsKvBatchGetRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchGetRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchGetRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvBatchGetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchGetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvBatchGetRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchGetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvBatchGetRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchGetRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvBatchGetRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchGetRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchGetRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchGetRequest.header)
}

// .kvrpcpb.KvBatchGetRequest req = 2;
bool DsKvBatchGetRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvBatchGetRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvBatchGetRequest& DsKvBatchGetRequest::req() const {
  const ::kvrpcpb::KvBatchGetRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchGetRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchGetRequest*>(
      &::kvrpcpb::_KvBatchGetRequest_default_instance_);
}
::kvrpcpb::KvBatchGetRequest* DsKvBatchGetRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvBatchGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchGetRequest.req)
  return req_;
}
::kvrpcpb::KvBatchGetRequest* DsKvBatchGetRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchGetRequest.req)
  
  ::kvrpcpb::KvBatchGetRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvBatchGetRequest::set_allocated_req(::kvrpcpb::KvBatchGetRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchGetRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchGetResponse::kHeaderFieldNumber;
const int DsKvBatchGetResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchGetResponse::DsKvBatchGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchGetResponse)
}
DsKvBatchGetResponse::DsKvBatchGetResponse(const DsKvBatchGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvBatchGetResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchGetResponse)
}

void DsKvBatchGetResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvBatchGetResponse::~DsKvBatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchGetResponse)
  SharedDtor();
}

void DsKvBatchGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvBatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchGetResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchGetResponse& DsKvBatchGetResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchGetResponse* DsKvBatchGetResponse::New(::google::protobuf::Arena* arena) const {
  DsKvBatchGetResponse* n = new DsKvBatchGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchGetResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchGetResponse)
  return false;
#undef DO_
}

void DsKvBatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchGetResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchGetResponse)
}

::google::protobuf::uint8* DsKvBatchGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchGetResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchGetResponse)
  return target;
}

size_t DsKvBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchGetResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchGetResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchGetResponse)
    MergeFrom(*source);
  }
}

void DsKvBatchGetResponse::MergeFrom(const DsKvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvBatchGetResponse::MergeFrom(from.resp());
  }
}

void DsKvBatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchGetResponse::CopyFrom(const DsKvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchGetResponse::IsInitialized() const {
  return true;
}

void DsKvBatchGetResponse::Swap(DsKvBatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchGetResponse::InternalSwap(DsKvBatchGetResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchGetResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchGetResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvBatchGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvBatchGetResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchGetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvBatchGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchGetResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvBatchGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchGetResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchGetResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchGetResponse.header)
}

// .kvrpcpb.KvBatchGetResponse resp = 2;
bool DsKvBatchGetResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvBatchGetResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvBatchGetResponse& DsKvBatchGetResponse::resp() const {
  const ::kvrpcpb::KvBatchGetResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchGetResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchGetResponse*>(
      &::kvrpcpb::_KvBatchGetResponse_default_instance_);
}
::kvrpcpb::KvBatchGetResponse* DsKvBatchGetResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvBatchGetResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchGetResponse.resp)
  return resp_;
}
::kvrpcpb::KvBatchGetResponse* DsKvBatchGetResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchGetResponse.resp)
  
  ::kvrpcpb::KvBatchGetResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvBatchGetResponse::set_allocated_resp(::kvrpcpb::KvBatchGetResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchGetResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvScanRequest::kStartFieldNumber;
const int KvScanRequest::kLimitFieldNumber;
const int KvScanRequest::kCountOnlyFieldNumber;
const int KvScanRequest::kKeyOnlyFieldNumber;
const int KvScanRequest::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvScanRequest::KvScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvScanRequest)
}
KvScanRequest::KvScanRequest(const KvScanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  ::memcpy(&max_count_, &from.max_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_only_) -
    reinterpret_cast<char*>(&max_count_)) + sizeof(key_only_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvScanRequest)
}

void KvScanRequest::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_only_) -
      reinterpret_cast<char*>(&max_count_)) + sizeof(key_only_));
  _cached_size_ = 0;
}

KvScanRequest::~KvScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvScanRequest)
  SharedDtor();
}

void KvScanRequest::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvScanRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvScanRequest& KvScanRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvScanRequest* KvScanRequest::New(::google::protobuf::Arena* arena) const {
  KvScanRequest* n = new KvScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_only_) -
      reinterpret_cast<char*>(&max_count_)) + sizeof(key_only_));
  _internal_metadata_.Clear();
}

bool KvScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool count_only = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &count_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool key_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvScanRequest)
  return false;
#undef DO_
}

void KvScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->limit(), output);
  }

  // bool count_only = 3;
  if (this->count_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->count_only(), output);
  }

  // bool key_only = 4;
  if (this->key_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->key_only(), output);
  }

  // int64 max_count = 5;
  if (this->max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvScanRequest)
}

::google::protobuf::uint8* KvScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->limit(), target);
  }

  // bool count_only = 3;
  if (this->count_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->count_only(), target);
  }

  // bool key_only = 4;
  if (this->key_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->key_only(), target);
  }

  // int64 max_count = 5;
  if (this->max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvScanRequest)
  return target;
}

size_t KvScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvScanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->limit());
  }

  // int64 max_count = 5;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_count());
  }

  // bool count_only = 3;
  if (this->count_only() != 0) {
    total_size += 1 + 1;
  }

  // bool key_only = 4;
  if (this->key_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvScanRequest)
    MergeFrom(*source);
  }
}

void KvScanRequest::MergeFrom(const KvScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  if (from.max_count() != 0) {
    set_max_count(from.max_count());
  }
  if (from.count_only() != 0) {
    set_count_only(from.count_only());
  }
  if (from.key_only() != 0) {
    set_key_only(from.key_only());
  }
}

void KvScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvScanRequest::CopyFrom(const KvScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvScanRequest::IsInitialized() const {
  return true;
}

void KvScanRequest::Swap(KvScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvScanRequest::InternalSwap(KvScanRequest* other) {
  using std::swap;
  start_.Swap(&other->start_);
  limit_.Swap(&other->limit_);
  swap(max_count_, other->max_count_);
  swap(count_only_, other->count_only_);
  swap(key_only_, other->key_only_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvScanRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvScanRequest

// bytes start = 1;
void KvScanRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvScanRequest::start() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanRequest.start)
  return start_.GetNoArena();
}
void KvScanRequest::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanRequest.start)
}
#if LANG_CXX11
void KvScanRequest::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvScanRequest.start)
}
#endif
void KvScanRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvScanRequest.start)
}
void KvScanRequest::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvScanRequest.start)
}
::std::string* KvScanRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvScanRequest.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvScanRequest::release_start() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvScanRequest.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvScanRequest::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvScanRequest.start)
}

// bytes limit = 2;
void KvScanRequest::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanRequest.limit)
  return limit_.GetNoArena();
}
void KvScanRequest::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanRequest.limit)
}
#if LANG_CXX11
void KvScanRequest::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvScanRequest.limit)
}
#endif
void KvScanRequest::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvScanRequest.limit)
}
void KvScanRequest::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvScanRequest.limit)
}
::std::string* KvScanRequest::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvScanRequest.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvScanRequest::release_limit() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvScanRequest.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvScanRequest::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvScanRequest.limit)
}

// bool count_only = 3;
void KvScanRequest::clear_count_only() {
  count_only_ = false;
}
bool KvScanRequest::count_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanRequest.count_only)
  return count_only_;
}
void KvScanRequest::set_count_only(bool value) {
  
  count_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanRequest.count_only)
}

// bool key_only = 4;
void KvScanRequest::clear_key_only() {
  key_only_ = false;
}
bool KvScanRequest::key_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanRequest.key_only)
  return key_only_;
}
void KvScanRequest::set_key_only(bool value) {
  
  key_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanRequest.key_only)
}

// int64 max_count = 5;
void KvScanRequest::clear_max_count() {
  max_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 KvScanRequest::max_count() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanRequest.max_count)
  return max_count_;
}
void KvScanRequest::set_max_count(::google::protobuf::int64 value) {
  
  max_count_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanRequest.max_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvScanResponse::kCodeFieldNumber;
const int KvScanResponse::kCountFieldNumber;
const int KvScanResponse::kKvsFieldNumber;
const int KvScanResponse::kLastKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvScanResponse::KvScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvScanResponse)
}
KvScanResponse::KvScanResponse(const KvScanResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kvs_(from.kvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_key().size() > 0) {
    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvScanResponse)
}

void KvScanResponse::SharedCtor() {
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvScanResponse::~KvScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvScanResponse)
  SharedDtor();
}

void KvScanResponse::SharedDtor() {
  last_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvScanResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvScanResponse& KvScanResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvScanResponse* KvScanResponse::New(::google::protobuf::Arena* arena) const {
  KvScanResponse* n = new KvScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.RedisKeyValue kvs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvScanResponse)
  return false;
#undef DO_
}

void KvScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // repeated .kvrpcpb.RedisKeyValue kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kvs(static_cast<int>(i)), output);
  }

  // bytes last_key = 4;
  if (this->last_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvScanResponse)
}

::google::protobuf::uint8* KvScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // repeated .kvrpcpb.RedisKeyValue kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->kvs(static_cast<int>(i)), deterministic, target);
  }

  // bytes last_key = 4;
  if (this->last_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvScanResponse)
  return target;
}

size_t KvScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvScanResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.RedisKeyValue kvs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(static_cast<int>(i)));
    }
  }

  // bytes last_key = 4;
  if (this->last_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_key());
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvScanResponse)
    MergeFrom(*source);
  }
}

void KvScanResponse::MergeFrom(const KvScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.last_key().size() > 0) {

    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvScanResponse::CopyFrom(const KvScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvScanResponse::IsInitialized() const {
  return true;
}

void KvScanResponse::Swap(KvScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvScanResponse::InternalSwap(KvScanResponse* other) {
  using std::swap;
  kvs_.InternalSwap(&other->kvs_);
  last_key_.Swap(&other->last_key_);
  swap(count_, other->count_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvScanResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvScanResponse

// int32 code = 1;
void KvScanResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvScanResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanResponse.code)
  return code_;
}
void KvScanResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanResponse.code)
}

// int64 count = 2;
void KvScanResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 KvScanResponse::count() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanResponse.count)
  return count_;
}
void KvScanResponse::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanResponse.count)
}

// repeated .kvrpcpb.RedisKeyValue kvs = 3;
int KvScanResponse::kvs_size() const {
  return kvs_.size();
}
void KvScanResponse::clear_kvs() {
  kvs_.Clear();
}
const ::kvrpcpb::RedisKeyValue& KvScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanResponse.kvs)
  return kvs_.Get(index);
}
::kvrpcpb::RedisKeyValue* KvScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvScanResponse.kvs)
  return kvs_.Mutable(index);
}
::kvrpcpb::RedisKeyValue* KvScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.KvScanResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >*
KvScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvScanResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::RedisKeyValue >&
KvScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvScanResponse.kvs)
  return kvs_;
}

// bytes last_key = 4;
void KvScanResponse::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvScanResponse::last_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvScanResponse.last_key)
  return last_key_.GetNoArena();
}
void KvScanResponse::set_last_key(const ::std::string& value) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvScanResponse.last_key)
}
#if LANG_CXX11
void KvScanResponse::set_last_key(::std::string&& value) {
  
  last_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvScanResponse.last_key)
}
#endif
void KvScanResponse::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvScanResponse.last_key)
}
void KvScanResponse::set_last_key(const void* value, size_t size) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvScanResponse.last_key)
}
::std::string* KvScanResponse::mutable_last_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvScanResponse.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvScanResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvScanResponse.last_key)
  
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvScanResponse::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    
  } else {
    
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvScanResponse.last_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvScanRequest::kHeaderFieldNumber;
const int DsKvScanRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvScanRequest::DsKvScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvScanRequest)
}
DsKvScanRequest::DsKvScanRequest(const DsKvScanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvScanRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvScanRequest)
}

void DsKvScanRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvScanRequest::~DsKvScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvScanRequest)
  SharedDtor();
}

void DsKvScanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvScanRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvScanRequest& DsKvScanRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvScanRequest* DsKvScanRequest::New(::google::protobuf::Arena* arena) const {
  DsKvScanRequest* n = new DsKvScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvScanRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvScanRequest)
  return false;
#undef DO_
}

void DsKvScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvScanRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvScanRequest)
}

::google::protobuf::uint8* DsKvScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvScanRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvScanRequest)
  return target;
}

size_t DsKvScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvScanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvScanRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvScanRequest)
    MergeFrom(*source);
  }
}

void DsKvScanRequest::MergeFrom(const DsKvScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvScanRequest::MergeFrom(from.req());
  }
}

void DsKvScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvScanRequest::CopyFrom(const DsKvScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvScanRequest::IsInitialized() const {
  return true;
}

void DsKvScanRequest::Swap(DsKvScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvScanRequest::InternalSwap(DsKvScanRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvScanRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvScanRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvScanRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvScanRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvScanRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvScanRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvScanRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvScanRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvScanRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvScanRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvScanRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvScanRequest.header)
}

// .kvrpcpb.KvScanRequest req = 2;
bool DsKvScanRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvScanRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvScanRequest& DsKvScanRequest::req() const {
  const ::kvrpcpb::KvScanRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvScanRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvScanRequest*>(
      &::kvrpcpb::_KvScanRequest_default_instance_);
}
::kvrpcpb::KvScanRequest* DsKvScanRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvScanRequest.req)
  return req_;
}
::kvrpcpb::KvScanRequest* DsKvScanRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvScanRequest.req)
  
  ::kvrpcpb::KvScanRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvScanRequest::set_allocated_req(::kvrpcpb::KvScanRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvScanRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvScanResponse::kHeaderFieldNumber;
const int DsKvScanResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvScanResponse::DsKvScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvScanResponse)
}
DsKvScanResponse::DsKvScanResponse(const DsKvScanResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvScanResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvScanResponse)
}

void DsKvScanResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvScanResponse::~DsKvScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvScanResponse)
  SharedDtor();
}

void DsKvScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvScanResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvScanResponse& DsKvScanResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvScanResponse* DsKvScanResponse::New(::google::protobuf::Arena* arena) const {
  DsKvScanResponse* n = new DsKvScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvScanResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvScanResponse)
  return false;
#undef DO_
}

void DsKvScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvScanResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvScanResponse)
}

::google::protobuf::uint8* DsKvScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvScanResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvScanResponse)
  return target;
}

size_t DsKvScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvScanResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvScanResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvScanResponse)
    MergeFrom(*source);
  }
}

void DsKvScanResponse::MergeFrom(const DsKvScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvScanResponse::MergeFrom(from.resp());
  }
}

void DsKvScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvScanResponse::CopyFrom(const DsKvScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvScanResponse::IsInitialized() const {
  return true;
}

void DsKvScanResponse::Swap(DsKvScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvScanResponse::InternalSwap(DsKvScanResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvScanResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvScanResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvScanResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvScanResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvScanResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvScanResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvScanResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvScanResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvScanResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvScanResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvScanResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvScanResponse.header)
}

// .kvrpcpb.KvScanResponse resp = 2;
bool DsKvScanResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvScanResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvScanResponse& DsKvScanResponse::resp() const {
  const ::kvrpcpb::KvScanResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvScanResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvScanResponse*>(
      &::kvrpcpb::_KvScanResponse_default_instance_);
}
::kvrpcpb::KvScanResponse* DsKvScanResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvScanResponse.resp)
  return resp_;
}
::kvrpcpb::KvScanResponse* DsKvScanResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvScanResponse.resp)
  
  ::kvrpcpb::KvScanResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvScanResponse::set_allocated_resp(::kvrpcpb::KvScanResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvScanResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvDeleteRequest::kKeyFieldNumber;
const int KvDeleteRequest::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvDeleteRequest::KvDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvDeleteRequest)
}
KvDeleteRequest::KvDeleteRequest(const KvDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  case__ = from.case__;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvDeleteRequest)
}

void KvDeleteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case__ = 0;
  _cached_size_ = 0;
}

KvDeleteRequest::~KvDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvDeleteRequest)
  SharedDtor();
}

void KvDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvDeleteRequest& KvDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvDeleteRequest* KvDeleteRequest::New(::google::protobuf::Arena* arena) const {
  KvDeleteRequest* n = new KvDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case__ = 0;
  _internal_metadata_.Clear();
}

bool KvDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvDeleteRequest)
  return false;
#undef DO_
}

void KvDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvDeleteRequest)
}

::google::protobuf::uint8* KvDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvDeleteRequest)
  return target;
}

size_t KvDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvDeleteRequest)
    MergeFrom(*source);
  }
}

void KvDeleteRequest::MergeFrom(const KvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void KvDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvDeleteRequest::CopyFrom(const KvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvDeleteRequest::IsInitialized() const {
  return true;
}

void KvDeleteRequest::Swap(KvDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvDeleteRequest::InternalSwap(KvDeleteRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvDeleteRequest

// bytes key = 1;
void KvDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvDeleteRequest.key)
  return key_.GetNoArena();
}
void KvDeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvDeleteRequest.key)
}
#if LANG_CXX11
void KvDeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvDeleteRequest.key)
}
#endif
void KvDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvDeleteRequest.key)
}
void KvDeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvDeleteRequest.key)
}
::std::string* KvDeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvDeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvDeleteRequest.key)
}

// .kvrpcpb.ExistCase case = 2;
void KvDeleteRequest::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase KvDeleteRequest::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvDeleteRequest.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void KvDeleteRequest::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvDeleteRequest.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvDeleteResponse::kCodeFieldNumber;
const int KvDeleteResponse::kAffectedKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvDeleteResponse::KvDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvDeleteResponse)
}
KvDeleteResponse::KvDeleteResponse(const KvDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvDeleteResponse)
}

void KvDeleteResponse::SharedCtor() {
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvDeleteResponse::~KvDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvDeleteResponse)
  SharedDtor();
}

void KvDeleteResponse::SharedDtor() {
}

void KvDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvDeleteResponse& KvDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvDeleteResponse* KvDeleteResponse::New(::google::protobuf::Arena* arena) const {
  KvDeleteResponse* n = new KvDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvDeleteResponse)
  return false;
#undef DO_
}

void KvDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvDeleteResponse)
}

::google::protobuf::uint8* KvDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvDeleteResponse)
  return target;
}

size_t KvDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvDeleteResponse)
    MergeFrom(*source);
  }
}

void KvDeleteResponse::MergeFrom(const KvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvDeleteResponse::CopyFrom(const KvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvDeleteResponse::IsInitialized() const {
  return true;
}

void KvDeleteResponse::Swap(KvDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvDeleteResponse::InternalSwap(KvDeleteResponse* other) {
  using std::swap;
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvDeleteResponse

// int32 code = 1;
void KvDeleteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvDeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvDeleteResponse.code)
  return code_;
}
void KvDeleteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvDeleteResponse.code)
}

// uint64 affected_keys = 2;
void KvDeleteResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KvDeleteResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvDeleteResponse.affected_keys)
  return affected_keys_;
}
void KvDeleteResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvDeleteResponse.affected_keys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvDeleteRequest::kHeaderFieldNumber;
const int DsKvDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvDeleteRequest::DsKvDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvDeleteRequest)
}
DsKvDeleteRequest::DsKvDeleteRequest(const DsKvDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvDeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvDeleteRequest)
}

void DsKvDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvDeleteRequest::~DsKvDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvDeleteRequest)
  SharedDtor();
}

void DsKvDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvDeleteRequest& DsKvDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvDeleteRequest* DsKvDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvDeleteRequest* n = new DsKvDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvDeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvDeleteRequest)
  return false;
#undef DO_
}

void DsKvDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvDeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvDeleteRequest)
}

::google::protobuf::uint8* DsKvDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvDeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvDeleteRequest)
  return target;
}

size_t DsKvDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvDeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvDeleteRequest)
    MergeFrom(*source);
  }
}

void DsKvDeleteRequest::MergeFrom(const DsKvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvDeleteRequest::MergeFrom(from.req());
  }
}

void DsKvDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvDeleteRequest::CopyFrom(const DsKvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvDeleteRequest::IsInitialized() const {
  return true;
}

void DsKvDeleteRequest::Swap(DsKvDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvDeleteRequest::InternalSwap(DsKvDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvDeleteRequest.header)
}

// .kvrpcpb.KvDeleteRequest req = 2;
bool DsKvDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvDeleteRequest& DsKvDeleteRequest::req() const {
  const ::kvrpcpb::KvDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvDeleteRequest*>(
      &::kvrpcpb::_KvDeleteRequest_default_instance_);
}
::kvrpcpb::KvDeleteRequest* DsKvDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvDeleteRequest.req)
  return req_;
}
::kvrpcpb::KvDeleteRequest* DsKvDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvDeleteRequest.req)
  
  ::kvrpcpb::KvDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvDeleteRequest::set_allocated_req(::kvrpcpb::KvDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvDeleteResponse::kHeaderFieldNumber;
const int DsKvDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvDeleteResponse::DsKvDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvDeleteResponse)
}
DsKvDeleteResponse::DsKvDeleteResponse(const DsKvDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvDeleteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvDeleteResponse)
}

void DsKvDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvDeleteResponse::~DsKvDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvDeleteResponse)
  SharedDtor();
}

void DsKvDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvDeleteResponse& DsKvDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvDeleteResponse* DsKvDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvDeleteResponse* n = new DsKvDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvDeleteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvDeleteResponse)
  return false;
#undef DO_
}

void DsKvDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvDeleteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvDeleteResponse)
}

::google::protobuf::uint8* DsKvDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvDeleteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvDeleteResponse)
  return target;
}

size_t DsKvDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvDeleteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvDeleteResponse)
    MergeFrom(*source);
  }
}

void DsKvDeleteResponse::MergeFrom(const DsKvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvDeleteResponse::MergeFrom(from.resp());
  }
}

void DsKvDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvDeleteResponse::CopyFrom(const DsKvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvDeleteResponse::IsInitialized() const {
  return true;
}

void DsKvDeleteResponse::Swap(DsKvDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvDeleteResponse::InternalSwap(DsKvDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvDeleteResponse.header)
}

// .kvrpcpb.KvDeleteResponse resp = 2;
bool DsKvDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvDeleteResponse& DsKvDeleteResponse::resp() const {
  const ::kvrpcpb::KvDeleteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvDeleteResponse*>(
      &::kvrpcpb::_KvDeleteResponse_default_instance_);
}
::kvrpcpb::KvDeleteResponse* DsKvDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvDeleteResponse.resp)
  return resp_;
}
::kvrpcpb::KvDeleteResponse* DsKvDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvDeleteResponse.resp)
  
  ::kvrpcpb::KvDeleteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvDeleteResponse::set_allocated_resp(::kvrpcpb::KvDeleteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchDeleteRequest::kKeysFieldNumber;
const int KvBatchDeleteRequest::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchDeleteRequest::KvBatchDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchDeleteRequest)
}
KvBatchDeleteRequest::KvBatchDeleteRequest(const KvBatchDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  case__ = from.case__;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchDeleteRequest)
}

void KvBatchDeleteRequest::SharedCtor() {
  case__ = 0;
  _cached_size_ = 0;
}

KvBatchDeleteRequest::~KvBatchDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchDeleteRequest)
  SharedDtor();
}

void KvBatchDeleteRequest::SharedDtor() {
}

void KvBatchDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchDeleteRequest& KvBatchDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchDeleteRequest* KvBatchDeleteRequest::New(::google::protobuf::Arena* arena) const {
  KvBatchDeleteRequest* n = new KvBatchDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  case__ = 0;
  _internal_metadata_.Clear();
}

bool KvBatchDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchDeleteRequest)
  return false;
#undef DO_
}

void KvBatchDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchDeleteRequest)
}

::google::protobuf::uint8* KvBatchDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchDeleteRequest)
  return target;
}

size_t KvBatchDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // .kvrpcpb.ExistCase case = 2;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchDeleteRequest)
    MergeFrom(*source);
  }
}

void KvBatchDeleteRequest::MergeFrom(const KvBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void KvBatchDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchDeleteRequest::CopyFrom(const KvBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchDeleteRequest::IsInitialized() const {
  return true;
}

void KvBatchDeleteRequest::Swap(KvBatchDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchDeleteRequest::InternalSwap(KvBatchDeleteRequest* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchDeleteRequest

// repeated bytes keys = 1;
int KvBatchDeleteRequest::keys_size() const {
  return keys_.size();
}
void KvBatchDeleteRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& KvBatchDeleteRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchDeleteRequest.keys)
  return keys_.Get(index);
}
::std::string* KvBatchDeleteRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvBatchDeleteRequest.keys)
  return keys_.Mutable(index);
}
void KvBatchDeleteRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchDeleteRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void KvBatchDeleteRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchDeleteRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void KvBatchDeleteRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvBatchDeleteRequest.keys)
}
void KvBatchDeleteRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvBatchDeleteRequest.keys)
}
::std::string* KvBatchDeleteRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.KvBatchDeleteRequest.keys)
  return keys_.Add();
}
void KvBatchDeleteRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchDeleteRequest.keys)
}
#if LANG_CXX11
void KvBatchDeleteRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kvrpcpb.KvBatchDeleteRequest.keys)
}
#endif
void KvBatchDeleteRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.KvBatchDeleteRequest.keys)
}
void KvBatchDeleteRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.KvBatchDeleteRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
KvBatchDeleteRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.KvBatchDeleteRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
KvBatchDeleteRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.KvBatchDeleteRequest.keys)
  return &keys_;
}

// .kvrpcpb.ExistCase case = 2;
void KvBatchDeleteRequest::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase KvBatchDeleteRequest::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchDeleteRequest.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void KvBatchDeleteRequest::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchDeleteRequest.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvBatchDeleteResponse::kCodeFieldNumber;
const int KvBatchDeleteResponse::kAffectedKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvBatchDeleteResponse::KvBatchDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvBatchDeleteResponse)
}
KvBatchDeleteResponse::KvBatchDeleteResponse(const KvBatchDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvBatchDeleteResponse)
}

void KvBatchDeleteResponse::SharedCtor() {
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvBatchDeleteResponse::~KvBatchDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvBatchDeleteResponse)
  SharedDtor();
}

void KvBatchDeleteResponse::SharedDtor() {
}

void KvBatchDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvBatchDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvBatchDeleteResponse& KvBatchDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvBatchDeleteResponse* KvBatchDeleteResponse::New(::google::protobuf::Arena* arena) const {
  KvBatchDeleteResponse* n = new KvBatchDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvBatchDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvBatchDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvBatchDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvBatchDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvBatchDeleteResponse)
  return false;
#undef DO_
}

void KvBatchDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvBatchDeleteResponse)
}

::google::protobuf::uint8* KvBatchDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvBatchDeleteResponse)
  return target;
}

size_t KvBatchDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvBatchDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvBatchDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvBatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvBatchDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvBatchDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvBatchDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvBatchDeleteResponse)
    MergeFrom(*source);
  }
}

void KvBatchDeleteResponse::MergeFrom(const KvBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvBatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvBatchDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvBatchDeleteResponse::CopyFrom(const KvBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchDeleteResponse::IsInitialized() const {
  return true;
}

void KvBatchDeleteResponse::Swap(KvBatchDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvBatchDeleteResponse::InternalSwap(KvBatchDeleteResponse* other) {
  using std::swap;
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvBatchDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvBatchDeleteResponse

// int32 code = 1;
void KvBatchDeleteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvBatchDeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchDeleteResponse.code)
  return code_;
}
void KvBatchDeleteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchDeleteResponse.code)
}

// uint64 affected_keys = 2;
void KvBatchDeleteResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KvBatchDeleteResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvBatchDeleteResponse.affected_keys)
  return affected_keys_;
}
void KvBatchDeleteResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvBatchDeleteResponse.affected_keys)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchDeleteRequest::kHeaderFieldNumber;
const int DsKvBatchDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchDeleteRequest::DsKvBatchDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchDeleteRequest)
}
DsKvBatchDeleteRequest::DsKvBatchDeleteRequest(const DsKvBatchDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvBatchDeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchDeleteRequest)
}

void DsKvBatchDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvBatchDeleteRequest::~DsKvBatchDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchDeleteRequest)
  SharedDtor();
}

void DsKvBatchDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvBatchDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchDeleteRequest& DsKvBatchDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchDeleteRequest* DsKvBatchDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvBatchDeleteRequest* n = new DsKvBatchDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchDeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchDeleteRequest)
  return false;
#undef DO_
}

void DsKvBatchDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchDeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchDeleteRequest)
}

::google::protobuf::uint8* DsKvBatchDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchDeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchDeleteRequest)
  return target;
}

size_t DsKvBatchDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchDeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchDeleteRequest)
    MergeFrom(*source);
  }
}

void DsKvBatchDeleteRequest::MergeFrom(const DsKvBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvBatchDeleteRequest::MergeFrom(from.req());
  }
}

void DsKvBatchDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchDeleteRequest::CopyFrom(const DsKvBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchDeleteRequest::IsInitialized() const {
  return true;
}

void DsKvBatchDeleteRequest::Swap(DsKvBatchDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchDeleteRequest::InternalSwap(DsKvBatchDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvBatchDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvBatchDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvBatchDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvBatchDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchDeleteRequest.header)
}

// .kvrpcpb.KvBatchDeleteRequest req = 2;
bool DsKvBatchDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvBatchDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvBatchDeleteRequest& DsKvBatchDeleteRequest::req() const {
  const ::kvrpcpb::KvBatchDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchDeleteRequest*>(
      &::kvrpcpb::_KvBatchDeleteRequest_default_instance_);
}
::kvrpcpb::KvBatchDeleteRequest* DsKvBatchDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvBatchDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchDeleteRequest.req)
  return req_;
}
::kvrpcpb::KvBatchDeleteRequest* DsKvBatchDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchDeleteRequest.req)
  
  ::kvrpcpb::KvBatchDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvBatchDeleteRequest::set_allocated_req(::kvrpcpb::KvBatchDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvBatchDeleteResponse::kHeaderFieldNumber;
const int DsKvBatchDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvBatchDeleteResponse::DsKvBatchDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvBatchDeleteResponse)
}
DsKvBatchDeleteResponse::DsKvBatchDeleteResponse(const DsKvBatchDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvBatchDeleteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvBatchDeleteResponse)
}

void DsKvBatchDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvBatchDeleteResponse::~DsKvBatchDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvBatchDeleteResponse)
  SharedDtor();
}

void DsKvBatchDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvBatchDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvBatchDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvBatchDeleteResponse& DsKvBatchDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvBatchDeleteResponse* DsKvBatchDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvBatchDeleteResponse* n = new DsKvBatchDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvBatchDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvBatchDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvBatchDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvBatchDeleteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvBatchDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvBatchDeleteResponse)
  return false;
#undef DO_
}

void DsKvBatchDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvBatchDeleteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvBatchDeleteResponse)
}

::google::protobuf::uint8* DsKvBatchDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvBatchDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvBatchDeleteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvBatchDeleteResponse)
  return target;
}

size_t DsKvBatchDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvBatchDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvBatchDeleteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvBatchDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvBatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvBatchDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvBatchDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvBatchDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvBatchDeleteResponse)
    MergeFrom(*source);
  }
}

void DsKvBatchDeleteResponse::MergeFrom(const DsKvBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvBatchDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvBatchDeleteResponse::MergeFrom(from.resp());
  }
}

void DsKvBatchDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvBatchDeleteResponse::CopyFrom(const DsKvBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvBatchDeleteResponse::IsInitialized() const {
  return true;
}

void DsKvBatchDeleteResponse::Swap(DsKvBatchDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvBatchDeleteResponse::InternalSwap(DsKvBatchDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvBatchDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvBatchDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvBatchDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvBatchDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvBatchDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvBatchDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvBatchDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvBatchDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchDeleteResponse.header)
}

// .kvrpcpb.KvBatchDeleteResponse resp = 2;
bool DsKvBatchDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvBatchDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvBatchDeleteResponse& DsKvBatchDeleteResponse::resp() const {
  const ::kvrpcpb::KvBatchDeleteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvBatchDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvBatchDeleteResponse*>(
      &::kvrpcpb::_KvBatchDeleteResponse_default_instance_);
}
::kvrpcpb::KvBatchDeleteResponse* DsKvBatchDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvBatchDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvBatchDeleteResponse.resp)
  return resp_;
}
::kvrpcpb::KvBatchDeleteResponse* DsKvBatchDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvBatchDeleteResponse.resp)
  
  ::kvrpcpb::KvBatchDeleteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvBatchDeleteResponse::set_allocated_resp(::kvrpcpb::KvBatchDeleteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvBatchDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRangeDeleteRequest::kStartFieldNumber;
const int KvRangeDeleteRequest::kLimitFieldNumber;
const int KvRangeDeleteRequest::kMaxCountFieldNumber;
const int KvRangeDeleteRequest::kCaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRangeDeleteRequest::KvRangeDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRangeDeleteRequest)
}
KvRangeDeleteRequest::KvRangeDeleteRequest(const KvRangeDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  ::memcpy(&max_count_, &from.max_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&case__) -
    reinterpret_cast<char*>(&max_count_)) + sizeof(case__));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRangeDeleteRequest)
}

void KvRangeDeleteRequest::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case__) -
      reinterpret_cast<char*>(&max_count_)) + sizeof(case__));
  _cached_size_ = 0;
}

KvRangeDeleteRequest::~KvRangeDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRangeDeleteRequest)
  SharedDtor();
}

void KvRangeDeleteRequest::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRangeDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRangeDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRangeDeleteRequest& KvRangeDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRangeDeleteRequest* KvRangeDeleteRequest::New(::google::protobuf::Arena* arena) const {
  KvRangeDeleteRequest* n = new KvRangeDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRangeDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case__) -
      reinterpret_cast<char*>(&max_count_)) + sizeof(case__));
  _internal_metadata_.Clear();
}

bool KvRangeDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRangeDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.ExistCase case = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::kvrpcpb::ExistCase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRangeDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRangeDeleteRequest)
  return false;
#undef DO_
}

void KvRangeDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->limit(), output);
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_count(), output);
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->case_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRangeDeleteRequest)
}

::google::protobuf::uint8* KvRangeDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->limit(), target);
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_count(), target);
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->case_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRangeDeleteRequest)
  return target;
}

size_t KvRangeDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRangeDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->limit());
  }

  // int64 max_count = 3;
  if (this->max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_count());
  }

  // .kvrpcpb.ExistCase case = 4;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRangeDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRangeDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRangeDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRangeDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRangeDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRangeDeleteRequest)
    MergeFrom(*source);
  }
}

void KvRangeDeleteRequest::MergeFrom(const KvRangeDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRangeDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  if (from.max_count() != 0) {
    set_max_count(from.max_count());
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
}

void KvRangeDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRangeDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRangeDeleteRequest::CopyFrom(const KvRangeDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRangeDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRangeDeleteRequest::IsInitialized() const {
  return true;
}

void KvRangeDeleteRequest::Swap(KvRangeDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRangeDeleteRequest::InternalSwap(KvRangeDeleteRequest* other) {
  using std::swap;
  start_.Swap(&other->start_);
  limit_.Swap(&other->limit_);
  swap(max_count_, other->max_count_);
  swap(case__, other->case__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRangeDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRangeDeleteRequest

// bytes start = 1;
void KvRangeDeleteRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRangeDeleteRequest::start() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteRequest.start)
  return start_.GetNoArena();
}
void KvRangeDeleteRequest::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteRequest.start)
}
#if LANG_CXX11
void KvRangeDeleteRequest::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRangeDeleteRequest.start)
}
#endif
void KvRangeDeleteRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRangeDeleteRequest.start)
}
void KvRangeDeleteRequest::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRangeDeleteRequest.start)
}
::std::string* KvRangeDeleteRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRangeDeleteRequest.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRangeDeleteRequest::release_start() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRangeDeleteRequest.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRangeDeleteRequest::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRangeDeleteRequest.start)
}

// bytes limit = 2;
void KvRangeDeleteRequest::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRangeDeleteRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteRequest.limit)
  return limit_.GetNoArena();
}
void KvRangeDeleteRequest::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteRequest.limit)
}
#if LANG_CXX11
void KvRangeDeleteRequest::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRangeDeleteRequest.limit)
}
#endif
void KvRangeDeleteRequest::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRangeDeleteRequest.limit)
}
void KvRangeDeleteRequest::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRangeDeleteRequest.limit)
}
::std::string* KvRangeDeleteRequest::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRangeDeleteRequest.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRangeDeleteRequest::release_limit() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRangeDeleteRequest.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRangeDeleteRequest::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRangeDeleteRequest.limit)
}

// int64 max_count = 3;
void KvRangeDeleteRequest::clear_max_count() {
  max_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 KvRangeDeleteRequest::max_count() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteRequest.max_count)
  return max_count_;
}
void KvRangeDeleteRequest::set_max_count(::google::protobuf::int64 value) {
  
  max_count_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteRequest.max_count)
}

// .kvrpcpb.ExistCase case = 4;
void KvRangeDeleteRequest::clear_case_() {
  case__ = 0;
}
::kvrpcpb::ExistCase KvRangeDeleteRequest::case_() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteRequest.case)
  return static_cast< ::kvrpcpb::ExistCase >(case__);
}
void KvRangeDeleteRequest::set_case_(::kvrpcpb::ExistCase value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteRequest.case)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvRangeDeleteResponse::kCodeFieldNumber;
const int KvRangeDeleteResponse::kAffectedKeysFieldNumber;
const int KvRangeDeleteResponse::kLastKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvRangeDeleteResponse::KvRangeDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvRangeDeleteResponse)
}
KvRangeDeleteResponse::KvRangeDeleteResponse(const KvRangeDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_key().size() > 0) {
    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  ::memcpy(&affected_keys_, &from.affected_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvRangeDeleteResponse)
}

void KvRangeDeleteResponse::SharedCtor() {
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _cached_size_ = 0;
}

KvRangeDeleteResponse::~KvRangeDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvRangeDeleteResponse)
  SharedDtor();
}

void KvRangeDeleteResponse::SharedDtor() {
  last_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvRangeDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvRangeDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvRangeDeleteResponse& KvRangeDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

KvRangeDeleteResponse* KvRangeDeleteResponse::New(::google::protobuf::Arena* arena) const {
  KvRangeDeleteResponse* n = new KvRangeDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvRangeDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&affected_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&affected_keys_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool KvRangeDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvRangeDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 affected_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &affected_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvRangeDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvRangeDeleteResponse)
  return false;
#undef DO_
}

void KvRangeDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->affected_keys(), output);
  }

  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->last_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvRangeDeleteResponse)
}

::google::protobuf::uint8* KvRangeDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->affected_keys(), target);
  }

  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->last_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvRangeDeleteResponse)
  return target;
}

size_t KvRangeDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvRangeDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes last_key = 3;
  if (this->last_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_key());
  }

  // uint64 affected_keys = 2;
  if (this->affected_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->affected_keys());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvRangeDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvRangeDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KvRangeDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvRangeDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvRangeDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvRangeDeleteResponse)
    MergeFrom(*source);
  }
}

void KvRangeDeleteResponse::MergeFrom(const KvRangeDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvRangeDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_key().size() > 0) {

    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  if (from.affected_keys() != 0) {
    set_affected_keys(from.affected_keys());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void KvRangeDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvRangeDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvRangeDeleteResponse::CopyFrom(const KvRangeDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvRangeDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvRangeDeleteResponse::IsInitialized() const {
  return true;
}

void KvRangeDeleteResponse::Swap(KvRangeDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvRangeDeleteResponse::InternalSwap(KvRangeDeleteResponse* other) {
  using std::swap;
  last_key_.Swap(&other->last_key_);
  swap(affected_keys_, other->affected_keys_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvRangeDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvRangeDeleteResponse

// int32 code = 1;
void KvRangeDeleteResponse::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 KvRangeDeleteResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteResponse.code)
  return code_;
}
void KvRangeDeleteResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteResponse.code)
}

// uint64 affected_keys = 2;
void KvRangeDeleteResponse::clear_affected_keys() {
  affected_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 KvRangeDeleteResponse::affected_keys() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteResponse.affected_keys)
  return affected_keys_;
}
void KvRangeDeleteResponse::set_affected_keys(::google::protobuf::uint64 value) {
  
  affected_keys_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteResponse.affected_keys)
}

// bytes last_key = 3;
void KvRangeDeleteResponse::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvRangeDeleteResponse::last_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvRangeDeleteResponse.last_key)
  return last_key_.GetNoArena();
}
void KvRangeDeleteResponse::set_last_key(const ::std::string& value) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvRangeDeleteResponse.last_key)
}
#if LANG_CXX11
void KvRangeDeleteResponse::set_last_key(::std::string&& value) {
  
  last_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvRangeDeleteResponse.last_key)
}
#endif
void KvRangeDeleteResponse::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvRangeDeleteResponse.last_key)
}
void KvRangeDeleteResponse::set_last_key(const void* value, size_t size) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvRangeDeleteResponse.last_key)
}
::std::string* KvRangeDeleteResponse::mutable_last_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvRangeDeleteResponse.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvRangeDeleteResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvRangeDeleteResponse.last_key)
  
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvRangeDeleteResponse::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    
  } else {
    
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvRangeDeleteResponse.last_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRangeDeleteRequest::kHeaderFieldNumber;
const int DsKvRangeDeleteRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRangeDeleteRequest::DsKvRangeDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRangeDeleteRequest)
}
DsKvRangeDeleteRequest::DsKvRangeDeleteRequest(const DsKvRangeDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::KvRangeDeleteRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRangeDeleteRequest)
}

void DsKvRangeDeleteRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsKvRangeDeleteRequest::~DsKvRangeDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRangeDeleteRequest)
  SharedDtor();
}

void DsKvRangeDeleteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsKvRangeDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRangeDeleteRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRangeDeleteRequest& DsKvRangeDeleteRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRangeDeleteRequest* DsKvRangeDeleteRequest::New(::google::protobuf::Arena* arena) const {
  DsKvRangeDeleteRequest* n = new DsKvRangeDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRangeDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRangeDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRangeDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRangeDeleteRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRangeDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRangeDeleteRequest)
  return false;
#undef DO_
}

void DsKvRangeDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRangeDeleteRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRangeDeleteRequest)
}

::google::protobuf::uint8* DsKvRangeDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRangeDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRangeDeleteRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRangeDeleteRequest)
  return target;
}

size_t DsKvRangeDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRangeDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRangeDeleteRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRangeDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRangeDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRangeDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRangeDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRangeDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRangeDeleteRequest)
    MergeFrom(*source);
  }
}

void DsKvRangeDeleteRequest::MergeFrom(const DsKvRangeDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRangeDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::KvRangeDeleteRequest::MergeFrom(from.req());
  }
}

void DsKvRangeDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRangeDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRangeDeleteRequest::CopyFrom(const DsKvRangeDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRangeDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRangeDeleteRequest::IsInitialized() const {
  return true;
}

void DsKvRangeDeleteRequest::Swap(DsKvRangeDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRangeDeleteRequest::InternalSwap(DsKvRangeDeleteRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRangeDeleteRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRangeDeleteRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsKvRangeDeleteRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRangeDeleteRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsKvRangeDeleteRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRangeDeleteRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsKvRangeDeleteRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRangeDeleteRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsKvRangeDeleteRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRangeDeleteRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRangeDeleteRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRangeDeleteRequest.header)
}

// .kvrpcpb.KvRangeDeleteRequest req = 2;
bool DsKvRangeDeleteRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsKvRangeDeleteRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::KvRangeDeleteRequest& DsKvRangeDeleteRequest::req() const {
  const ::kvrpcpb::KvRangeDeleteRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRangeDeleteRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRangeDeleteRequest*>(
      &::kvrpcpb::_KvRangeDeleteRequest_default_instance_);
}
::kvrpcpb::KvRangeDeleteRequest* DsKvRangeDeleteRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::KvRangeDeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRangeDeleteRequest.req)
  return req_;
}
::kvrpcpb::KvRangeDeleteRequest* DsKvRangeDeleteRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRangeDeleteRequest.req)
  
  ::kvrpcpb::KvRangeDeleteRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsKvRangeDeleteRequest::set_allocated_req(::kvrpcpb::KvRangeDeleteRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRangeDeleteRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsKvRangeDeleteResponse::kHeaderFieldNumber;
const int DsKvRangeDeleteResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsKvRangeDeleteResponse::DsKvRangeDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsKvRangeDeleteResponse)
}
DsKvRangeDeleteResponse::DsKvRangeDeleteResponse(const DsKvRangeDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::KvRangeDeleteResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsKvRangeDeleteResponse)
}

void DsKvRangeDeleteResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsKvRangeDeleteResponse::~DsKvRangeDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsKvRangeDeleteResponse)
  SharedDtor();
}

void DsKvRangeDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsKvRangeDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsKvRangeDeleteResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsKvRangeDeleteResponse& DsKvRangeDeleteResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsKvRangeDeleteResponse* DsKvRangeDeleteResponse::New(::google::protobuf::Arena* arena) const {
  DsKvRangeDeleteResponse* n = new DsKvRangeDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsKvRangeDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsKvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsKvRangeDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsKvRangeDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KvRangeDeleteResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsKvRangeDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsKvRangeDeleteResponse)
  return false;
#undef DO_
}

void DsKvRangeDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsKvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.KvRangeDeleteResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsKvRangeDeleteResponse)
}

::google::protobuf::uint8* DsKvRangeDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsKvRangeDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.KvRangeDeleteResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsKvRangeDeleteResponse)
  return target;
}

size_t DsKvRangeDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsKvRangeDeleteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.KvRangeDeleteResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsKvRangeDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsKvRangeDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsKvRangeDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsKvRangeDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsKvRangeDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsKvRangeDeleteResponse)
    MergeFrom(*source);
  }
}

void DsKvRangeDeleteResponse::MergeFrom(const DsKvRangeDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsKvRangeDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::KvRangeDeleteResponse::MergeFrom(from.resp());
  }
}

void DsKvRangeDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsKvRangeDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsKvRangeDeleteResponse::CopyFrom(const DsKvRangeDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsKvRangeDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsKvRangeDeleteResponse::IsInitialized() const {
  return true;
}

void DsKvRangeDeleteResponse::Swap(DsKvRangeDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsKvRangeDeleteResponse::InternalSwap(DsKvRangeDeleteResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsKvRangeDeleteResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsKvRangeDeleteResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsKvRangeDeleteResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsKvRangeDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsKvRangeDeleteResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRangeDeleteResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsKvRangeDeleteResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRangeDeleteResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsKvRangeDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRangeDeleteResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsKvRangeDeleteResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRangeDeleteResponse.header)
}

// .kvrpcpb.KvRangeDeleteResponse resp = 2;
bool DsKvRangeDeleteResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsKvRangeDeleteResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::KvRangeDeleteResponse& DsKvRangeDeleteResponse::resp() const {
  const ::kvrpcpb::KvRangeDeleteResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsKvRangeDeleteResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::KvRangeDeleteResponse*>(
      &::kvrpcpb::_KvRangeDeleteResponse_default_instance_);
}
::kvrpcpb::KvRangeDeleteResponse* DsKvRangeDeleteResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::KvRangeDeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsKvRangeDeleteResponse.resp)
  return resp_;
}
::kvrpcpb::KvRangeDeleteResponse* DsKvRangeDeleteResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsKvRangeDeleteResponse.resp)
  
  ::kvrpcpb::KvRangeDeleteResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsKvRangeDeleteResponse::set_allocated_resp(::kvrpcpb::KvRangeDeleteResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsKvRangeDeleteResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockValue::kValueFieldNumber;
const int LockValue::kIdFieldNumber;
const int LockValue::kDeleteTimeFieldNumber;
const int LockValue::kUpdateTimeFieldNumber;
const int LockValue::kByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockValue::LockValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockValue)
}
LockValue::LockValue(const LockValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  ::memcpy(&delete_time_, &from.delete_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&delete_time_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockValue)
}

void LockValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delete_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&delete_time_)) + sizeof(update_time_));
  _cached_size_ = 0;
}

LockValue::~LockValue() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockValue)
  SharedDtor();
}

void LockValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockValue::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockValue& LockValue::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockValue* LockValue::New(::google::protobuf::Arena* arena) const {
  LockValue* n = new LockValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delete_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&delete_time_)) + sizeof(update_time_));
  _internal_metadata_.Clear();
}

bool LockValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.LockValue.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delete_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delete_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.LockValue.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockValue)
  return false;
#undef DO_
}

void LockValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockValue.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // int64 delete_time = 4;
  if (this->delete_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->delete_time(), output);
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->update_time(), output);
  }

  // string by = 7;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockValue.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->by(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockValue)
}

::google::protobuf::uint8* LockValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockValue.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // int64 delete_time = 4;
  if (this->delete_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->delete_time(), target);
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->update_time(), target);
  }

  // string by = 7;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockValue.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->by(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockValue)
  return target;
}

size_t LockValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string by = 7;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // int64 delete_time = 4;
  if (this->delete_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->delete_time());
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockValue)
  GOOGLE_DCHECK_NE(&from, this);
  const LockValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockValue)
    MergeFrom(*source);
  }
}

void LockValue::MergeFrom(const LockValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.delete_time() != 0) {
    set_delete_time(from.delete_time());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void LockValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockValue::CopyFrom(const LockValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockValue::IsInitialized() const {
  return true;
}

void LockValue::Swap(LockValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockValue::InternalSwap(LockValue* other) {
  using std::swap;
  value_.Swap(&other->value_);
  id_.Swap(&other->id_);
  by_.Swap(&other->by_);
  swap(delete_time_, other->delete_time_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockValue::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockValue

// bytes value = 2;
void LockValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockValue::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockValue.value)
  return value_.GetNoArena();
}
void LockValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockValue.value)
}
#if LANG_CXX11
void LockValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockValue.value)
}
#endif
void LockValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockValue.value)
}
void LockValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockValue.value)
}
::std::string* LockValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockValue::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockValue.value)
}

// string id = 3;
void LockValue::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockValue::id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockValue.id)
  return id_.GetNoArena();
}
void LockValue::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockValue.id)
}
#if LANG_CXX11
void LockValue::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockValue.id)
}
#endif
void LockValue::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockValue.id)
}
void LockValue::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockValue.id)
}
::std::string* LockValue::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockValue.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockValue::release_id() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockValue.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockValue::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockValue.id)
}

// int64 delete_time = 4;
void LockValue::clear_delete_time() {
  delete_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockValue::delete_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockValue.delete_time)
  return delete_time_;
}
void LockValue::set_delete_time(::google::protobuf::int64 value) {
  
  delete_time_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockValue.delete_time)
}

// int64 update_time = 5;
void LockValue::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockValue::update_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockValue.update_time)
  return update_time_;
}
void LockValue::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockValue.update_time)
}

// string by = 7;
void LockValue::clear_by() {
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockValue::by() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockValue.by)
  return by_.GetNoArena();
}
void LockValue::set_by(const ::std::string& value) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockValue.by)
}
#if LANG_CXX11
void LockValue::set_by(::std::string&& value) {
  
  by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockValue.by)
}
#endif
void LockValue::set_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockValue.by)
}
void LockValue::set_by(const char* value, size_t size) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockValue.by)
}
::std::string* LockValue::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockValue.by)
  return by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockValue::release_by() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockValue.by)
  
  return by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockValue::set_allocated_by(::std::string* by) {
  if (by != NULL) {
    
  } else {
    
  }
  by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockValue.by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockRequest::kKeyFieldNumber;
const int LockRequest::kValueFieldNumber;
const int LockRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockRequest::LockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::kvrpcpb::LockValue(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockRequest)
}

void LockRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockRequest)
  SharedDtor();
}

void LockRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete timestamp_;
}

void LockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockRequest& LockRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockRequest* LockRequest::New(::google::protobuf::Arena* arena) const {
  LockRequest* n = new LockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool LockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockRequest)
  return false;
#undef DO_
}

void LockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockRequest)
}

::google::protobuf::uint8* LockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::kvrpcpb::LockValue::MergeFrom(from.value());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
}

void LockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::Swap(LockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockRequest

// bytes key = 1;
void LockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockRequest.key)
  return key_.GetNoArena();
}
void LockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockRequest.key)
}
#if LANG_CXX11
void LockRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockRequest.key)
}
#endif
void LockRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockRequest.key)
}
void LockRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockRequest.key)
}
::std::string* LockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockRequest.key)
}

// .kvrpcpb.LockValue value = 2;
bool LockRequest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void LockRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::kvrpcpb::LockValue& LockRequest::value() const {
  const ::kvrpcpb::LockValue* p = value_;
  // @@protoc_insertion_point(field_get:kvrpcpb.LockRequest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockValue*>(
      &::kvrpcpb::_LockValue_default_instance_);
}
::kvrpcpb::LockValue* LockRequest::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::kvrpcpb::LockValue;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockRequest.value)
  return value_;
}
::kvrpcpb::LockValue* LockRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockRequest.value)
  
  ::kvrpcpb::LockValue* temp = value_;
  value_ = NULL;
  return temp;
}
void LockRequest::set_allocated_value(::kvrpcpb::LockValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockRequest.value)
}

// .timestamp.Timestamp timestamp = 10;
bool LockRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void LockRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& LockRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.LockRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* LockRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* LockRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void LockRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockRequest::kHeaderFieldNumber;
const int DsLockRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockRequest::DsLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockRequest)
}
DsLockRequest::DsLockRequest(const DsLockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::LockRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockRequest)
}

void DsLockRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsLockRequest::~DsLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockRequest)
  SharedDtor();
}

void DsLockRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockRequest& DsLockRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockRequest* DsLockRequest::New(::google::protobuf::Arena* arena) const {
  DsLockRequest* n = new DsLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockRequest)
  return false;
#undef DO_
}

void DsLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockRequest)
}

::google::protobuf::uint8* DsLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockRequest)
  return target;
}

size_t DsLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockRequest)
    MergeFrom(*source);
  }
}

void DsLockRequest::MergeFrom(const DsLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::LockRequest::MergeFrom(from.req());
  }
}

void DsLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockRequest::CopyFrom(const DsLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockRequest::IsInitialized() const {
  return true;
}

void DsLockRequest::Swap(DsLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockRequest::InternalSwap(DsLockRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsLockRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsLockRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsLockRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsLockRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockRequest.header)
}

// .kvrpcpb.LockRequest req = 2;
bool DsLockRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsLockRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::LockRequest& DsLockRequest::req() const {
  const ::kvrpcpb::LockRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockRequest*>(
      &::kvrpcpb::_LockRequest_default_instance_);
}
::kvrpcpb::LockRequest* DsLockRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::LockRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockRequest.req)
  return req_;
}
::kvrpcpb::LockRequest* DsLockRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockRequest.req)
  
  ::kvrpcpb::LockRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsLockRequest::set_allocated_req(::kvrpcpb::LockRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockResponse::kCodeFieldNumber;
const int LockResponse::kErrorFieldNumber;
const int LockResponse::kValueFieldNumber;
const int LockResponse::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockResponse::LockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockResponse)
}
LockResponse::LockResponse(const LockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockResponse)
}

void LockResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  _cached_size_ = 0;
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockResponse)
  SharedDtor();
}

void LockResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockResponse& LockResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockResponse* LockResponse::New(::google::protobuf::Arena* arena) const {
  LockResponse* n = new LockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&code_)) + sizeof(update_time_));
  _internal_metadata_.Clear();
}

bool LockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.LockResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockResponse)
  return false;
#undef DO_
}

void LockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->code(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockResponse)
}

::google::protobuf::uint8* LockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->code(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockResponse)
  return target;
}

size_t LockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->code());
  }

  // int64 update_time = 4;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void LockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {
  return true;
}

void LockResponse::Swap(LockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockResponse::InternalSwap(LockResponse* other) {
  using std::swap;
  error_.Swap(&other->error_);
  value_.Swap(&other->value_);
  swap(code_, other->code_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockResponse

// int64 code = 1;
void LockResponse::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockResponse::code() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockResponse.code)
  return code_;
}
void LockResponse::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockResponse.code)
}

// string error = 2;
void LockResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockResponse.error)
  return error_.GetNoArena();
}
void LockResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockResponse.error)
}
#if LANG_CXX11
void LockResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockResponse.error)
}
#endif
void LockResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockResponse.error)
}
void LockResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockResponse.error)
}
::std::string* LockResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockResponse.error)
}

// bytes value = 3;
void LockResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockResponse.value)
  return value_.GetNoArena();
}
void LockResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockResponse.value)
}
#if LANG_CXX11
void LockResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockResponse.value)
}
#endif
void LockResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockResponse.value)
}
void LockResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockResponse.value)
}
::std::string* LockResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockResponse.value)
}

// int64 update_time = 4;
void LockResponse::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockResponse::update_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockResponse.update_time)
  return update_time_;
}
void LockResponse::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockResponse.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kKeyFieldNumber;
const int LockInfo::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::kvrpcpb::LockValue(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockInfo& LockInfo::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockInfo* LockInfo::New(::google::protobuf::Arena* arena) const {
  LockInfo* n = new LockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockInfo)
}

::google::protobuf::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.LockValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::kvrpcpb::LockValue::MergeFrom(from.value());
  }
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockInfo

// bytes key = 1;
void LockInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.key)
  return key_.GetNoArena();
}
void LockInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.key)
}
#if LANG_CXX11
void LockInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockInfo.key)
}
#endif
void LockInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.key)
}
void LockInfo::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.key)
}
::std::string* LockInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.key)
}

// .kvrpcpb.LockValue value = 2;
bool LockInfo::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void LockInfo::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::kvrpcpb::LockValue& LockInfo::value() const {
  const ::kvrpcpb::LockValue* p = value_;
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.value)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockValue*>(
      &::kvrpcpb::_LockValue_default_instance_);
}
::kvrpcpb::LockValue* LockInfo::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::kvrpcpb::LockValue;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.value)
  return value_;
}
::kvrpcpb::LockValue* LockInfo::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.value)
  
  ::kvrpcpb::LockValue* temp = value_;
  value_ = NULL;
  return temp;
}
void LockInfo::set_allocated_value(::kvrpcpb::LockValue* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockScanResponse::kInfoFieldNumber;
const int LockScanResponse::kLastKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockScanResponse::LockScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockScanResponse)
}
LockScanResponse::LockScanResponse(const LockScanResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_(from.info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_key().size() > 0) {
    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockScanResponse)
}

void LockScanResponse::SharedCtor() {
  last_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LockScanResponse::~LockScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockScanResponse)
  SharedDtor();
}

void LockScanResponse::SharedDtor() {
  last_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockScanResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockScanResponse& LockScanResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockScanResponse* LockScanResponse::New(::google::protobuf::Arena* arena) const {
  LockScanResponse* n = new LockScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LockScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.LockInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockScanResponse)
  return false;
#undef DO_
}

void LockScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.LockInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(static_cast<int>(i)), output);
  }

  // bytes last_key = 2;
  if (this->last_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->last_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockScanResponse)
}

::google::protobuf::uint8* LockScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kvrpcpb.LockInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(static_cast<int>(i)), deterministic, target);
  }

  // bytes last_key = 2;
  if (this->last_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->last_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockScanResponse)
  return target;
}

size_t LockScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockScanResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .kvrpcpb.LockInfo info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(static_cast<int>(i)));
    }
  }

  // bytes last_key = 2;
  if (this->last_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockScanResponse)
    MergeFrom(*source);
  }
}

void LockScanResponse::MergeFrom(const LockScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.last_key().size() > 0) {

    last_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_key_);
  }
}

void LockScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockScanResponse::CopyFrom(const LockScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockScanResponse::IsInitialized() const {
  return true;
}

void LockScanResponse::Swap(LockScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockScanResponse::InternalSwap(LockScanResponse* other) {
  using std::swap;
  info_.InternalSwap(&other->info_);
  last_key_.Swap(&other->last_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockScanResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockScanResponse

// repeated .kvrpcpb.LockInfo info = 1;
int LockScanResponse::info_size() const {
  return info_.size();
}
void LockScanResponse::clear_info() {
  info_.Clear();
}
const ::kvrpcpb::LockInfo& LockScanResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockScanResponse.info)
  return info_.Get(index);
}
::kvrpcpb::LockInfo* LockScanResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockScanResponse.info)
  return info_.Mutable(index);
}
::kvrpcpb::LockInfo* LockScanResponse::add_info() {
  // @@protoc_insertion_point(field_add:kvrpcpb.LockScanResponse.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >*
LockScanResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.LockScanResponse.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >&
LockScanResponse::info() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.LockScanResponse.info)
  return info_;
}

// bytes last_key = 2;
void LockScanResponse::clear_last_key() {
  last_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockScanResponse::last_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockScanResponse.last_key)
  return last_key_.GetNoArena();
}
void LockScanResponse::set_last_key(const ::std::string& value) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockScanResponse.last_key)
}
#if LANG_CXX11
void LockScanResponse::set_last_key(::std::string&& value) {
  
  last_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockScanResponse.last_key)
}
#endif
void LockScanResponse::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockScanResponse.last_key)
}
void LockScanResponse::set_last_key(const void* value, size_t size) {
  
  last_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockScanResponse.last_key)
}
::std::string* LockScanResponse::mutable_last_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockScanResponse.last_key)
  return last_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockScanResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockScanResponse.last_key)
  
  return last_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockScanResponse::set_allocated_last_key(::std::string* last_key) {
  if (last_key != NULL) {
    
  } else {
    
  }
  last_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockScanResponse.last_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockResponse::kHeaderFieldNumber;
const int DsLockResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockResponse::DsLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockResponse)
}
DsLockResponse::DsLockResponse(const DsLockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::LockResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockResponse)
}

void DsLockResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsLockResponse::~DsLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockResponse)
  SharedDtor();
}

void DsLockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockResponse& DsLockResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockResponse* DsLockResponse::New(::google::protobuf::Arena* arena) const {
  DsLockResponse* n = new DsLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockResponse)
  return false;
#undef DO_
}

void DsLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockResponse)
}

::google::protobuf::uint8* DsLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockResponse)
  return target;
}

size_t DsLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockResponse)
    MergeFrom(*source);
  }
}

void DsLockResponse::MergeFrom(const DsLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::LockResponse::MergeFrom(from.resp());
  }
}

void DsLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockResponse::CopyFrom(const DsLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockResponse::IsInitialized() const {
  return true;
}

void DsLockResponse::Swap(DsLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockResponse::InternalSwap(DsLockResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsLockResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsLockResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsLockResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsLockResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockResponse.header)
}

// .kvrpcpb.LockResponse resp = 2;
bool DsLockResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsLockResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::LockResponse& DsLockResponse::resp() const {
  const ::kvrpcpb::LockResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockResponse*>(
      &::kvrpcpb::_LockResponse_default_instance_);
}
::kvrpcpb::LockResponse* DsLockResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::LockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockResponse.resp)
  return resp_;
}
::kvrpcpb::LockResponse* DsLockResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockResponse.resp)
  
  ::kvrpcpb::LockResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsLockResponse::set_allocated_resp(::kvrpcpb::LockResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockUpdateRequest::kKeyFieldNumber;
const int LockUpdateRequest::kIdFieldNumber;
const int LockUpdateRequest::kUpdateTimeFieldNumber;
const int LockUpdateRequest::kUpdateValueFieldNumber;
const int LockUpdateRequest::kTimestampFieldNumber;
const int LockUpdateRequest::kByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockUpdateRequest::LockUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockUpdateRequest)
}
LockUpdateRequest::LockUpdateRequest(const LockUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  update_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_value().size() > 0) {
    update_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_value_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockUpdateRequest)
}

void LockUpdateRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(update_time_));
  _cached_size_ = 0;
}

LockUpdateRequest::~LockUpdateRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockUpdateRequest)
  SharedDtor();
}

void LockUpdateRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LockUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockUpdateRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockUpdateRequest& LockUpdateRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockUpdateRequest* LockUpdateRequest::New(::google::protobuf::Arena* arena) const {
  LockUpdateRequest* n = new LockUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  update_time_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool LockUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.LockUpdateRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 update_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes update_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.LockUpdateRequest.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockUpdateRequest)
  return false;
#undef DO_
}

void LockUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockUpdateRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->update_time(), output);
  }

  // bytes update_value = 6;
  if (this->update_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->update_value(), output);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->timestamp_, output);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockUpdateRequest.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->by(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockUpdateRequest)
}

::google::protobuf::uint8* LockUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockUpdateRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->update_time(), target);
  }

  // bytes update_value = 6;
  if (this->update_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->update_value(), target);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->timestamp_, deterministic, target);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.LockUpdateRequest.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->by(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockUpdateRequest)
  return target;
}

size_t LockUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes update_value = 6;
  if (this->update_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->update_value());
  }

  // string by = 11;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // int64 update_time = 5;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockUpdateRequest)
    MergeFrom(*source);
  }
}

void LockUpdateRequest::MergeFrom(const LockUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.update_value().size() > 0) {

    update_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_value_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void LockUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockUpdateRequest::CopyFrom(const LockUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockUpdateRequest::IsInitialized() const {
  return true;
}

void LockUpdateRequest::Swap(LockUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockUpdateRequest::InternalSwap(LockUpdateRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  id_.Swap(&other->id_);
  update_value_.Swap(&other->update_value_);
  by_.Swap(&other->by_);
  swap(timestamp_, other->timestamp_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockUpdateRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockUpdateRequest

// bytes key = 1;
void LockUpdateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockUpdateRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.key)
  return key_.GetNoArena();
}
void LockUpdateRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockUpdateRequest.key)
}
#if LANG_CXX11
void LockUpdateRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockUpdateRequest.key)
}
#endif
void LockUpdateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockUpdateRequest.key)
}
void LockUpdateRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockUpdateRequest.key)
}
::std::string* LockUpdateRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockUpdateRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockUpdateRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockUpdateRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockUpdateRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockUpdateRequest.key)
}

// string id = 3;
void LockUpdateRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.id)
  return id_.GetNoArena();
}
void LockUpdateRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockUpdateRequest.id)
}
#if LANG_CXX11
void LockUpdateRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockUpdateRequest.id)
}
#endif
void LockUpdateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockUpdateRequest.id)
}
void LockUpdateRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockUpdateRequest.id)
}
::std::string* LockUpdateRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockUpdateRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockUpdateRequest::release_id() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockUpdateRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockUpdateRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockUpdateRequest.id)
}

// int64 update_time = 5;
void LockUpdateRequest::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LockUpdateRequest::update_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.update_time)
  return update_time_;
}
void LockUpdateRequest::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockUpdateRequest.update_time)
}

// bytes update_value = 6;
void LockUpdateRequest::clear_update_value() {
  update_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockUpdateRequest::update_value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.update_value)
  return update_value_.GetNoArena();
}
void LockUpdateRequest::set_update_value(const ::std::string& value) {
  
  update_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockUpdateRequest.update_value)
}
#if LANG_CXX11
void LockUpdateRequest::set_update_value(::std::string&& value) {
  
  update_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockUpdateRequest.update_value)
}
#endif
void LockUpdateRequest::set_update_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  update_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockUpdateRequest.update_value)
}
void LockUpdateRequest::set_update_value(const void* value, size_t size) {
  
  update_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockUpdateRequest.update_value)
}
::std::string* LockUpdateRequest::mutable_update_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockUpdateRequest.update_value)
  return update_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockUpdateRequest::release_update_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockUpdateRequest.update_value)
  
  return update_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockUpdateRequest::set_allocated_update_value(::std::string* update_value) {
  if (update_value != NULL) {
    
  } else {
    
  }
  update_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockUpdateRequest.update_value)
}

// .timestamp.Timestamp timestamp = 10;
bool LockUpdateRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void LockUpdateRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& LockUpdateRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* LockUpdateRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockUpdateRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* LockUpdateRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockUpdateRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void LockUpdateRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockUpdateRequest.timestamp)
}

// string by = 11;
void LockUpdateRequest::clear_by() {
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockUpdateRequest::by() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockUpdateRequest.by)
  return by_.GetNoArena();
}
void LockUpdateRequest::set_by(const ::std::string& value) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockUpdateRequest.by)
}
#if LANG_CXX11
void LockUpdateRequest::set_by(::std::string&& value) {
  
  by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockUpdateRequest.by)
}
#endif
void LockUpdateRequest::set_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockUpdateRequest.by)
}
void LockUpdateRequest::set_by(const char* value, size_t size) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockUpdateRequest.by)
}
::std::string* LockUpdateRequest::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockUpdateRequest.by)
  return by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockUpdateRequest::release_by() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockUpdateRequest.by)
  
  return by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockUpdateRequest::set_allocated_by(::std::string* by) {
  if (by != NULL) {
    
  } else {
    
  }
  by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockUpdateRequest.by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockUpdateRequest::kHeaderFieldNumber;
const int DsLockUpdateRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockUpdateRequest::DsLockUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockUpdateRequest)
}
DsLockUpdateRequest::DsLockUpdateRequest(const DsLockUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::LockUpdateRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockUpdateRequest)
}

void DsLockUpdateRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsLockUpdateRequest::~DsLockUpdateRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockUpdateRequest)
  SharedDtor();
}

void DsLockUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsLockUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockUpdateRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockUpdateRequest& DsLockUpdateRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockUpdateRequest* DsLockUpdateRequest::New(::google::protobuf::Arena* arena) const {
  DsLockUpdateRequest* n = new DsLockUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockUpdateRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockUpdateRequest)
  return false;
#undef DO_
}

void DsLockUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockUpdateRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockUpdateRequest)
}

::google::protobuf::uint8* DsLockUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockUpdateRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockUpdateRequest)
  return target;
}

size_t DsLockUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockUpdateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockUpdateRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockUpdateRequest)
    MergeFrom(*source);
  }
}

void DsLockUpdateRequest::MergeFrom(const DsLockUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::LockUpdateRequest::MergeFrom(from.req());
  }
}

void DsLockUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockUpdateRequest::CopyFrom(const DsLockUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockUpdateRequest::IsInitialized() const {
  return true;
}

void DsLockUpdateRequest::Swap(DsLockUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockUpdateRequest::InternalSwap(DsLockUpdateRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockUpdateRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockUpdateRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsLockUpdateRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockUpdateRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsLockUpdateRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockUpdateRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsLockUpdateRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockUpdateRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsLockUpdateRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockUpdateRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockUpdateRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockUpdateRequest.header)
}

// .kvrpcpb.LockUpdateRequest req = 2;
bool DsLockUpdateRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsLockUpdateRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::LockUpdateRequest& DsLockUpdateRequest::req() const {
  const ::kvrpcpb::LockUpdateRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockUpdateRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockUpdateRequest*>(
      &::kvrpcpb::_LockUpdateRequest_default_instance_);
}
::kvrpcpb::LockUpdateRequest* DsLockUpdateRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::LockUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockUpdateRequest.req)
  return req_;
}
::kvrpcpb::LockUpdateRequest* DsLockUpdateRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockUpdateRequest.req)
  
  ::kvrpcpb::LockUpdateRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsLockUpdateRequest::set_allocated_req(::kvrpcpb::LockUpdateRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockUpdateRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockUpdateResponse::kHeaderFieldNumber;
const int DsLockUpdateResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockUpdateResponse::DsLockUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockUpdateResponse)
}
DsLockUpdateResponse::DsLockUpdateResponse(const DsLockUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::LockResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockUpdateResponse)
}

void DsLockUpdateResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsLockUpdateResponse::~DsLockUpdateResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockUpdateResponse)
  SharedDtor();
}

void DsLockUpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsLockUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockUpdateResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockUpdateResponse& DsLockUpdateResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockUpdateResponse* DsLockUpdateResponse::New(::google::protobuf::Arena* arena) const {
  DsLockUpdateResponse* n = new DsLockUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockUpdateResponse)
  return false;
#undef DO_
}

void DsLockUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockUpdateResponse)
}

::google::protobuf::uint8* DsLockUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockUpdateResponse)
  return target;
}

size_t DsLockUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockUpdateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockUpdateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockUpdateResponse)
    MergeFrom(*source);
  }
}

void DsLockUpdateResponse::MergeFrom(const DsLockUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::LockResponse::MergeFrom(from.resp());
  }
}

void DsLockUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockUpdateResponse::CopyFrom(const DsLockUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockUpdateResponse::IsInitialized() const {
  return true;
}

void DsLockUpdateResponse::Swap(DsLockUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockUpdateResponse::InternalSwap(DsLockUpdateResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockUpdateResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockUpdateResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsLockUpdateResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockUpdateResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsLockUpdateResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockUpdateResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsLockUpdateResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockUpdateResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsLockUpdateResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockUpdateResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockUpdateResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockUpdateResponse.header)
}

// .kvrpcpb.LockResponse resp = 2;
bool DsLockUpdateResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsLockUpdateResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::LockResponse& DsLockUpdateResponse::resp() const {
  const ::kvrpcpb::LockResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockUpdateResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockResponse*>(
      &::kvrpcpb::_LockResponse_default_instance_);
}
::kvrpcpb::LockResponse* DsLockUpdateResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::LockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockUpdateResponse.resp)
  return resp_;
}
::kvrpcpb::LockResponse* DsLockUpdateResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockUpdateResponse.resp)
  
  ::kvrpcpb::LockResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsLockUpdateResponse::set_allocated_resp(::kvrpcpb::LockResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockUpdateResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlockRequest::kKeyFieldNumber;
const int UnlockRequest::kIdFieldNumber;
const int UnlockRequest::kTimestampFieldNumber;
const int UnlockRequest::kByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlockRequest::UnlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.UnlockRequest)
}
UnlockRequest::UnlockRequest(const UnlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.UnlockRequest)
}

void UnlockRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  _cached_size_ = 0;
}

UnlockRequest::~UnlockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.UnlockRequest)
  SharedDtor();
}

void UnlockRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void UnlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnlockRequest& UnlockRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnlockRequest* UnlockRequest::New(::google::protobuf::Arena* arena) const {
  UnlockRequest* n = new UnlockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool UnlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.UnlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.UnlockRequest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.UnlockRequest.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.UnlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.UnlockRequest)
  return false;
#undef DO_
}

void UnlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->timestamp_, output);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockRequest.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->by(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.UnlockRequest)
}

::google::protobuf::uint8* UnlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.UnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->timestamp_, deterministic, target);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockRequest.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->by(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.UnlockRequest)
  return target;
}

size_t UnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.UnlockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string by = 11;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.UnlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.UnlockRequest)
    MergeFrom(*source);
  }
}

void UnlockRequest::MergeFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.UnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
}

void UnlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRequest::CopyFrom(const UnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.UnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRequest::IsInitialized() const {
  return true;
}

void UnlockRequest::Swap(UnlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlockRequest::InternalSwap(UnlockRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  id_.Swap(&other->id_);
  by_.Swap(&other->by_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnlockRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnlockRequest

// bytes key = 1;
void UnlockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlockRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockRequest.key)
  return key_.GetNoArena();
}
void UnlockRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnlockRequest.key)
}
#if LANG_CXX11
void UnlockRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.UnlockRequest.key)
}
#endif
void UnlockRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnlockRequest.key)
}
void UnlockRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnlockRequest.key)
}
::std::string* UnlockRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlockRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockRequest.key)
}

// string id = 3;
void UnlockRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlockRequest::id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockRequest.id)
  return id_.GetNoArena();
}
void UnlockRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnlockRequest.id)
}
#if LANG_CXX11
void UnlockRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.UnlockRequest.id)
}
#endif
void UnlockRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnlockRequest.id)
}
void UnlockRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnlockRequest.id)
}
::std::string* UnlockRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlockRequest::release_id() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlockRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockRequest.id)
}

// .timestamp.Timestamp timestamp = 10;
bool UnlockRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void UnlockRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& UnlockRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* UnlockRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* UnlockRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void UnlockRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockRequest.timestamp)
}

// string by = 11;
void UnlockRequest::clear_by() {
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlockRequest::by() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockRequest.by)
  return by_.GetNoArena();
}
void UnlockRequest::set_by(const ::std::string& value) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnlockRequest.by)
}
#if LANG_CXX11
void UnlockRequest::set_by(::std::string&& value) {
  
  by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.UnlockRequest.by)
}
#endif
void UnlockRequest::set_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnlockRequest.by)
}
void UnlockRequest::set_by(const char* value, size_t size) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnlockRequest.by)
}
::std::string* UnlockRequest::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockRequest.by)
  return by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlockRequest::release_by() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockRequest.by)
  
  return by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlockRequest::set_allocated_by(::std::string* by) {
  if (by != NULL) {
    
  } else {
    
  }
  by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockRequest.by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsUnlockRequest::kHeaderFieldNumber;
const int DsUnlockRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsUnlockRequest::DsUnlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsUnlockRequest)
}
DsUnlockRequest::DsUnlockRequest(const DsUnlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::UnlockRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsUnlockRequest)
}

void DsUnlockRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsUnlockRequest::~DsUnlockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsUnlockRequest)
  SharedDtor();
}

void DsUnlockRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsUnlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsUnlockRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsUnlockRequest& DsUnlockRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsUnlockRequest* DsUnlockRequest::New(::google::protobuf::Arena* arena) const {
  DsUnlockRequest* n = new DsUnlockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsUnlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsUnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsUnlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsUnlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.UnlockRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsUnlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsUnlockRequest)
  return false;
#undef DO_
}

void DsUnlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsUnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.UnlockRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsUnlockRequest)
}

::google::protobuf::uint8* DsUnlockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsUnlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.UnlockRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsUnlockRequest)
  return target;
}

size_t DsUnlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsUnlockRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.UnlockRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsUnlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsUnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsUnlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsUnlockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsUnlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsUnlockRequest)
    MergeFrom(*source);
  }
}

void DsUnlockRequest::MergeFrom(const DsUnlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsUnlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::UnlockRequest::MergeFrom(from.req());
  }
}

void DsUnlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsUnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsUnlockRequest::CopyFrom(const DsUnlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsUnlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsUnlockRequest::IsInitialized() const {
  return true;
}

void DsUnlockRequest::Swap(DsUnlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsUnlockRequest::InternalSwap(DsUnlockRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsUnlockRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsUnlockRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsUnlockRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsUnlockRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsUnlockRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsUnlockRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsUnlockRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsUnlockRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockRequest.header)
}

// .kvrpcpb.UnlockRequest req = 2;
bool DsUnlockRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsUnlockRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::UnlockRequest& DsUnlockRequest::req() const {
  const ::kvrpcpb::UnlockRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockRequest*>(
      &::kvrpcpb::_UnlockRequest_default_instance_);
}
::kvrpcpb::UnlockRequest* DsUnlockRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::UnlockRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockRequest.req)
  return req_;
}
::kvrpcpb::UnlockRequest* DsUnlockRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockRequest.req)
  
  ::kvrpcpb::UnlockRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsUnlockRequest::set_allocated_req(::kvrpcpb::UnlockRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsUnlockResponse::kHeaderFieldNumber;
const int DsUnlockResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsUnlockResponse::DsUnlockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsUnlockResponse)
}
DsUnlockResponse::DsUnlockResponse(const DsUnlockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::LockResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsUnlockResponse)
}

void DsUnlockResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsUnlockResponse::~DsUnlockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsUnlockResponse)
  SharedDtor();
}

void DsUnlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsUnlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsUnlockResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsUnlockResponse& DsUnlockResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsUnlockResponse* DsUnlockResponse::New(::google::protobuf::Arena* arena) const {
  DsUnlockResponse* n = new DsUnlockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsUnlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsUnlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsUnlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsUnlockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsUnlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsUnlockResponse)
  return false;
#undef DO_
}

void DsUnlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsUnlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsUnlockResponse)
}

::google::protobuf::uint8* DsUnlockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsUnlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsUnlockResponse)
  return target;
}

size_t DsUnlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsUnlockResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsUnlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsUnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsUnlockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsUnlockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsUnlockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsUnlockResponse)
    MergeFrom(*source);
  }
}

void DsUnlockResponse::MergeFrom(const DsUnlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsUnlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::LockResponse::MergeFrom(from.resp());
  }
}

void DsUnlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsUnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsUnlockResponse::CopyFrom(const DsUnlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsUnlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsUnlockResponse::IsInitialized() const {
  return true;
}

void DsUnlockResponse::Swap(DsUnlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsUnlockResponse::InternalSwap(DsUnlockResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsUnlockResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsUnlockResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsUnlockResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsUnlockResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsUnlockResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsUnlockResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsUnlockResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsUnlockResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockResponse.header)
}

// .kvrpcpb.LockResponse resp = 2;
bool DsUnlockResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsUnlockResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::LockResponse& DsUnlockResponse::resp() const {
  const ::kvrpcpb::LockResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockResponse*>(
      &::kvrpcpb::_LockResponse_default_instance_);
}
::kvrpcpb::LockResponse* DsUnlockResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::LockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockResponse.resp)
  return resp_;
}
::kvrpcpb::LockResponse* DsUnlockResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockResponse.resp)
  
  ::kvrpcpb::LockResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsUnlockResponse::set_allocated_resp(::kvrpcpb::LockResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlockForceRequest::kKeyFieldNumber;
const int UnlockForceRequest::kTimestampFieldNumber;
const int UnlockForceRequest::kByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlockForceRequest::UnlockForceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.UnlockForceRequest)
}
UnlockForceRequest::UnlockForceRequest(const UnlockForceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.by().size() > 0) {
    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::timestamp::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.UnlockForceRequest)
}

void UnlockForceRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  _cached_size_ = 0;
}

UnlockForceRequest::~UnlockForceRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.UnlockForceRequest)
  SharedDtor();
}

void UnlockForceRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void UnlockForceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockForceRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnlockForceRequest& UnlockForceRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnlockForceRequest* UnlockForceRequest::New(::google::protobuf::Arena* arena) const {
  UnlockForceRequest* n = new UnlockForceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnlockForceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.UnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool UnlockForceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.UnlockForceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .timestamp.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string by = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->by().data(), static_cast<int>(this->by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.UnlockForceRequest.by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.UnlockForceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.UnlockForceRequest)
  return false;
#undef DO_
}

void UnlockForceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.UnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->timestamp_, output);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockForceRequest.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->by(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.UnlockForceRequest)
}

::google::protobuf::uint8* UnlockForceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.UnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->timestamp_, deterministic, target);
  }

  // string by = 11;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->by().data(), static_cast<int>(this->by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnlockForceRequest.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->by(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.UnlockForceRequest)
  return target;
}

size_t UnlockForceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.UnlockForceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string by = 11;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // .timestamp.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockForceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.UnlockForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlockForceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlockForceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.UnlockForceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.UnlockForceRequest)
    MergeFrom(*source);
  }
}

void UnlockForceRequest::MergeFrom(const UnlockForceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.UnlockForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.by().size() > 0) {

    by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.by_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::timestamp::Timestamp::MergeFrom(from.timestamp());
  }
}

void UnlockForceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.UnlockForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockForceRequest::CopyFrom(const UnlockForceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.UnlockForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockForceRequest::IsInitialized() const {
  return true;
}

void UnlockForceRequest::Swap(UnlockForceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlockForceRequest::InternalSwap(UnlockForceRequest* other) {
  using std::swap;
  key_.Swap(&other->key_);
  by_.Swap(&other->by_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnlockForceRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnlockForceRequest

// bytes key = 1;
void UnlockForceRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlockForceRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockForceRequest.key)
  return key_.GetNoArena();
}
void UnlockForceRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnlockForceRequest.key)
}
#if LANG_CXX11
void UnlockForceRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.UnlockForceRequest.key)
}
#endif
void UnlockForceRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnlockForceRequest.key)
}
void UnlockForceRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnlockForceRequest.key)
}
::std::string* UnlockForceRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockForceRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlockForceRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockForceRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlockForceRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockForceRequest.key)
}

// .timestamp.Timestamp timestamp = 10;
bool UnlockForceRequest::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void UnlockForceRequest::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::timestamp::Timestamp& UnlockForceRequest::timestamp() const {
  const ::timestamp::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockForceRequest.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::timestamp::Timestamp*>(
      &::timestamp::_Timestamp_default_instance_);
}
::timestamp::Timestamp* UnlockForceRequest::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::timestamp::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockForceRequest.timestamp)
  return timestamp_;
}
::timestamp::Timestamp* UnlockForceRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockForceRequest.timestamp)
  
  ::timestamp::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void UnlockForceRequest::set_allocated_timestamp(::timestamp::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockForceRequest.timestamp)
}

// string by = 11;
void UnlockForceRequest::clear_by() {
  by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlockForceRequest::by() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnlockForceRequest.by)
  return by_.GetNoArena();
}
void UnlockForceRequest::set_by(const ::std::string& value) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnlockForceRequest.by)
}
#if LANG_CXX11
void UnlockForceRequest::set_by(::std::string&& value) {
  
  by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.UnlockForceRequest.by)
}
#endif
void UnlockForceRequest::set_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnlockForceRequest.by)
}
void UnlockForceRequest::set_by(const char* value, size_t size) {
  
  by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnlockForceRequest.by)
}
::std::string* UnlockForceRequest::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnlockForceRequest.by)
  return by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlockForceRequest::release_by() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnlockForceRequest.by)
  
  return by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlockForceRequest::set_allocated_by(::std::string* by) {
  if (by != NULL) {
    
  } else {
    
  }
  by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnlockForceRequest.by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsUnlockForceRequest::kHeaderFieldNumber;
const int DsUnlockForceRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsUnlockForceRequest::DsUnlockForceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsUnlockForceRequest)
}
DsUnlockForceRequest::DsUnlockForceRequest(const DsUnlockForceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::UnlockForceRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsUnlockForceRequest)
}

void DsUnlockForceRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsUnlockForceRequest::~DsUnlockForceRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsUnlockForceRequest)
  SharedDtor();
}

void DsUnlockForceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsUnlockForceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsUnlockForceRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsUnlockForceRequest& DsUnlockForceRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsUnlockForceRequest* DsUnlockForceRequest::New(::google::protobuf::Arena* arena) const {
  DsUnlockForceRequest* n = new DsUnlockForceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsUnlockForceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsUnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsUnlockForceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsUnlockForceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.UnlockForceRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsUnlockForceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsUnlockForceRequest)
  return false;
#undef DO_
}

void DsUnlockForceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsUnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.UnlockForceRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsUnlockForceRequest)
}

::google::protobuf::uint8* DsUnlockForceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsUnlockForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.UnlockForceRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsUnlockForceRequest)
  return target;
}

size_t DsUnlockForceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsUnlockForceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.UnlockForceRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsUnlockForceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsUnlockForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsUnlockForceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsUnlockForceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsUnlockForceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsUnlockForceRequest)
    MergeFrom(*source);
  }
}

void DsUnlockForceRequest::MergeFrom(const DsUnlockForceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsUnlockForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::UnlockForceRequest::MergeFrom(from.req());
  }
}

void DsUnlockForceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsUnlockForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsUnlockForceRequest::CopyFrom(const DsUnlockForceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsUnlockForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsUnlockForceRequest::IsInitialized() const {
  return true;
}

void DsUnlockForceRequest::Swap(DsUnlockForceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsUnlockForceRequest::InternalSwap(DsUnlockForceRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsUnlockForceRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsUnlockForceRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsUnlockForceRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsUnlockForceRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsUnlockForceRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockForceRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsUnlockForceRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockForceRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsUnlockForceRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockForceRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsUnlockForceRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockForceRequest.header)
}

// .kvrpcpb.UnlockForceRequest req = 2;
bool DsUnlockForceRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsUnlockForceRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::UnlockForceRequest& DsUnlockForceRequest::req() const {
  const ::kvrpcpb::UnlockForceRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockForceRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::UnlockForceRequest*>(
      &::kvrpcpb::_UnlockForceRequest_default_instance_);
}
::kvrpcpb::UnlockForceRequest* DsUnlockForceRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::UnlockForceRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockForceRequest.req)
  return req_;
}
::kvrpcpb::UnlockForceRequest* DsUnlockForceRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockForceRequest.req)
  
  ::kvrpcpb::UnlockForceRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsUnlockForceRequest::set_allocated_req(::kvrpcpb::UnlockForceRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockForceRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsUnlockForceResponse::kHeaderFieldNumber;
const int DsUnlockForceResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsUnlockForceResponse::DsUnlockForceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsUnlockForceResponse)
}
DsUnlockForceResponse::DsUnlockForceResponse(const DsUnlockForceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::LockResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsUnlockForceResponse)
}

void DsUnlockForceResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsUnlockForceResponse::~DsUnlockForceResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsUnlockForceResponse)
  SharedDtor();
}

void DsUnlockForceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsUnlockForceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsUnlockForceResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsUnlockForceResponse& DsUnlockForceResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsUnlockForceResponse* DsUnlockForceResponse::New(::google::protobuf::Arena* arena) const {
  DsUnlockForceResponse* n = new DsUnlockForceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsUnlockForceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsUnlockForceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsUnlockForceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsUnlockForceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsUnlockForceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsUnlockForceResponse)
  return false;
#undef DO_
}

void DsUnlockForceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsUnlockForceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsUnlockForceResponse)
}

::google::protobuf::uint8* DsUnlockForceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsUnlockForceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsUnlockForceResponse)
  return target;
}

size_t DsUnlockForceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsUnlockForceResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsUnlockForceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsUnlockForceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsUnlockForceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsUnlockForceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsUnlockForceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsUnlockForceResponse)
    MergeFrom(*source);
  }
}

void DsUnlockForceResponse::MergeFrom(const DsUnlockForceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsUnlockForceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::LockResponse::MergeFrom(from.resp());
  }
}

void DsUnlockForceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsUnlockForceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsUnlockForceResponse::CopyFrom(const DsUnlockForceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsUnlockForceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsUnlockForceResponse::IsInitialized() const {
  return true;
}

void DsUnlockForceResponse::Swap(DsUnlockForceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsUnlockForceResponse::InternalSwap(DsUnlockForceResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsUnlockForceResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsUnlockForceResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsUnlockForceResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsUnlockForceResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsUnlockForceResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockForceResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsUnlockForceResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockForceResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsUnlockForceResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockForceResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsUnlockForceResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockForceResponse.header)
}

// .kvrpcpb.LockResponse resp = 2;
bool DsUnlockForceResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsUnlockForceResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::LockResponse& DsUnlockForceResponse::resp() const {
  const ::kvrpcpb::LockResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsUnlockForceResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockResponse*>(
      &::kvrpcpb::_LockResponse_default_instance_);
}
::kvrpcpb::LockResponse* DsUnlockForceResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::LockResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsUnlockForceResponse.resp)
  return resp_;
}
::kvrpcpb::LockResponse* DsUnlockForceResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsUnlockForceResponse.resp)
  
  ::kvrpcpb::LockResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsUnlockForceResponse::set_allocated_resp(::kvrpcpb::LockResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsUnlockForceResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockScanRequest::kStartFieldNumber;
const int LockScanRequest::kLimitFieldNumber;
const int LockScanRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockScanRequest::LockScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockScanRequest)
}
LockScanRequest::LockScanRequest(const LockScanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start().size() > 0) {
    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockScanRequest)
}

void LockScanRequest::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _cached_size_ = 0;
}

LockScanRequest::~LockScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockScanRequest)
  SharedDtor();
}

void LockScanRequest::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockScanRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockScanRequest& LockScanRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

LockScanRequest* LockScanRequest::New(::google::protobuf::Arena* arena) const {
  LockScanRequest* n = new LockScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool LockScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockScanRequest)
  return false;
#undef DO_
}

void LockScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->limit(), output);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockScanRequest)
}

::google::protobuf::uint8* LockScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->limit(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockScanRequest)
  return target;
}

size_t LockScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockScanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // bytes limit = 2;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->limit());
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockScanRequest)
    MergeFrom(*source);
  }
}

void LockScanRequest::MergeFrom(const LockScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void LockScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockScanRequest::CopyFrom(const LockScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockScanRequest::IsInitialized() const {
  return true;
}

void LockScanRequest::Swap(LockScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockScanRequest::InternalSwap(LockScanRequest* other) {
  using std::swap;
  start_.Swap(&other->start_);
  limit_.Swap(&other->limit_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockScanRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockScanRequest

// bytes start = 1;
void LockScanRequest::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockScanRequest::start() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockScanRequest.start)
  return start_.GetNoArena();
}
void LockScanRequest::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockScanRequest.start)
}
#if LANG_CXX11
void LockScanRequest::set_start(::std::string&& value) {
  
  start_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockScanRequest.start)
}
#endif
void LockScanRequest::set_start(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockScanRequest.start)
}
void LockScanRequest::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockScanRequest.start)
}
::std::string* LockScanRequest::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockScanRequest.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockScanRequest::release_start() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockScanRequest.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockScanRequest::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockScanRequest.start)
}

// bytes limit = 2;
void LockScanRequest::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockScanRequest.limit)
  return limit_.GetNoArena();
}
void LockScanRequest::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockScanRequest.limit)
}
#if LANG_CXX11
void LockScanRequest::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockScanRequest.limit)
}
#endif
void LockScanRequest::set_limit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockScanRequest.limit)
}
void LockScanRequest::set_limit(const void* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockScanRequest.limit)
}
::std::string* LockScanRequest::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockScanRequest.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockScanRequest::release_limit() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockScanRequest.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockScanRequest::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockScanRequest.limit)
}

// uint32 count = 3;
void LockScanRequest::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 LockScanRequest::count() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockScanRequest.count)
  return count_;
}
void LockScanRequest::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockScanRequest.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockScanRequest::kHeaderFieldNumber;
const int DsLockScanRequest::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockScanRequest::DsLockScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockScanRequest)
}
DsLockScanRequest::DsLockScanRequest(const DsLockScanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_req()) {
    req_ = new ::kvrpcpb::LockScanRequest(*from.req_);
  } else {
    req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockScanRequest)
}

void DsLockScanRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_) -
      reinterpret_cast<char*>(&header_)) + sizeof(req_));
  _cached_size_ = 0;
}

DsLockScanRequest::~DsLockScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockScanRequest)
  SharedDtor();
}

void DsLockScanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete req_;
}

void DsLockScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockScanRequest::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockScanRequest& DsLockScanRequest::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockScanRequest* DsLockScanRequest::New(::google::protobuf::Arena* arena) const {
  DsLockScanRequest* n = new DsLockScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && req_ != NULL) {
    delete req_;
  }
  req_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockScanRequest req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockScanRequest)
  return false;
#undef DO_
}

void DsLockScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockScanRequest req = 2;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->req_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockScanRequest)
}

::google::protobuf::uint8* DsLockScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockScanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockScanRequest req = 2;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->req_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockScanRequest)
  return target;
}

size_t DsLockScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockScanRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockScanRequest req = 2;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockScanRequest)
    MergeFrom(*source);
  }
}

void DsLockScanRequest::MergeFrom(const DsLockScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_req()) {
    mutable_req()->::kvrpcpb::LockScanRequest::MergeFrom(from.req());
  }
}

void DsLockScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockScanRequest::CopyFrom(const DsLockScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockScanRequest::IsInitialized() const {
  return true;
}

void DsLockScanRequest::Swap(DsLockScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockScanRequest::InternalSwap(DsLockScanRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(req_, other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockScanRequest::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockScanRequest

// .kvrpcpb.RequestHeader header = 1;
bool DsLockScanRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockScanRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::RequestHeader& DsLockScanRequest::header() const {
  const ::kvrpcpb::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockScanRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::RequestHeader*>(
      &::kvrpcpb::_RequestHeader_default_instance_);
}
::kvrpcpb::RequestHeader* DsLockScanRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockScanRequest.header)
  return header_;
}
::kvrpcpb::RequestHeader* DsLockScanRequest::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockScanRequest.header)
  
  ::kvrpcpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockScanRequest::set_allocated_header(::kvrpcpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockScanRequest.header)
}

// .kvrpcpb.LockScanRequest req = 2;
bool DsLockScanRequest::has_req() const {
  return this != internal_default_instance() && req_ != NULL;
}
void DsLockScanRequest::clear_req() {
  if (GetArenaNoVirtual() == NULL && req_ != NULL) delete req_;
  req_ = NULL;
}
const ::kvrpcpb::LockScanRequest& DsLockScanRequest::req() const {
  const ::kvrpcpb::LockScanRequest* p = req_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockScanRequest.req)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockScanRequest*>(
      &::kvrpcpb::_LockScanRequest_default_instance_);
}
::kvrpcpb::LockScanRequest* DsLockScanRequest::mutable_req() {
  
  if (req_ == NULL) {
    req_ = new ::kvrpcpb::LockScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockScanRequest.req)
  return req_;
}
::kvrpcpb::LockScanRequest* DsLockScanRequest::release_req() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockScanRequest.req)
  
  ::kvrpcpb::LockScanRequest* temp = req_;
  req_ = NULL;
  return temp;
}
void DsLockScanRequest::set_allocated_req(::kvrpcpb::LockScanRequest* req) {
  delete req_;
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockScanRequest.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DsLockScanResponse::kHeaderFieldNumber;
const int DsLockScanResponse::kRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DsLockScanResponse::DsLockScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_kvrpcpb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DsLockScanResponse)
}
DsLockScanResponse::DsLockScanResponse(const DsLockScanResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::kvrpcpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_resp()) {
    resp_ = new ::kvrpcpb::LockScanResponse(*from.resp_);
  } else {
    resp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DsLockScanResponse)
}

void DsLockScanResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(resp_));
  _cached_size_ = 0;
}

DsLockScanResponse::~DsLockScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DsLockScanResponse)
  SharedDtor();
}

void DsLockScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete resp_;
}

void DsLockScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLockScanResponse::descriptor() {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DsLockScanResponse& DsLockScanResponse::default_instance() {
  protobuf_kvrpcpb_2eproto::InitDefaults();
  return *internal_default_instance();
}

DsLockScanResponse* DsLockScanResponse::New(::google::protobuf::Arena* arena) const {
  DsLockScanResponse* n = new DsLockScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DsLockScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DsLockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) {
    delete resp_;
  }
  resp_ = NULL;
  _internal_metadata_.Clear();
}

bool DsLockScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DsLockScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.LockScanResponse resp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DsLockScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DsLockScanResponse)
  return false;
#undef DO_
}

void DsLockScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DsLockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .kvrpcpb.LockScanResponse resp = 2;
  if (this->has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.DsLockScanResponse)
}

::google::protobuf::uint8* DsLockScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DsLockScanResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .kvrpcpb.LockScanResponse resp = 2;
  if (this->has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DsLockScanResponse)
  return target;
}

size_t DsLockScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DsLockScanResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .kvrpcpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .kvrpcpb.LockScanResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLockScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DsLockScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DsLockScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DsLockScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DsLockScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DsLockScanResponse)
    MergeFrom(*source);
  }
}

void DsLockScanResponse::MergeFrom(const DsLockScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DsLockScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::kvrpcpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_resp()) {
    mutable_resp()->::kvrpcpb::LockScanResponse::MergeFrom(from.resp());
  }
}

void DsLockScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DsLockScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLockScanResponse::CopyFrom(const DsLockScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DsLockScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLockScanResponse::IsInitialized() const {
  return true;
}

void DsLockScanResponse::Swap(DsLockScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DsLockScanResponse::InternalSwap(DsLockScanResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(resp_, other->resp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DsLockScanResponse::GetMetadata() const {
  protobuf_kvrpcpb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_kvrpcpb_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DsLockScanResponse

// .kvrpcpb.ResponseHeader header = 1;
bool DsLockScanResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DsLockScanResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::kvrpcpb::ResponseHeader& DsLockScanResponse::header() const {
  const ::kvrpcpb::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockScanResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::ResponseHeader*>(
      &::kvrpcpb::_ResponseHeader_default_instance_);
}
::kvrpcpb::ResponseHeader* DsLockScanResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::kvrpcpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockScanResponse.header)
  return header_;
}
::kvrpcpb::ResponseHeader* DsLockScanResponse::release_header() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockScanResponse.header)
  
  ::kvrpcpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void DsLockScanResponse::set_allocated_header(::kvrpcpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockScanResponse.header)
}

// .kvrpcpb.LockScanResponse resp = 2;
bool DsLockScanResponse::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
void DsLockScanResponse::clear_resp() {
  if (GetArenaNoVirtual() == NULL && resp_ != NULL) delete resp_;
  resp_ = NULL;
}
const ::kvrpcpb::LockScanResponse& DsLockScanResponse::resp() const {
  const ::kvrpcpb::LockScanResponse* p = resp_;
  // @@protoc_insertion_point(field_get:kvrpcpb.DsLockScanResponse.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::kvrpcpb::LockScanResponse*>(
      &::kvrpcpb::_LockScanResponse_default_instance_);
}
::kvrpcpb::LockScanResponse* DsLockScanResponse::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::kvrpcpb::LockScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DsLockScanResponse.resp)
  return resp_;
}
::kvrpcpb::LockScanResponse* DsLockScanResponse::release_resp() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DsLockScanResponse.resp)
  
  ::kvrpcpb::LockScanResponse* temp = resp_;
  resp_ = NULL;
  return temp;
}
void DsLockScanResponse::set_allocated_resp(::kvrpcpb::LockScanResponse* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DsLockScanResponse.resp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrpcpb

// @@protoc_insertion_point(global_scope)
